/*! For license information please see bundle.js.LICENSE.txt */
!function(){var e={2583:function(e,t,n){"use strict";n(6210),n(2526),n(5003),n(489),n(2222);var r=n(3827),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?i:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=s(n);f&&(i=i.concat(f(n)));for(var u=l(t),v=l(n),y=0;y<i.length;++y){var m=i[y];if(!(a[m]||r&&r[m]||v&&v[m]||u&&u[m])){var g=d(n,m);try{c(t,m,g)}catch(e){}}}}return t}},3542:function(e,t,n){"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}n(2526),n(1817),n(1539),n(2165),n(6992),n(8783),n(3948),Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.async_mode"):60111,p=o?Symbol.for("react.concurrent_mode"):60111,h=o?Symbol.for("react.forward_ref"):60112,v=o?Symbol.for("react.suspense"):60113,y=o?Symbol.for("react.suspense_list"):60120,m=o?Symbol.for("react.memo"):60115,g=o?Symbol.for("react.lazy"):60116,b=o?Symbol.for("react.fundamental"):60117,w=o?Symbol.for("react.responder"):60118,S=o?Symbol.for("react.scope"):60119;function E(e){if("object"===r(e)&&null!==e){var t=e.$$typeof;switch(t){case a:switch(e=e.type){case d:case p:case u:case c:case l:case v:return e;default:switch(e=e&&e.$$typeof){case f:case h:case g:case m:case s:return e;default:return t}}case i:return t}}}function _(e){return E(e)===p}t.typeOf=E,t.AsyncMode=d,t.ConcurrentMode=p,t.ContextConsumer=f,t.ContextProvider=s,t.Element=a,t.ForwardRef=h,t.Fragment=u,t.Lazy=g,t.Memo=m,t.Portal=i,t.Profiler=c,t.StrictMode=l,t.Suspense=v,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===u||e===p||e===c||e===l||e===v||e===y||"object"===r(e)&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===s||e.$$typeof===f||e.$$typeof===h||e.$$typeof===b||e.$$typeof===w||e.$$typeof===S)},t.isAsyncMode=function(e){return _(e)||E(e)===d},t.isConcurrentMode=_,t.isContextConsumer=function(e){return E(e)===f},t.isContextProvider=function(e){return E(e)===s},t.isElement=function(e){return"object"===r(e)&&null!==e&&e.$$typeof===a},t.isForwardRef=function(e){return E(e)===h},t.isFragment=function(e){return E(e)===u},t.isLazy=function(e){return E(e)===g},t.isMemo=function(e){return E(e)===m},t.isPortal=function(e){return E(e)===i},t.isProfiler=function(e){return E(e)===c},t.isStrictMode=function(e){return E(e)===l},t.isSuspense=function(e){return E(e)===v}},3827:function(e,t,n){"use strict";e.exports=n(3542)},632:function(e,t,n){"use strict";n(2526),n(9601),n(6210),n(1249),n(9600),n(4916),n(3123),n(7941);var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=i(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))o.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)a.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},1036:function(e,t,n){"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}n(6992),n(1539),n(189),n(8783),n(8921),n(6248),n(3599),n(1477),n(4362),n(5389),n(401),n(5164),n(1238),n(4837),n(7485),n(465),n(6651),n(1437),n(5285),n(9865),n(3948),n(7042),n(4916),n(3123),n(5306),n(2526),n(1817),n(2165),n(4723),n(3210),n(2419),n(8309),n(5003),n(4747),n(9714),n(7941),n(2772),n(2087),n(1532),n(72),n(9137),n(1957),n(6306),n(103),n(4592),n(8276),n(5082),n(2813),n(8222),n(8563),n(336),n(7512),n(2388),n(3304),n(2222),n(9600),n(4129),n(8206),n(8478),n(3561),n(2049);var o=n(7220),a=n(632),i=n(1419);function u(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!o)throw Error(u(227));var l=new Set,c={};function s(e,t){f(e,t),f(e+"Capture",t)}function f(e,t){for(c[e]=t,e=0;e<t.length;e++)l.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h=Object.prototype.hasOwnProperty,v={},y={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function w(e){return e[1].toUpperCase()}function S(e,t,n,o){var a=g.hasOwnProperty(t)?g[t]:null;(null!==a?0===a.type:!o&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,o){if(null==t||function(e,t,n,o){if(null!==n&&0===n.type)return!1;switch(r(t)){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,o))return!0;if(o)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,o)&&(n=null),o||null===a?function(e){return!!h.call(y,e)||!h.call(v,e)&&(p.test(e)?y[e]=!0:(v[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,o=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,o?e.setAttributeNS(o,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,w);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,w);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,w);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var E=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,_=60103,k=60106,x=60107,T=60108,R=60114,A=60109,O=60110,C=60112,N=60113,L=60120,P=60115,j=60116,I=60121,M=60128,U=60129,F=60130,z=60131;if("function"==typeof Symbol&&Symbol.for){var D=Symbol.for;_=D("react.element"),k=D("react.portal"),x=D("react.fragment"),T=D("react.strict_mode"),R=D("react.profiler"),A=D("react.provider"),O=D("react.context"),C=D("react.forward_ref"),N=D("react.suspense"),L=D("react.suspense_list"),P=D("react.memo"),j=D("react.lazy"),I=D("react.block"),D("react.scope"),M=D("react.opaque.id"),U=D("react.debug_trace_mode"),F=D("react.offscreen"),z=D("react.legacy_hidden")}var V,B="function"==typeof Symbol&&Symbol.iterator;function $(e){return null===e||"object"!==r(e)?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function W(e){if(void 0===V)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);V=t&&t[1]||""}return"\n"+V+e}var H=!1;function q(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"===("undefined"==typeof Reflect?"undefined":r(Reflect))&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var o=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){o=e}e.call(t.prototype)}else{try{throw Error()}catch(e){o=e}e()}}catch(e){if(e&&o&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),i=o.stack.split("\n"),u=a.length-1,l=i.length-1;1<=u&&0<=l&&a[u]!==i[l];)l--;for(;1<=u&&0<=l;u--,l--)if(a[u]!==i[l]){if(1!==u||1!==l)do{if(u--,0>--l||a[u]!==i[l])return"\n"+a[u].replace(" at new "," at ")}while(1<=u&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?W(e):""}function G(e){switch(e.tag){case 5:return W(e.type);case 16:return W("Lazy");case 13:return W("Suspense");case 19:return W("SuspenseList");case 0:case 2:case 15:return q(e.type,!1);case 11:return q(e.type.render,!1);case 22:return q(e.type._render,!1);case 1:return q(e.type,!0);default:return""}}function K(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case k:return"Portal";case R:return"Profiler";case T:return"StrictMode";case N:return"Suspense";case L:return"SuspenseList"}if("object"===r(e))switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case A:return(e._context.displayName||"Context")+".Provider";case C:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case P:return K(e.type);case I:return K(e._render);case j:t=e._payload,e=e._init;try{return K(e(t))}catch(e){}}return null}function Q(e){switch(r(e)){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Y(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function X(e){e._valueTracker||(e._valueTracker=function(e){var t=Y(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function J(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Y(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function ee(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function te(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function ne(e,t){null!=(t=t.checked)&&S(e,"checked",t,!1)}function re(e,t){ne(e,t);var n=Q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&ae(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function oe(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ae(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ue(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Q(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(u(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ce(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(u(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(u(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Q(n)}}function se(e,t){var n=Q(t.value),r=Q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function fe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ve,ye,me=(ye=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ve=ve||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ve.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ye(e,t)}))}:ye);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},we=["Webkit","ms","Moz","O"];function Se(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=Se(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(be).forEach((function(e){we.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var _e=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(_e[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(u(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(u(60));if("object"!==r(t.dangerouslySetInnerHTML)||!("__html"in t.dangerouslySetInnerHTML))throw Error(u(61))}if(null!=t.style&&"object"!==r(t.style))throw Error(u(62))}}function xe(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Te(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Re=null,Ae=null,Oe=null;function Ce(e){if(e=ro(e)){if("function"!=typeof Re)throw Error(u(280));var t=e.stateNode;t&&(t=ao(t),Re(e.stateNode,e.type,t))}}function Ne(e){Ae?Oe?Oe.push(e):Oe=[e]:Ae=e}function Le(){if(Ae){var e=Ae,t=Oe;if(Oe=Ae=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function Pe(e,t){return e(t)}function je(e,t,n,r,o){return e(t,n,r,o)}function Ie(){}var Me=Pe,Ue=!1,Fe=!1;function ze(){null===Ae&&null===Oe||(Ie(),Le())}function De(e,t){var n=e.stateNode;if(null===n)return null;var o=ao(n);if(null===o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(u(231,t,r(n)));return n}var Ve=!1;if(d)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Ve=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ye){Ve=!1}function $e(e,t,n,r,o,a,i,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var We=!1,He=null,qe=!1,Ge=null,Ke={onError:function(e){We=!0,He=e}};function Qe(e,t,n,r,o,a,i,u,l){We=!1,He=null,$e.apply(Ke,arguments)}function Ye(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Je(e){if(Ye(e)!==e)throw Error(u(188))}function Ze(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ye(e)))throw Error(u(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Je(o),e;if(a===r)return Je(o),t;a=a.sibling}throw Error(u(188))}if(n.return!==r.return)n=o,r=a;else{for(var i=!1,l=o.child;l;){if(l===n){i=!0,n=o,r=a;break}if(l===r){i=!0,r=o,n=a;break}l=l.sibling}if(!i){for(l=a.child;l;){if(l===n){i=!0,n=a,r=o;break}if(l===r){i=!0,r=a,n=o;break}l=l.sibling}if(!i)throw Error(u(189))}}if(n.alternate!==r)throw Error(u(190))}if(3!==n.tag)throw Error(u(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function et(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var tt,nt,rt,ot,at=!1,it=[],ut=null,lt=null,ct=null,st=new Map,ft=new Map,dt=[],pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function vt(e,t){switch(e){case"focusin":case"focusout":ut=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ct=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ft.delete(t.pointerId)}}function yt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=ht(t,n,r,o,a),null!==t&&null!==(t=ro(t))&&nt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function mt(e){var t=no(e.target);if(null!==t){var n=Ye(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Xe(n)))return e.blockedOn=t,void ot(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){rt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ro(n))&&nt(t),e.blockedOn=n,!1;t.shift()}return!0}function bt(e,t,n){gt(e)&&n.delete(t)}function wt(){for(at=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=ro(e.blockedOn))&&tt(e);break}for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==ut&&gt(ut)&&(ut=null),null!==lt&&gt(lt)&&(lt=null),null!==ct&&gt(ct)&&(ct=null),st.forEach(bt),ft.forEach(bt)}function St(e,t){e.blockedOn===t&&(e.blockedOn=null,at||(at=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,wt)))}function Et(e){function t(t){return St(t,e)}if(0<it.length){St(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ut&&St(ut,e),null!==lt&&St(lt,e),null!==ct&&St(ct,e),st.forEach(t),ft.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)mt(n),null===n.blockedOn&&dt.shift()}function _t(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:_t("Animation","AnimationEnd"),animationiteration:_t("Animation","AnimationIteration"),animationstart:_t("Animation","AnimationStart"),transitionend:_t("Transition","TransitionEnd")},xt={},Tt={};function Rt(e){if(xt[e])return xt[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Tt)return xt[e]=n[t];return e}d&&(Tt=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var At=Rt("animationend"),Ot=Rt("animationiteration"),Ct=Rt("animationstart"),Nt=Rt("transitionend"),Lt=new Map,Pt=new Map,jt=["abort","abort",At,"animationEnd",Ot,"animationIteration",Ct,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Nt,"transitionEnd","waiting","waiting"];function It(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Pt.set(r,t),Lt.set(r,o),s(o,[r])}}(0,i.unstable_now)();var Mt=8;function Ut(e){if(0!=(1&e))return Mt=15,1;if(0!=(2&e))return Mt=14,2;if(0!=(4&e))return Mt=13,4;var t=24&e;return 0!==t?(Mt=12,t):0!=(32&e)?(Mt=11,32):0!=(t=192&e)?(Mt=10,t):0!=(256&e)?(Mt=9,256):0!=(t=3584&e)?(Mt=8,t):0!=(4096&e)?(Mt=7,4096):0!=(t=4186112&e)?(Mt=6,t):0!=(t=62914560&e)?(Mt=5,t):67108864&e?(Mt=4,67108864):0!=(134217728&e)?(Mt=3,134217728):0!=(t=805306368&e)?(Mt=2,t):0!=(1073741824&e)?(Mt=1,1073741824):(Mt=8,e)}function Ft(e,t){var n=e.pendingLanes;if(0===n)return Mt=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,u=e.pingedLanes;if(0!==a)r=a,o=Mt=15;else if(0!=(a=134217727&n)){var l=a&~i;0!==l?(r=Ut(l),o=Mt):0!=(u&=a)&&(r=Ut(u),o=Mt)}else 0!=(a=n&~i)?(r=Ut(a),o=Mt):0!==u&&(r=Ut(u),o=Mt);if(0===r)return 0;if(r=n&((0>(r=31-Wt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Ut(t),o<=Mt)return t;Mt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Wt(t)),r|=e[n],t&=~o;return r}function zt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Dt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Vt(24&~t))?Dt(10,t):e;case 10:return 0===(e=Vt(192&~t))?Dt(8,t):e;case 8:return 0===(e=Vt(3584&~t))&&0===(e=Vt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Vt(805306368&~t))&&(t=268435456),t}throw Error(u(358,e))}function Vt(e){return e&-e}function Bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function $t(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Wt(t)]=n}var Wt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Ht(e)/qt|0)|0},Ht=Math.log,qt=Math.LN2,Gt=i.unstable_UserBlockingPriority,Kt=i.unstable_runWithPriority,Qt=!0;function Yt(e,t,n,r){Ue||Ie();var o=Jt,a=Ue;Ue=!0;try{je(o,e,t,n,r)}finally{(Ue=a)||ze()}}function Xt(e,t,n,r){Kt(Gt,Jt.bind(null,e,t,n,r))}function Jt(e,t,n,r){var o;if(Qt)if((o=0==(4&t))&&0<it.length&&-1<pt.indexOf(e))e=ht(null,e,t,n,r),it.push(e);else{var a=Zt(e,t,n,r);if(null===a)o&&vt(e,r);else{if(o){if(-1<pt.indexOf(e))return e=ht(a,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return ut=yt(ut,e,t,n,r,o),!0;case"dragenter":return lt=yt(lt,e,t,n,r,o),!0;case"mouseover":return ct=yt(ct,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,yt(st.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ft.set(a,yt(ft.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;vt(e,r)}Ir(e,t,r,null,n)}}}function Zt(e,t,n,r){var o=Te(r);if(null!==(o=no(o))){var a=Ye(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Xe(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Ir(e,t,r,o,n),null}var en=null,tn=null,nn=null;function rn(){if(nn)return nn;var e,t,n=tn,r=n.length,o="value"in en?en.value:en.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return nn=o.slice(e,1<t?1-t:void 0)}function on(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function an(){return!0}function un(){return!1}function ln(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?an:un,this.isPropagationStopped=un,this}return a(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=an)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=an)},persist:function(){},isPersistent:an}),t}var cn,sn,fn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},pn=ln(dn),hn=a({},dn,{view:0,detail:0}),vn=ln(hn),yn=a({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:An,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==fn&&(fn&&"mousemove"===e.type?(cn=e.screenX-fn.screenX,sn=e.screenY-fn.screenY):sn=cn=0,fn=e),cn)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),mn=ln(yn),gn=ln(a({},yn,{dataTransfer:0})),bn=ln(a({},hn,{relatedTarget:0})),wn=ln(a({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),Sn=a({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),En=ln(Sn),_n=ln(a({},dn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Tn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Rn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tn[e])&&!!t[e]}function An(){return Rn}var On=a({},hn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=on(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:An,charCode:function(e){return"keypress"===e.type?on(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?on(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Cn=ln(On),Nn=ln(a({},yn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Ln=ln(a({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:An})),Pn=ln(a({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),jn=a({},yn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),In=ln(jn),Mn=[9,13,27,32],Un=d&&"CompositionEvent"in window,Fn=null;d&&"documentMode"in document&&(Fn=document.documentMode);var zn=d&&"TextEvent"in window&&!Fn,Dn=d&&(!Un||Fn&&8<Fn&&11>=Fn),Vn=String.fromCharCode(32),Bn=!1;function $n(e,t){switch(e){case"keyup":return-1!==Mn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Wn(e){return"object"===r(e=e.detail)&&"data"in e?e.data:null}var Hn=!1,qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Gn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!qn[e.type]:"textarea"===t}function Kn(e,t,n,r){Ne(r),0<(t=Ur(t,"onChange")).length&&(n=new pn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Qn=null,Yn=null;function Xn(e){Or(e,0)}function Jn(e){if(J(oo(e)))return e}function Zn(e,t){if("change"===e)return t}var er=!1;if(d){var tr;if(d){var nr="oninput"in document;if(!nr){var rr=document.createElement("div");rr.setAttribute("oninput","return;"),nr="function"==typeof rr.oninput}tr=nr}else tr=!1;er=tr&&(!document.documentMode||9<document.documentMode)}function or(){Qn&&(Qn.detachEvent("onpropertychange",ar),Yn=Qn=null)}function ar(e){if("value"===e.propertyName&&Jn(Yn)){var t=[];if(Kn(t,Yn,e,Te(e)),e=Xn,Ue)e(t);else{Ue=!0;try{Pe(e,t)}finally{Ue=!1,ze()}}}}function ir(e,t,n){"focusin"===e?(or(),Yn=n,(Qn=t).attachEvent("onpropertychange",ar)):"focusout"===e&&or()}function ur(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Jn(Yn)}function lr(e,t){if("click"===e)return Jn(t)}function cr(e,t){if("input"===e||"change"===e)return Jn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},fr=Object.prototype.hasOwnProperty;function dr(e,t){if(sr(e,t))return!0;if("object"!==r(e)||null===e||"object"!==r(t)||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(o=0;o<n.length;o++)if(!fr.call(t,n[o])||!sr(e[n[o]],t[n[o]]))return!1;return!0}function pr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function hr(e,t){var n,r=pr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=pr(r)}}function vr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?vr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function yr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function mr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gr=d&&"documentMode"in document&&11>=document.documentMode,br=null,wr=null,Sr=null,Er=!1;function _r(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Er||null==br||br!==Z(r)||(r="selectionStart"in(r=br)&&mr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},Sr&&dr(Sr,r)||(Sr=r,0<(r=Ur(wr,"onSelect")).length&&(t=new pn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=br)))}It("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),It("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),It(jt,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),xr=0;xr<kr.length;xr++)Pt.set(kr[xr],0);f("onMouseEnter",["mouseout","mouseover"]),f("onMouseLeave",["mouseout","mouseover"]),f("onPointerEnter",["pointerout","pointerover"]),f("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Tr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Rr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Tr));function Ar(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,i,l,c){if(Qe.apply(this,arguments),We){if(!We)throw Error(u(198));var s=He;We=!1,He=null,qe||(qe=!0,Ge=s)}}(r,t,void 0,e),e.currentTarget=null}function Or(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var u=r[i],l=u.instance,c=u.currentTarget;if(u=u.listener,l!==a&&o.isPropagationStopped())break e;Ar(o,u,c),a=l}else for(i=0;i<r.length;i++){if(l=(u=r[i]).instance,c=u.currentTarget,u=u.listener,l!==a&&o.isPropagationStopped())break e;Ar(o,u,c),a=l}}}if(qe)throw e=Ge,qe=!1,Ge=null,e}function Cr(e,t){var n=io(t),r=e+"__bubble";n.has(r)||(jr(t,e,2,!1),n.add(r))}var Nr="_reactListening"+Math.random().toString(36).slice(2);function Lr(e){e[Nr]||(e[Nr]=!0,l.forEach((function(t){Rr.has(t)||Pr(t,!1,e,null),Pr(t,!0,e,null)})))}function Pr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&Rr.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=io(a),u=e+"__"+(t?"capture":"bubble");i.has(u)||(t&&(o|=4),jr(a,e,o,t),i.add(u))}function jr(e,t,n,r){var o=Pt.get(t);switch(void 0===o?2:o){case 0:o=Yt;break;case 1:o=Xt;break;default:o=Jt}n=o.bind(null,t,n,e),o=void 0,!Ve||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ir(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;i=i.return}for(;null!==u;){if(null===(i=no(u)))return;if(5===(l=i.tag)||6===l){r=a=i;continue e}u=u.parentNode}}r=r.return}!function(e,t,n){if(Fe)return e();Fe=!0;try{Me(e,t,n)}finally{Fe=!1,ze()}}((function(){var r=a,o=Te(n),i=[];e:{var u=Lt.get(e);if(void 0!==u){var l=pn,c=e;switch(e){case"keypress":if(0===on(n))break e;case"keydown":case"keyup":l=Cn;break;case"focusin":c="focus",l=bn;break;case"focusout":c="blur",l=bn;break;case"beforeblur":case"afterblur":l=bn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Ln;break;case At:case Ot:case Ct:l=wn;break;case Nt:l=Pn;break;case"scroll":l=vn;break;case"wheel":l=In;break;case"copy":case"cut":case"paste":l=En;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Nn}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==u?u+"Capture":null:u;s=[];for(var p,h=r;null!==h;){var v=(p=h).stateNode;if(5===p.tag&&null!==v&&(p=v,null!==d&&null!=(v=De(h,d))&&s.push(Mr(h,v,p))),f)break;h=h.return}0<s.length&&(u=new l(u,c,null,n,o),i.push({event:u,listeners:s}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!no(c)&&!c[eo])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?no(c):null)&&(c!==(f=Ye(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(s=mn,v="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Nn,v="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:oo(l),p=null==c?u:oo(c),(u=new s(v,h+"leave",l,n,o)).target=f,u.relatedTarget=p,v=null,no(o)===r&&((s=new s(d,h+"enter",c,n,o)).target=p,s.relatedTarget=f,v=s),f=v,l&&c)e:{for(d=c,h=0,p=s=l;p;p=Fr(p))h++;for(p=0,v=d;v;v=Fr(v))p++;for(;0<h-p;)s=Fr(s),h--;for(;0<p-h;)d=Fr(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Fr(s),d=Fr(d)}s=null}else s=null;null!==l&&zr(i,u,l,s,!1),null!==c&&null!==f&&zr(i,f,c,s,!0)}if("select"===(l=(u=r?oo(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var y=Zn;else if(Gn(u))if(er)y=cr;else{y=ur;var m=ir}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(y=lr);switch(y&&(y=y(e,r))?Kn(i,y,n,o):(m&&m(e,u,r),"focusout"===e&&(m=u._wrapperState)&&m.controlled&&"number"===u.type&&ae(u,"number",u.value)),m=r?oo(r):window,e){case"focusin":(Gn(m)||"true"===m.contentEditable)&&(br=m,wr=r,Sr=null);break;case"focusout":Sr=wr=br=null;break;case"mousedown":Er=!0;break;case"contextmenu":case"mouseup":case"dragend":Er=!1,_r(i,n,o);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":_r(i,n,o)}var g;if(Un)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Hn?$n(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(Hn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Hn&&(g=rn()):(tn="value"in(en=o)?en.value:en.textContent,Hn=!0)),0<(m=Ur(r,b)).length&&(b=new _n(b,e,null,n,o),i.push({event:b,listeners:m}),(g||null!==(g=Wn(n)))&&(b.data=g))),(g=zn?function(e,t){switch(e){case"compositionend":return Wn(t);case"keypress":return 32!==t.which?null:(Bn=!0,Vn);case"textInput":return(e=t.data)===Vn&&Bn?null:e;default:return null}}(e,n):function(e,t){if(Hn)return"compositionend"===e||!Un&&$n(e,t)?(e=rn(),nn=tn=en=null,Hn=!1,e):null;switch(e){default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Ur(r,"onBeforeInput")).length&&(o=new _n("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=g)}Or(i,t)}))}function Mr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ur(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=De(e,n))&&r.unshift(Mr(e,a,o)),null!=(a=De(e,t))&&r.push(Mr(e,a,o))),e=e.return}return r}function Fr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function zr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var u=n,l=u.alternate,c=u.stateNode;if(null!==l&&l===r)break;5===u.tag&&null!==c&&(u=c,o?null!=(l=De(n,a))&&i.unshift(Mr(n,l,u)):o||null!=(l=De(n,a))&&i.push(Mr(n,l,u))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Dr(){}var Vr=null,Br=null;function $r(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Wr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"===r(t.dangerouslySetInnerHTML)&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Hr="function"==typeof setTimeout?setTimeout:void 0,qr="function"==typeof clearTimeout?clearTimeout:void 0;function Gr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Kr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Qr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Yr=0,Xr=Math.random().toString(36).slice(2),Jr="__reactFiber$"+Xr,Zr="__reactProps$"+Xr,eo="__reactContainer$"+Xr,to="__reactEvents$"+Xr;function no(e){var t=e[Jr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[eo]||n[Jr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Qr(e);null!==e;){if(n=e[Jr])return n;e=Qr(e)}return t}n=(e=n).parentNode}return null}function ro(e){return!(e=e[Jr]||e[eo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function oo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(u(33))}function ao(e){return e[Zr]||null}function io(e){var t=e[to];return void 0===t&&(t=e[to]=new Set),t}var uo=[],lo=-1;function co(e){return{current:e}}function so(e){0>lo||(e.current=uo[lo],uo[lo]=null,lo--)}function fo(e,t){lo++,uo[lo]=e.current,e.current=t}var po={},ho=co(po),vo=co(!1),yo=po;function mo(e,t){var n=e.type.contextTypes;if(!n)return po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function go(e){return null!=e.childContextTypes}function bo(){so(vo),so(ho)}function wo(e,t,n){if(ho.current!==po)throw Error(u(168));fo(ho,t),fo(vo,n)}function So(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(u(108,K(t)||"Unknown",o));return a({},n,r)}function Eo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||po,yo=ho.current,fo(ho,e),fo(vo,vo.current),!0}function _o(e,t,n){var r=e.stateNode;if(!r)throw Error(u(169));n?(e=So(e,t,yo),r.__reactInternalMemoizedMergedChildContext=e,so(vo),so(ho),fo(ho,e)):so(vo),fo(vo,n)}var ko=null,xo=null,To=i.unstable_runWithPriority,Ro=i.unstable_scheduleCallback,Ao=i.unstable_cancelCallback,Oo=i.unstable_shouldYield,Co=i.unstable_requestPaint,No=i.unstable_now,Lo=i.unstable_getCurrentPriorityLevel,Po=i.unstable_ImmediatePriority,jo=i.unstable_UserBlockingPriority,Io=i.unstable_NormalPriority,Mo=i.unstable_LowPriority,Uo=i.unstable_IdlePriority,Fo={},zo=void 0!==Co?Co:function(){},Do=null,Vo=null,Bo=!1,$o=No(),Wo=1e4>$o?No:function(){return No()-$o};function Ho(){switch(Lo()){case Po:return 99;case jo:return 98;case Io:return 97;case Mo:return 96;case Uo:return 95;default:throw Error(u(332))}}function qo(e){switch(e){case 99:return Po;case 98:return jo;case 97:return Io;case 96:return Mo;case 95:return Uo;default:throw Error(u(332))}}function Go(e,t){return e=qo(e),To(e,t)}function Ko(e,t,n){return e=qo(e),Ro(e,t,n)}function Qo(){if(null!==Vo){var e=Vo;Vo=null,Ao(e)}Yo()}function Yo(){if(!Bo&&null!==Do){Bo=!0;var e=0;try{var t=Do;Go(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Do=null}catch(t){throw null!==Do&&(Do=Do.slice(e+1)),Ro(Po,Qo),t}finally{Bo=!1}}}var Xo=E.ReactCurrentBatchConfig;function Jo(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Zo=co(null),ea=null,ta=null,na=null;function ra(){na=ta=ea=null}function oa(e){var t=Zo.current;so(Zo),e.type._context._currentValue=t}function aa(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ia(e,t){ea=e,na=ta=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ui=!0),e.firstContext=null)}function ua(e,t){if(na!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(na=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ta){if(null===ea)throw Error(u(308));ta=t,ea.dependencies={lanes:0,firstContext:t,responders:null}}else ta=ta.next=t;return e._currentValue}var la=!1;function ca(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function sa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function fa(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function da(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function pa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ha(e,t,n,r){var o=e.updateQueue;la=!1;var i=o.firstBaseUpdate,u=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var c=l,s=c.next;c.next=null,null===u?i=s:u.next=s,u=c;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==u&&(null===d?f.firstBaseUpdate=s:d.next=s,f.lastBaseUpdate=c)}}if(null!==i){for(d=o.baseState,u=0,f=s=c=null;;){l=i.lane;var p=i.eventTime;if((r&l)===l){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,v=i;switch(l=t,p=n,v.tag){case 1:if("function"==typeof(h=v.payload)){d=h.call(p,d,l);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=v.payload)?h.call(p,d,l):h))break e;d=a({},d,l);break e;case 2:la=!0}}null!==i.callback&&(e.flags|=32,null===(l=o.effects)?o.effects=[i]:l.push(i))}else p={eventTime:p,lane:l,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(s=f=p,c=d):f=f.next=p,u|=l;if(null===(i=i.next)){if(null===(l=o.shared.pending))break;i=l.next,l.next=null,o.lastBaseUpdate=l,o.shared.pending=null}}null===f&&(c=d),o.baseState=c,o.firstBaseUpdate=s,o.lastBaseUpdate=f,zu|=u,e.lanes=u,e.memoizedState=d}}function va(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(u(191,o));o.call(r)}}}var ya=(new o.Component).refs;function ma(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ga={isMounted:function(e){return!!(e=e._reactInternals)&&Ye(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=sl(),o=fl(e),a=fa(r,o);a.payload=t,null!=n&&(a.callback=n),da(e,a),dl(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=sl(),o=fl(e),a=fa(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),da(e,a),dl(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=sl(),r=fl(e),o=fa(n,r);o.tag=2,null!=t&&(o.callback=t),da(e,o),dl(e,r,n)}};function ba(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&dr(n,r)&&dr(o,a))}function wa(e,t,n){var o=!1,a=po,i=t.contextType;return"object"===r(i)&&null!==i?i=ua(i):(a=go(t)?yo:ho.current,i=(o=null!=(o=t.contextTypes))?mo(e,a):po),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ga,e.stateNode=t,t._reactInternals=e,o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=i),t}function Sa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ga.enqueueReplaceState(t,t.state,null)}function Ea(e,t,n,o){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=ya,ca(e);var i=t.contextType;"object"===r(i)&&null!==i?a.context=ua(i):(i=go(t)?yo:ho.current,a.context=mo(e,i)),ha(e,n,a,o),a.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(ma(e,t,i,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&ga.enqueueReplaceState(a,a.state,null),ha(e,n,a,o),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var _a=Array.isArray;function ka(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!==r(e)){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(u(309));var o=n.stateNode}if(!o)throw Error(u(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=o.refs;t===ya&&(t=o.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(u(284));if(!n._owner)throw Error(u(290,e))}return e}function xa(e,t){if("textarea"!==e.type)throw Error(u(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ta(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Wl(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function c(e,t,n,r){return null===t||6!==t.tag?((t=Kl(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=ka(e,t,n),r.return=e,r):((r=Hl(n.type,n.key,n.props,null,e.mode,r)).ref=ka(e,t,n),r.return=e,r)}function f(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ql(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=ql(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Kl(""+t,e.mode,n)).return=e,t;if("object"===r(t)&&null!==t){switch(t.$$typeof){case _:return(n=Hl(t.type,t.key,t.props,null,e.mode,n)).ref=ka(e,null,t),n.return=e,n;case k:return(t=Ql(t,e.mode,n)).return=e,t}if(_a(t)||$(t))return(t=ql(t,e.mode,n,null)).return=e,t;xa(e,t)}return null}function h(e,t,n,o){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:c(e,t,""+n,o);if("object"===r(n)&&null!==n){switch(n.$$typeof){case _:return n.key===a?n.type===x?d(e,t,n.props.children,o,a):s(e,t,n,o):null;case k:return n.key===a?f(e,t,n,o):null}if(_a(n)||$(n))return null!==a?null:d(e,t,n,o,null);xa(e,n)}return null}function v(e,t,n,o,a){if("string"==typeof o||"number"==typeof o)return c(t,e=e.get(n)||null,""+o,a);if("object"===r(o)&&null!==o){switch(o.$$typeof){case _:return e=e.get(null===o.key?n:o.key)||null,o.type===x?d(t,e,o.props.children,a,o.key):s(t,e,o,a);case k:return f(t,e=e.get(null===o.key?n:o.key)||null,o,a)}if(_a(o)||$(o))return d(t,e=e.get(n)||null,o,a,null);xa(t,o)}return null}function y(r,a,u,l){for(var c=null,s=null,f=a,d=a=0,y=null;null!==f&&d<u.length;d++){f.index>d?(y=f,f=null):y=f.sibling;var m=h(r,f,u[d],l);if(null===m){null===f&&(f=y);break}e&&f&&null===m.alternate&&t(r,f),a=i(m,a,d),null===s?c=m:s.sibling=m,s=m,f=y}if(d===u.length)return n(r,f),c;if(null===f){for(;d<u.length;d++)null!==(f=p(r,u[d],l))&&(a=i(f,a,d),null===s?c=f:s.sibling=f,s=f);return c}for(f=o(r,f);d<u.length;d++)null!==(y=v(f,r,d,u[d],l))&&(e&&null!==y.alternate&&f.delete(null===y.key?d:y.key),a=i(y,a,d),null===s?c=y:s.sibling=y,s=y);return e&&f.forEach((function(e){return t(r,e)})),c}function m(r,a,l,c){var s=$(l);if("function"!=typeof s)throw Error(u(150));if(null==(l=s.call(l)))throw Error(u(151));for(var f=s=null,d=a,y=a=0,m=null,g=l.next();null!==d&&!g.done;y++,g=l.next()){d.index>y?(m=d,d=null):m=d.sibling;var b=h(r,d,g.value,c);if(null===b){null===d&&(d=m);break}e&&d&&null===b.alternate&&t(r,d),a=i(b,a,y),null===f?s=b:f.sibling=b,f=b,d=m}if(g.done)return n(r,d),s;if(null===d){for(;!g.done;y++,g=l.next())null!==(g=p(r,g.value,c))&&(a=i(g,a,y),null===f?s=g:f.sibling=g,f=g);return s}for(d=o(r,d);!g.done;y++,g=l.next())null!==(g=v(d,r,y,g.value,c))&&(e&&null!==g.alternate&&d.delete(null===g.key?y:g.key),a=i(g,a,y),null===f?s=g:f.sibling=g,f=g);return e&&d.forEach((function(e){return t(r,e)})),s}return function(e,o,i,c){var s="object"===r(i)&&null!==i&&i.type===x&&null===i.key;s&&(i=i.props.children);var f="object"===r(i)&&null!==i;if(f)switch(i.$$typeof){case _:e:{for(f=i.key,s=o;null!==s;){if(s.key===f){if(7===s.tag){if(i.type===x){n(e,s.sibling),(o=a(s,i.props.children)).return=e,e=o;break e}}else if(s.elementType===i.type){n(e,s.sibling),(o=a(s,i.props)).ref=ka(e,s,i),o.return=e,e=o;break e}n(e,s);break}t(e,s),s=s.sibling}i.type===x?((o=ql(i.props.children,e.mode,c,i.key)).return=e,e=o):((c=Hl(i.type,i.key,i.props,null,e.mode,c)).ref=ka(e,o,i),c.return=e,e=c)}return l(e);case k:e:{for(s=i.key;null!==o;){if(o.key===s){if(4===o.tag&&o.stateNode.containerInfo===i.containerInfo&&o.stateNode.implementation===i.implementation){n(e,o.sibling),(o=a(o,i.children||[])).return=e,e=o;break e}n(e,o);break}t(e,o),o=o.sibling}(o=Ql(i,e.mode,c)).return=e,e=o}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==o&&6===o.tag?(n(e,o.sibling),(o=a(o,i)).return=e,e=o):(n(e,o),(o=Kl(i,e.mode,c)).return=e,e=o),l(e);if(_a(i))return y(e,o,i,c);if($(i))return m(e,o,i,c);if(f&&xa(e,i),void 0===i&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(u(152,K(e.type)||"Component"))}return n(e,o)}}var Ra=Ta(!0),Aa=Ta(!1),Oa={},Ca=co(Oa),Na=co(Oa),La=co(Oa);function Pa(e){if(e===Oa)throw Error(u(174));return e}function ja(e,t){switch(fo(La,t),fo(Na,e),fo(Ca,Oa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}so(Ca),fo(Ca,t)}function Ia(){so(Ca),so(Na),so(La)}function Ma(e){Pa(La.current);var t=Pa(Ca.current),n=he(t,e.type);t!==n&&(fo(Na,e),fo(Ca,n))}function Ua(e){Na.current===e&&(so(Ca),so(Na))}var Fa=co(0);function za(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Da=null,Va=null,Ba=!1;function $a(e,t){var n=Bl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Wa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Ha(e){if(Ba){var t=Va;if(t){var n=t;if(!Wa(e,t)){if(!(t=Kr(n.nextSibling))||!Wa(e,t))return e.flags=-1025&e.flags|2,Ba=!1,void(Da=e);$a(Da,n)}Da=e,Va=Kr(t.firstChild)}else e.flags=-1025&e.flags|2,Ba=!1,Da=e}}function qa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Da=e}function Ga(e){if(e!==Da)return!1;if(!Ba)return qa(e),Ba=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Wr(t,e.memoizedProps))for(t=Va;t;)$a(e,t),t=Kr(t.nextSibling);if(qa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(u(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Va=Kr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Va=null}}else Va=Da?Kr(e.stateNode.nextSibling):null;return!0}function Ka(){Va=Da=null,Ba=!1}var Qa=[];function Ya(){for(var e=0;e<Qa.length;e++)Qa[e]._workInProgressVersionPrimary=null;Qa.length=0}var Xa=E.ReactCurrentDispatcher,Ja=E.ReactCurrentBatchConfig,Za=0,ei=null,ti=null,ni=null,ri=!1,oi=!1;function ai(){throw Error(u(321))}function ii(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function ui(e,t,n,r,o,a){if(Za=a,ei=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Xa.current=null===e||null===e.memoizedState?Pi:ji,e=n(r,o),oi){a=0;do{if(oi=!1,!(25>a))throw Error(u(301));a+=1,ni=ti=null,t.updateQueue=null,Xa.current=Ii,e=n(r,o)}while(oi)}if(Xa.current=Li,t=null!==ti&&null!==ti.next,Za=0,ni=ti=ei=null,ri=!1,t)throw Error(u(300));return e}function li(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ni?ei.memoizedState=ni=e:ni=ni.next=e,ni}function ci(){if(null===ti){var e=ei.alternate;e=null!==e?e.memoizedState:null}else e=ti.next;var t=null===ni?ei.memoizedState:ni.next;if(null!==t)ni=t,ti=e;else{if(null===e)throw Error(u(310));e={memoizedState:(ti=e).memoizedState,baseState:ti.baseState,baseQueue:ti.baseQueue,queue:ti.queue,next:null},null===ni?ei.memoizedState=ni=e:ni=ni.next=e}return ni}function si(e,t){return"function"==typeof t?t(e):t}function fi(e){var t=ci(),n=t.queue;if(null===n)throw Error(u(311));n.lastRenderedReducer=e;var r=ti,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var i=o.next;o.next=a.next,a.next=i}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=i=a=null,c=o;do{var s=c.lane;if((Za&s)===s)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var f={lane:s,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(i=l=f,a=r):l=l.next=f,ei.lanes|=s,zu|=s}c=c.next}while(null!==c&&c!==o);null===l?a=r:l.next=i,sr(r,t.memoizedState)||(Ui=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function di(e){var t=ci(),n=t.queue;if(null===n)throw Error(u(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var i=o=o.next;do{a=e(a,i.action),i=i.next}while(i!==o);sr(a,t.memoizedState)||(Ui=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function pi(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Za&e)===e)&&(t._workInProgressVersionPrimary=r,Qa.push(t))),e)return n(t._source);throw Qa.push(t),Error(u(350))}function hi(e,t,n,r){var o=Nu;if(null===o)throw Error(u(349));var a=t._getVersion,i=a(t._source),l=Xa.current,c=l.useState((function(){return pi(o,t,n)})),s=c[1],f=c[0];c=ni;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,v=d.source;d=d.subscribe;var y=ei;return e.memoizedState={refs:p,source:t,subscribe:r},l.useEffect((function(){p.getSnapshot=n,p.setSnapshot=s;var e=a(t._source);if(!sr(i,e)){e=n(t._source),sr(f,e)||(s(e),e=fl(y),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,u=e;0<u;){var l=31-Wt(u),c=1<<l;r[l]|=e,u&=~c}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=fl(y);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),sr(h,n)&&sr(v,t)&&sr(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:si,lastRenderedState:f}).dispatch=s=Ni.bind(null,ei,e),c.queue=e,c.baseQueue=null,f=pi(o,t,n),c.memoizedState=c.baseState=f),f}function vi(e,t,n){return hi(ci(),e,t,n)}function yi(e){var t=li();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:si,lastRenderedState:e}).dispatch=Ni.bind(null,ei,e),[t.memoizedState,e]}function mi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ei.updateQueue)?(t={lastEffect:null},ei.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function gi(e){return e={current:e},li().memoizedState=e}function bi(){return ci().memoizedState}function wi(e,t,n,r){var o=li();ei.flags|=e,o.memoizedState=mi(1|t,n,void 0,void 0===r?null:r)}function Si(e,t,n,r){var o=ci();r=void 0===r?null:r;var a=void 0;if(null!==ti){var i=ti.memoizedState;if(a=i.destroy,null!==r&&ii(r,i.deps))return void mi(t,n,a,r)}ei.flags|=e,o.memoizedState=mi(1|t,n,a,r)}function Ei(e,t){return wi(516,4,e,t)}function _i(e,t){return Si(516,4,e,t)}function ki(e,t){return Si(4,2,e,t)}function xi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ti(e,t,n){return n=null!=n?n.concat([e]):null,Si(4,2,xi.bind(null,t,e),n)}function Ri(){}function Ai(e,t){var n=ci();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ii(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Oi(e,t){var n=ci();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ii(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ci(e,t){var n=Ho();Go(98>n?98:n,(function(){e(!0)})),Go(97<n?97:n,(function(){var n=Ja.transition;Ja.transition=1;try{e(!1),t()}finally{Ja.transition=n}}))}function Ni(e,t,n){var r=sl(),o=fl(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===ei||null!==i&&i===ei)oi=ri=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var u=t.lastRenderedState,l=i(u,n);if(a.eagerReducer=i,a.eagerState=l,sr(l,u))return}catch(e){}dl(e,o,r)}}var Li={readContext:ua,useCallback:ai,useContext:ai,useEffect:ai,useImperativeHandle:ai,useLayoutEffect:ai,useMemo:ai,useReducer:ai,useRef:ai,useState:ai,useDebugValue:ai,useDeferredValue:ai,useTransition:ai,useMutableSource:ai,useOpaqueIdentifier:ai,unstable_isNewReconciler:!1},Pi={readContext:ua,useCallback:function(e,t){return li().memoizedState=[e,void 0===t?null:t],e},useContext:ua,useEffect:Ei,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,wi(4,2,xi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return wi(4,2,e,t)},useMemo:function(e,t){var n=li();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=li();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ni.bind(null,ei,e),[r.memoizedState,e]},useRef:gi,useState:yi,useDebugValue:Ri,useDeferredValue:function(e){var t=yi(e),n=t[0],r=t[1];return Ei((function(){var t=Ja.transition;Ja.transition=1;try{r(e)}finally{Ja.transition=t}}),[e]),n},useTransition:function(){var e=yi(!1),t=e[0];return gi(e=Ci.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=li();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},hi(r,e,t,n)},useOpaqueIdentifier:function(){if(Ba){var e=!1,t=function(e){return{$$typeof:M,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Yr++).toString(36))),Error(u(355))})),n=yi(t)[1];return 0==(2&ei.mode)&&(ei.flags|=516,mi(5,(function(){n("r:"+(Yr++).toString(36))}),void 0,null)),t}return yi(t="r:"+(Yr++).toString(36)),t},unstable_isNewReconciler:!1},ji={readContext:ua,useCallback:Ai,useContext:ua,useEffect:_i,useImperativeHandle:Ti,useLayoutEffect:ki,useMemo:Oi,useReducer:fi,useRef:bi,useState:function(){return fi(si)},useDebugValue:Ri,useDeferredValue:function(e){var t=fi(si),n=t[0],r=t[1];return _i((function(){var t=Ja.transition;Ja.transition=1;try{r(e)}finally{Ja.transition=t}}),[e]),n},useTransition:function(){var e=fi(si)[0];return[bi().current,e]},useMutableSource:vi,useOpaqueIdentifier:function(){return fi(si)[0]},unstable_isNewReconciler:!1},Ii={readContext:ua,useCallback:Ai,useContext:ua,useEffect:_i,useImperativeHandle:Ti,useLayoutEffect:ki,useMemo:Oi,useReducer:di,useRef:bi,useState:function(){return di(si)},useDebugValue:Ri,useDeferredValue:function(e){var t=di(si),n=t[0],r=t[1];return _i((function(){var t=Ja.transition;Ja.transition=1;try{r(e)}finally{Ja.transition=t}}),[e]),n},useTransition:function(){var e=di(si)[0];return[bi().current,e]},useMutableSource:vi,useOpaqueIdentifier:function(){return di(si)[0]},unstable_isNewReconciler:!1},Mi=E.ReactCurrentOwner,Ui=!1;function Fi(e,t,n,r){t.child=null===e?Aa(t,null,n,r):Ra(t,e.child,n,r)}function zi(e,t,n,r,o){n=n.render;var a=t.ref;return ia(t,o),r=ui(e,t,n,r,a,o),null===e||Ui?(t.flags|=1,Fi(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,ru(e,t,o))}function Di(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||$l(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Hl(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Vi(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:dr)(o,r)&&e.ref===t.ref)?ru(e,t,a):(t.flags|=1,(e=Wl(i,r)).ref=t.ref,e.return=t,t.child=e)}function Vi(e,t,n,r,o,a){if(null!==e&&dr(e.memoizedProps,r)&&e.ref===t.ref){if(Ui=!1,0==(a&o))return t.lanes=e.lanes,ru(e,t,a);0!=(16384&e.flags)&&(Ui=!0)}return Wi(e,t,n,r,a)}function Bi(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},wl(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},wl(0,e),null;t.memoizedState={baseLanes:0},wl(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,wl(0,r);return Fi(e,t,o,n),t.child}function $i(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Wi(e,t,n,r,o){var a=go(n)?yo:ho.current;return a=mo(t,a),ia(t,o),n=ui(e,t,n,r,a,o),null===e||Ui?(t.flags|=1,Fi(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,ru(e,t,o))}function Hi(e,t,n,o,a){if(go(n)){var i=!0;Eo(t)}else i=!1;if(ia(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),wa(t,n,o),Ea(t,n,o,a),o=!0;else if(null===e){var u=t.stateNode,l=t.memoizedProps;u.props=l;var c=u.context,s=n.contextType;s="object"===r(s)&&null!==s?ua(s):mo(t,s=go(n)?yo:ho.current);var f=n.getDerivedStateFromProps,d="function"==typeof f||"function"==typeof u.getSnapshotBeforeUpdate;d||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(l!==o||c!==s)&&Sa(t,u,o,s),la=!1;var p=t.memoizedState;u.state=p,ha(t,o,u,a),c=t.memoizedState,l!==o||p!==c||vo.current||la?("function"==typeof f&&(ma(t,n,f,o),c=t.memoizedState),(l=la||ba(t,n,l,o,p,c,s))?(d||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(t.flags|=4)):("function"==typeof u.componentDidMount&&(t.flags|=4),t.memoizedProps=o,t.memoizedState=c),u.props=o,u.state=c,u.context=s,o=l):("function"==typeof u.componentDidMount&&(t.flags|=4),o=!1)}else{u=t.stateNode,sa(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Jo(t.type,l),u.props=s,d=t.pendingProps,p=u.context,c="object"===r(c=n.contextType)&&null!==c?ua(c):mo(t,c=go(n)?yo:ho.current);var h=n.getDerivedStateFromProps;(f="function"==typeof h||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(l!==d||p!==c)&&Sa(t,u,o,c),la=!1,p=t.memoizedState,u.state=p,ha(t,o,u,a);var v=t.memoizedState;l!==d||p!==v||vo.current||la?("function"==typeof h&&(ma(t,n,h,o),v=t.memoizedState),(s=la||ba(t,n,s,o,p,v,c))?(f||"function"!=typeof u.UNSAFE_componentWillUpdate&&"function"!=typeof u.componentWillUpdate||("function"==typeof u.componentWillUpdate&&u.componentWillUpdate(o,v,c),"function"==typeof u.UNSAFE_componentWillUpdate&&u.UNSAFE_componentWillUpdate(o,v,c)),"function"==typeof u.componentDidUpdate&&(t.flags|=4),"function"==typeof u.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof u.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof u.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),t.memoizedProps=o,t.memoizedState=v),u.props=o,u.state=v,u.context=c,o=s):("function"!=typeof u.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof u.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=256),o=!1)}return qi(e,t,n,o,i,a)}function qi(e,t,n,r,o,a){$i(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&_o(t,n,!1),ru(e,t,a);r=t.stateNode,Mi.current=t;var u=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ra(t,e.child,null,a),t.child=Ra(t,null,u,a)):Fi(e,t,u,a),t.memoizedState=r.state,o&&_o(t,n,!0),t.child}function Gi(e){var t=e.stateNode;t.pendingContext?wo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&wo(0,t.context,!1),ja(e,t.containerInfo)}var Ki,Qi,Yi,Xi={dehydrated:null,retryLane:0};function Ji(e,t,n){var r,o=t.pendingProps,a=Fa.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),fo(Fa,1&a),null===e?(void 0!==o.fallback&&Ha(t),e=o.children,a=o.fallback,i?(e=Zi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Xi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Zi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Xi,t.lanes=33554432,e):((n=Gl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var u={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=u,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Wl(i,u),null!==e?r=Wl(e,r):(r=ql(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Xi,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Wl(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Zi(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Gl(t,o,0,null),n=ql(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function eu(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),aa(e.return,t)}function tu(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function nu(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Fi(e,t,r.children,n),0!=(2&(r=Fa.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&eu(e,n);else if(19===e.tag)eu(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(fo(Fa,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===za(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),tu(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===za(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}tu(t,!0,n,null,a,t.lastEffect);break;case"together":tu(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ru(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zu|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(u(153));if(null!==t.child){for(n=Wl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Wl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function ou(e,t){if(!Ba)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function au(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return go(t.type)&&bo(),null;case 3:return Ia(),so(vo),so(ho),Ya(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ga(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ua(t);var o=Pa(La.current);if(n=t.type,null!==e&&null!=t.stateNode)Qi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(u(166));return null}if(e=Pa(Ca.current),Ga(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[Jr]=t,r[Zr]=i,n){case"dialog":Cr("cancel",r),Cr("close",r);break;case"iframe":case"object":case"embed":Cr("load",r);break;case"video":case"audio":for(e=0;e<Tr.length;e++)Cr(Tr[e],r);break;case"source":Cr("error",r);break;case"img":case"image":case"link":Cr("error",r),Cr("load",r);break;case"details":Cr("toggle",r);break;case"input":te(r,i),Cr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Cr("invalid",r);break;case"textarea":ce(r,i),Cr("invalid",r)}for(var l in ke(n,i),e=null,i)i.hasOwnProperty(l)&&(o=i[l],"children"===l?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):c.hasOwnProperty(l)&&null!=o&&"onScroll"===l&&Cr("scroll",r));switch(n){case"input":X(r),oe(r,i,!0);break;case"textarea":X(r),fe(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Dr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(l=9===o.nodeType?o:o.ownerDocument,e===de&&(e=pe(n)),e===de?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[Jr]=t,e[Zr]=r,Ki(e,t),t.stateNode=e,l=xe(n,r),n){case"dialog":Cr("cancel",e),Cr("close",e),o=r;break;case"iframe":case"object":case"embed":Cr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Tr.length;o++)Cr(Tr[o],e);o=r;break;case"source":Cr("error",e),o=r;break;case"img":case"image":case"link":Cr("error",e),Cr("load",e),o=r;break;case"details":Cr("toggle",e),o=r;break;case"input":te(e,r),o=ee(e,r),Cr("invalid",e);break;case"option":o=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=a({},r,{value:void 0}),Cr("invalid",e);break;case"textarea":ce(e,r),o=le(e,r),Cr("invalid",e);break;default:o=r}ke(n,o);var s=o;for(i in s)if(s.hasOwnProperty(i)){var f=s[i];"style"===i?Ee(e,f):"dangerouslySetInnerHTML"===i?null!=(f=f?f.__html:void 0)&&me(e,f):"children"===i?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(c.hasOwnProperty(i)?null!=f&&"onScroll"===i&&Cr("scroll",e):null!=f&&S(e,i,f,l))}switch(n){case"input":X(e),oe(e,r,!1);break;case"textarea":X(e),fe(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ue(e,!!r.multiple,i,!1):null!=r.defaultValue&&ue(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Dr)}$r(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Yi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(u(166));n=Pa(La.current),Pa(Ca.current),Ga(t)?(r=t.stateNode,n=t.memoizedProps,r[Jr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Jr]=t,t.stateNode=r)}return null;case 13:return so(Fa),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ga(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Fa.current)?0===Mu&&(Mu=3):(0!==Mu&&3!==Mu||(Mu=4),null===Nu||0==(134217727&zu)&&0==(134217727&Du)||yl(Nu,Pu))),(r||n)&&(t.flags|=4),null);case 4:return Ia(),null===e&&Lr(t.stateNode.containerInfo),null;case 10:return oa(t),null;case 19:if(so(Fa),null===(r=t.memoizedState))return null;if(i=0!=(64&t.flags),null===(l=r.rendering))if(i)ou(r,!1);else{if(0!==Mu||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(l=za(e))){for(t.flags|=64,ou(r,!1),null!==(i=l.updateQueue)&&(t.updateQueue=i,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(l=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=l.childLanes,i.lanes=l.lanes,i.child=l.child,i.memoizedProps=l.memoizedProps,i.memoizedState=l.memoizedState,i.updateQueue=l.updateQueue,i.type=l.type,e=l.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return fo(Fa,1&Fa.current|2),t.child}e=e.sibling}null!==r.tail&&Wo()>Wu&&(t.flags|=64,i=!0,ou(r,!1),t.lanes=33554432)}else{if(!i)if(null!==(e=za(l))){if(t.flags|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),ou(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate&&!Ba)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Wo()-r.renderingStartTime>Wu&&1073741824!==n&&(t.flags|=64,i=!0,ou(r,!1),t.lanes=33554432);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Wo(),n.sibling=null,t=Fa.current,fo(Fa,i?1&t|2:1&t),n):null;case 23:case 24:return Sl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(u(156,t.tag))}function iu(e){switch(e.tag){case 1:go(e.type)&&bo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ia(),so(vo),so(ho),Ya(),0!=(64&(t=e.flags)))throw Error(u(285));return e.flags=-4097&t|64,e;case 5:return Ua(e),null;case 13:return so(Fa),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return so(Fa),null;case 4:return Ia(),null;case 10:return oa(e),null;case 23:case 24:return Sl(),null;default:return null}}function uu(e,t){try{var n="",r=t;do{n+=G(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function lu(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ki=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Qi=function(e,t,n,o){var i=e.memoizedProps;if(i!==o){e=t.stateNode,Pa(Ca.current);var u,l=null;switch(n){case"input":i=ee(e,i),o=ee(e,o),l=[];break;case"option":i=ie(e,i),o=ie(e,o),l=[];break;case"select":i=a({},i,{value:void 0}),o=a({},o,{value:void 0}),l=[];break;case"textarea":i=le(e,i),o=le(e,o),l=[];break;default:"function"!=typeof i.onClick&&"function"==typeof o.onClick&&(e.onclick=Dr)}for(d in ke(n,o),n=null,i)if(!o.hasOwnProperty(d)&&i.hasOwnProperty(d)&&null!=i[d])if("style"===d){var s=i[d];for(u in s)s.hasOwnProperty(u)&&(n||(n={}),n[u]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(c.hasOwnProperty(d)?l||(l=[]):(l=l||[]).push(d,null));for(d in o){var f=o[d];if(s=null!=i?i[d]:void 0,o.hasOwnProperty(d)&&f!==s&&(null!=f||null!=s))if("style"===d)if(s){for(u in s)!s.hasOwnProperty(u)||f&&f.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in f)f.hasOwnProperty(u)&&s[u]!==f[u]&&(n||(n={}),n[u]=f[u])}else n||(l||(l=[]),l.push(d,n)),n=f;else"dangerouslySetInnerHTML"===d?(f=f?f.__html:void 0,s=s?s.__html:void 0,null!=f&&s!==f&&(l=l||[]).push(d,f)):"children"===d?"string"!=typeof f&&"number"!=typeof f||(l=l||[]).push(d,""+f):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(c.hasOwnProperty(d)?(null!=f&&"onScroll"===d&&Cr("scroll",e),l||s===f||(l=[])):"object"===r(f)&&null!==f&&f.$$typeof===M?f.toString():(l=l||[]).push(d,f))}n&&(l=l||[]).push("style",n);var d=l;(t.updateQueue=d)&&(t.flags|=4)}},Yi=function(e,t,n,r){n!==r&&(t.flags|=4)};var cu="function"==typeof WeakMap?WeakMap:Map;function su(e,t,n){(n=fa(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ku||(Ku=!0,Qu=r),lu(0,t)},n}function fu(e,t,n){(n=fa(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return lu(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Yu?Yu=new Set([this]):Yu.add(this),lu(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var du="function"==typeof WeakSet?WeakSet:Set;function pu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Fl(e,t)}else t.current=null}function hu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Jo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Gr(t.stateNode.containerInfo))}throw Error(u(163))}function vu(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Il(n,e),jl(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Jo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&va(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}va(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&$r(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Et(n)))))}throw Error(u(163))}function yu(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=Se("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function mu(e,t){if(xo&&"function"==typeof xo.onCommitFiberUnmount)try{xo.onCommitFiberUnmount(ko,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Il(t,n);else{r=t;try{o()}catch(e){Fl(r,e)}}n=n.next}while(n!==e)}break;case 1:if(pu(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Fl(t,e)}break;case 5:pu(t);break;case 4:_u(e,t)}}function gu(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function bu(e){return 5===e.tag||3===e.tag||4===e.tag}function wu(e){e:{for(var t=e.return;null!==t;){if(bu(t))break e;t=t.return}throw Error(u(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(u(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||bu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?Su(e,n,t):Eu(e,n,t)}function Su(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Dr));else if(4!==r&&null!==(e=e.child))for(Su(e,t,n),e=e.sibling;null!==e;)Su(e,t,n),e=e.sibling}function Eu(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(Eu(e,t,n),e=e.sibling;null!==e;)Eu(e,t,n),e=e.sibling}function _u(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(u(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var i=e,l=o,c=l;;)if(mu(i,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break e;for(;null===c.sibling;){if(null===c.return||c.return===l)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(i=n,l=o.stateNode,8===i.nodeType?i.parentNode.removeChild(l):i.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(mu(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function ku(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Zr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&ne(n,r),xe(e,o),t=xe(e,r),o=0;o<a.length;o+=2){var i=a[o],l=a[o+1];"style"===i?Ee(n,l):"dangerouslySetInnerHTML"===i?me(n,l):"children"===i?ge(n,l):S(n,i,l,t)}switch(e){case"input":re(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ue(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ue(n,!!r.multiple,r.defaultValue,!0):ue(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(u(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,Et(n.containerInfo)));case 13:return null!==t.memoizedState&&($u=Wo(),yu(t.child,!0)),void xu(t);case 19:return void xu(t);case 23:case 24:return void yu(t,null!==t.memoizedState)}throw Error(u(163))}function xu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new du),t.forEach((function(t){var r=Dl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Tu(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Ru=Math.ceil,Au=E.ReactCurrentDispatcher,Ou=E.ReactCurrentOwner,Cu=0,Nu=null,Lu=null,Pu=0,ju=0,Iu=co(0),Mu=0,Uu=null,Fu=0,zu=0,Du=0,Vu=0,Bu=null,$u=0,Wu=1/0;function Hu(){Wu=Wo()+500}var qu,Gu=null,Ku=!1,Qu=null,Yu=null,Xu=!1,Ju=null,Zu=90,el=[],tl=[],nl=null,rl=0,ol=null,al=-1,il=0,ul=0,ll=null,cl=!1;function sl(){return 0!=(48&Cu)?Wo():-1!==al?al:al=Wo()}function fl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Ho()?1:2;if(0===il&&(il=Fu),0!==Xo.transition){0!==ul&&(ul=null!==Bu?Bu.pendingLanes:0),e=il;var t=4186112&~ul;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Ho(),e=Dt(0!=(4&Cu)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),il)}function dl(e,t,n){if(50<rl)throw rl=0,ol=null,Error(u(185));if(null===(e=pl(e,t)))return null;$t(e,t,n),e===Nu&&(Du|=t,4===Mu&&yl(e,Pu));var r=Ho();1===t?0!=(8&Cu)&&0==(48&Cu)?ml(e):(hl(e,n),0===Cu&&(Hu(),Qo())):(0==(4&Cu)||98!==r&&99!==r||(null===nl?nl=new Set([e]):nl.add(e)),hl(e,n)),Bu=e}function pl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function hl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,i=e.pendingLanes;0<i;){var l=31-Wt(i),c=1<<l,s=a[l];if(-1===s){if(0==(c&r)||0!=(c&o)){s=t,Ut(c);var f=Mt;a[l]=10<=f?s+250:6<=f?s+5e3:-1}}else s<=t&&(e.expiredLanes|=c);i&=~c}if(r=Ft(e,e===Nu?Pu:0),t=Mt,0===r)null!==n&&(n!==Fo&&Ao(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Fo&&Ao(n)}15===t?(n=ml.bind(null,e),null===Do?(Do=[n],Vo=Ro(Po,Yo)):Do.push(n),n=Fo):14===t?n=Ko(99,ml.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(u(358,e))}}(t),n=Ko(n,vl.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function vl(e){if(al=-1,ul=il=0,0!=(48&Cu))throw Error(u(327));var t=e.callbackNode;if(Pl()&&e.callbackNode!==t)return null;var n=Ft(e,e===Nu?Pu:0);if(0===n)return null;var r=n,o=Cu;Cu|=16;var a=kl();for(Nu===e&&Pu===r||(Hu(),El(e,r));;)try{Rl();break}catch(t){_l(e,t)}if(ra(),Au.current=a,Cu=o,null!==Lu?r=0:(Nu=null,Pu=0,r=Mu),0!=(Fu&Du))El(e,0);else if(0!==r){if(2===r&&(Cu|=64,e.hydrate&&(e.hydrate=!1,Gr(e.containerInfo)),0!==(n=zt(e))&&(r=xl(e,n))),1===r)throw t=Uu,El(e,0),yl(e,n),hl(e,Wo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(u(345));case 2:case 5:Cl(e);break;case 3:if(yl(e,n),(62914560&n)===n&&10<(r=$u+500-Wo())){if(0!==Ft(e,0))break;if(((o=e.suspendedLanes)&n)!==n){sl(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Hr(Cl.bind(null,e),r);break}Cl(e);break;case 4:if(yl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var i=31-Wt(n);a=1<<i,(i=r[i])>o&&(o=i),n&=~a}if(n=o,10<(n=(120>(n=Wo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ru(n/1960))-n)){e.timeoutHandle=Hr(Cl.bind(null,e),n);break}Cl(e);break;default:throw Error(u(329))}}return hl(e,Wo()),e.callbackNode===t?vl.bind(null,e):null}function yl(e,t){for(t&=~Vu,t&=~Du,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Wt(t),r=1<<n;e[n]=-1,t&=~r}}function ml(e){if(0!=(48&Cu))throw Error(u(327));if(Pl(),e===Nu&&0!=(e.expiredLanes&Pu)){var t=Pu,n=xl(e,t);0!=(Fu&Du)&&(n=xl(e,t=Ft(e,t)))}else n=xl(e,t=Ft(e,0));if(0!==e.tag&&2===n&&(Cu|=64,e.hydrate&&(e.hydrate=!1,Gr(e.containerInfo)),0!==(t=zt(e))&&(n=xl(e,t))),1===n)throw n=Uu,El(e,0),yl(e,t),hl(e,Wo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Cl(e),hl(e,Wo()),null}function gl(e,t){var n=Cu;Cu|=1;try{return e(t)}finally{0===(Cu=n)&&(Hu(),Qo())}}function bl(e,t){var n=Cu;Cu&=-2,Cu|=8;try{return e(t)}finally{0===(Cu=n)&&(Hu(),Qo())}}function wl(e,t){fo(Iu,ju),ju|=t,Fu|=t}function Sl(){ju=Iu.current,so(Iu)}function El(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,qr(n)),null!==Lu)for(n=Lu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&bo();break;case 3:Ia(),so(vo),so(ho),Ya();break;case 5:Ua(r);break;case 4:Ia();break;case 13:case 19:so(Fa);break;case 10:oa(r);break;case 23:case 24:Sl()}n=n.return}Nu=e,Lu=Wl(e.current,null),Pu=ju=Fu=t,Mu=0,Uu=null,Vu=Du=zu=0}function _l(e,t){for(;;){var n=Lu;try{if(ra(),Xa.current=Li,ri){for(var o=ei.memoizedState;null!==o;){var a=o.queue;null!==a&&(a.pending=null),o=o.next}ri=!1}if(Za=0,ni=ti=ei=null,oi=!1,Ou.current=null,null===n||null===n.return){Mu=1,Uu=t,Lu=null;break}e:{var i=e,u=n.return,l=n,c=t;if(t=Pu,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==c&&"object"===r(c)&&"function"==typeof c.then){var s=c;if(0==(2&l.mode)){var f=l.alternate;f?(l.updateQueue=f.updateQueue,l.memoizedState=f.memoizedState,l.lanes=f.lanes):(l.updateQueue=null,l.memoizedState=null)}var d=0!=(1&Fa.current),p=u;do{var h;if(h=13===p.tag){var v=p.memoizedState;if(null!==v)h=null!==v.dehydrated;else{var y=p.memoizedProps;h=void 0!==y.fallback&&(!0!==y.unstable_avoidThisFallback||!d)}}if(h){var m=p.updateQueue;if(null===m){var g=new Set;g.add(s),p.updateQueue=g}else m.add(s);if(0==(2&p.mode)){if(p.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var b=fa(-1,1);b.tag=2,da(l,b)}l.lanes|=1;break e}c=void 0,l=t;var w=i.pingCache;if(null===w?(w=i.pingCache=new cu,c=new Set,w.set(s,c)):void 0===(c=w.get(s))&&(c=new Set,w.set(s,c)),!c.has(l)){c.add(l);var S=zl.bind(null,i,s,l);s.then(S,S)}p.flags|=4096,p.lanes=t;break e}p=p.return}while(null!==p);c=Error((K(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Mu&&(Mu=2),c=uu(c,l),p=u;do{switch(p.tag){case 3:i=c,p.flags|=4096,t&=-t,p.lanes|=t,pa(p,su(0,i,t));break e;case 1:i=c;var E=p.type,_=p.stateNode;if(0==(64&p.flags)&&("function"==typeof E.getDerivedStateFromError||null!==_&&"function"==typeof _.componentDidCatch&&(null===Yu||!Yu.has(_)))){p.flags|=4096,t&=-t,p.lanes|=t,pa(p,fu(p,i,t));break e}}p=p.return}while(null!==p)}Ol(n)}catch(e){t=e,Lu===n&&null!==n&&(Lu=n=n.return);continue}break}}function kl(){var e=Au.current;return Au.current=Li,null===e?Li:e}function xl(e,t){var n=Cu;Cu|=16;var r=kl();for(Nu===e&&Pu===t||El(e,t);;)try{Tl();break}catch(t){_l(e,t)}if(ra(),Cu=n,Au.current=r,null!==Lu)throw Error(u(261));return Nu=null,Pu=0,Mu}function Tl(){for(;null!==Lu;)Al(Lu)}function Rl(){for(;null!==Lu&&!Oo();)Al(Lu)}function Al(e){var t=qu(e.alternate,e,ju);e.memoizedProps=e.pendingProps,null===t?Ol(e):Lu=t,Ou.current=null}function Ol(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=au(n,t,ju)))return void(Lu=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&ju)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=iu(t)))return n.flags&=2047,void(Lu=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Lu=t);Lu=t=e}while(null!==t);0===Mu&&(Mu=5)}function Cl(e){var t=Ho();return Go(99,Nl.bind(null,e,t)),null}function Nl(e,t){do{Pl()}while(null!==Ju);if(0!=(48&Cu))throw Error(u(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(u(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var i=e.eventTimes,l=e.expirationTimes;0<a;){var c=31-Wt(a),s=1<<c;o[c]=0,i[c]=-1,l[c]=-1,a&=~s}if(null!==nl&&0==(24&r)&&nl.has(e)&&nl.delete(e),e===Nu&&(Lu=Nu=null,Pu=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Cu,Cu|=32,Ou.current=null,Vr=Qt,mr(i=yr())){if("selectionStart"in i)l={start:i.selectionStart,end:i.selectionEnd};else e:if(l=(l=i.ownerDocument)&&l.defaultView||window,(s=l.getSelection&&l.getSelection())&&0!==s.rangeCount){l=s.anchorNode,a=s.anchorOffset,c=s.focusNode,s=s.focusOffset;try{l.nodeType,c.nodeType}catch(e){l=null;break e}var f=0,d=-1,p=-1,h=0,v=0,y=i,m=null;t:for(;;){for(var g;y!==l||0!==a&&3!==y.nodeType||(d=f+a),y!==c||0!==s&&3!==y.nodeType||(p=f+s),3===y.nodeType&&(f+=y.nodeValue.length),null!==(g=y.firstChild);)m=y,y=g;for(;;){if(y===i)break t;if(m===l&&++h===a&&(d=f),m===c&&++v===s&&(p=f),null!==(g=y.nextSibling))break;m=(y=m).parentNode}y=g}l=-1===d||-1===p?null:{start:d,end:p}}else l=null;l=l||{start:0,end:0}}else l=null;Br={focusedElem:i,selectionRange:l},Qt=!1,ll=null,cl=!1,Gu=r;do{try{Ll()}catch(e){if(null===Gu)throw Error(u(330));Fl(Gu,e),Gu=Gu.nextEffect}}while(null!==Gu);ll=null,Gu=r;do{try{for(i=e;null!==Gu;){var b=Gu.flags;if(16&b&&ge(Gu.stateNode,""),128&b){var w=Gu.alternate;if(null!==w){var S=w.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&b){case 2:wu(Gu),Gu.flags&=-3;break;case 6:wu(Gu),Gu.flags&=-3,ku(Gu.alternate,Gu);break;case 1024:Gu.flags&=-1025;break;case 1028:Gu.flags&=-1025,ku(Gu.alternate,Gu);break;case 4:ku(Gu.alternate,Gu);break;case 8:_u(i,l=Gu);var E=l.alternate;gu(l),null!==E&&gu(E)}Gu=Gu.nextEffect}}catch(e){if(null===Gu)throw Error(u(330));Fl(Gu,e),Gu=Gu.nextEffect}}while(null!==Gu);if(S=Br,w=yr(),b=S.focusedElem,i=S.selectionRange,w!==b&&b&&b.ownerDocument&&vr(b.ownerDocument.documentElement,b)){null!==i&&mr(b)&&(w=i.start,void 0===(S=i.end)&&(S=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(S,b.value.length)):(S=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(S=S.getSelection(),l=b.textContent.length,E=Math.min(i.start,l),i=void 0===i.end?E:Math.min(i.end,l),!S.extend&&E>i&&(l=i,i=E,E=l),l=hr(b,E),a=hr(b,i),l&&a&&(1!==S.rangeCount||S.anchorNode!==l.node||S.anchorOffset!==l.offset||S.focusNode!==a.node||S.focusOffset!==a.offset)&&((w=w.createRange()).setStart(l.node,l.offset),S.removeAllRanges(),E>i?(S.addRange(w),S.extend(a.node,a.offset)):(w.setEnd(a.node,a.offset),S.addRange(w))))),w=[];for(S=b;S=S.parentNode;)1===S.nodeType&&w.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(S=w[b]).element.scrollLeft=S.left,S.element.scrollTop=S.top}Qt=!!Vr,Br=Vr=null,e.current=n,Gu=r;do{try{for(b=e;null!==Gu;){var _=Gu.flags;if(36&_&&vu(b,Gu.alternate,Gu),128&_){w=void 0;var k=Gu.ref;if(null!==k){var x=Gu.stateNode;Gu.tag,w=x,"function"==typeof k?k(w):k.current=w}}Gu=Gu.nextEffect}}catch(e){if(null===Gu)throw Error(u(330));Fl(Gu,e),Gu=Gu.nextEffect}}while(null!==Gu);Gu=null,zo(),Cu=o}else e.current=n;if(Xu)Xu=!1,Ju=e,Zu=t;else for(Gu=r;null!==Gu;)t=Gu.nextEffect,Gu.nextEffect=null,8&Gu.flags&&((_=Gu).sibling=null,_.stateNode=null),Gu=t;if(0===(r=e.pendingLanes)&&(Yu=null),1===r?e===ol?rl++:(rl=0,ol=e):rl=0,n=n.stateNode,xo&&"function"==typeof xo.onCommitFiberRoot)try{xo.onCommitFiberRoot(ko,n,void 0,64==(64&n.current.flags))}catch(e){}if(hl(e,Wo()),Ku)throw Ku=!1,e=Qu,Qu=null,e;return 0!=(8&Cu)||Qo(),null}function Ll(){for(;null!==Gu;){var e=Gu.alternate;cl||null===ll||(0!=(8&Gu.flags)?et(Gu,ll)&&(cl=!0):13===Gu.tag&&Tu(e,Gu)&&et(Gu,ll)&&(cl=!0));var t=Gu.flags;0!=(256&t)&&hu(e,Gu),0==(512&t)||Xu||(Xu=!0,Ko(97,(function(){return Pl(),null}))),Gu=Gu.nextEffect}}function Pl(){if(90!==Zu){var e=97<Zu?97:Zu;return Zu=90,Go(e,Ml)}return!1}function jl(e,t){el.push(t,e),Xu||(Xu=!0,Ko(97,(function(){return Pl(),null})))}function Il(e,t){tl.push(t,e),Xu||(Xu=!0,Ko(97,(function(){return Pl(),null})))}function Ml(){if(null===Ju)return!1;var e=Ju;if(Ju=null,0!=(48&Cu))throw Error(u(331));var t=Cu;Cu|=32;var n=tl;tl=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],i=o.destroy;if(o.destroy=void 0,"function"==typeof i)try{i()}catch(e){if(null===a)throw Error(u(330));Fl(a,e)}}for(n=el,el=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===a)throw Error(u(330));Fl(a,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Cu=t,Qo(),!0}function Ul(e,t,n){da(e,t=su(0,t=uu(n,t),1)),t=sl(),null!==(e=pl(e,1))&&($t(e,1,t),hl(e,t))}function Fl(e,t){if(3===e.tag)Ul(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ul(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yu||!Yu.has(r))){var o=fu(n,e=uu(t,e),1);if(da(n,o),o=sl(),null!==(n=pl(n,1)))$t(n,1,o),hl(n,o);else if("function"==typeof r.componentDidCatch&&(null===Yu||!Yu.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function zl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=sl(),e.pingedLanes|=e.suspendedLanes&n,Nu===e&&(Pu&n)===n&&(4===Mu||3===Mu&&(62914560&Pu)===Pu&&500>Wo()-$u?El(e,0):Vu|=n),hl(e,t)}function Dl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Ho()?1:2:(0===il&&(il=Fu),0===(t=Vt(62914560&~il))&&(t=4194304))),n=sl(),null!==(e=pl(e,t))&&($t(e,t,n),hl(e,n))}function Vl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Bl(e,t,n,r){return new Vl(e,t,n,r)}function $l(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Wl(e,t){var n=e.alternate;return null===n?((n=Bl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Hl(e,t,n,o,a,i){var l=2;if(o=e,"function"==typeof e)$l(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case x:return ql(n.children,a,i,t);case U:l=8,a|=16;break;case T:l=8,a|=1;break;case R:return(e=Bl(12,n,t,8|a)).elementType=R,e.type=R,e.lanes=i,e;case N:return(e=Bl(13,n,t,a)).type=N,e.elementType=N,e.lanes=i,e;case L:return(e=Bl(19,n,t,a)).elementType=L,e.lanes=i,e;case F:return Gl(n,a,i,t);case z:return(e=Bl(24,n,t,a)).elementType=z,e.lanes=i,e;default:if("object"===r(e)&&null!==e)switch(e.$$typeof){case A:l=10;break e;case O:l=9;break e;case C:l=11;break e;case P:l=14;break e;case j:l=16,o=null;break e;case I:l=22;break e}throw Error(u(130,null==e?e:r(e),""))}return(t=Bl(l,n,t,a)).elementType=e,t.type=o,t.lanes=i,t}function ql(e,t,n,r){return(e=Bl(7,e,r,t)).lanes=n,e}function Gl(e,t,n,r){return(e=Bl(23,e,r,t)).elementType=F,e.lanes=n,e}function Kl(e,t,n){return(e=Bl(6,e,null,t)).lanes=n,e}function Ql(e,t,n){return(t=Bl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Yl(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function Xl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Jl(e,t,n,r){var o=t.current,a=sl(),i=fl(o);e:if(n){t:{if(Ye(n=n._reactInternals)!==n||1!==n.tag)throw Error(u(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(go(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(u(171))}if(1===n.tag){var c=n.type;if(go(c)){n=So(n,c,l);break e}}n=l}else n=po;return null===t.context?t.context=n:t.pendingContext=n,(t=fa(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),da(o,t),dl(o,i,a),i}function Zl(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function ec(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function tc(e,t){ec(e,t),(e=e.alternate)&&ec(e,t)}function nc(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Yl(e,t,null!=n&&!0===n.hydrate),t=Bl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ca(t),e[eo]=n.current,Lr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function rc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function oc(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Zl(i);u.call(e)}}Jl(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new nc(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Zl(i);l.call(e)}}bl((function(){Jl(t,i,e,o)}))}return Zl(i)}function ac(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rc(t))throw Error(u(200));return Xl(e,t,null,n)}qu=function(e,t,n){var o=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||vo.current)Ui=!0;else{if(0==(n&o)){switch(Ui=!1,t.tag){case 3:Gi(t),Ka();break;case 5:Ma(t);break;case 1:go(t.type)&&Eo(t);break;case 4:ja(t,t.stateNode.containerInfo);break;case 10:o=t.memoizedProps.value;var a=t.type._context;fo(Zo,a._currentValue),a._currentValue=o;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ji(e,t,n):(fo(Fa,1&Fa.current),null!==(t=ru(e,t,n))?t.sibling:null);fo(Fa,1&Fa.current);break;case 19:if(o=0!=(n&t.childLanes),0!=(64&e.flags)){if(o)return nu(e,t,n);t.flags|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),fo(Fa,Fa.current),o)break;return null;case 23:case 24:return t.lanes=0,Bi(e,t,n)}return ru(e,t,n)}Ui=0!=(16384&e.flags)}else Ui=!1;switch(t.lanes=0,t.tag){case 2:if(o=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=mo(t,ho.current),ia(t,n),a=ui(null,t,o,e,a,n),t.flags|=1,"object"===r(a)&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(o)){var i=!0;Eo(t)}else i=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,ca(t);var l=o.getDerivedStateFromProps;"function"==typeof l&&ma(t,o,l,e),a.updater=ga,t.stateNode=a,a._reactInternals=t,Ea(t,o,e,n),t=qi(null,t,o,!0,i,n)}else t.tag=0,Fi(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(i=a._init)(a._payload),t.type=a,i=t.tag=function(e){if("function"==typeof e)return $l(e)?1:0;if(null!=e){if((e=e.$$typeof)===C)return 11;if(e===P)return 14}return 2}(a),e=Jo(a,e),i){case 0:t=Wi(null,t,a,e,n);break e;case 1:t=Hi(null,t,a,e,n);break e;case 11:t=zi(null,t,a,e,n);break e;case 14:t=Di(null,t,a,Jo(a.type,e),o,n);break e}throw Error(u(306,a,""))}return t;case 0:return o=t.type,a=t.pendingProps,Wi(e,t,o,a=t.elementType===o?a:Jo(o,a),n);case 1:return o=t.type,a=t.pendingProps,Hi(e,t,o,a=t.elementType===o?a:Jo(o,a),n);case 3:if(Gi(t),o=t.updateQueue,null===e||null===o)throw Error(u(282));if(o=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,sa(e,t),ha(t,o,null,n),(o=t.memoizedState.element)===a)Ka(),t=ru(e,t,n);else{if((i=(a=t.stateNode).hydrate)&&(Va=Kr(t.stateNode.containerInfo.firstChild),Da=t,i=Ba=!0),i){if(null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)(i=e[a])._workInProgressVersionPrimary=e[a+1],Qa.push(i);for(n=Aa(t,null,o,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Fi(e,t,o,n),Ka();t=t.child}return t;case 5:return Ma(t),null===e&&Ha(t),o=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,l=a.children,Wr(o,a)?l=null:null!==i&&Wr(o,i)&&(t.flags|=16),$i(e,t),Fi(e,t,l,n),t.child;case 6:return null===e&&Ha(t),null;case 13:return Ji(e,t,n);case 4:return ja(t,t.stateNode.containerInfo),o=t.pendingProps,null===e?t.child=Ra(t,null,o,n):Fi(e,t,o,n),t.child;case 11:return o=t.type,a=t.pendingProps,zi(e,t,o,a=t.elementType===o?a:Jo(o,a),n);case 7:return Fi(e,t,t.pendingProps,n),t.child;case 8:case 12:return Fi(e,t,t.pendingProps.children,n),t.child;case 10:e:{o=t.type._context,a=t.pendingProps,l=t.memoizedProps,i=a.value;var c=t.type._context;if(fo(Zo,c._currentValue),c._currentValue=i,null!==l)if(c=l.value,0==(i=sr(c,i)?0:0|("function"==typeof o._calculateChangedBits?o._calculateChangedBits(c,i):1073741823))){if(l.children===a.children&&!vo.current){t=ru(e,t,n);break e}}else for(null!==(c=t.child)&&(c.return=t);null!==c;){var s=c.dependencies;if(null!==s){l=c.child;for(var f=s.firstContext;null!==f;){if(f.context===o&&0!=(f.observedBits&i)){1===c.tag&&((f=fa(-1,n&-n)).tag=2,da(c,f)),c.lanes|=n,null!==(f=c.alternate)&&(f.lanes|=n),aa(c.return,n),s.lanes|=n;break}f=f.next}}else l=10===c.tag&&c.type===t.type?null:c.child;if(null!==l)l.return=c;else for(l=c;null!==l;){if(l===t){l=null;break}if(null!==(c=l.sibling)){c.return=l.return,l=c;break}l=l.return}c=l}Fi(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,o=(i=t.pendingProps).children,ia(t,n),o=o(a=ua(a,i.unstable_observedBits)),t.flags|=1,Fi(e,t,o,n),t.child;case 14:return i=Jo(a=t.type,t.pendingProps),Di(e,t,a,i=Jo(a.type,i),o,n);case 15:return Vi(e,t,t.type,t.pendingProps,o,n);case 17:return o=t.type,a=t.pendingProps,a=t.elementType===o?a:Jo(o,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,go(o)?(e=!0,Eo(t)):e=!1,ia(t,n),wa(t,o,a),Ea(t,o,a,n),qi(null,t,o,!0,e,n);case 19:return nu(e,t,n);case 23:case 24:return Bi(e,t,n)}throw Error(u(156,t.tag))},nc.prototype.render=function(e){Jl(e,this._internalRoot,null,null)},nc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Jl(null,e,null,(function(){t[eo]=null}))},tt=function(e){13===e.tag&&(dl(e,4,sl()),tc(e,4))},nt=function(e){13===e.tag&&(dl(e,67108864,sl()),tc(e,67108864))},rt=function(e){if(13===e.tag){var t=sl(),n=fl(e);dl(e,n,t),tc(e,n)}},ot=function(e,t){return t()},Re=function(e,t,n){switch(t){case"input":if(re(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=ao(r);if(!o)throw Error(u(90));J(r),re(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ue(e,!!n.multiple,t,!1)}},Pe=gl,je=function(e,t,n,r,o){var a=Cu;Cu|=4;try{return Go(98,e.bind(null,t,n,r,o))}finally{0===(Cu=a)&&(Hu(),Qo())}},Ie=function(){0==(49&Cu)&&(function(){if(null!==nl){var e=nl;nl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,hl(e,Wo())}))}Qo()}(),Pl())},Me=function(e,t){var n=Cu;Cu|=2;try{return e(t)}finally{0===(Cu=n)&&(Hu(),Qo())}};var ic={Events:[ro,oo,ao,Ne,Le,Pl,{current:!1}]},uc={findFiberByHostInstance:no,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},lc={bundleType:uc.bundleType,version:uc.version,rendererPackageName:uc.rendererPackageName,rendererConfig:uc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:E.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:uc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var cc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!cc.isDisabled&&cc.supportsFiber)try{ko=cc.inject(lc),xo=cc}catch(ye){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ic,t.createPortal=ac,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(u(188));throw Error(u(268,Object.keys(e)))}return null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Cu;if(0!=(48&n))return e(t);Cu|=1;try{if(e)return Go(99,e.bind(null,t))}finally{Cu=n,Qo()}},t.hydrate=function(e,t,n){if(!rc(t))throw Error(u(200));return oc(null,e,t,!0,n)},t.render=function(e,t,n){if(!rc(t))throw Error(u(200));return oc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!rc(e))throw Error(u(40));return!!e._reactRootContainer&&(bl((function(){oc(null,null,e,!1,(function(){e._reactRootContainer=null,e[eo]=null}))})),!0)},t.unstable_batchedUpdates=gl,t.unstable_createPortal=function(e,t){return ac(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!rc(n))throw Error(u(200));if(null==e||void 0===e._reactInternals)throw Error(u(38));return oc(e,t,n,!1,r)},t.version="17.0.1"},4530:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(1036)},866:function(e,t,n){"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}n(7941),n(4603),n(4916),n(9714),n(1539),n(4723),n(8309),n(2526),n(1817),n(2165),n(6992),n(8783),n(3948);var o=Array.isArray,a=Object.keys,i=Object.prototype.hasOwnProperty,u="undefined"!=typeof Element;function l(e,t){if(e===t)return!0;if(e&&t&&"object"==r(e)&&"object"==r(t)){var n,c,s,f=o(e),d=o(t);if(f&&d){if((c=e.length)!=t.length)return!1;for(n=c;0!=n--;)if(!l(e[n],t[n]))return!1;return!0}if(f!=d)return!1;var p=e instanceof Date,h=t instanceof Date;if(p!=h)return!1;if(p&&h)return e.getTime()==t.getTime();var v=e instanceof RegExp,y=t instanceof RegExp;if(v!=y)return!1;if(v&&y)return e.toString()==t.toString();var m=a(e);if((c=m.length)!==a(t).length)return!1;for(n=c;0!=n--;)if(!i.call(t,m[n]))return!1;if(u&&e instanceof Element&&t instanceof Element)return e===t;for(n=c;0!=n--;)if(!("_owner"===(s=m[n])&&e.$$typeof||l(e[s],t[s])))return!1;return!0}return e!=e&&t!=t}e.exports=function(e,t){try{return l(e,t)}catch(e){if(e.message&&e.message.match(/stack|recursion/i)||-2146828260===e.number)return console.warn("Warning: react-fast-compare does not handle circular references.",e.name,e.message),!1;throw e}}},2191:function(e,t,n){"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}n(2526),n(1817),n(1539),n(2165),n(6992),n(8783),n(3948),n(4916),n(5306),n(9714),n(9600),n(7941);var o=n(632),a=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var u=60109,l=60110,c=60112;t.Suspense=60113;var s=60115,f=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;a=d("react.element"),i=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),u=d("react.provider"),l=d("react.context"),c=d("react.forward_ref"),t.Suspense=d("react.suspense"),s=d("react.memo"),f=d("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function h(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function m(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||v}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||v}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!==r(e)&&"function"!=typeof e&&null!=e)throw Error(h(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=m.prototype;var w=b.prototype=new g;w.constructor=b,o(w,m.prototype),w.isPureReactComponent=!0;var S={current:null},E=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,o={},i=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,r)&&!_.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:a,type:e,key:i,ref:u,props:o,_owner:S.current}}function x(e){return"object"===r(e)&&null!==e&&e.$$typeof===a}var T=/\/+/g;function R(e,t){return"object"===r(e)&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function A(e,t,n,o,u){var l=r(e);"undefined"!==l&&"boolean"!==l||(e=null);var c=!1;if(null===e)c=!0;else switch(l){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case a:case i:c=!0}}if(c)return u=u(c=e),e=""===o?"."+R(c,0):o,Array.isArray(u)?(n="",null!=e&&(n=e.replace(T,"$&/")+"/"),A(u,t,n,"",(function(e){return e}))):null!=u&&(x(u)&&(u=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(u,n+(!u.key||c&&c.key===u.key?"":(""+u.key).replace(T,"$&/")+"/")+e)),t.push(u)),1;if(c=0,o=""===o?".":o+":",Array.isArray(e))for(var s=0;s<e.length;s++){var f=o+R(l=e[s],s);c+=A(l,t,n,f,u)}else if(f=function(e){return null===e||"object"!==r(e)?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof f)for(e=f.call(e),s=0;!(l=e.next()).done;)c+=A(l=l.value,t,n,f=o+R(l,s++),u);else if("object"===l)throw t=""+e,Error(h(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return c}function O(e,t,n){if(null==e)return e;var r=[],o=0;return A(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function C(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var N={current:null};function L(){var e=N.current;if(null===e)throw Error(h(321));return e}var P={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:o};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error(h(143));return e}},t.Component=m,t.PureComponent=b,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,t.cloneElement=function(e,t,n){if(null==e)throw Error(h(267,e));var r=o({},e.props),i=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=S.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)E.call(t,s)&&!_.hasOwnProperty(s)&&(r[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)r.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];r.children=c}return{$$typeof:a,type:e.type,key:i,ref:u,props:r,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:C}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return L().useCallback(e,t)},t.useContext=function(e,t){return L().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return L().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return L().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return L().useLayoutEffect(e,t)},t.useMemo=function(e,t){return L().useMemo(e,t)},t.useReducer=function(e,t,n){return L().useReducer(e,t,n)},t.useRef=function(e){return L().useRef(e)},t.useState=function(e){return L().useState(e)},t.version="17.0.1"},7220:function(e,t,n){"use strict";e.exports=n(2191)},8100:function(e,t,n){function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}e=n.nmd(e),n(2526),n(1817),n(1539),n(2165),n(6992),n(8783),n(3948),n(2443),n(3680),n(3706),n(2703),n(489),n(8309),n(8674),n(9714),n(4747),n(5069),n(7042);var o=function(e){"use strict";var t,n=Object.prototype,o=n.hasOwnProperty,a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",u=a.asyncIterator||"@@asyncIterator",l=a.toStringTag||"@@toStringTag";function c(e,t,n,r){var o=t&&t.prototype instanceof y?t:y,a=Object.create(o.prototype),i=new A(r||[]);return a._invoke=function(e,t,n){var r=f;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw a;return C()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var u=x(i,n);if(u){if(u===v)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var l=s(e,t,n);if("normal"===l.type){if(r=n.done?h:d,l.arg===v)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=h,n.method="throw",n.arg=l.arg)}}}(e,n,i),a}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",v={};function y(){}function m(){}function g(){}var b={};b[i]=function(){return this};var w=Object.getPrototypeOf,S=w&&w(w(O([])));S&&S!==n&&o.call(S,i)&&(b=S);var E=g.prototype=y.prototype=Object.create(b);function _(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function k(e,t){function n(a,i,u,l){var c=s(e[a],e,i);if("throw"!==c.type){var f=c.arg,d=f.value;return d&&"object"===r(d)&&o.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,u,l)}),(function(e){n("throw",e,u,l)})):t.resolve(d).then((function(e){f.value=e,u(f)}),(function(e){return n("throw",e,u,l)}))}l(c.arg)}var a;this._invoke=function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}}function x(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,x(e,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=s(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,v):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function R(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function A(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function O(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function n(){for(;++r<e.length;)if(o.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:C}}function C(){return{value:t,done:!0}}return m.prototype=E.constructor=g,g.constructor=m,g[l]=m.displayName="GeneratorFunction",e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,l in e||(e[l]="GeneratorFunction")),e.prototype=Object.create(E),e},e.awrap=function(e){return{__await:e}},_(k.prototype),k.prototype[u]=function(){return this},e.AsyncIterator=k,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new k(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},_(E),E[l]="Generator",E[i]=function(){return this},E.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=O,A.prototype={constructor:A,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(R),!e)for(var n in this)"t"===n.charAt(0)&&o.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(r,o){return u.type="throw",u.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],u=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var l=o.call(i,"catchLoc"),c=o.call(i,"finallyLoc");if(l&&c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var a=r;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),R(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;R(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:O(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),v}},e}("object"===r(e)?e.exports:{});try{regeneratorRuntime=o}catch(e){Function("r","regeneratorRuntime = r")(o)}},1970:function(e,t,n){"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}var o,a,i,u;if(n(2526),n(1817),n(1539),n(2165),n(6992),n(8783),n(3948),"object"===("undefined"==typeof performance?"undefined":r(performance))&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var c=Date,s=c.now();t.unstable_now=function(){return c.now()-s}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var f=null,d=null,p=function e(){if(null!==f)try{var n=t.unstable_now();f(!0,n),f=null}catch(t){throw setTimeout(e,0),t}};o=function(e){null!==f?setTimeout(o,0,e):(f=e,setTimeout(p,0))},a=function(e,t){d=setTimeout(e,t)},i=function(){clearTimeout(d)},t.unstable_shouldYield=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var h=window.setTimeout,v=window.clearTimeout;if("undefined"!=typeof console){var y=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof y&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,g=null,b=-1,w=5,S=0;t.unstable_shouldYield=function(){return t.unstable_now()>=S},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):w=0<e?Math.floor(1e3/e):5};var E=new MessageChannel,_=E.port2;E.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();S=e+w;try{g(!0,e)?_.postMessage(null):(m=!1,g=null)}catch(e){throw _.postMessage(null),e}}else m=!1},o=function(e){g=e,m||(m=!0,_.postMessage(null))},a=function(e,n){b=h((function(){e(t.unstable_now())}),n)},i=function(){v(b),b=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<R(o,t)))break e;e[r]=t,e[n]=o,n=r}}function x(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],u=a+1,l=e[u];if(void 0!==i&&0>R(i,n))void 0!==l&&0>R(l,i)?(e[r]=l,e[u]=n,r=u):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==l&&0>R(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function R(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var A=[],O=[],C=1,N=null,L=3,P=!1,j=!1,I=!1;function M(e){for(var t=x(O);null!==t;){if(null===t.callback)T(O);else{if(!(t.startTime<=e))break;T(O),t.sortIndex=t.expirationTime,k(A,t)}t=x(O)}}function U(e){if(I=!1,M(e),!j)if(null!==x(A))j=!0,o(F);else{var t=x(O);null!==t&&a(U,t.startTime-e)}}function F(e,n){j=!1,I&&(I=!1,i()),P=!0;var r=L;try{for(M(n),N=x(A);null!==N&&(!(N.expirationTime>n)||e&&!t.unstable_shouldYield());){var o=N.callback;if("function"==typeof o){N.callback=null,L=N.priorityLevel;var u=o(N.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?N.callback=u:N===x(A)&&T(A),M(n)}else T(A);N=x(A)}if(null!==N)var l=!0;else{var c=x(O);null!==c&&a(U,c.startTime-n),l=!1}return l}finally{N=null,L=r,P=!1}}var z=u;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){j||P||(j=!0,o(F))},t.unstable_getCurrentPriorityLevel=function(){return L},t.unstable_getFirstCallbackNode=function(){return x(A)},t.unstable_next=function(e){switch(L){case 1:case 2:case 3:var t=3;break;default:t=L}var n=L;L=t;try{return e()}finally{L=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=L;L=e;try{return t()}finally{L=n}},t.unstable_scheduleCallback=function(e,n,u){var l=t.unstable_now();switch(u="object"===r(u)&&null!==u&&"number"==typeof(u=u.delay)&&0<u?l+u:l,e){case 1:var c=-1;break;case 2:c=250;break;case 5:c=1073741823;break;case 4:c=1e4;break;default:c=5e3}return e={id:C++,callback:n,priorityLevel:e,startTime:u,expirationTime:c=u+c,sortIndex:-1},u>l?(e.sortIndex=u,k(O,e),null===x(A)&&e===x(O)&&(I?i():I=!0,a(U,u-l))):(e.sortIndex=c,k(A,e),j||P||(j=!0,o(F))),e},t.unstable_wrapCallback=function(e){var t=L;return function(){var n=L;L=t;try{return e.apply(this,arguments)}finally{L=n}}}},1419:function(e,t,n){"use strict";e.exports=n(1970)},3099:function(e){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},6077:function(e,t,n){var r=n(111);e.exports=function(e){if(!r(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype");return e}},1223:function(e,t,n){var r=n(5112),o=n(30),a=n(3070),i=r("unscopables"),u=Array.prototype;null==u[i]&&a.f(u,i,{configurable:!0,value:o(null)}),e.exports=function(e){u[i][e]=!0}},1530:function(e,t,n){"use strict";var r=n(8710).charAt;e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},5787:function(e){e.exports=function(e,t,n){if(!(e instanceof t))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return e}},9670:function(e,t,n){var r=n(111);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},4019:function(e){e.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},3331:function(e,t,n){"use strict";var r=n(7854),o=n(9781),a=n(4019),i=n(8880),u=n(2248),l=n(7293),c=n(5787),s=n(9958),f=n(7466),d=n(7067),p=n(1179),h=n(9518),v=n(7674),y=n(8006).f,m=n(3070).f,g=n(1285),b=n(8003),w=n(9909),S=w.get,E=w.set,_="ArrayBuffer",k="DataView",x="Wrong index",T=r.ArrayBuffer,R=T,A=r.DataView,O=A&&A.prototype,C=Object.prototype,N=r.RangeError,L=p.pack,P=p.unpack,j=function(e){return[255&e]},I=function(e){return[255&e,e>>8&255]},M=function(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]},U=function(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]},F=function(e){return L(e,23,4)},z=function(e){return L(e,52,8)},D=function(e,t){m(e.prototype,t,{get:function(){return S(this)[t]}})},V=function(e,t,n,r){var o=d(n),a=S(e);if(o+t>a.byteLength)throw N(x);var i=S(a.buffer).bytes,u=o+a.byteOffset,l=i.slice(u,u+t);return r?l:l.reverse()},B=function(e,t,n,r,o,a){var i=d(n),u=S(e);if(i+t>u.byteLength)throw N(x);for(var l=S(u.buffer).bytes,c=i+u.byteOffset,s=r(+o),f=0;f<t;f++)l[c+f]=s[a?f:t-f-1]};if(a){if(!l((function(){T(1)}))||!l((function(){new T(-1)}))||l((function(){return new T,new T(1.5),new T(NaN),T.name!=_}))){for(var $,W=(R=function(e){return c(this,R),new T(d(e))}).prototype=T.prototype,H=y(T),q=0;H.length>q;)($=H[q++])in R||i(R,$,T[$]);W.constructor=R}v&&h(O)!==C&&v(O,C);var G=new A(new R(2)),K=O.setInt8;G.setInt8(0,2147483648),G.setInt8(1,2147483649),!G.getInt8(0)&&G.getInt8(1)||u(O,{setInt8:function(e,t){K.call(this,e,t<<24>>24)},setUint8:function(e,t){K.call(this,e,t<<24>>24)}},{unsafe:!0})}else R=function(e){c(this,R,_);var t=d(e);E(this,{bytes:g.call(new Array(t),0),byteLength:t}),o||(this.byteLength=t)},A=function(e,t,n){c(this,A,k),c(e,R,k);var r=S(e).byteLength,a=s(t);if(a<0||a>r)throw N("Wrong offset");if(a+(n=void 0===n?r-a:f(n))>r)throw N("Wrong length");E(this,{buffer:e,byteLength:n,byteOffset:a}),o||(this.buffer=e,this.byteLength=n,this.byteOffset=a)},o&&(D(R,"byteLength"),D(A,"buffer"),D(A,"byteLength"),D(A,"byteOffset")),u(A.prototype,{getInt8:function(e){return V(this,1,e)[0]<<24>>24},getUint8:function(e){return V(this,1,e)[0]},getInt16:function(e){var t=V(this,2,e,arguments.length>1?arguments[1]:void 0);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=V(this,2,e,arguments.length>1?arguments[1]:void 0);return t[1]<<8|t[0]},getInt32:function(e){return U(V(this,4,e,arguments.length>1?arguments[1]:void 0))},getUint32:function(e){return U(V(this,4,e,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(e){return P(V(this,4,e,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(e){return P(V(this,8,e,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(e,t){B(this,1,e,j,t)},setUint8:function(e,t){B(this,1,e,j,t)},setInt16:function(e,t){B(this,2,e,I,t,arguments.length>2?arguments[2]:void 0)},setUint16:function(e,t){B(this,2,e,I,t,arguments.length>2?arguments[2]:void 0)},setInt32:function(e,t){B(this,4,e,M,t,arguments.length>2?arguments[2]:void 0)},setUint32:function(e,t){B(this,4,e,M,t,arguments.length>2?arguments[2]:void 0)},setFloat32:function(e,t){B(this,4,e,F,t,arguments.length>2?arguments[2]:void 0)},setFloat64:function(e,t){B(this,8,e,z,t,arguments.length>2?arguments[2]:void 0)}});b(R,_),b(A,k),e.exports={ArrayBuffer:R,DataView:A}},1285:function(e,t,n){"use strict";var r=n(7908),o=n(1400),a=n(7466);e.exports=function(e){for(var t=r(this),n=a(t.length),i=arguments.length,u=o(i>1?arguments[1]:void 0,n),l=i>2?arguments[2]:void 0,c=void 0===l?n:o(l,n);c>u;)t[u++]=e;return t}},8533:function(e,t,n){"use strict";var r=n(2092).forEach,o=n(9341)("forEach");e.exports=o?[].forEach:function(e){return r(this,e,arguments.length>1?arguments[1]:void 0)}},8457:function(e,t,n){"use strict";var r=n(9974),o=n(7908),a=n(3411),i=n(7659),u=n(7466),l=n(6135),c=n(1246);e.exports=function(e){var t,n,s,f,d,p,h=o(e),v="function"==typeof this?this:Array,y=arguments.length,m=y>1?arguments[1]:void 0,g=void 0!==m,b=c(h),w=0;if(g&&(m=r(m,y>2?arguments[2]:void 0,2)),null==b||v==Array&&i(b))for(n=new v(t=u(h.length));t>w;w++)p=g?m(h[w],w):h[w],l(n,w,p);else for(d=(f=b.call(h)).next,n=new v;!(s=d.call(f)).done;w++)p=g?a(f,m,[s.value,w],!0):s.value,l(n,w,p);return n.length=w,n}},1318:function(e,t,n){var r=n(5656),o=n(7466),a=n(1400),i=function(e){return function(t,n,i){var u,l=r(t),c=o(l.length),s=a(i,c);if(e&&n!=n){for(;c>s;)if((u=l[s++])!=u)return!0}else for(;c>s;s++)if((e||s in l)&&l[s]===n)return e||s||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},2092:function(e,t,n){var r=n(9974),o=n(8361),a=n(7908),i=n(7466),u=n(5417),l=[].push,c=function(e){var t=1==e,n=2==e,c=3==e,s=4==e,f=6==e,d=7==e,p=5==e||f;return function(h,v,y,m){for(var g,b,w=a(h),S=o(w),E=r(v,y,3),_=i(S.length),k=0,x=m||u,T=t?x(h,_):n||d?x(h,0):void 0;_>k;k++)if((p||k in S)&&(b=E(g=S[k],k,w),e))if(t)T[k]=b;else if(b)switch(e){case 3:return!0;case 5:return g;case 6:return k;case 2:l.call(T,g)}else switch(e){case 4:return!1;case 7:l.call(T,g)}return f?-1:c||s?s:T}};e.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterOut:c(7)}},1194:function(e,t,n){var r=n(7293),o=n(5112),a=n(7392),i=o("species");e.exports=function(e){return a>=51||!r((function(){var t=[];return(t.constructor={})[i]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},9341:function(e,t,n){"use strict";var r=n(7293);e.exports=function(e,t){var n=[][e];return!!n&&r((function(){n.call(null,t||function(){throw 1},1)}))}},3671:function(e,t,n){var r=n(3099),o=n(7908),a=n(8361),i=n(7466),u=function(e){return function(t,n,u,l){r(n);var c=o(t),s=a(c),f=i(c.length),d=e?f-1:0,p=e?-1:1;if(u<2)for(;;){if(d in s){l=s[d],d+=p;break}if(d+=p,e?d<0:f<=d)throw TypeError("Reduce of empty array with no initial value")}for(;e?d>=0:f>d;d+=p)d in s&&(l=n(l,s[d],d,c));return l}};e.exports={left:u(!1),right:u(!0)}},5417:function(e,t,n){var r=n(111),o=n(3157),a=n(5112)("species");e.exports=function(e,t){var n;return o(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!o(n.prototype)?r(n)&&null===(n=n[a])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===t?0:t)}},3411:function(e,t,n){var r=n(9670),o=n(9212);e.exports=function(e,t,n,a){try{return a?t(r(n)[0],n[1]):t(n)}catch(t){throw o(e),t}}},7072:function(e,t,n){var r=n(5112)("iterator"),o=!1;try{var a=0,i={next:function(){return{done:!!a++}},return:function(){o=!0}};i[r]=function(){return this},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var a={};a[r]=function(){return{next:function(){return{done:n=!0}}}},e(a)}catch(e){}return n}},4326:function(e){var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},648:function(e,t,n){var r=n(1694),o=n(4326),a=n(5112)("toStringTag"),i="Arguments"==o(function(){return arguments}());e.exports=r?o:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),a))?n:i?o(t):"Object"==(r=o(t))&&"function"==typeof t.callee?"Arguments":r}},1501:function(e,t,n){"use strict";var r=n(9670),o=n(3099);e.exports=function(){for(var e=r(this),t=o(e.add),n=0,a=arguments.length;n<a;n++)t.call(e,arguments[n]);return e}},4092:function(e,t,n){"use strict";var r=n(9670),o=n(3099);e.exports=function(){for(var e,t=r(this),n=o(t.delete),a=!0,i=0,u=arguments.length;i<u;i++)e=n.call(t,arguments[i]),a=a&&e;return!!a}},5631:function(e,t,n){"use strict";var r=n(3070).f,o=n(30),a=n(2248),i=n(9974),u=n(5787),l=n(408),c=n(654),s=n(6340),f=n(9781),d=n(2423).fastKey,p=n(9909),h=p.set,v=p.getterFor;e.exports={getConstructor:function(e,t,n,c){var s=e((function(e,r){u(e,s,t),h(e,{type:t,index:o(null),first:void 0,last:void 0,size:0}),f||(e.size=0),null!=r&&l(r,e[c],{that:e,AS_ENTRIES:n})})),p=v(t),y=function(e,t,n){var r,o,a=p(e),i=m(e,t);return i?i.value=n:(a.last=i={index:o=d(t,!0),key:t,value:n,previous:r=a.last,next:void 0,removed:!1},a.first||(a.first=i),r&&(r.next=i),f?a.size++:e.size++,"F"!==o&&(a.index[o]=i)),e},m=function(e,t){var n,r=p(e),o=d(t);if("F"!==o)return r.index[o];for(n=r.first;n;n=n.next)if(n.key==t)return n};return a(s.prototype,{clear:function(){for(var e=p(this),t=e.index,n=e.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete t[n.index],n=n.next;e.first=e.last=void 0,f?e.size=0:this.size=0},delete:function(e){var t=this,n=p(t),r=m(t,e);if(r){var o=r.next,a=r.previous;delete n.index[r.index],r.removed=!0,a&&(a.next=o),o&&(o.previous=a),n.first==r&&(n.first=o),n.last==r&&(n.last=a),f?n.size--:t.size--}return!!r},forEach:function(e){for(var t,n=p(this),r=i(e,arguments.length>1?arguments[1]:void 0,3);t=t?t.next:n.first;)for(r(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!m(this,e)}}),a(s.prototype,n?{get:function(e){var t=m(this,e);return t&&t.value},set:function(e,t){return y(this,0===e?0:e,t)}}:{add:function(e){return y(this,e=0===e?0:e,e)}}),f&&r(s.prototype,"size",{get:function(){return p(this).size}}),s},setStrong:function(e,t,n){var r=t+" Iterator",o=v(t),a=v(r);c(e,t,(function(e,t){h(this,{type:r,target:e,state:o(e),kind:t,last:void 0})}),(function(){for(var e=a(this),t=e.kind,n=e.last;n&&n.removed;)n=n.previous;return e.target&&(e.last=n=n?n.next:e.state.first)?"keys"==t?{value:n.key,done:!1}:"values"==t?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})}),n?"entries":"values",!n,!0),s(t)}}},9320:function(e,t,n){"use strict";var r=n(2248),o=n(2423).getWeakData,a=n(9670),i=n(111),u=n(5787),l=n(408),c=n(2092),s=n(6656),f=n(9909),d=f.set,p=f.getterFor,h=c.find,v=c.findIndex,y=0,m=function(e){return e.frozen||(e.frozen=new g)},g=function(){this.entries=[]},b=function(e,t){return h(e.entries,(function(e){return e[0]===t}))};g.prototype={get:function(e){var t=b(this,e);if(t)return t[1]},has:function(e){return!!b(this,e)},set:function(e,t){var n=b(this,e);n?n[1]=t:this.entries.push([e,t])},delete:function(e){var t=v(this.entries,(function(t){return t[0]===e}));return~t&&this.entries.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,c){var f=e((function(e,r){u(e,f,t),d(e,{type:t,id:y++,frozen:void 0}),null!=r&&l(r,e[c],{that:e,AS_ENTRIES:n})})),h=p(t),v=function(e,t,n){var r=h(e),i=o(a(t),!0);return!0===i?m(r).set(t,n):i[r.id]=n,e};return r(f.prototype,{delete:function(e){var t=h(this);if(!i(e))return!1;var n=o(e);return!0===n?m(t).delete(e):n&&s(n,t.id)&&delete n[t.id]},has:function(e){var t=h(this);if(!i(e))return!1;var n=o(e);return!0===n?m(t).has(e):n&&s(n,t.id)}}),r(f.prototype,n?{get:function(e){var t=h(this);if(i(e)){var n=o(e);return!0===n?m(t).get(e):n?n[t.id]:void 0}},set:function(e,t){return v(this,e,t)}}:{add:function(e){return v(this,e,!0)}}),f}}},7710:function(e,t,n){"use strict";var r=n(2109),o=n(7854),a=n(4705),i=n(1320),u=n(2423),l=n(408),c=n(5787),s=n(111),f=n(7293),d=n(7072),p=n(8003),h=n(9587);e.exports=function(e,t,n){var v=-1!==e.indexOf("Map"),y=-1!==e.indexOf("Weak"),m=v?"set":"add",g=o[e],b=g&&g.prototype,w=g,S={},E=function(e){var t=b[e];i(b,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return!(y&&!s(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return y&&!s(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return!(y&&!s(e))&&t.call(this,0===e?0:e)}:function(e,n){return t.call(this,0===e?0:e,n),this})};if(a(e,"function"!=typeof g||!(y||b.forEach&&!f((function(){(new g).entries().next()})))))w=n.getConstructor(t,e,v,m),u.REQUIRED=!0;else if(a(e,!0)){var _=new w,k=_[m](y?{}:-0,1)!=_,x=f((function(){_.has(1)})),T=d((function(e){new g(e)})),R=!y&&f((function(){for(var e=new g,t=5;t--;)e[m](t,t);return!e.has(-0)}));T||((w=t((function(t,n){c(t,w,e);var r=h(new g,t,w);return null!=n&&l(n,r[m],{that:r,AS_ENTRIES:v}),r}))).prototype=b,b.constructor=w),(x||R)&&(E("delete"),E("has"),v&&E("get")),(R||k)&&E(m),y&&b.clear&&delete b.clear}return S[e]=w,r({global:!0,forced:w!=g},S),p(w,e),y||n.setStrong(w,e,v),w}},9920:function(e,t,n){var r=n(6656),o=n(3887),a=n(1236),i=n(3070);e.exports=function(e,t){for(var n=o(t),u=i.f,l=a.f,c=0;c<n.length;c++){var s=n[c];r(e,s)||u(e,s,l(t,s))}}},4964:function(e,t,n){var r=n(5112)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,"/./"[e](t)}catch(e){}}return!1}},8544:function(e,t,n){var r=n(7293);e.exports=!r((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},4994:function(e,t,n){"use strict";var r=n(3383).IteratorPrototype,o=n(30),a=n(9114),i=n(8003),u=n(7497),l=function(){return this};e.exports=function(e,t,n){var c=t+" Iterator";return e.prototype=o(r,{next:a(1,n)}),i(e,c,!1,!0),u[c]=l,e}},8880:function(e,t,n){var r=n(9781),o=n(3070),a=n(9114);e.exports=r?function(e,t,n){return o.f(e,t,a(1,n))}:function(e,t,n){return e[t]=n,e}},9114:function(e){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},6135:function(e,t,n){"use strict";var r=n(7593),o=n(3070),a=n(9114);e.exports=function(e,t,n){var i=r(t);i in e?o.f(e,i,a(0,n)):e[i]=n}},654:function(e,t,n){"use strict";var r=n(2109),o=n(4994),a=n(9518),i=n(7674),u=n(8003),l=n(8880),c=n(1320),s=n(5112),f=n(1913),d=n(7497),p=n(3383),h=p.IteratorPrototype,v=p.BUGGY_SAFARI_ITERATORS,y=s("iterator"),m="keys",g="values",b="entries",w=function(){return this};e.exports=function(e,t,n,s,p,S,E){o(n,t,s);var _,k,x,T=function(e){if(e===p&&N)return N;if(!v&&e in O)return O[e];switch(e){case m:case g:case b:return function(){return new n(this,e)}}return function(){return new n(this)}},R=t+" Iterator",A=!1,O=e.prototype,C=O[y]||O["@@iterator"]||p&&O[p],N=!v&&C||T(p),L="Array"==t&&O.entries||C;if(L&&(_=a(L.call(new e)),h!==Object.prototype&&_.next&&(f||a(_)===h||(i?i(_,h):"function"!=typeof _[y]&&l(_,y,w)),u(_,R,!0,!0),f&&(d[R]=w))),p==g&&C&&C.name!==g&&(A=!0,N=function(){return C.call(this)}),f&&!E||O[y]===N||l(O,y,N),d[t]=N,p)if(k={values:T(g),keys:S?N:T(m),entries:T(b)},E)for(x in k)(v||A||!(x in O))&&c(O,x,k[x]);else r({target:t,proto:!0,forced:v||A},k);return k}},7235:function(e,t,n){var r=n(857),o=n(6656),a=n(6061),i=n(3070).f;e.exports=function(e){var t=r.Symbol||(r.Symbol={});o(t,e)||i(t,e,{value:a.f(e)})}},9781:function(e,t,n){var r=n(7293);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:function(e,t,n){var r=n(7854),o=n(111),a=r.document,i=o(a)&&o(a.createElement);e.exports=function(e){return i?a.createElement(e):{}}},8324:function(e){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},7871:function(e){e.exports="object"==typeof window},6833:function(e,t,n){var r=n(8113);e.exports=/(?:iphone|ipod|ipad).*applewebkit/i.test(r)},5268:function(e,t,n){var r=n(4326),o=n(7854);e.exports="process"==r(o.process)},853:function(e,t,n){var r=n(8113);e.exports=/web0s(?!.*chrome)/i.test(r)},8113:function(e,t,n){var r=n(5005);e.exports=r("navigator","userAgent")||""},7392:function(e,t,n){var r,o,a=n(7854),i=n(8113),u=a.process,l=u&&u.versions,c=l&&l.v8;c?o=(r=c.split("."))[0]<4?1:r[0]+r[1]:i&&(!(r=i.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=i.match(/Chrome\/(\d+)/))&&(o=r[1]),e.exports=o&&+o},748:function(e){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:function(e,t,n){var r=n(7854),o=n(1236).f,a=n(8880),i=n(1320),u=n(3505),l=n(9920),c=n(4705);e.exports=function(e,t){var n,s,f,d,p,h=e.target,v=e.global,y=e.stat;if(n=v?r:y?r[h]||u(h,{}):(r[h]||{}).prototype)for(s in t){if(d=t[s],f=e.noTargetGet?(p=o(n,s))&&p.value:n[s],!c(v?s:h+(y?".":"#")+s,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;l(d,f)}(e.sham||f&&f.sham)&&a(d,"sham",!0),i(n,s,d,e)}}},7293:function(e){e.exports=function(e){try{return!!e()}catch(e){return!0}}},7007:function(e,t,n){"use strict";n(4916);var r=n(1320),o=n(2261),a=n(7293),i=n(5112),u=n(8880),l=i("species"),c=RegExp.prototype,s=!a((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),f="$0"==="a".replace(/./,"$0"),d=i("replace"),p=!!/./[d]&&""===/./[d]("a","$0"),h=!a((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}));e.exports=function(e,t,n,d){var v=i(e),y=!a((function(){var t={};return t[v]=function(){return 7},7!=""[e](t)})),m=y&&!a((function(){var t=!1,n=/a/;return"split"===e&&((n={}).constructor={},n.constructor[l]=function(){return n},n.flags="",n[v]=/./[v]),n.exec=function(){return t=!0,null},n[v](""),!t}));if(!y||!m||"replace"===e&&(!s||!f||p)||"split"===e&&!h){var g=/./[v],b=n(v,""[e],(function(e,t,n,r,a){var i=t.exec;return i===o||i===c.exec?y&&!a?{done:!0,value:g.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}}),{REPLACE_KEEPS_$0:f,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:p}),w=b[0],S=b[1];r(String.prototype,e,w),r(c,v,2==t?function(e,t){return S.call(e,this,t)}:function(e){return S.call(e,this)})}d&&u(c[v],"sham",!0)}},6677:function(e,t,n){var r=n(7293);e.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},9974:function(e,t,n){var r=n(3099);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},7065:function(e,t,n){"use strict";var r=n(3099),o=n(111),a=[].slice,i={},u=function(e,t,n){if(!(t in i)){for(var r=[],o=0;o<t;o++)r[o]="a["+o+"]";i[t]=Function("C,a","return new C("+r.join(",")+")")}return i[t](e,n)};e.exports=Function.bind||function(e){var t=r(this),n=a.call(arguments,1),i=function(){var r=n.concat(a.call(arguments));return this instanceof i?u(t,r.length,r):t.apply(e,r)};return o(t.prototype)&&(i.prototype=t.prototype),i}},5005:function(e,t,n){var r=n(857),o=n(7854),a=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?a(r[e])||a(o[e]):r[e]&&r[e][t]||o[e]&&o[e][t]}},1246:function(e,t,n){var r=n(648),o=n(7497),a=n(5112)("iterator");e.exports=function(e){if(null!=e)return e[a]||e["@@iterator"]||o[r(e)]}},8554:function(e,t,n){var r=n(9670),o=n(1246);e.exports=function(e){var t=o(e);if("function"!=typeof t)throw TypeError(String(e)+" is not iterable");return r(t.call(e))}},4647:function(e,t,n){var r=n(1913),o=n(8554);e.exports=r?o:function(e){return Map.prototype.entries.call(e)}},6767:function(e,t,n){var r=n(1913),o=n(8554);e.exports=r?o:function(e){return Set.prototype.values.call(e)}},647:function(e,t,n){var r=n(7908),o=Math.floor,a="".replace,i=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,u=/\$([$&'`]|\d{1,2})/g;e.exports=function(e,t,n,l,c,s){var f=n+e.length,d=l.length,p=u;return void 0!==c&&(c=r(c),p=i),a.call(s,p,(function(r,a){var i;switch(a.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,n);case"'":return t.slice(f);case"<":i=c[a.slice(1,-1)];break;default:var u=+a;if(0===u)return r;if(u>d){var s=o(u/10);return 0===s?r:s<=d?void 0===l[s-1]?a.charAt(1):l[s-1]+a.charAt(1):r}i=l[u-1]}return void 0===i?"":i}))}},7854:function(e,t,n){var r=function(e){return e&&e.Math==Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n.g&&n.g)||function(){return this}()||Function("return this")()},6656:function(e,t,n){var r=n(7908),o={}.hasOwnProperty;e.exports=function(e,t){return o.call(r(e),t)}},3501:function(e){e.exports={}},842:function(e,t,n){var r=n(7854);e.exports=function(e,t){var n=r.console;n&&n.error&&(1===arguments.length?n.error(e):n.error(e,t))}},490:function(e,t,n){var r=n(5005);e.exports=r("document","documentElement")},4664:function(e,t,n){var r=n(9781),o=n(7293),a=n(317);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},1179:function(e){var t=Math.abs,n=Math.pow,r=Math.floor,o=Math.log,a=Math.LN2;e.exports={pack:function(e,i,u){var l,c,s,f=new Array(u),d=8*u-i-1,p=(1<<d)-1,h=p>>1,v=23===i?n(2,-24)-n(2,-77):0,y=e<0||0===e&&1/e<0?1:0,m=0;for((e=t(e))!=e||e===1/0?(c=e!=e?1:0,l=p):(l=r(o(e)/a),e*(s=n(2,-l))<1&&(l--,s*=2),(e+=l+h>=1?v/s:v*n(2,1-h))*s>=2&&(l++,s/=2),l+h>=p?(c=0,l=p):l+h>=1?(c=(e*s-1)*n(2,i),l+=h):(c=e*n(2,h-1)*n(2,i),l=0));i>=8;f[m++]=255&c,c/=256,i-=8);for(l=l<<i|c,d+=i;d>0;f[m++]=255&l,l/=256,d-=8);return f[--m]|=128*y,f},unpack:function(e,t){var r,o=e.length,a=8*o-t-1,i=(1<<a)-1,u=i>>1,l=a-7,c=o-1,s=e[c--],f=127&s;for(s>>=7;l>0;f=256*f+e[c],c--,l-=8);for(r=f&(1<<-l)-1,f>>=-l,l+=t;l>0;r=256*r+e[c],c--,l-=8);if(0===f)f=1-u;else{if(f===i)return r?NaN:s?-1/0:1/0;r+=n(2,t),f-=u}return(s?-1:1)*r*n(2,f-t)}}},8361:function(e,t,n){var r=n(7293),o=n(4326),a="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?a.call(e,""):Object(e)}:Object},9587:function(e,t,n){var r=n(111),o=n(7674);e.exports=function(e,t,n){var a,i;return o&&"function"==typeof(a=t.constructor)&&a!==n&&r(i=a.prototype)&&i!==n.prototype&&o(e,i),e}},2788:function(e,t,n){var r=n(5465),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(e){return o.call(e)}),e.exports=r.inspectSource},2423:function(e,t,n){var r=n(3501),o=n(111),a=n(6656),i=n(3070).f,u=n(9711),l=n(6677),c=u("meta"),s=0,f=Object.isExtensible||function(){return!0},d=function(e){i(e,c,{value:{objectID:"O"+ ++s,weakData:{}}})},p=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!a(e,c)){if(!f(e))return"F";if(!t)return"E";d(e)}return e[c].objectID},getWeakData:function(e,t){if(!a(e,c)){if(!f(e))return!0;if(!t)return!1;d(e)}return e[c].weakData},onFreeze:function(e){return l&&p.REQUIRED&&f(e)&&!a(e,c)&&d(e),e}};r[c]=!0},9909:function(e,t,n){var r,o,a,i=n(8536),u=n(7854),l=n(111),c=n(8880),s=n(6656),f=n(5465),d=n(6200),p=n(3501),h="Object already initialized",v=u.WeakMap;if(i||f.state){var y=f.state||(f.state=new v),m=y.get,g=y.has,b=y.set;r=function(e,t){if(g.call(y,e))throw new TypeError(h);return t.facade=e,b.call(y,e,t),t},o=function(e){return m.call(y,e)||{}},a=function(e){return g.call(y,e)}}else{var w=d("state");p[w]=!0,r=function(e,t){if(s(e,w))throw new TypeError(h);return t.facade=e,c(e,w,t),t},o=function(e){return s(e,w)?e[w]:{}},a=function(e){return s(e,w)}}e.exports={set:r,get:o,has:a,enforce:function(e){return a(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!l(t)||(n=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},7659:function(e,t,n){var r=n(5112),o=n(7497),a=r("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||i[a]===e)}},3157:function(e,t,n){var r=n(4326);e.exports=Array.isArray||function(e){return"Array"==r(e)}},4705:function(e,t,n){var r=n(7293),o=/#|\.prototype\./,a=function(e,t){var n=u[i(e)];return n==c||n!=l&&("function"==typeof t?r(t):!!t)},i=a.normalize=function(e){return String(e).replace(o,".").toLowerCase()},u=a.data={},l=a.NATIVE="N",c=a.POLYFILL="P";e.exports=a},111:function(e){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},1913:function(e){e.exports=!1},7850:function(e,t,n){var r=n(111),o=n(4326),a=n(5112)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[a])?!!t:"RegExp"==o(e))}},408:function(e,t,n){var r=n(9670),o=n(7659),a=n(7466),i=n(9974),u=n(1246),l=n(9212),c=function(e,t){this.stopped=e,this.result=t};e.exports=function(e,t,n){var s,f,d,p,h,v,y,m=n&&n.that,g=!(!n||!n.AS_ENTRIES),b=!(!n||!n.IS_ITERATOR),w=!(!n||!n.INTERRUPTED),S=i(t,m,1+g+w),E=function(e){return s&&l(s),new c(!0,e)},_=function(e){return g?(r(e),w?S(e[0],e[1],E):S(e[0],e[1])):w?S(e,E):S(e)};if(b)s=e;else{if("function"!=typeof(f=u(e)))throw TypeError("Target is not iterable");if(o(f)){for(d=0,p=a(e.length);p>d;d++)if((h=_(e[d]))&&h instanceof c)return h;return new c(!1)}s=f.call(e)}for(v=s.next;!(y=v.call(s)).done;){try{h=_(y.value)}catch(e){throw l(s),e}if("object"==typeof h&&h&&h instanceof c)return h}return new c(!1)}},9212:function(e,t,n){var r=n(9670);e.exports=function(e){var t=e.return;if(void 0!==t)return r(t.call(e)).value}},3383:function(e,t,n){"use strict";var r,o,a,i=n(7293),u=n(9518),l=n(8880),c=n(6656),s=n(5112),f=n(1913),d=s("iterator"),p=!1;[].keys&&("next"in(a=[].keys())?(o=u(u(a)))!==Object.prototype&&(r=o):p=!0);var h=null==r||i((function(){var e={};return r[d].call(e)!==e}));h&&(r={}),f&&!h||c(r,d)||l(r,d,(function(){return this})),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:p}},7497:function(e){e.exports={}},5948:function(e,t,n){var r,o,a,i,u,l,c,s,f=n(7854),d=n(1236).f,p=n(261).set,h=n(6833),v=n(853),y=n(5268),m=f.MutationObserver||f.WebKitMutationObserver,g=f.document,b=f.process,w=f.Promise,S=d(f,"queueMicrotask"),E=S&&S.value;E||(r=function(){var e,t;for(y&&(e=b.domain)&&e.exit();o;){t=o.fn,o=o.next;try{t()}catch(e){throw o?i():a=void 0,e}}a=void 0,e&&e.enter()},h||y||v||!m||!g?w&&w.resolve?((c=w.resolve(void 0)).constructor=w,s=c.then,i=function(){s.call(c,r)}):i=y?function(){b.nextTick(r)}:function(){p.call(f,r)}:(u=!0,l=g.createTextNode(""),new m(r).observe(l,{characterData:!0}),i=function(){l.data=u=!u})),e.exports=E||function(e){var t={fn:e,next:void 0};a&&(a.next=t),o||(o=t,i()),a=t}},3366:function(e,t,n){var r=n(7854);e.exports=r.Promise},133:function(e,t,n){var r=n(7392),o=n(7293);e.exports=!!Object.getOwnPropertySymbols&&!o((function(){return!String(Symbol())||!Symbol.sham&&r&&r<41}))},590:function(e,t,n){var r=n(7293),o=n(5112),a=n(1913),i=o("iterator");e.exports=!r((function(){var e=new URL("b?a=1&b=2&c=3","http://a"),t=e.searchParams,n="";return e.pathname="c%20d",t.forEach((function(e,r){t.delete("b"),n+=r+e})),a&&!e.toJSON||!t.sort||"http://a/c%20d?a=1&c=3"!==e.href||"3"!==t.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!t[i]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==n||"x"!==new URL("http://x",void 0).host}))},8536:function(e,t,n){var r=n(7854),o=n(2788),a=r.WeakMap;e.exports="function"==typeof a&&/native code/.test(o(a))},8523:function(e,t,n){"use strict";var r=n(3099),o=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)};e.exports.f=function(e){return new o(e)}},3929:function(e,t,n){var r=n(7850);e.exports=function(e){if(r(e))throw TypeError("The method doesn't accept regular expressions");return e}},1574:function(e,t,n){"use strict";var r=n(9781),o=n(7293),a=n(1956),i=n(5181),u=n(5296),l=n(7908),c=n(8361),s=Object.assign,f=Object.defineProperty;e.exports=!s||o((function(){if(r&&1!==s({b:1},s(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol(),o="abcdefghijklmnopqrst";return e[n]=7,o.split("").forEach((function(e){t[e]=e})),7!=s({},e)[n]||a(s({},t)).join("")!=o}))?function(e,t){for(var n=l(e),o=arguments.length,s=1,f=i.f,d=u.f;o>s;)for(var p,h=c(arguments[s++]),v=f?a(h).concat(f(h)):a(h),y=v.length,m=0;y>m;)p=v[m++],r&&!d.call(h,p)||(n[p]=h[p]);return n}:s},30:function(e,t,n){var r,o=n(9670),a=n(6048),i=n(748),u=n(3501),l=n(490),c=n(317),s=n(6200)("IE_PROTO"),f=function(){},d=function(e){return"<script>"+e+"<\/script>"},p=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;p=r?function(e){e.write(d("")),e.close();var t=e.parentWindow.Object;return e=null,t}(r):((t=c("iframe")).style.display="none",l.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(d("document.F=Object")),e.close(),e.F);for(var n=i.length;n--;)delete p.prototype[i[n]];return p()};u[s]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(f.prototype=o(e),n=new f,f.prototype=null,n[s]=e):n=p(),void 0===t?n:a(n,t)}},6048:function(e,t,n){var r=n(9781),o=n(3070),a=n(9670),i=n(1956);e.exports=r?Object.defineProperties:function(e,t){a(e);for(var n,r=i(t),u=r.length,l=0;u>l;)o.f(e,n=r[l++],t[n]);return e}},3070:function(e,t,n){var r=n(9781),o=n(4664),a=n(9670),i=n(7593),u=Object.defineProperty;t.f=r?u:function(e,t,n){if(a(e),t=i(t,!0),a(n),o)try{return u(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},1236:function(e,t,n){var r=n(9781),o=n(5296),a=n(9114),i=n(5656),u=n(7593),l=n(6656),c=n(4664),s=Object.getOwnPropertyDescriptor;t.f=r?s:function(e,t){if(e=i(e),t=u(t,!0),c)try{return s(e,t)}catch(e){}if(l(e,t))return a(!o.f.call(e,t),e[t])}},1156:function(e,t,n){var r=n(5656),o=n(8006).f,a={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==a.call(e)?function(e){try{return o(e)}catch(e){return i.slice()}}(e):o(r(e))}},8006:function(e,t,n){var r=n(6324),o=n(748).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},5181:function(e,t){t.f=Object.getOwnPropertySymbols},9518:function(e,t,n){var r=n(6656),o=n(7908),a=n(6200),i=n(8544),u=a("IE_PROTO"),l=Object.prototype;e.exports=i?Object.getPrototypeOf:function(e){return e=o(e),r(e,u)?e[u]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?l:null}},6324:function(e,t,n){var r=n(6656),o=n(5656),a=n(1318).indexOf,i=n(3501);e.exports=function(e,t){var n,u=o(e),l=0,c=[];for(n in u)!r(i,n)&&r(u,n)&&c.push(n);for(;t.length>l;)r(u,n=t[l++])&&(~a(c,n)||c.push(n));return c}},1956:function(e,t,n){var r=n(6324),o=n(748);e.exports=Object.keys||function(e){return r(e,o)}},5296:function(e,t){"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,o=r&&!n.call({1:2},1);t.f=o?function(e){var t=r(this,e);return!!t&&t.enumerable}:n},7674:function(e,t,n){var r=n(9670),o=n(6077);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),t=n instanceof Array}catch(e){}return function(n,a){return r(n),o(a),t?e.call(n,a):n.__proto__=a,n}}():void 0)},288:function(e,t,n){"use strict";var r=n(1694),o=n(648);e.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},3887:function(e,t,n){var r=n(5005),o=n(8006),a=n(5181),i=n(9670);e.exports=r("Reflect","ownKeys")||function(e){var t=o.f(i(e)),n=a.f;return n?t.concat(n(e)):t}},857:function(e,t,n){var r=n(7854);e.exports=r},2534:function(e){e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},9478:function(e,t,n){var r=n(9670),o=n(111),a=n(8523);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=a.f(e);return(0,n.resolve)(t),n.promise}},2248:function(e,t,n){var r=n(1320);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},1320:function(e,t,n){var r=n(7854),o=n(8880),a=n(6656),i=n(3505),u=n(2788),l=n(9909),c=l.get,s=l.enforce,f=String(String).split("String");(e.exports=function(e,t,n,u){var l,c=!!u&&!!u.unsafe,d=!!u&&!!u.enumerable,p=!!u&&!!u.noTargetGet;"function"==typeof n&&("string"!=typeof t||a(n,"name")||o(n,"name",t),(l=s(n)).source||(l.source=f.join("string"==typeof t?t:""))),e!==r?(c?!p&&e[t]&&(d=!0):delete e[t],d?e[t]=n:o(e,t,n)):d?e[t]=n:i(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||u(this)}))},7651:function(e,t,n){var r=n(4326),o=n(2261);e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var a=n.call(e,t);if("object"!=typeof a)throw TypeError("RegExp exec method returned something other than an Object or null");return a}if("RegExp"!==r(e))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(e,t)}},2261:function(e,t,n){"use strict";var r,o,a=n(7066),i=n(2999),u=n(2309),l=RegExp.prototype.exec,c=u("native-string-replace",String.prototype.replace),s=l,f=(r=/a/,o=/b*/g,l.call(r,"a"),l.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),d=i.UNSUPPORTED_Y||i.BROKEN_CARET,p=void 0!==/()??/.exec("")[1];(f||p||d)&&(s=function(e){var t,n,r,o,i=this,u=d&&i.sticky,s=a.call(i),h=i.source,v=0,y=e;return u&&(-1===(s=s.replace("y","")).indexOf("g")&&(s+="g"),y=String(e).slice(i.lastIndex),i.lastIndex>0&&(!i.multiline||i.multiline&&"\n"!==e[i.lastIndex-1])&&(h="(?: "+h+")",y=" "+y,v++),n=new RegExp("^(?:"+h+")",s)),p&&(n=new RegExp("^"+h+"$(?!\\s)",s)),f&&(t=i.lastIndex),r=l.call(u?n:i,y),u?r?(r.input=r.input.slice(v),r[0]=r[0].slice(v),r.index=i.lastIndex,i.lastIndex+=r[0].length):i.lastIndex=0:f&&r&&(i.lastIndex=i.global?r.index+r[0].length:t),p&&r&&r.length>1&&c.call(r[0],n,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),e.exports=s},7066:function(e,t,n){"use strict";var r=n(9670);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},2999:function(e,t,n){"use strict";var r=n(7293);function o(e,t){return RegExp(e,t)}t.UNSUPPORTED_Y=r((function(){var e=o("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),t.BROKEN_CARET=r((function(){var e=o("^r","gy");return e.lastIndex=2,null!=e.exec("str")}))},4488:function(e){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},6465:function(e){e.exports=function(e,t){return e===t||e!=e&&t!=t}},1150:function(e){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},3505:function(e,t,n){var r=n(7854),o=n(8880);e.exports=function(e,t){try{o(r,e,t)}catch(n){r[e]=t}return t}},6340:function(e,t,n){"use strict";var r=n(5005),o=n(3070),a=n(5112),i=n(9781),u=a("species");e.exports=function(e){var t=r(e),n=o.f;i&&t&&!t[u]&&n(t,u,{configurable:!0,get:function(){return this}})}},8003:function(e,t,n){var r=n(3070).f,o=n(6656),a=n(5112)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,a)&&r(e,a,{configurable:!0,value:t})}},6200:function(e,t,n){var r=n(2309),o=n(9711),a=r("keys");e.exports=function(e){return a[e]||(a[e]=o(e))}},5465:function(e,t,n){var r=n(7854),o=n(3505),a="__core-js_shared__",i=r[a]||o(a,{});e.exports=i},2309:function(e,t,n){var r=n(1913),o=n(5465);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.12.1",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:function(e,t,n){var r=n(9670),o=n(3099),a=n(5112)("species");e.exports=function(e,t){var n,i=r(e).constructor;return void 0===i||null==(n=r(i)[a])?t:o(n)}},8710:function(e,t,n){var r=n(9958),o=n(4488),a=function(e){return function(t,n){var a,i,u=String(o(t)),l=r(n),c=u.length;return l<0||l>=c?e?"":void 0:(a=u.charCodeAt(l))<55296||a>56319||l+1===c||(i=u.charCodeAt(l+1))<56320||i>57343?e?u.charAt(l):a:e?u.slice(l,l+2):i-56320+(a-55296<<10)+65536}};e.exports={codeAt:a(!1),charAt:a(!0)}},3197:function(e){"use strict";var t=2147483647,n=/[^\0-\u007E]/,r=/[.\u3002\uFF0E\uFF61]/g,o="Overflow: input needs wider integers to process",a=Math.floor,i=String.fromCharCode,u=function(e){return e+22+75*(e<26)},l=function(e,t,n){var r=0;for(e=n?a(e/700):e>>1,e+=a(e/t);e>455;r+=36)e=a(e/35);return a(r+36*e/(e+38))},c=function(e){var n=[];e=function(e){for(var t=[],n=0,r=e.length;n<r;){var o=e.charCodeAt(n++);if(o>=55296&&o<=56319&&n<r){var a=e.charCodeAt(n++);56320==(64512&a)?t.push(((1023&o)<<10)+(1023&a)+65536):(t.push(o),n--)}else t.push(o)}return t}(e);var r,c,s=e.length,f=128,d=0,p=72;for(r=0;r<e.length;r++)(c=e[r])<128&&n.push(i(c));var h=n.length,v=h;for(h&&n.push("-");v<s;){var y=t;for(r=0;r<e.length;r++)(c=e[r])>=f&&c<y&&(y=c);var m=v+1;if(y-f>a((t-d)/m))throw RangeError(o);for(d+=(y-f)*m,f=y,r=0;r<e.length;r++){if((c=e[r])<f&&++d>t)throw RangeError(o);if(c==f){for(var g=d,b=36;;b+=36){var w=b<=p?1:b>=p+26?26:b-p;if(g<w)break;var S=g-w,E=36-w;n.push(i(u(w+S%E))),g=a(S/E)}n.push(i(u(g))),p=l(d,m,v==h),d=0,++v}}++d,++f}return n.join("")};e.exports=function(e){var t,o,a=[],i=e.toLowerCase().replace(r,".").split(".");for(t=0;t<i.length;t++)o=i[t],a.push(n.test(o)?"xn--"+c(o):o);return a.join(".")}},6091:function(e,t,n){var r=n(7293),o=n(1361);e.exports=function(e){return r((function(){return!!o[e]()||"​᠎"!="​᠎"[e]()||o[e].name!==e}))}},3111:function(e,t,n){var r=n(4488),o="["+n(1361)+"]",a=RegExp("^"+o+o+"*"),i=RegExp(o+o+"*$"),u=function(e){return function(t){var n=String(r(t));return 1&e&&(n=n.replace(a,"")),2&e&&(n=n.replace(i,"")),n}};e.exports={start:u(1),end:u(2),trim:u(3)}},261:function(e,t,n){var r,o,a,i=n(7854),u=n(7293),l=n(9974),c=n(490),s=n(317),f=n(6833),d=n(5268),p=i.location,h=i.setImmediate,v=i.clearImmediate,y=i.process,m=i.MessageChannel,g=i.Dispatch,b=0,w={},S=function(e){if(w.hasOwnProperty(e)){var t=w[e];delete w[e],t()}},E=function(e){return function(){S(e)}},_=function(e){S(e.data)},k=function(e){i.postMessage(e+"",p.protocol+"//"+p.host)};h&&v||(h=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return w[++b]=function(){("function"==typeof e?e:Function(e)).apply(void 0,t)},r(b),b},v=function(e){delete w[e]},d?r=function(e){y.nextTick(E(e))}:g&&g.now?r=function(e){g.now(E(e))}:m&&!f?(a=(o=new m).port2,o.port1.onmessage=_,r=l(a.postMessage,a,1)):i.addEventListener&&"function"==typeof postMessage&&!i.importScripts&&p&&"file:"!==p.protocol&&!u(k)?(r=k,i.addEventListener("message",_,!1)):r="onreadystatechange"in s("script")?function(e){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),S(e)}}:function(e){setTimeout(E(e),0)}),e.exports={set:h,clear:v}},1400:function(e,t,n){var r=n(9958),o=Math.max,a=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):a(n,t)}},7067:function(e,t,n){var r=n(9958),o=n(7466);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=o(t);if(t!==n)throw RangeError("Wrong length or index");return n}},5656:function(e,t,n){var r=n(8361),o=n(4488);e.exports=function(e){return r(o(e))}},9958:function(e){var t=Math.ceil,n=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?n:t)(e)}},7466:function(e,t,n){var r=n(9958),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},7908:function(e,t,n){var r=n(4488);e.exports=function(e){return Object(r(e))}},7593:function(e,t,n){var r=n(111);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},1694:function(e,t,n){var r={};r[n(5112)("toStringTag")]="z",e.exports="[object z]"===String(r)},9711:function(e){var t=0,n=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++t+n).toString(36)}},3307:function(e,t,n){var r=n(133);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},6061:function(e,t,n){var r=n(5112);t.f=r},5112:function(e,t,n){var r=n(7854),o=n(2309),a=n(6656),i=n(9711),u=n(133),l=n(3307),c=o("wks"),s=r.Symbol,f=l?s:s&&s.withoutSetter||i;e.exports=function(e){return a(c,e)&&(u||"string"==typeof c[e])||(u&&a(s,e)?c[e]=s[e]:c[e]=f("Symbol."+e)),c[e]}},1361:function(e){e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},8264:function(e,t,n){"use strict";var r=n(2109),o=n(7854),a=n(3331),i=n(6340),u=a.ArrayBuffer;r({global:!0,forced:o.ArrayBuffer!==u},{ArrayBuffer:u}),i("ArrayBuffer")},9575:function(e,t,n){"use strict";var r=n(2109),o=n(7293),a=n(3331),i=n(9670),u=n(1400),l=n(7466),c=n(6707),s=a.ArrayBuffer,f=a.DataView,d=s.prototype.slice;r({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:o((function(){return!new s(2).slice(1,void 0).byteLength}))},{slice:function(e,t){if(void 0!==d&&void 0===t)return d.call(i(this),e);for(var n=i(this).byteLength,r=u(e,n),o=u(void 0===t?n:t,n),a=new(c(this,s))(l(o-r)),p=new f(this),h=new f(a),v=0;r<o;)h.setUint8(v++,p.getUint8(r++));return a}})},2222:function(e,t,n){"use strict";var r=n(2109),o=n(7293),a=n(3157),i=n(111),u=n(7908),l=n(7466),c=n(6135),s=n(5417),f=n(1194),d=n(5112),p=n(7392),h=d("isConcatSpreadable"),v=9007199254740991,y="Maximum allowed index exceeded",m=p>=51||!o((function(){var e=[];return e[h]=!1,e.concat()[0]!==e})),g=f("concat"),b=function(e){if(!i(e))return!1;var t=e[h];return void 0!==t?!!t:a(e)};r({target:"Array",proto:!0,forced:!m||!g},{concat:function(e){var t,n,r,o,a,i=u(this),f=s(i,0),d=0;for(t=-1,r=arguments.length;t<r;t++)if(b(a=-1===t?i:arguments[t])){if(d+(o=l(a.length))>v)throw TypeError(y);for(n=0;n<o;n++,d++)n in a&&c(f,d,a[n])}else{if(d>=v)throw TypeError(y);c(f,d++,a)}return f.length=d,f}})},3290:function(e,t,n){var r=n(2109),o=n(1285),a=n(1223);r({target:"Array",proto:!0},{fill:o}),a("fill")},7327:function(e,t,n){"use strict";var r=n(2109),o=n(2092).filter;r({target:"Array",proto:!0,forced:!n(1194)("filter")},{filter:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},9826:function(e,t,n){"use strict";var r=n(2109),o=n(2092).find,a=n(1223),i="find",u=!0;i in[]&&Array(1).find((function(){u=!1})),r({target:"Array",proto:!0,forced:u},{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),a(i)},1038:function(e,t,n){var r=n(2109),o=n(8457);r({target:"Array",stat:!0,forced:!n(7072)((function(e){Array.from(e)}))},{from:o})},6699:function(e,t,n){"use strict";var r=n(2109),o=n(1318).includes,a=n(1223);r({target:"Array",proto:!0},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),a("includes")},2772:function(e,t,n){"use strict";var r=n(2109),o=n(1318).indexOf,a=n(9341),i=[].indexOf,u=!!i&&1/[1].indexOf(1,-0)<0,l=a("indexOf");r({target:"Array",proto:!0,forced:u||!l},{indexOf:function(e){return u?i.apply(this,arguments)||0:o(this,e,arguments.length>1?arguments[1]:void 0)}})},6992:function(e,t,n){"use strict";var r=n(5656),o=n(1223),a=n(7497),i=n(9909),u=n(654),l="Array Iterator",c=i.set,s=i.getterFor(l);e.exports=u(Array,"Array",(function(e,t){c(this,{type:l,target:r(e),index:0,kind:t})}),(function(){var e=s(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values"),a.Arguments=a.Array,o("keys"),o("values"),o("entries")},9600:function(e,t,n){"use strict";var r=n(2109),o=n(8361),a=n(5656),i=n(9341),u=[].join,l=o!=Object,c=i("join",",");r({target:"Array",proto:!0,forced:l||!c},{join:function(e){return u.call(a(this),void 0===e?",":e)}})},1249:function(e,t,n){"use strict";var r=n(2109),o=n(2092).map;r({target:"Array",proto:!0,forced:!n(1194)("map")},{map:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},6644:function(e,t,n){"use strict";var r=n(2109),o=n(3671).right,a=n(9341),i=n(7392),u=n(5268);r({target:"Array",proto:!0,forced:!a("reduceRight")||!u&&i>79&&i<83},{reduceRight:function(e){return o(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5827:function(e,t,n){"use strict";var r=n(2109),o=n(3671).left,a=n(9341),i=n(7392),u=n(5268);r({target:"Array",proto:!0,forced:!a("reduce")||!u&&i>79&&i<83},{reduce:function(e){return o(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5069:function(e,t,n){"use strict";var r=n(2109),o=n(3157),a=[].reverse,i=[1,2];r({target:"Array",proto:!0,forced:String(i)===String(i.reverse())},{reverse:function(){return o(this)&&(this.length=this.length),a.call(this)}})},7042:function(e,t,n){"use strict";var r=n(2109),o=n(111),a=n(3157),i=n(1400),u=n(7466),l=n(5656),c=n(6135),s=n(5112),f=n(1194)("slice"),d=s("species"),p=[].slice,h=Math.max;r({target:"Array",proto:!0,forced:!f},{slice:function(e,t){var n,r,s,f=l(this),v=u(f.length),y=i(e,v),m=i(void 0===t?v:t,v);if(a(f)&&("function"!=typeof(n=f.constructor)||n!==Array&&!a(n.prototype)?o(n)&&null===(n=n[d])&&(n=void 0):n=void 0,n===Array||void 0===n))return p.call(f,y,m);for(r=new(void 0===n?Array:n)(h(m-y,0)),s=0;y<m;y++,s++)y in f&&c(r,s,f[y]);return r.length=s,r}})},2707:function(e,t,n){"use strict";var r=n(2109),o=n(3099),a=n(7908),i=n(7293),u=n(9341),l=[],c=l.sort,s=i((function(){l.sort(void 0)})),f=i((function(){l.sort(null)})),d=u("sort");r({target:"Array",proto:!0,forced:s||!f||!d},{sort:function(e){return void 0===e?c.call(a(this)):c.call(a(this),o(e))}})},561:function(e,t,n){"use strict";var r=n(2109),o=n(1400),a=n(9958),i=n(7466),u=n(7908),l=n(5417),c=n(6135),s=n(1194)("splice"),f=Math.max,d=Math.min,p=9007199254740991,h="Maximum allowed length exceeded";r({target:"Array",proto:!0,forced:!s},{splice:function(e,t){var n,r,s,v,y,m,g=u(this),b=i(g.length),w=o(e,b),S=arguments.length;if(0===S?n=r=0:1===S?(n=0,r=b-w):(n=S-2,r=d(f(a(t),0),b-w)),b+n-r>p)throw TypeError(h);for(s=l(g,r),v=0;v<r;v++)(y=w+v)in g&&c(s,v,g[y]);if(s.length=r,n<r){for(v=w;v<b-r;v++)m=v+n,(y=v+r)in g?g[m]=g[y]:delete g[m];for(v=b;v>b-r+n;v--)delete g[v-1]}else if(n>r)for(v=b-r;v>w;v--)m=v+n-1,(y=v+r-1)in g?g[m]=g[y]:delete g[m];for(v=0;v<n;v++)g[v+w]=arguments[v+2];return g.length=b-r+n,s}})},5735:function(e,t,n){"use strict";var r=n(2109),o=n(7293),a=n(7908),i=n(7593);r({target:"Date",proto:!0,forced:o((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}))},{toJSON:function(e){var t=a(this),n=i(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},8309:function(e,t,n){var r=n(9781),o=n(3070).f,a=Function.prototype,i=a.toString,u=/^\s*function ([^ (]*)/,l="name";r&&!(l in a)&&o(a,l,{configurable:!0,get:function(){try{return i.call(this).match(u)[1]}catch(e){return""}}})},3706:function(e,t,n){var r=n(7854);n(8003)(r.JSON,"JSON",!0)},1532:function(e,t,n){"use strict";var r=n(7710),o=n(5631);e.exports=r("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),o)},2388:function(e,t,n){var r=n(2109),o=Math.floor,a=Math.log,i=Math.LOG2E;r({target:"Math",stat:!0},{clz32:function(e){return(e>>>=0)?31-o(a(e+.5)*i):32}})},2703:function(e,t,n){n(8003)(Math,"Math",!0)},9653:function(e,t,n){"use strict";var r=n(9781),o=n(7854),a=n(4705),i=n(1320),u=n(6656),l=n(4326),c=n(9587),s=n(7593),f=n(7293),d=n(30),p=n(8006).f,h=n(1236).f,v=n(3070).f,y=n(3111).trim,m="Number",g=o.Number,b=g.prototype,w=l(d(b))==m,S=function(e){var t,n,r,o,a,i,u,l,c=s(e,!1);if("string"==typeof c&&c.length>2)if(43===(t=(c=y(c)).charCodeAt(0))||45===t){if(88===(n=c.charCodeAt(2))||120===n)return NaN}else if(48===t){switch(c.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+c}for(i=(a=c.slice(2)).length,u=0;u<i;u++)if((l=a.charCodeAt(u))<48||l>o)return NaN;return parseInt(a,r)}return+c};if(a(m,!g(" 0o1")||!g("0b1")||g("+0x1"))){for(var E,_=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof _&&(w?f((function(){b.valueOf.call(n)})):l(n)!=m)?c(new g(S(t)),n,_):S(t)},k=r?p(g):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range".split(","),x=0;k.length>x;x++)u(g,E=k[x])&&!u(_,E)&&v(_,E,h(g,E));_.prototype=b,b.constructor=_,i(o,m,_)}},9601:function(e,t,n){var r=n(2109),o=n(1574);r({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},3371:function(e,t,n){var r=n(2109),o=n(6677),a=n(7293),i=n(111),u=n(2423).onFreeze,l=Object.freeze;r({target:"Object",stat:!0,forced:a((function(){l(1)})),sham:!o},{freeze:function(e){return l&&i(e)?l(u(e)):e}})},5003:function(e,t,n){var r=n(2109),o=n(7293),a=n(5656),i=n(1236).f,u=n(9781),l=o((function(){i(1)}));r({target:"Object",stat:!0,forced:!u||l,sham:!u},{getOwnPropertyDescriptor:function(e,t){return i(a(e),t)}})},9337:function(e,t,n){var r=n(2109),o=n(9781),a=n(3887),i=n(5656),u=n(1236),l=n(6135);r({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(e){for(var t,n,r=i(e),o=u.f,c=a(r),s={},f=0;c.length>f;)void 0!==(n=o(r,t=c[f++]))&&l(s,t,n);return s}})},6210:function(e,t,n){var r=n(2109),o=n(7293),a=n(1156).f;r({target:"Object",stat:!0,forced:o((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:a})},489:function(e,t,n){var r=n(2109),o=n(7293),a=n(7908),i=n(9518),u=n(8544);r({target:"Object",stat:!0,forced:o((function(){i(1)})),sham:!u},{getPrototypeOf:function(e){return i(a(e))}})},8410:function(e,t,n){var r=n(2109),o=n(7293),a=n(111),i=Object.isFrozen;r({target:"Object",stat:!0,forced:o((function(){i(1)}))},{isFrozen:function(e){return!a(e)||!!i&&i(e)}})},3304:function(e,t,n){n(2109)({target:"Object",stat:!0},{is:n(1150)})},7941:function(e,t,n){var r=n(2109),o=n(7908),a=n(1956);r({target:"Object",stat:!0,forced:n(7293)((function(){a(1)}))},{keys:function(e){return a(o(e))}})},514:function(e,t,n){var r=n(2109),o=n(111),a=n(2423).onFreeze,i=n(6677),u=n(7293),l=Object.seal;r({target:"Object",stat:!0,forced:u((function(){l(1)})),sham:!i},{seal:function(e){return l&&o(e)?l(a(e)):e}})},1539:function(e,t,n){var r=n(1694),o=n(1320),a=n(288);r||o(Object.prototype,"toString",a,{unsafe:!0})},7727:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(3366),i=n(7293),u=n(5005),l=n(6707),c=n(9478),s=n(1320);if(r({target:"Promise",proto:!0,real:!0,forced:!!a&&i((function(){a.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(e){var t=l(this,u("Promise")),n="function"==typeof e;return this.then(n?function(n){return c(t,e()).then((function(){return n}))}:e,n?function(n){return c(t,e()).then((function(){throw n}))}:e)}}),!o&&"function"==typeof a){var f=u("Promise").prototype.finally;a.prototype.finally!==f&&s(a.prototype,"finally",f,{unsafe:!0})}},8674:function(e,t,n){"use strict";var r,o,a,i,u=n(2109),l=n(1913),c=n(7854),s=n(5005),f=n(3366),d=n(1320),p=n(2248),h=n(7674),v=n(8003),y=n(6340),m=n(111),g=n(3099),b=n(5787),w=n(2788),S=n(408),E=n(7072),_=n(6707),k=n(261).set,x=n(5948),T=n(9478),R=n(842),A=n(8523),O=n(2534),C=n(9909),N=n(4705),L=n(5112),P=n(7871),j=n(5268),I=n(7392),M=L("species"),U="Promise",F=C.get,z=C.set,D=C.getterFor(U),V=f&&f.prototype,B=f,$=V,W=c.TypeError,H=c.document,q=c.process,G=A.f,K=G,Q=!!(H&&H.createEvent&&c.dispatchEvent),Y="function"==typeof PromiseRejectionEvent,X="unhandledrejection",J=!1,Z=N(U,(function(){var e=w(B)!==String(B);if(!e&&66===I)return!0;if(l&&!$.finally)return!0;if(I>=51&&/native code/.test(B))return!1;var t=new B((function(e){e(1)})),n=function(e){e((function(){}),(function(){}))};return(t.constructor={})[M]=n,!(J=t.then((function(){}))instanceof n)||!e&&P&&!Y})),ee=Z||!E((function(e){B.all(e).catch((function(){}))})),te=function(e){var t;return!(!m(e)||"function"!=typeof(t=e.then))&&t},ne=function(e,t){if(!e.notified){e.notified=!0;var n=e.reactions;x((function(){for(var r=e.value,o=1==e.state,a=0;n.length>a;){var i,u,l,c=n[a++],s=o?c.ok:c.fail,f=c.resolve,d=c.reject,p=c.domain;try{s?(o||(2===e.rejection&&ie(e),e.rejection=1),!0===s?i=r:(p&&p.enter(),i=s(r),p&&(p.exit(),l=!0)),i===c.promise?d(W("Promise-chain cycle")):(u=te(i))?u.call(i,f,d):f(i)):d(r)}catch(e){p&&!l&&p.exit(),d(e)}}e.reactions=[],e.notified=!1,t&&!e.rejection&&oe(e)}))}},re=function(e,t,n){var r,o;Q?((r=H.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),c.dispatchEvent(r)):r={promise:t,reason:n},!Y&&(o=c["on"+e])?o(r):e===X&&R("Unhandled promise rejection",n)},oe=function(e){k.call(c,(function(){var t,n=e.facade,r=e.value;if(ae(e)&&(t=O((function(){j?q.emit("unhandledRejection",r,n):re(X,n,r)})),e.rejection=j||ae(e)?2:1,t.error))throw t.value}))},ae=function(e){return 1!==e.rejection&&!e.parent},ie=function(e){k.call(c,(function(){var t=e.facade;j?q.emit("rejectionHandled",t):re("rejectionhandled",t,e.value)}))},ue=function(e,t,n){return function(r){e(t,r,n)}},le=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,ne(e,!0))},ce=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw W("Promise can't be resolved itself");var r=te(t);r?x((function(){var n={done:!1};try{r.call(t,ue(ce,n,e),ue(le,n,e))}catch(t){le(n,t,e)}})):(e.value=t,e.state=1,ne(e,!1))}catch(t){le({done:!1},t,e)}}};if(Z&&($=(B=function(e){b(this,B,U),g(e),r.call(this);var t=F(this);try{e(ue(ce,t),ue(le,t))}catch(e){le(t,e)}}).prototype,(r=function(e){z(this,{type:U,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p($,{then:function(e,t){var n=D(this),r=G(_(this,B));return r.ok="function"!=typeof e||e,r.fail="function"==typeof t&&t,r.domain=j?q.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&ne(n,!1),r.promise},catch:function(e){return this.then(void 0,e)}}),o=function(){var e=new r,t=F(e);this.promise=e,this.resolve=ue(ce,t),this.reject=ue(le,t)},A.f=G=function(e){return e===B||e===a?new o(e):K(e)},!l&&"function"==typeof f&&V!==Object.prototype)){i=V.then,J||(d(V,"then",(function(e,t){var n=this;return new B((function(e,t){i.call(n,e,t)})).then(e,t)}),{unsafe:!0}),d(V,"catch",$.catch,{unsafe:!0}));try{delete V.constructor}catch(e){}h&&h(V,$)}u({global:!0,wrap:!0,forced:Z},{Promise:B}),v(B,U,!1,!0),y(U),a=s(U),u({target:U,stat:!0,forced:Z},{reject:function(e){var t=G(this);return t.reject.call(void 0,e),t.promise}}),u({target:U,stat:!0,forced:l||Z},{resolve:function(e){return T(l&&this===a?B:this,e)}}),u({target:U,stat:!0,forced:ee},{all:function(e){var t=this,n=G(t),r=n.resolve,o=n.reject,a=O((function(){var n=g(t.resolve),a=[],i=0,u=1;S(e,(function(e){var l=i++,c=!1;a.push(void 0),u++,n.call(t,e).then((function(e){c||(c=!0,a[l]=e,--u||r(a))}),o)})),--u||r(a)}));return a.error&&o(a.value),n.promise},race:function(e){var t=this,n=G(t),r=n.reject,o=O((function(){var o=g(t.resolve);S(e,(function(e){o.call(t,e).then(n.resolve,r)}))}));return o.error&&r(o.value),n.promise}})},2419:function(e,t,n){var r=n(2109),o=n(5005),a=n(3099),i=n(9670),u=n(111),l=n(30),c=n(7065),s=n(7293),f=o("Reflect","construct"),d=s((function(){function e(){}return!(f((function(){}),[],e)instanceof e)})),p=!s((function(){f((function(){}))})),h=d||p;r({target:"Reflect",stat:!0,forced:h,sham:h},{construct:function(e,t){a(e),i(t);var n=arguments.length<3?e:a(arguments[2]);if(p&&!d)return f(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(c.apply(e,r))}var o=n.prototype,s=l(u(o)?o:Object.prototype),h=Function.apply.call(e,s,t);return u(h)?h:s}})},4603:function(e,t,n){var r=n(9781),o=n(7854),a=n(4705),i=n(9587),u=n(3070).f,l=n(8006).f,c=n(7850),s=n(7066),f=n(2999),d=n(1320),p=n(7293),h=n(9909).enforce,v=n(6340),y=n(5112)("match"),m=o.RegExp,g=m.prototype,b=/a/g,w=/a/g,S=new m(b)!==b,E=f.UNSUPPORTED_Y;if(r&&a("RegExp",!S||E||p((function(){return w[y]=!1,m(b)!=b||m(w)==w||"/a/i"!=m(b,"i")})))){for(var _=function(e,t){var n,r=this instanceof _,o=c(e),a=void 0===t;if(!r&&o&&e.constructor===_&&a)return e;S?o&&!a&&(e=e.source):e instanceof _&&(a&&(t=s.call(e)),e=e.source),E&&(n=!!t&&t.indexOf("y")>-1)&&(t=t.replace(/y/g,""));var u=i(S?new m(e,t):m(e,t),r?this:g,_);return E&&n&&(h(u).sticky=!0),u},k=function(e){e in _||u(_,e,{configurable:!0,get:function(){return m[e]},set:function(t){m[e]=t}})},x=l(m),T=0;x.length>T;)k(x[T++]);g.constructor=_,_.prototype=g,d(o,"RegExp",_)}v("RegExp")},4916:function(e,t,n){"use strict";var r=n(2109),o=n(2261);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},2087:function(e,t,n){var r=n(9781),o=n(3070),a=n(7066),i=n(2999).UNSUPPORTED_Y;r&&("g"!=/./g.flags||i)&&o.f(RegExp.prototype,"flags",{configurable:!0,get:a})},9714:function(e,t,n){"use strict";var r=n(1320),o=n(9670),a=n(7293),i=n(7066),u="toString",l=RegExp.prototype,c=l.toString,s=a((function(){return"/a/b"!=c.call({source:"a",flags:"b"})})),f=c.name!=u;(s||f)&&r(RegExp.prototype,u,(function(){var e=o(this),t=String(e.source),n=e.flags;return"/"+t+"/"+String(void 0===n&&e instanceof RegExp&&!("flags"in l)?i.call(e):n)}),{unsafe:!0})},189:function(e,t,n){"use strict";var r=n(7710),o=n(5631);e.exports=r("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),o)},7852:function(e,t,n){"use strict";var r,o=n(2109),a=n(1236).f,i=n(7466),u=n(3929),l=n(4488),c=n(4964),s=n(1913),f="".endsWith,d=Math.min,p=c("endsWith");o({target:"String",proto:!0,forced:!(!s&&!p&&(r=a(String.prototype,"endsWith"),r&&!r.writable)||p)},{endsWith:function(e){var t=String(l(this));u(e);var n=arguments.length>1?arguments[1]:void 0,r=i(t.length),o=void 0===n?r:d(i(n),r),a=String(e);return f?f.call(t,a,o):t.slice(o-a.length,o)===a}})},2023:function(e,t,n){"use strict";var r=n(2109),o=n(3929),a=n(4488);r({target:"String",proto:!0,forced:!n(4964)("includes")},{includes:function(e){return!!~String(a(this)).indexOf(o(e),arguments.length>1?arguments[1]:void 0)}})},8783:function(e,t,n){"use strict";var r=n(8710).charAt,o=n(9909),a=n(654),i="String Iterator",u=o.set,l=o.getterFor(i);a(String,"String",(function(e){u(this,{type:i,string:String(e),index:0})}),(function(){var e,t=l(this),n=t.string,o=t.index;return o>=n.length?{value:void 0,done:!0}:(e=r(n,o),t.index+=e.length,{value:e,done:!1})}))},4723:function(e,t,n){"use strict";var r=n(7007),o=n(9670),a=n(7466),i=n(4488),u=n(1530),l=n(7651);r("match",1,(function(e,t,n){return[function(t){var n=i(this),r=null==t?void 0:t[e];return void 0!==r?r.call(t,n):new RegExp(t)[e](String(n))},function(e){var r=n(t,e,this);if(r.done)return r.value;var i=o(e),c=String(this);if(!i.global)return l(i,c);var s=i.unicode;i.lastIndex=0;for(var f,d=[],p=0;null!==(f=l(i,c));){var h=String(f[0]);d[p]=h,""===h&&(i.lastIndex=u(c,a(i.lastIndex),s)),p++}return 0===p?null:d}]}))},5306:function(e,t,n){"use strict";var r=n(7007),o=n(9670),a=n(7466),i=n(9958),u=n(4488),l=n(1530),c=n(647),s=n(7651),f=Math.max,d=Math.min;r("replace",2,(function(e,t,n,r){var p=r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,h=r.REPLACE_KEEPS_$0,v=p?"$":"$0";return[function(n,r){var o=u(this),a=null==n?void 0:n[e];return void 0!==a?a.call(n,o,r):t.call(String(o),n,r)},function(e,r){if(!p&&h||"string"==typeof r&&-1===r.indexOf(v)){var u=n(t,e,this,r);if(u.done)return u.value}var y=o(e),m=String(this),g="function"==typeof r;g||(r=String(r));var b=y.global;if(b){var w=y.unicode;y.lastIndex=0}for(var S=[];;){var E=s(y,m);if(null===E)break;if(S.push(E),!b)break;""===String(E[0])&&(y.lastIndex=l(m,a(y.lastIndex),w))}for(var _,k="",x=0,T=0;T<S.length;T++){E=S[T];for(var R=String(E[0]),A=f(d(i(E.index),m.length),0),O=[],C=1;C<E.length;C++)O.push(void 0===(_=E[C])?_:String(_));var N=E.groups;if(g){var L=[R].concat(O,A,m);void 0!==N&&L.push(N);var P=String(r.apply(void 0,L))}else P=c(R,m,A,O,N,r);A>=x&&(k+=m.slice(x,A)+P,x=A+R.length)}return k+m.slice(x)}]}))},4765:function(e,t,n){"use strict";var r=n(7007),o=n(9670),a=n(4488),i=n(1150),u=n(7651);r("search",1,(function(e,t,n){return[function(t){var n=a(this),r=null==t?void 0:t[e];return void 0!==r?r.call(t,n):new RegExp(t)[e](String(n))},function(e){var r=n(t,e,this);if(r.done)return r.value;var a=o(e),l=String(this),c=a.lastIndex;i(c,0)||(a.lastIndex=0);var s=u(a,l);return i(a.lastIndex,c)||(a.lastIndex=c),null===s?-1:s.index}]}))},3123:function(e,t,n){"use strict";var r=n(7007),o=n(7850),a=n(9670),i=n(4488),u=n(6707),l=n(1530),c=n(7466),s=n(7651),f=n(2261),d=n(2999).UNSUPPORTED_Y,p=[].push,h=Math.min,v=4294967295;r("split",2,(function(e,t,n){var r;return r="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var r=String(i(this)),a=void 0===n?v:n>>>0;if(0===a)return[];if(void 0===e)return[r];if(!o(e))return t.call(r,e,a);for(var u,l,c,s=[],d=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),h=0,y=new RegExp(e.source,d+"g");(u=f.call(y,r))&&!((l=y.lastIndex)>h&&(s.push(r.slice(h,u.index)),u.length>1&&u.index<r.length&&p.apply(s,u.slice(1)),c=u[0].length,h=l,s.length>=a));)y.lastIndex===u.index&&y.lastIndex++;return h===r.length?!c&&y.test("")||s.push(""):s.push(r.slice(h)),s.length>a?s.slice(0,a):s}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:t.call(this,e,n)}:t,[function(t,n){var o=i(this),a=null==t?void 0:t[e];return void 0!==a?a.call(t,o,n):r.call(String(o),t,n)},function(e,o){var i=n(r,e,this,o,r!==t);if(i.done)return i.value;var f=a(e),p=String(this),y=u(f,RegExp),m=f.unicode,g=(f.ignoreCase?"i":"")+(f.multiline?"m":"")+(f.unicode?"u":"")+(d?"g":"y"),b=new y(d?"^(?:"+f.source+")":f,g),w=void 0===o?v:o>>>0;if(0===w)return[];if(0===p.length)return null===s(b,p)?[p]:[];for(var S=0,E=0,_=[];E<p.length;){b.lastIndex=d?0:E;var k,x=s(b,d?p.slice(E):p);if(null===x||(k=h(c(b.lastIndex+(d?E:0)),p.length))===S)E=l(p,E,m);else{if(_.push(p.slice(S,E)),_.length===w)return _;for(var T=1;T<=x.length-1;T++)if(_.push(x[T]),_.length===w)return _;E=S=k}}return _.push(p.slice(S)),_}]}),d)},6755:function(e,t,n){"use strict";var r,o=n(2109),a=n(1236).f,i=n(7466),u=n(3929),l=n(4488),c=n(4964),s=n(1913),f="".startsWith,d=Math.min,p=c("startsWith");o({target:"String",proto:!0,forced:!(!s&&!p&&(r=a(String.prototype,"startsWith"),r&&!r.writable)||p)},{startsWith:function(e){var t=String(l(this));u(e);var n=i(d(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return f?f.call(t,r,n):t.slice(n,n+r.length)===r}})},3210:function(e,t,n){"use strict";var r=n(2109),o=n(3111).trim;r({target:"String",proto:!0,forced:n(6091)("trim")},{trim:function(){return o(this)}})},2443:function(e,t,n){n(7235)("asyncIterator")},1817:function(e,t,n){"use strict";var r=n(2109),o=n(9781),a=n(7854),i=n(6656),u=n(111),l=n(3070).f,c=n(9920),s=a.Symbol;if(o&&"function"==typeof s&&(!("description"in s.prototype)||void 0!==s().description)){var f={},d=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof d?new s(e):void 0===e?s():s(e);return""===e&&(f[t]=!0),t};c(d,s);var p=d.prototype=s.prototype;p.constructor=d;var h=p.toString,v="Symbol(test)"==String(s("test")),y=/^Symbol\((.*)\)[^)]+$/;l(p,"description",{configurable:!0,get:function(){var e=u(this)?this.valueOf():this,t=h.call(e);if(i(f,e))return"";var n=v?t.slice(7,-1):t.replace(y,"$1");return""===n?void 0:n}}),r({global:!0,forced:!0},{Symbol:d})}},2165:function(e,t,n){n(7235)("iterator")},2526:function(e,t,n){"use strict";var r=n(2109),o=n(7854),a=n(5005),i=n(1913),u=n(9781),l=n(133),c=n(3307),s=n(7293),f=n(6656),d=n(3157),p=n(111),h=n(9670),v=n(7908),y=n(5656),m=n(7593),g=n(9114),b=n(30),w=n(1956),S=n(8006),E=n(1156),_=n(5181),k=n(1236),x=n(3070),T=n(5296),R=n(8880),A=n(1320),O=n(2309),C=n(6200),N=n(3501),L=n(9711),P=n(5112),j=n(6061),I=n(7235),M=n(8003),U=n(9909),F=n(2092).forEach,z=C("hidden"),D="Symbol",V=P("toPrimitive"),B=U.set,$=U.getterFor(D),W=Object.prototype,H=o.Symbol,q=a("JSON","stringify"),G=k.f,K=x.f,Q=E.f,Y=T.f,X=O("symbols"),J=O("op-symbols"),Z=O("string-to-symbol-registry"),ee=O("symbol-to-string-registry"),te=O("wks"),ne=o.QObject,re=!ne||!ne.prototype||!ne.prototype.findChild,oe=u&&s((function(){return 7!=b(K({},"a",{get:function(){return K(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=G(W,t);r&&delete W[t],K(e,t,n),r&&e!==W&&K(W,t,r)}:K,ae=function(e,t){var n=X[e]=b(H.prototype);return B(n,{type:D,tag:e,description:t}),u||(n.description=t),n},ie=c?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof H},ue=function(e,t,n){e===W&&ue(J,t,n),h(e);var r=m(t,!0);return h(n),f(X,r)?(n.enumerable?(f(e,z)&&e[z][r]&&(e[z][r]=!1),n=b(n,{enumerable:g(0,!1)})):(f(e,z)||K(e,z,g(1,{})),e[z][r]=!0),oe(e,r,n)):K(e,r,n)},le=function(e,t){h(e);var n=y(t),r=w(n).concat(de(n));return F(r,(function(t){u&&!ce.call(n,t)||ue(e,t,n[t])})),e},ce=function(e){var t=m(e,!0),n=Y.call(this,t);return!(this===W&&f(X,t)&&!f(J,t))&&(!(n||!f(this,t)||!f(X,t)||f(this,z)&&this[z][t])||n)},se=function(e,t){var n=y(e),r=m(t,!0);if(n!==W||!f(X,r)||f(J,r)){var o=G(n,r);return!o||!f(X,r)||f(n,z)&&n[z][r]||(o.enumerable=!0),o}},fe=function(e){var t=Q(y(e)),n=[];return F(t,(function(e){f(X,e)||f(N,e)||n.push(e)})),n},de=function(e){var t=e===W,n=Q(t?J:y(e)),r=[];return F(n,(function(e){!f(X,e)||t&&!f(W,e)||r.push(X[e])})),r};l||(H=function(){if(this instanceof H)throw TypeError("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,t=L(e),n=function(e){this===W&&n.call(J,e),f(this,z)&&f(this[z],t)&&(this[z][t]=!1),oe(this,t,g(1,e))};return u&&re&&oe(W,t,{configurable:!0,set:n}),ae(t,e)},A(H.prototype,"toString",(function(){return $(this).tag})),A(H,"withoutSetter",(function(e){return ae(L(e),e)})),T.f=ce,x.f=ue,k.f=se,S.f=E.f=fe,_.f=de,j.f=function(e){return ae(P(e),e)},u&&(K(H.prototype,"description",{configurable:!0,get:function(){return $(this).description}}),i||A(W,"propertyIsEnumerable",ce,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!l,sham:!l},{Symbol:H}),F(w(te),(function(e){I(e)})),r({target:D,stat:!0,forced:!l},{for:function(e){var t=String(e);if(f(Z,t))return Z[t];var n=H(t);return Z[t]=n,ee[n]=t,n},keyFor:function(e){if(!ie(e))throw TypeError(e+" is not a symbol");if(f(ee,e))return ee[e]},useSetter:function(){re=!0},useSimple:function(){re=!1}}),r({target:"Object",stat:!0,forced:!l,sham:!u},{create:function(e,t){return void 0===t?b(e):le(b(e),t)},defineProperty:ue,defineProperties:le,getOwnPropertyDescriptor:se}),r({target:"Object",stat:!0,forced:!l},{getOwnPropertyNames:fe,getOwnPropertySymbols:de}),r({target:"Object",stat:!0,forced:s((function(){_.f(1)}))},{getOwnPropertySymbols:function(e){return _.f(v(e))}}),q&&r({target:"JSON",stat:!0,forced:!l||s((function(){var e=H();return"[null]"!=q([e])||"{}"!=q({a:e})||"{}"!=q(Object(e))}))},{stringify:function(e,t,n){for(var r,o=[e],a=1;arguments.length>a;)o.push(arguments[a++]);if(r=t,(p(t)||void 0!==e)&&!ie(e))return d(t)||(t=function(e,t){if("function"==typeof r&&(t=r.call(this,e,t)),!ie(t))return t}),o[1]=t,q.apply(null,o)}}),H.prototype[V]||R(H.prototype,V,H.prototype.valueOf),M(H,D),N[z]=!0},3680:function(e,t,n){n(7235)("toStringTag")},4129:function(e,t,n){"use strict";var r,o=n(7854),a=n(2248),i=n(2423),u=n(7710),l=n(9320),c=n(111),s=n(9909).enforce,f=n(8536),d=!o.ActiveXObject&&"ActiveXObject"in o,p=Object.isExtensible,h=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},v=e.exports=u("WeakMap",h,l);if(f&&d){r=l.getConstructor(h,"WeakMap",!0),i.REQUIRED=!0;var y=v.prototype,m=y.delete,g=y.has,b=y.get,w=y.set;a(y,{delete:function(e){if(c(e)&&!p(e)){var t=s(this);return t.frozen||(t.frozen=new r),m.call(this,e)||t.frozen.delete(e)}return m.call(this,e)},has:function(e){if(c(e)&&!p(e)){var t=s(this);return t.frozen||(t.frozen=new r),g.call(this,e)||t.frozen.has(e)}return g.call(this,e)},get:function(e){if(c(e)&&!p(e)){var t=s(this);return t.frozen||(t.frozen=new r),g.call(this,e)?b.call(this,e):t.frozen.get(e)}return b.call(this,e)},set:function(e,t){if(c(e)&&!p(e)){var n=s(this);n.frozen||(n.frozen=new r),g.call(this,e)?w.call(this,e,t):n.frozen.set(e,t)}else w.call(this,e,t);return this}})}},8478:function(e,t,n){"use strict";n(7710)("WeakSet",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),n(9320))},3475:function(e,t,n){"use strict";var r=n(9781),o=n(1223),a=n(7908),i=n(7466),u=n(3070).f;r&&!("lastIndex"in[])&&(u(Array.prototype,"lastIndex",{configurable:!0,get:function(){var e=a(this),t=i(e.length);return 0==t?0:t-1}}),o("lastIndex"))},72:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(4092);r({target:"Map",proto:!0,real:!0,forced:o},{deleteAll:function(){return a.apply(this,arguments)}})},9137:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(9974),u=n(4647),l=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{every:function(e){var t=a(this),n=u(t),r=i(e,arguments.length>1?arguments[1]:void 0,3);return!l(n,(function(e,n,o){if(!r(n,e,t))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},1957:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(5005),i=n(9670),u=n(3099),l=n(9974),c=n(6707),s=n(4647),f=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{filter:function(e){var t=i(this),n=s(t),r=l(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=u(o.set);return f(n,(function(e,n){r(n,e,t)&&d.call(o,e,n)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},103:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(9974),u=n(4647),l=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{findKey:function(e){var t=a(this),n=u(t),r=i(e,arguments.length>1?arguments[1]:void 0,3);return l(n,(function(e,n,o){if(r(n,e,t))return o(e)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},6306:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(9974),u=n(4647),l=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{find:function(e){var t=a(this),n=u(t),r=i(e,arguments.length>1?arguments[1]:void 0,3);return l(n,(function(e,n,o){if(r(n,e,t))return o(n)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},4592:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(4647),u=n(6465),l=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{includes:function(e){return l(i(a(this)),(function(t,n,r){if(u(n,e))return r()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},8276:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(4647),u=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{keyOf:function(e){return u(i(a(this)),(function(t,n,r){if(n===e)return r(t)}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},5082:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(5005),i=n(9670),u=n(3099),l=n(9974),c=n(6707),s=n(4647),f=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{mapKeys:function(e){var t=i(this),n=s(t),r=l(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=u(o.set);return f(n,(function(e,n){d.call(o,r(n,e,t),n)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},2813:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(5005),i=n(9670),u=n(3099),l=n(9974),c=n(6707),s=n(4647),f=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{mapValues:function(e){var t=i(this),n=s(t),r=l(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Map"))),d=u(o.set);return f(n,(function(e,n){d.call(o,e,r(n,e,t))}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),o}})},8222:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(3099),u=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{merge:function(e){for(var t=a(this),n=i(t.set),r=0;r<arguments.length;)u(arguments[r++],n,{that:t,AS_ENTRIES:!0});return t}})},8563:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(3099),u=n(4647),l=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{reduce:function(e){var t=a(this),n=u(t),r=arguments.length<2,o=r?void 0:arguments[1];if(i(e),l(n,(function(n,a){r?(r=!1,o=a):o=e(o,a,n,t)}),{AS_ENTRIES:!0,IS_ITERATOR:!0}),r)throw TypeError("Reduce of empty map with no initial value");return o}})},336:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(9974),u=n(4647),l=n(408);r({target:"Map",proto:!0,real:!0,forced:o},{some:function(e){var t=a(this),n=u(t),r=i(e,arguments.length>1?arguments[1]:void 0,3);return l(n,(function(e,n,o){if(r(n,e,t))return o()}),{AS_ENTRIES:!0,IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},7512:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(3099);r({target:"Map",proto:!0,real:!0,forced:o},{update:function(e,t){var n=a(this),r=arguments.length;i(t);var o=n.has(e);if(!o&&r<3)throw TypeError("Updating absent value");var u=o?n.get(e):i(r>2?arguments[2]:void 0)(e,n);return n.set(e,t(u,e,n)),n}})},8921:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(1501);r({target:"Set",proto:!0,real:!0,forced:o},{addAll:function(){return a.apply(this,arguments)}})},6248:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(4092);r({target:"Set",proto:!0,real:!0,forced:o},{deleteAll:function(){return a.apply(this,arguments)}})},3599:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(5005),i=n(9670),u=n(3099),l=n(6707),c=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{difference:function(e){var t=i(this),n=new(l(t,a("Set")))(t),r=u(n.delete);return c(e,(function(e){r.call(n,e)})),n}})},1477:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(9974),u=n(6767),l=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{every:function(e){var t=a(this),n=u(t),r=i(e,arguments.length>1?arguments[1]:void 0,3);return!l(n,(function(e,n){if(!r(e,e,t))return n()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},4362:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(5005),i=n(9670),u=n(3099),l=n(9974),c=n(6707),s=n(6767),f=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{filter:function(e){var t=i(this),n=s(t),r=l(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Set"))),d=u(o.add);return f(n,(function(e){r(e,e,t)&&d.call(o,e)}),{IS_ITERATOR:!0}),o}})},5389:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(9974),u=n(6767),l=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{find:function(e){var t=a(this),n=u(t),r=i(e,arguments.length>1?arguments[1]:void 0,3);return l(n,(function(e,n){if(r(e,e,t))return n(e)}),{IS_ITERATOR:!0,INTERRUPTED:!0}).result}})},401:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(5005),i=n(9670),u=n(3099),l=n(6707),c=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{intersection:function(e){var t=i(this),n=new(l(t,a("Set"))),r=u(t.has),o=u(n.add);return c(e,(function(e){r.call(t,e)&&o.call(n,e)})),n}})},5164:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(3099),u=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{isDisjointFrom:function(e){var t=a(this),n=i(t.has);return!u(e,(function(e,r){if(!0===n.call(t,e))return r()}),{INTERRUPTED:!0}).stopped}})},1238:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(5005),i=n(9670),u=n(3099),l=n(8554),c=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{isSubsetOf:function(e){var t=l(this),n=i(e),r=n.has;return"function"!=typeof r&&(n=new(a("Set"))(e),r=u(n.has)),!c(t,(function(e,t){if(!1===r.call(n,e))return t()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},4837:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(3099),u=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{isSupersetOf:function(e){var t=a(this),n=i(t.has);return!u(e,(function(e,r){if(!1===n.call(t,e))return r()}),{INTERRUPTED:!0}).stopped}})},7485:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(6767),u=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{join:function(e){var t=a(this),n=i(t),r=void 0===e?",":String(e),o=[];return u(n,o.push,{that:o,IS_ITERATOR:!0}),o.join(r)}})},465:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(5005),i=n(9670),u=n(3099),l=n(9974),c=n(6707),s=n(6767),f=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{map:function(e){var t=i(this),n=s(t),r=l(e,arguments.length>1?arguments[1]:void 0,3),o=new(c(t,a("Set"))),d=u(o.add);return f(n,(function(e){d.call(o,r(e,e,t))}),{IS_ITERATOR:!0}),o}})},6651:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(3099),u=n(6767),l=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{reduce:function(e){var t=a(this),n=u(t),r=arguments.length<2,o=r?void 0:arguments[1];if(i(e),l(n,(function(n){r?(r=!1,o=n):o=e(o,n,n,t)}),{IS_ITERATOR:!0}),r)throw TypeError("Reduce of empty set with no initial value");return o}})},1437:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(9670),i=n(9974),u=n(6767),l=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{some:function(e){var t=a(this),n=u(t),r=i(e,arguments.length>1?arguments[1]:void 0,3);return l(n,(function(e,n){if(r(e,e,t))return n()}),{IS_ITERATOR:!0,INTERRUPTED:!0}).stopped}})},5285:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(5005),i=n(9670),u=n(3099),l=n(6707),c=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{symmetricDifference:function(e){var t=i(this),n=new(l(t,a("Set")))(t),r=u(n.delete),o=u(n.add);return c(e,(function(e){r.call(n,e)||o.call(n,e)})),n}})},9865:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(5005),i=n(9670),u=n(3099),l=n(6707),c=n(408);r({target:"Set",proto:!0,real:!0,forced:o},{union:function(e){var t=i(this),n=new(l(t,a("Set")))(t);return c(e,u(n.add),{that:n}),n}})},8206:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(4092);r({target:"WeakMap",proto:!0,real:!0,forced:o},{deleteAll:function(){return a.apply(this,arguments)}})},3561:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(1501);r({target:"WeakSet",proto:!0,real:!0,forced:o},{addAll:function(){return a.apply(this,arguments)}})},2049:function(e,t,n){"use strict";var r=n(2109),o=n(1913),a=n(4092);r({target:"WeakSet",proto:!0,real:!0,forced:o},{deleteAll:function(){return a.apply(this,arguments)}})},4747:function(e,t,n){var r=n(7854),o=n(8324),a=n(8533),i=n(8880);for(var u in o){var l=r[u],c=l&&l.prototype;if(c&&c.forEach!==a)try{i(c,"forEach",a)}catch(e){c.forEach=a}}},3948:function(e,t,n){var r=n(7854),o=n(8324),a=n(6992),i=n(8880),u=n(5112),l=u("iterator"),c=u("toStringTag"),s=a.values;for(var f in o){var d=r[f],p=d&&d.prototype;if(p){if(p[l]!==s)try{i(p,l,s)}catch(e){p[l]=s}if(p[c]||i(p,c,f),o[f])for(var h in a)if(p[h]!==a[h])try{i(p,h,a[h])}catch(e){p[h]=a[h]}}}},1637:function(e,t,n){"use strict";n(6992);var r=n(2109),o=n(5005),a=n(590),i=n(1320),u=n(2248),l=n(8003),c=n(4994),s=n(9909),f=n(5787),d=n(6656),p=n(9974),h=n(648),v=n(9670),y=n(111),m=n(30),g=n(9114),b=n(8554),w=n(1246),S=n(5112),E=o("fetch"),_=o("Headers"),k=S("iterator"),x="URLSearchParams",T="URLSearchParamsIterator",R=s.set,A=s.getterFor(x),O=s.getterFor(T),C=/\+/g,N=Array(4),L=function(e){return N[e-1]||(N[e-1]=RegExp("((?:%[\\da-f]{2}){"+e+"})","gi"))},P=function(e){try{return decodeURIComponent(e)}catch(t){return e}},j=function(e){var t=e.replace(C," "),n=4;try{return decodeURIComponent(t)}catch(e){for(;n;)t=t.replace(L(n--),P);return t}},I=/[!'()~]|%20/g,M={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},U=function(e){return M[e]},F=function(e){return encodeURIComponent(e).replace(I,U)},z=function(e,t){if(t)for(var n,r,o=t.split("&"),a=0;a<o.length;)(n=o[a++]).length&&(r=n.split("="),e.push({key:j(r.shift()),value:j(r.join("="))}))},D=function(e){this.entries.length=0,z(this.entries,e)},V=function(e,t){if(e<t)throw TypeError("Not enough arguments")},B=c((function(e,t){R(this,{type:T,iterator:b(A(e).entries),kind:t})}),"Iterator",(function(){var e=O(this),t=e.kind,n=e.iterator.next(),r=n.value;return n.done||(n.value="keys"===t?r.key:"values"===t?r.value:[r.key,r.value]),n})),$=function(){f(this,$,x);var e,t,n,r,o,a,i,u,l,c=arguments.length>0?arguments[0]:void 0,s=this,p=[];if(R(s,{type:x,entries:p,updateURL:function(){},updateSearchParams:D}),void 0!==c)if(y(c))if("function"==typeof(e=w(c)))for(n=(t=e.call(c)).next;!(r=n.call(t)).done;){if((i=(a=(o=b(v(r.value))).next).call(o)).done||(u=a.call(o)).done||!a.call(o).done)throw TypeError("Expected sequence with length 2");p.push({key:i.value+"",value:u.value+""})}else for(l in c)d(c,l)&&p.push({key:l,value:c[l]+""});else z(p,"string"==typeof c?"?"===c.charAt(0)?c.slice(1):c:c+"")},W=$.prototype;u(W,{append:function(e,t){V(arguments.length,2);var n=A(this);n.entries.push({key:e+"",value:t+""}),n.updateURL()},delete:function(e){V(arguments.length,1);for(var t=A(this),n=t.entries,r=e+"",o=0;o<n.length;)n[o].key===r?n.splice(o,1):o++;t.updateURL()},get:function(e){V(arguments.length,1);for(var t=A(this).entries,n=e+"",r=0;r<t.length;r++)if(t[r].key===n)return t[r].value;return null},getAll:function(e){V(arguments.length,1);for(var t=A(this).entries,n=e+"",r=[],o=0;o<t.length;o++)t[o].key===n&&r.push(t[o].value);return r},has:function(e){V(arguments.length,1);for(var t=A(this).entries,n=e+"",r=0;r<t.length;)if(t[r++].key===n)return!0;return!1},set:function(e,t){V(arguments.length,1);for(var n,r=A(this),o=r.entries,a=!1,i=e+"",u=t+"",l=0;l<o.length;l++)(n=o[l]).key===i&&(a?o.splice(l--,1):(a=!0,n.value=u));a||o.push({key:i,value:u}),r.updateURL()},sort:function(){var e,t,n,r=A(this),o=r.entries,a=o.slice();for(o.length=0,n=0;n<a.length;n++){for(e=a[n],t=0;t<n;t++)if(o[t].key>e.key){o.splice(t,0,e);break}t===n&&o.push(e)}r.updateURL()},forEach:function(e){for(var t,n=A(this).entries,r=p(e,arguments.length>1?arguments[1]:void 0,3),o=0;o<n.length;)r((t=n[o++]).value,t.key,this)},keys:function(){return new B(this,"keys")},values:function(){return new B(this,"values")},entries:function(){return new B(this,"entries")}},{enumerable:!0}),i(W,k,W.entries),i(W,"toString",(function(){for(var e,t=A(this).entries,n=[],r=0;r<t.length;)e=t[r++],n.push(F(e.key)+"="+F(e.value));return n.join("&")}),{enumerable:!0}),l($,x),r({global:!0,forced:!a},{URLSearchParams:$}),a||"function"!=typeof E||"function"!=typeof _||r({global:!0,enumerable:!0,forced:!0},{fetch:function(e){var t,n,r,o=[e];return arguments.length>1&&(y(t=arguments[1])&&(n=t.body,h(n)===x&&((r=t.headers?new _(t.headers):new _).has("content-type")||r.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"),t=m(t,{body:g(0,String(n)),headers:g(0,r)}))),o.push(t)),E.apply(this,o)}}),e.exports={URLSearchParams:$,getState:A}},285:function(e,t,n){"use strict";n(8783);var r,o=n(2109),a=n(9781),i=n(590),u=n(7854),l=n(6048),c=n(1320),s=n(5787),f=n(6656),d=n(1574),p=n(8457),h=n(8710).codeAt,v=n(3197),y=n(8003),m=n(1637),g=n(9909),b=u.URL,w=m.URLSearchParams,S=m.getState,E=g.set,_=g.getterFor("URL"),k=Math.floor,x=Math.pow,T="Invalid scheme",R="Invalid host",A="Invalid port",O=/[A-Za-z]/,C=/[\d+-.A-Za-z]/,N=/\d/,L=/^(0x|0X)/,P=/^[0-7]+$/,j=/^\d+$/,I=/^[\dA-Fa-f]+$/,M=/[\0\t\n\r #%/:?@[\\]]/,U=/[\0\t\n\r #/:?@[\\]]/,F=/^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g,z=/[\t\n\r]/g,D=function(e,t){var n,r,o;if("["==t.charAt(0)){if("]"!=t.charAt(t.length-1))return R;if(!(n=B(t.slice(1,-1))))return R;e.host=n}else if(Y(e)){if(t=v(t),M.test(t))return R;if(null===(n=V(t)))return R;e.host=n}else{if(U.test(t))return R;for(n="",r=p(t),o=0;o<r.length;o++)n+=K(r[o],W);e.host=n}},V=function(e){var t,n,r,o,a,i,u,l=e.split(".");if(l.length&&""==l[l.length-1]&&l.pop(),(t=l.length)>4)return e;for(n=[],r=0;r<t;r++){if(""==(o=l[r]))return e;if(a=10,o.length>1&&"0"==o.charAt(0)&&(a=L.test(o)?16:8,o=o.slice(8==a?1:2)),""===o)i=0;else{if(!(10==a?j:8==a?P:I).test(o))return e;i=parseInt(o,a)}n.push(i)}for(r=0;r<t;r++)if(i=n[r],r==t-1){if(i>=x(256,5-t))return null}else if(i>255)return null;for(u=n.pop(),r=0;r<n.length;r++)u+=n[r]*x(256,3-r);return u},B=function(e){var t,n,r,o,a,i,u,l=[0,0,0,0,0,0,0,0],c=0,s=null,f=0,d=function(){return e.charAt(f)};if(":"==d()){if(":"!=e.charAt(1))return;f+=2,s=++c}for(;d();){if(8==c)return;if(":"!=d()){for(t=n=0;n<4&&I.test(d());)t=16*t+parseInt(d(),16),f++,n++;if("."==d()){if(0==n)return;if(f-=n,c>6)return;for(r=0;d();){if(o=null,r>0){if(!("."==d()&&r<4))return;f++}if(!N.test(d()))return;for(;N.test(d());){if(a=parseInt(d(),10),null===o)o=a;else{if(0==o)return;o=10*o+a}if(o>255)return;f++}l[c]=256*l[c]+o,2!=++r&&4!=r||c++}if(4!=r)return;break}if(":"==d()){if(f++,!d())return}else if(d())return;l[c++]=t}else{if(null!==s)return;f++,s=++c}}if(null!==s)for(i=c-s,c=7;0!=c&&i>0;)u=l[c],l[c--]=l[s+i-1],l[s+--i]=u;else if(8!=c)return;return l},$=function(e){var t,n,r,o;if("number"==typeof e){for(t=[],n=0;n<4;n++)t.unshift(e%256),e=k(e/256);return t.join(".")}if("object"==typeof e){for(t="",r=function(e){for(var t=null,n=1,r=null,o=0,a=0;a<8;a++)0!==e[a]?(o>n&&(t=r,n=o),r=null,o=0):(null===r&&(r=a),++o);return o>n&&(t=r,n=o),t}(e),n=0;n<8;n++)o&&0===e[n]||(o&&(o=!1),r===n?(t+=n?":":"::",o=!0):(t+=e[n].toString(16),n<7&&(t+=":")));return"["+t+"]"}return e},W={},H=d({},W,{" ":1,'"':1,"<":1,">":1,"`":1}),q=d({},H,{"#":1,"?":1,"{":1,"}":1}),G=d({},q,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),K=function(e,t){var n=h(e,0);return n>32&&n<127&&!f(t,e)?e:encodeURIComponent(e)},Q={ftp:21,file:null,http:80,https:443,ws:80,wss:443},Y=function(e){return f(Q,e.scheme)},X=function(e){return""!=e.username||""!=e.password},J=function(e){return!e.host||e.cannotBeABaseURL||"file"==e.scheme},Z=function(e,t){var n;return 2==e.length&&O.test(e.charAt(0))&&(":"==(n=e.charAt(1))||!t&&"|"==n)},ee=function(e){var t;return e.length>1&&Z(e.slice(0,2))&&(2==e.length||"/"===(t=e.charAt(2))||"\\"===t||"?"===t||"#"===t)},te=function(e){var t=e.path,n=t.length;!n||"file"==e.scheme&&1==n&&Z(t[0],!0)||t.pop()},ne=function(e){return"."===e||"%2e"===e.toLowerCase()},re={},oe={},ae={},ie={},ue={},le={},ce={},se={},fe={},de={},pe={},he={},ve={},ye={},me={},ge={},be={},we={},Se={},Ee={},_e={},ke=function(e,t,n,o){var a,i,u,l,c,s=n||re,d=0,h="",v=!1,y=!1,m=!1;for(n||(e.scheme="",e.username="",e.password="",e.host=null,e.port=null,e.path=[],e.query=null,e.fragment=null,e.cannotBeABaseURL=!1,t=t.replace(F,"")),t=t.replace(z,""),a=p(t);d<=a.length;){switch(i=a[d],s){case re:if(!i||!O.test(i)){if(n)return T;s=ae;continue}h+=i.toLowerCase(),s=oe;break;case oe:if(i&&(C.test(i)||"+"==i||"-"==i||"."==i))h+=i.toLowerCase();else{if(":"!=i){if(n)return T;h="",s=ae,d=0;continue}if(n&&(Y(e)!=f(Q,h)||"file"==h&&(X(e)||null!==e.port)||"file"==e.scheme&&!e.host))return;if(e.scheme=h,n)return void(Y(e)&&Q[e.scheme]==e.port&&(e.port=null));h="","file"==e.scheme?s=ye:Y(e)&&o&&o.scheme==e.scheme?s=ie:Y(e)?s=se:"/"==a[d+1]?(s=ue,d++):(e.cannotBeABaseURL=!0,e.path.push(""),s=Se)}break;case ae:if(!o||o.cannotBeABaseURL&&"#"!=i)return T;if(o.cannotBeABaseURL&&"#"==i){e.scheme=o.scheme,e.path=o.path.slice(),e.query=o.query,e.fragment="",e.cannotBeABaseURL=!0,s=_e;break}s="file"==o.scheme?ye:le;continue;case ie:if("/"!=i||"/"!=a[d+1]){s=le;continue}s=fe,d++;break;case ue:if("/"==i){s=de;break}s=we;continue;case le:if(e.scheme=o.scheme,i==r)e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,e.path=o.path.slice(),e.query=o.query;else if("/"==i||"\\"==i&&Y(e))s=ce;else if("?"==i)e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,e.path=o.path.slice(),e.query="",s=Ee;else{if("#"!=i){e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,e.path=o.path.slice(),e.path.pop(),s=we;continue}e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,e.path=o.path.slice(),e.query=o.query,e.fragment="",s=_e}break;case ce:if(!Y(e)||"/"!=i&&"\\"!=i){if("/"!=i){e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,s=we;continue}s=de}else s=fe;break;case se:if(s=fe,"/"!=i||"/"!=h.charAt(d+1))continue;d++;break;case fe:if("/"!=i&&"\\"!=i){s=de;continue}break;case de:if("@"==i){v&&(h="%40"+h),v=!0,u=p(h);for(var g=0;g<u.length;g++){var b=u[g];if(":"!=b||m){var w=K(b,G);m?e.password+=w:e.username+=w}else m=!0}h=""}else if(i==r||"/"==i||"?"==i||"#"==i||"\\"==i&&Y(e)){if(v&&""==h)return"Invalid authority";d-=p(h).length+1,h="",s=pe}else h+=i;break;case pe:case he:if(n&&"file"==e.scheme){s=ge;continue}if(":"!=i||y){if(i==r||"/"==i||"?"==i||"#"==i||"\\"==i&&Y(e)){if(Y(e)&&""==h)return R;if(n&&""==h&&(X(e)||null!==e.port))return;if(l=D(e,h))return l;if(h="",s=be,n)return;continue}"["==i?y=!0:"]"==i&&(y=!1),h+=i}else{if(""==h)return R;if(l=D(e,h))return l;if(h="",s=ve,n==he)return}break;case ve:if(!N.test(i)){if(i==r||"/"==i||"?"==i||"#"==i||"\\"==i&&Y(e)||n){if(""!=h){var S=parseInt(h,10);if(S>65535)return A;e.port=Y(e)&&S===Q[e.scheme]?null:S,h=""}if(n)return;s=be;continue}return A}h+=i;break;case ye:if(e.scheme="file","/"==i||"\\"==i)s=me;else{if(!o||"file"!=o.scheme){s=we;continue}if(i==r)e.host=o.host,e.path=o.path.slice(),e.query=o.query;else if("?"==i)e.host=o.host,e.path=o.path.slice(),e.query="",s=Ee;else{if("#"!=i){ee(a.slice(d).join(""))||(e.host=o.host,e.path=o.path.slice(),te(e)),s=we;continue}e.host=o.host,e.path=o.path.slice(),e.query=o.query,e.fragment="",s=_e}}break;case me:if("/"==i||"\\"==i){s=ge;break}o&&"file"==o.scheme&&!ee(a.slice(d).join(""))&&(Z(o.path[0],!0)?e.path.push(o.path[0]):e.host=o.host),s=we;continue;case ge:if(i==r||"/"==i||"\\"==i||"?"==i||"#"==i){if(!n&&Z(h))s=we;else if(""==h){if(e.host="",n)return;s=be}else{if(l=D(e,h))return l;if("localhost"==e.host&&(e.host=""),n)return;h="",s=be}continue}h+=i;break;case be:if(Y(e)){if(s=we,"/"!=i&&"\\"!=i)continue}else if(n||"?"!=i)if(n||"#"!=i){if(i!=r&&(s=we,"/"!=i))continue}else e.fragment="",s=_e;else e.query="",s=Ee;break;case we:if(i==r||"/"==i||"\\"==i&&Y(e)||!n&&("?"==i||"#"==i)){if(".."===(c=(c=h).toLowerCase())||"%2e."===c||".%2e"===c||"%2e%2e"===c?(te(e),"/"==i||"\\"==i&&Y(e)||e.path.push("")):ne(h)?"/"==i||"\\"==i&&Y(e)||e.path.push(""):("file"==e.scheme&&!e.path.length&&Z(h)&&(e.host&&(e.host=""),h=h.charAt(0)+":"),e.path.push(h)),h="","file"==e.scheme&&(i==r||"?"==i||"#"==i))for(;e.path.length>1&&""===e.path[0];)e.path.shift();"?"==i?(e.query="",s=Ee):"#"==i&&(e.fragment="",s=_e)}else h+=K(i,q);break;case Se:"?"==i?(e.query="",s=Ee):"#"==i?(e.fragment="",s=_e):i!=r&&(e.path[0]+=K(i,W));break;case Ee:n||"#"!=i?i!=r&&("'"==i&&Y(e)?e.query+="%27":e.query+="#"==i?"%23":K(i,W)):(e.fragment="",s=_e);break;case _e:i!=r&&(e.fragment+=K(i,H))}d++}},xe=function(e){var t,n,r=s(this,xe,"URL"),o=arguments.length>1?arguments[1]:void 0,i=String(e),u=E(r,{type:"URL"});if(void 0!==o)if(o instanceof xe)t=_(o);else if(n=ke(t={},String(o)))throw TypeError(n);if(n=ke(u,i,null,t))throw TypeError(n);var l=u.searchParams=new w,c=S(l);c.updateSearchParams(u.query),c.updateURL=function(){u.query=String(l)||null},a||(r.href=Re.call(r),r.origin=Ae.call(r),r.protocol=Oe.call(r),r.username=Ce.call(r),r.password=Ne.call(r),r.host=Le.call(r),r.hostname=Pe.call(r),r.port=je.call(r),r.pathname=Ie.call(r),r.search=Me.call(r),r.searchParams=Ue.call(r),r.hash=Fe.call(r))},Te=xe.prototype,Re=function(){var e=_(this),t=e.scheme,n=e.username,r=e.password,o=e.host,a=e.port,i=e.path,u=e.query,l=e.fragment,c=t+":";return null!==o?(c+="//",X(e)&&(c+=n+(r?":"+r:"")+"@"),c+=$(o),null!==a&&(c+=":"+a)):"file"==t&&(c+="//"),c+=e.cannotBeABaseURL?i[0]:i.length?"/"+i.join("/"):"",null!==u&&(c+="?"+u),null!==l&&(c+="#"+l),c},Ae=function(){var e=_(this),t=e.scheme,n=e.port;if("blob"==t)try{return new xe(t.path[0]).origin}catch(e){return"null"}return"file"!=t&&Y(e)?t+"://"+$(e.host)+(null!==n?":"+n:""):"null"},Oe=function(){return _(this).scheme+":"},Ce=function(){return _(this).username},Ne=function(){return _(this).password},Le=function(){var e=_(this),t=e.host,n=e.port;return null===t?"":null===n?$(t):$(t)+":"+n},Pe=function(){var e=_(this).host;return null===e?"":$(e)},je=function(){var e=_(this).port;return null===e?"":String(e)},Ie=function(){var e=_(this),t=e.path;return e.cannotBeABaseURL?t[0]:t.length?"/"+t.join("/"):""},Me=function(){var e=_(this).query;return e?"?"+e:""},Ue=function(){return _(this).searchParams},Fe=function(){var e=_(this).fragment;return e?"#"+e:""},ze=function(e,t){return{get:e,set:t,configurable:!0,enumerable:!0}};if(a&&l(Te,{href:ze(Re,(function(e){var t=_(this),n=String(e),r=ke(t,n);if(r)throw TypeError(r);S(t.searchParams).updateSearchParams(t.query)})),origin:ze(Ae),protocol:ze(Oe,(function(e){var t=_(this);ke(t,String(e)+":",re)})),username:ze(Ce,(function(e){var t=_(this),n=p(String(e));if(!J(t)){t.username="";for(var r=0;r<n.length;r++)t.username+=K(n[r],G)}})),password:ze(Ne,(function(e){var t=_(this),n=p(String(e));if(!J(t)){t.password="";for(var r=0;r<n.length;r++)t.password+=K(n[r],G)}})),host:ze(Le,(function(e){var t=_(this);t.cannotBeABaseURL||ke(t,String(e),pe)})),hostname:ze(Pe,(function(e){var t=_(this);t.cannotBeABaseURL||ke(t,String(e),he)})),port:ze(je,(function(e){var t=_(this);J(t)||(""==(e=String(e))?t.port=null:ke(t,e,ve))})),pathname:ze(Ie,(function(e){var t=_(this);t.cannotBeABaseURL||(t.path=[],ke(t,e+"",be))})),search:ze(Me,(function(e){var t=_(this);""==(e=String(e))?t.query=null:("?"==e.charAt(0)&&(e=e.slice(1)),t.query="",ke(t,e,Ee)),S(t.searchParams).updateSearchParams(t.query)})),searchParams:ze(Ue),hash:ze(Fe,(function(e){var t=_(this);""!=(e=String(e))?("#"==e.charAt(0)&&(e=e.slice(1)),t.fragment="",ke(t,e,_e)):t.fragment=null}))}),c(Te,"toJSON",(function(){return Re.call(this)}),{enumerable:!0}),c(Te,"toString",(function(){return Re.call(this)}),{enumerable:!0}),b){var De=b.createObjectURL,Ve=b.revokeObjectURL;De&&c(xe,"createObjectURL",(function(e){return De.apply(b,arguments)})),Ve&&c(xe,"revokeObjectURL",(function(e){return Ve.apply(b,arguments)}))}y(xe,"URL"),o({global:!0,forced:!i,sham:!a},{URL:xe})},3753:function(e,t,n){"use strict";n(2109)({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return URL.prototype.toString.call(this)}})},5414:function(e,t,n){"use strict";n.r(t)},8731:function(e,t,n){"use strict";n.r(t)},5304:function(e,t,n){"use strict";n.r(t)},3401:function(e,t,n){"use strict";n.r(t)},3946:function(e,t,n){"use strict";n.r(t)},1100:function(e,t,n){"use strict";e.exports=n.p+"103b5fa18196d5665a7e.svg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r](a,a.exports,n),a.loaded=!0,a.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},function(){var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e}(),function(){"use strict";var e=n(7220),t=n(4530),r=(n(489),n(2419),n(5003),n(9337),n(8100),n(1539),n(8674),n(1249),n(3371),n(9826),n(6992),n(8783),n(3948),n(6210),n(5827),n(4916),n(5306),n(2222),n(8309),n(1532),n(72),n(9137),n(1957),n(6306),n(103),n(4592),n(8276),n(5082),n(2813),n(8222),n(8563),n(336),n(7512),n(2526),n(1817),n(2165),n(4747),n(189),n(8921),n(6248),n(3599),n(1477),n(4362),n(5389),n(401),n(5164),n(1238),n(4837),n(7485),n(465),n(6651),n(1437),n(5285),n(9865),n(1038),n(561),n(7941),n(3123),n(2772),n(4723),n(8264),n(9575),n(8410),n(514),n(6699),n(2023),n(9714),n(5735),n(3753),n(2707),n(9600),n(7327),n(7042),n(7727),n(3290),["override"]),o=["default"],a=["cachePolicyForParams_UNSTABLE"];function i(e){return v(e)||l(e)||w(e)||h()}function u(e){return function(e){if(Array.isArray(e))return S(e)}(e)||l(e)||w(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function s(e,t,n,r,o,a,i){try{var u=e[a](i),l=u.value}catch(e){return void n(e)}u.done?t(l):Promise.resolve(l).then(r,o)}var f=regeneratorRuntime.mark(Ke),d=regeneratorRuntime.mark(Gt);function p(e,t){return v(e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,o,a=[],i=!0,u=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){u=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(u)throw o}}return a}}(e,t)||w(e,t)||h()}function h(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function v(e){if(Array.isArray(e))return e}function y(e){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},y(e)}function m(e){var t="function"==typeof Map?new Map:void 0;return m=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return g(e,arguments,N(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),T(r,e)},m(e)}function g(e,t,n){return g=C()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&T(o,n.prototype),o},g.apply(null,arguments)}function b(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=w(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,u=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){u=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(u)throw a}}}}function w(e,t){if(e){if("string"==typeof e)return S(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?S(e,t):void 0}}function S(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function E(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?E(Object(n),!0).forEach((function(t){k(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):E(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function k(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function x(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&T(e,t)}function T(e,t){return T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},T(e,t)}function R(e){var t=C();return function(){var n,r=N(e);if(t){var o=N(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return A(this,n)}}function A(e,t){return!t||"object"!==y(t)&&"function"!=typeof t?O(e):t}function O(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function C(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function N(e){return N=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},N(e)}function L(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function j(e,t,n){return t&&P(e.prototype,t),n&&P(e,n),e}var I=function(e){var t=new Error(e);if(void 0===t.stack)try{throw t}catch(e){}return t},M=function(e){return!!e&&"function"==typeof e.then},U=function(e,t){if(null!=e)return e;throw I(null!=t?t:"Got unexpected null or undefined")};function F(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var z=function(){function e(){L(this,e)}return j(e,[{key:"getValue",value:function(){throw I("BaseLoadable")}},{key:"toPromise",value:function(){throw I("BaseLoadable")}},{key:"valueMaybe",value:function(){throw I("BaseLoadable")}},{key:"valueOrThrow",value:function(){throw I('Loadable expected value, but in "'.concat(this.state,'" state'))}},{key:"promiseMaybe",value:function(){throw I("BaseLoadable")}},{key:"promiseOrThrow",value:function(){throw I('Loadable expected promise, but in "'.concat(this.state,'" state'))}},{key:"errorMaybe",value:function(){throw I("BaseLoadable")}},{key:"errorOrThrow",value:function(){throw I('Loadable expected error, but in "'.concat(this.state,'" state'))}},{key:"is",value:function(e){return e.state===this.state&&e.contents===this.contents}},{key:"map",value:function(e){throw I("BaseLoadable")}}]),e}(),D=function(e){x(n,e);var t=R(n);function n(e){var r;return L(this,n),F(O(r=t.call(this)),"state","hasValue"),F(O(r),"contents",void 0),r.contents=e,r}return j(n,[{key:"getValue",value:function(){return this.contents}},{key:"toPromise",value:function(){return Promise.resolve(this.contents)}},{key:"valueMaybe",value:function(){return this.contents}},{key:"valueOrThrow",value:function(){return this.contents}},{key:"promiseMaybe",value:function(){}},{key:"errorMaybe",value:function(){}},{key:"map",value:function(e){var t=this;try{var n=e(this.contents);return M(n)?H(n):G(n)?n:$(n)}catch(n){return M(n)?H(n.next((function(){return t.map(e)}))):W(n)}}}]),n}(z),V=function(e){x(n,e);var t=R(n);function n(e){var r;return L(this,n),F(O(r=t.call(this)),"state","hasError"),F(O(r),"contents",void 0),r.contents=e,r}return j(n,[{key:"getValue",value:function(){throw this.contents}},{key:"toPromise",value:function(){return Promise.reject(this.contents)}},{key:"valueMaybe",value:function(){}},{key:"promiseMaybe",value:function(){}},{key:"errorMaybe",value:function(){return this.contents}},{key:"errorOrThrow",value:function(){return this.contents}},{key:"map",value:function(e){return this}}]),n}(z),B=function(e){x(n,e);var t=R(n);function n(e){var r;return L(this,n),F(O(r=t.call(this)),"state","loading"),F(O(r),"contents",void 0),r.contents=e,r}return j(n,[{key:"getValue",value:function(){throw this.contents}},{key:"toPromise",value:function(){return this.contents}},{key:"valueMaybe",value:function(){}},{key:"promiseMaybe",value:function(){return this.contents}},{key:"promiseOrThrow",value:function(){return this.contents}},{key:"errorMaybe",value:function(){}},{key:"map",value:function(e){var t=this;return H(this.contents.then((function(t){var n=e(t);if(G(n)){var r=n;switch(r.state){case"hasValue":case"loading":return r.contents;case"hasError":throw r.contents}}return n})).catch((function(n){if(M(n))return n.then((function(){return t.map(e).contents}));throw n})))}}]),n}(z);function $(e){return Object.freeze(new D(e))}function W(e){return Object.freeze(new V(e))}function H(e){return Object.freeze(new B(e))}function q(e){var t=function(e){return e.every((function(e){return"hasValue"===e.state}))?$(e.map((function(e){return e.contents}))):e.some((function(e){return"hasError"===e.state}))?W(U(e.find((function(e){return"hasError"===e.state})),"Invalid loadable passed to loadableAll").contents):H(Promise.all(e.map((function(e){return e.contents}))))}(Array.isArray(e)?e:Object.getOwnPropertyNames(e).map((function(t){return e[t]})));return Array.isArray(e)?t:t.map((function(t){return Object.getOwnPropertyNames(e).reduce((function(e,n,r){return _(_({},e),{},k({},n,t[r]))}),{})}))}function G(e){return e instanceof z}var K,Q={of:function(e){return M(e)?H(e):$(e)},error:function(e){return W(e)},all:q,isLoadable:G},Y={loadableWithValue:$,loadableWithError:W,loadableWithPromise:H,loadableLoading:function(){return Object.freeze(new B(new Promise((function(){}))))},loadableAll:q,isLoadable:G,RecoilLoadable:Q},X=Y.loadableWithValue,J=Y.loadableWithError,Z=Y.loadableWithPromise,ee=Y.loadableLoading,te=Y.loadableAll,ne=Y.isLoadable,re=Y.RecoilLoadable,oe=Object.freeze({__proto__:null,loadableWithValue:X,loadableWithError:J,loadableWithPromise:Z,loadableLoading:ee,loadableAll:te,isLoadable:ne,RecoilLoadable:re}),ae=null!==(K=e.useMutableSource)&&void 0!==K?K:e.unstable_useMutableSource,ie={mutableSourceExists:function(){return ae&&!("undefined"!=typeof window&&window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE)},useMutableSource:ae},ue=ie.mutableSourceExists,le=(new Map).set("recoil_hamt_2020",!0).set("recoil_memory_managament_2020",!0).set("recoil_suppress_rerender_in_callback",!0);function ce(e){var t;return!("recoil_early_rendering_2021"===e&&!ue())&&null!==(t=le.get(e))&&void 0!==t&&t}ce.setPass=function(e){le.set(e,!0)},ce.setFail=function(e){le.set(e,!1)};var se=ce,fe=function(e,t){return regeneratorRuntime.mark((function n(){var r,o,a,i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:r=0,o=b(e),n.prev=2,o.s();case 4:if((a=o.n()).done){n.next=10;break}return i=a.value,n.next=8,t(i,r++);case 8:n.next=4;break;case 10:n.next=15;break;case 12:n.prev=12,n.t0=n.catch(2),o.e(n.t0);case 15:return n.prev=15,o.f(),n.finish(15);case 18:case"end":return n.stop()}}),n,null,[[2,12,15,18]])}))()},de=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return n.error,null},pe=function e(t){L(this,e),F(this,"key",void 0),this.key=t},he=function(e){x(n,e);var t=R(n);function n(){return L(this,n),t.apply(this,arguments)}return n}(pe),ve=function(e){x(n,e);var t=R(n);function n(){return L(this,n),t.apply(this,arguments)}return n}(pe),ye={AbstractRecoilValue:pe,RecoilState:he,RecoilValueReadOnly:ve,isRecoilValue:function(e){return e instanceof he||e instanceof ve}},me=ye.AbstractRecoilValue,ge=ye.RecoilState,be=ye.RecoilValueReadOnly,we=ye.isRecoilValue,Se=Object.freeze({__proto__:null,AbstractRecoilValue:me,RecoilState:ge,RecoilValueReadOnly:be,isRecoilValue:we}),Ee=function e(){L(this,e)},_e=new Ee,ke=function(e){x(n,e);var t=R(n);function n(e){return L(this,n),t.call(this,"Tried to set the value of Recoil selector ".concat(e," using an updater function, but it is an async selector in a pending or error state; this is not supported."))}return n}(m(Error)),xe=new Map,Te=new Map,Re=function(e){x(n,e);var t=R(n);function n(){return L(this,n),t.apply(this,arguments)}return n}(m(Error)),Ae=new Map;function Oe(e){return Ae.get(e)}var Ce={nodes:xe,recoilValues:Te,registerNode:function(e){if(xe.has(e.key)){var t='Duplicate atom key "'.concat(e.key,'". This is a FATAL ERROR in\n      production. But it is safe to ignore this warning if it occurred because of\n      hot module replacement.');console.warn(t)}xe.set(e.key,e);var n=null==e.set?new Se.RecoilValueReadOnly(e.key):new Se.RecoilState(e.key);return Te.set(e.key,n),n},getNode:function(e){var t=xe.get(e);if(null==t)throw new Re('Missing definition for RecoilValue: "'.concat(e,'""'));return t},getNodeMaybe:function(e){return xe.get(e)},deleteNodeConfigIfPossible:function(e){var t;if(se("recoil_memory_managament_2020")){var n,r=xe.get(e);(null==r||null===(t=r.shouldDeleteConfigOnRelease)||void 0===t?void 0:t.call(r))&&(xe.delete(e),null===(n=Oe(e))||void 0===n||n(),Ae.delete(e))}},setConfigDeletionHandler:function(e,t){se("recoil_memory_managament_2020")&&(void 0===t?Ae.delete(e):Ae.set(e,t))},getConfigDeletionHandler:Oe,recoilValuesForKeys:function(e){return fe(e,(function(e){return U(Te.get(e))}))},NodeMissingError:Re,DefaultValue:Ee,DEFAULT_VALUE:_e,RecoilValueNotReady:ke},Ne=function(e,t){t()},Le=function(e,t){return function(e){var t="function"==typeof Symbol&&"symbol"===y(Symbol.iterator)?function(e){return y(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":y(e)},n={},r=Math.pow(2,5),o=r-1,a=r/2,i=r/4,u={},l=function(e){return function(){return e}},c=n.hash=function(e){var n=void 0===e?"undefined":t(e);if("number"===n)return e;"string"!==n&&(e+="");for(var r=0,o=0,a=e.length;o<a;++o)r=(r<<5)-r+e.charCodeAt(o)|0;return r},s=function(e,t){return t>>>e&o},f=function(e){return 1<<e},d=function(e,t){return n=e&t-1,n=(n=(858993459&(n-=n>>1&1431655765))+(n>>2&858993459))+(n>>4)&252645135,127&(n+=n>>8)+(n>>16);var n},p=function(e,t,n,r){var o=r;if(!e){var a=r.length;o=new Array(a);for(var i=0;i<a;++i)o[i]=r[i]}return o[t]=n,o},h=function(e,t,n){var r=n.length-1,o=0,a=0,i=n;if(e)o=a=t;else for(i=new Array(r);o<t;)i[a++]=n[o++];for(++o;o<=r;)i[a++]=n[o++];return e&&(i.length=r),i},v={__hamt_isEmpty:!0},m=function(e){return e===v||e&&e.__hamt_isEmpty},g=function(e,t,n,r){return{type:1,edit:e,hash:t,key:n,value:r,_modify:k}},b=function(e,t,n){return{type:2,edit:e,hash:t,children:n,_modify:x}},w=function(e,t,n){return{type:3,edit:e,mask:t,children:n,_modify:T}},S=function(e,t,n){return{type:4,edit:e,size:t,children:n,_modify:R}},E=function e(t,n,r,o,a,i){if(r===a)return b(t,r,[i,o]);var u=s(n,r),l=s(n,a);return w(t,f(u)|f(l),u===l?[e(t,n+5,r,o,a,i)]:u<l?[o,i]:[i,o])},_=function(e,t){return e===t.edit},k=function(e,t,n,r,o,a,i){if(t(a,this.key)){var l=r(this.value);return l===this.value?this:l===u?(--i.value,v):_(e,this)?(this.value=l,this):g(e,o,a,l)}var c=r();return c===u?this:(++i.value,E(e,n,this.hash,this,o,g(e,o,a,c)))},x=function(e,t,n,r,o,a,i){if(o===this.hash){var l=function(e,t,n,r,o,a,i,l){for(var c=o.length,s=0;s<c;++s){var f=o[s];if(n(i,f.key)){var d=f.value,v=a(d);return v===d?o:v===u?(--l.value,h(e,s,o)):p(e,s,g(t,r,i,v),o)}}var y=a();return y===u?o:(++l.value,p(e,c,g(t,r,i,y),o))}(_(e,this),e,t,this.hash,this.children,r,a,i);return l===this.children?this:l.length>1?b(e,this.hash,l):l[0]}var c=r();return c===u?this:(++i.value,E(e,n,this.hash,this,o,g(e,o,a,c)))},T=function(e,t,n,r,o,i,u){var l=this.mask,c=this.children,y=s(n,o),g=f(y),b=d(l,g),E=l&g,k=E?c[b]:v,x=k._modify(e,t,n+5,r,o,i,u);if(k===x)return this;var T,R=_(e,this),A=l,O=void 0;if(E&&m(x)){if(!(A&=~g))return v;if(c.length<=2&&((T=c[1^b])===v||1===T.type||2===T.type))return c[1^b];O=h(R,b,c)}else if(E||m(x))O=p(R,b,x,c);else{if(c.length>=a)return function(e,t,n,r,o){for(var a=[],i=r,u=0,l=0;i;++l)1&i&&(a[l]=o[u++]),i>>>=1;return a[t]=n,S(e,u+1,a)}(e,y,x,l,c);A|=g,O=function(e,t,n,r){var o=r.length;if(e){for(var a=o;a>=t;)r[a--]=r[a];return r[t]=n,r}for(var i=0,u=0,l=new Array(o+1);i<t;)l[u++]=r[i++];for(l[t]=n;i<o;)l[++u]=r[i++];return l}(R,b,x,c)}return R?(this.mask=A,this.children=O,this):w(e,A,O)},R=function(e,t,n,r,o,a,u){var l=this.size,c=this.children,f=s(n,o),d=c[f],h=(d||v)._modify(e,t,n+5,r,o,a,u);if(d===h)return this;var y=_(e,this),g=void 0;if(m(d)&&!m(h))++l,g=p(y,f,h,c);else if(!m(d)&&m(h)){if(--l<=i)return function(e,t,n,r){for(var o=new Array(t-1),a=0,i=0,u=0,l=r.length;u<l;++u)if(u!==n){var c=r[u];c&&!m(c)&&(o[a++]=c,i|=1<<u)}return w(e,i,o)}(e,l,f,c);g=p(y,f,v,c)}else g=p(y,f,h,c);return y?(this.size=l,this.children=g,this):S(e,l,g)};function A(e,t,n,r,o){this._editable=e,this._edit=t,this._config=n,this._root=r,this._size=o}v._modify=function(e,t,n,r,o,a,i){var l=r();return l===u?v:(++i.value,g(e,o,a,l))},A.prototype.setTree=function(e,t){return this._editable?(this._root=e,this._size=t,this):e===this._root?this:new A(this._editable,this._edit,this._config,e,t)};var O=n.tryGetHash=function(e,t,n,r){for(var o=r._root,a=0,i=r._config.keyEq;;)switch(o.type){case 1:return i(n,o.key)?o.value:e;case 2:if(t===o.hash)for(var u=o.children,l=0,c=u.length;l<c;++l){var p=u[l];if(i(n,p.key))return p.value}return e;case 3:var h=s(a,t),v=f(h);if(o.mask&v){o=o.children[d(o.mask,v)],a+=5;break}return e;case 4:if(o=o.children[s(a,t)]){a+=5;break}return e;default:return e}};A.prototype.tryGetHash=function(e,t,n){return O(e,t,n,this)};var C=n.tryGet=function(e,t,n){return O(e,n._config.hash(t),t,n)};A.prototype.tryGet=function(e,t){return C(e,t,this)};var N=n.getHash=function(e,t,n){return O(void 0,e,t,n)};A.prototype.getHash=function(e,t){return N(e,t,this)},n.get=function(e,t){return O(void 0,t._config.hash(e),e,t)},A.prototype.get=function(e,t){return C(t,e,this)};var L=n.has=function(e,t,n){return O(u,e,t,n)!==u};A.prototype.hasHash=function(e,t){return L(e,t,this)};var P=n.has=function(e,t){return L(t._config.hash(e),e,t)};A.prototype.has=function(e){return P(e,this)};var j=function(e,t){return e===t};n.make=function(e){return new A(0,0,{keyEq:e&&e.keyEq||j,hash:e&&e.hash||c},v,0)},n.empty=n.make();var I=n.isEmpty=function(e){return e&&!!m(e._root)};A.prototype.isEmpty=function(){return I(this)};var M=n.modifyHash=function(e,t,n,r){var o={value:r._size},a=r._root._modify(r._editable?r._edit:NaN,r._config.keyEq,0,e,t,n,o);return r.setTree(a,o.value)};A.prototype.modifyHash=function(e,t,n){return M(n,e,t,this)};var U=n.modify=function(e,t,n){return M(e,n._config.hash(t),t,n)};A.prototype.modify=function(e,t){return U(t,e,this)};var F=n.setHash=function(e,t,n,r){return M(l(n),e,t,r)};A.prototype.setHash=function(e,t,n){return F(e,t,n,this)};var z=n.set=function(e,t,n){return F(n._config.hash(e),e,t,n)};A.prototype.set=function(e,t){return z(e,t,this)};var D=l(u),V=n.removeHash=function(e,t,n){return M(D,e,t,n)};A.prototype.removeHash=A.prototype.deleteHash=function(e,t){return V(e,t,this)};var B=n.remove=function(e,t){return V(t._config.hash(e),e,t)};A.prototype.remove=A.prototype.delete=function(e){return B(e,this)};var $=n.beginMutation=function(e){return new A(e._editable+1,e._edit+1,e._config,e._root,e._size)};A.prototype.beginMutation=function(){return $(this)};var W=n.endMutation=function(e){return e._editable=e._editable&&e._editable-1,e};A.prototype.endMutation=function(){return W(this)};var H=n.mutate=function(e,t){var n=$(t);return e(n),W(n)};A.prototype.mutate=function(e){return H(e,this)};var q=function(e){return e&&G(e[0],e[1],e[2],e[3],e[4])},G=function(e,t,n,r,o){for(;n<e;){var a=t[n++];if(a&&!m(a))return K(a,r,[e,t,n,r,o])}return q(o)},K=function(e,t,n){switch(e.type){case 1:return{value:t(e),rest:n};case 2:case 4:case 3:var r=e.children;return G(r.length,r,0,t,n);default:return q(n)}},Q={done:!0};function Y(e){this.v=e}Y.prototype.next=function(){if(!this.v)return Q;var e=this.v;return this.v=q(e.rest),e},Y.prototype[Symbol.iterator]=function(){return this};var X=function(e,t){return new Y(K(e._root,t))},J=function(e){return[e.key,e.value]},Z=n.entries=function(e){return X(e,J)};A.prototype.entries=A.prototype[Symbol.iterator]=function(){return Z(this)};var ee=function(e){return e.key},te=n.keys=function(e){return X(e,ee)};A.prototype.keys=function(){return te(this)};var ne=function(e){return e.value},re=n.values=A.prototype.values=function(e){return X(e,ne)};A.prototype.values=function(){return re(this)};var oe=n.fold=function(e,t,n){var r=n._root;if(1===r.type)return e(t,r.value,r.key);for(var o=[r.children],a=void 0;a=o.pop();)for(var i=0,u=a.length;i<u;){var l=a[i++];l&&l.type&&(1===l.type?t=e(t,l.value,l.key):o.push(l.children))}return t};A.prototype.fold=function(e,t){return oe(e,t,this)};var ae=n.forEach=function(e,t){return oe((function(n,r,o){return e(r,o,t)}),null,t)};A.prototype.forEach=function(e){return ae(e,this)};var ie=n.count=function(e){return e._size};A.prototype.count=function(){return ie(this)},Object.defineProperty(A.prototype,"size",{get:A.prototype.count}),e.exports?e.exports=n:(void 0).hamt=n}(t={exports:{}}),t.exports}(),Pe=function(){function e(t){L(this,e),F(this,"_map",void 0),this._map=new Map(null==t?void 0:t.entries())}return j(e,[{key:"keys",value:function(){return this._map.keys()}},{key:"entries",value:function(){return this._map.entries()}},{key:"get",value:function(e){return this._map.get(e)}},{key:"has",value:function(e){return this._map.has(e)}},{key:"set",value:function(e,t){return this._map.set(e,t),this}},{key:"delete",value:function(e){return this._map.delete(e),this}},{key:"clone",value:function(){return Ie(this)}},{key:"toMap",value:function(){return new Map(this._map)}}]),e}(),je=function(){function e(t){if(L(this,e),F(this,"_hamt",Le.empty.beginMutation()),t instanceof e){var n=t._hamt.endMutation();t._hamt=n.beginMutation(),this._hamt=n.beginMutation()}else if(t){var r,o=b(t.entries());try{for(o.s();!(r=o.n()).done;){var a=p(r.value,2),i=a[0],u=a[1];this._hamt.set(i,u)}}catch(e){o.e(e)}finally{o.f()}}}return j(e,[{key:"keys",value:function(){return this._hamt.keys()}},{key:"entries",value:function(){return this._hamt.entries()}},{key:"get",value:function(e){return this._hamt.get(e)}},{key:"has",value:function(e){return this._hamt.has(e)}},{key:"set",value:function(e,t){return this._hamt.set(e,t),this}},{key:"delete",value:function(e){return this._hamt.delete(e),this}},{key:"clone",value:function(){return Ie(this)}},{key:"toMap",value:function(){return new Map(this._hamt)}}]),e}();function Ie(e){return se("recoil_hamt_2020")?new je(e):new Pe(e)}var Me=Ie,Ue=function(e){for(var t=new Set,n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var a,i=b(e);try{e:for(i.s();!(a=i.n()).done;){var u,l=a.value,c=b(r);try{for(c.s();!(u=c.n()).done;){var s=u.value;if(s.has(l))continue e}}catch(e){c.e(e)}finally{c.f()}t.add(l)}}catch(e){i.e(e)}finally{i.f()}return t},Fe=function(e,t){var n=new Map;return e.forEach((function(e,r){n.set(r,t(e,r))})),n};function ze(e,t,n){var r=t.nodeDeps,o=t.nodeToNodeSubscriptions;e.forEach((function(e,t){var a=r.get(t);a&&n&&a!==n.nodeDeps.get(t)||(r.set(t,new Set(e)),(null==a?e:Ue(e,a)).forEach((function(e){o.has(e)||o.set(e,new Set),U(o.get(e)).add(t)})),a&&Ue(a,e).forEach((function(e){if(o.has(e)){var n=U(o.get(e));n.delete(t),0===n.size&&o.delete(e)}})))}))}var De=function(){return{nodeDeps:new Map,nodeToNodeSubscriptions:new Map}},Ve=Object.freeze({__proto__:null,persistentMap:Me}).persistentMap,Be=De,$e=0,We=function(){return $e++};var He=function(){var e,t={version:e=We(),stateID:e,transactionMetadata:{},dirtyAtoms:new Set,atomValues:Ve(),nonvalidatedAtoms:Ve()};return{currentTree:t,nextTree:null,previousTree:null,commitDepth:0,knownAtoms:new Set,knownSelectors:new Set,transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(t.version,Be()),versionsUsedByComponent:new Map,retention:{referenceCounts:new Map,nodesRetainedByZone:new Map,retainablesToCheckForRelease:new Set},nodeCleanupFunctions:new Map}},qe=We,Ge=function(){for(var e=new Set,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];for(var o=0,a=n;o<a.length;o++){var i,u=a[o],l=b(u);try{for(l.s();!(i=l.n()).done;){var c=i.value;e.add(c)}}catch(e){l.e(e)}finally{l.f()}}return e};function Ke(e,t){var n,r,o,a;return regeneratorRuntime.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:n=0,r=b(e),i.prev=2,r.s();case 4:if((o=r.n()).done){i.next=11;break}if(a=o.value,!t(a,n++)){i.next=9;break}return i.next=9,a;case 9:i.next=4;break;case 11:i.next=16;break;case 13:i.prev=13,i.t0=i.catch(2),r.e(i.t0);case 16:return i.prev=16,r.f(),i.finish(16);case 19:case"end":return i.stop()}}),f,null,[[2,13,16,19]])}var Qe=Ke,Ye=function e(){L(this,e)},Xe=Ye,Je=function(e,t){var n=new Set(e);return n.add(t),n},Ze=Ce.getNode,et=Ce.getNodeMaybe,tt=Ce.recoilValuesForKeys,nt=Xe,rt=Object.freeze(new Set),ot=function(e){x(n,e);var t=R(n);function n(){return L(this,n),t.apply(this,arguments)}return n}(m(Error));function at(e,t,n,r){var o=e.getState();if(!o.nodeCleanupFunctions.has(n)){var a=Ze(n),i=function(e,t,n){if(!se("recoil_memory_managament_2020"))return function(){};var r=e.getState().retention.nodesRetainedByZone;function o(e){var n=r.get(e);n||r.set(e,n=new Set),n.add(t)}if(n instanceof nt)o(n);else if(Array.isArray(n)){var a,i=b(n);try{for(i.s();!(a=i.n()).done;)o(a.value)}catch(e){i.e(e)}finally{i.f()}}return function(){if(se("recoil_memory_managament_2020")){var r=e.getState().retention.nodesRetainedByZone;if(n instanceof nt)i(n);else if(Array.isArray(n)){var o,a=b(n);try{for(a.s();!(o=a.n()).done;)i(o.value)}catch(e){a.e(e)}finally{a.f()}}}function i(e){var n=r.get(e);n&&n.delete(t),n&&0===n.size&&r.delete(e)}}}(e,n,a.retainedBy),u=a.init(e,t,r);o.nodeCleanupFunctions.set(n,(function(){u(),i()}))}}function it(e,t,n){return Ze(n).peek(e,t)}function ut(e,t,n){for(var r=new Set,o=Array.from(n),a=e.getGraph(t.version),i=o.pop();i;i=o.pop()){var u;r.add(i);var l,c=b(null!==(u=a.nodeToNodeSubscriptions.get(i))&&void 0!==u?u:rt);try{for(c.s();!(l=c.n()).done;){var s=l.value;r.has(s)||o.push(s)}}catch(e){c.e(e)}finally{c.f()}}return r}var lt=function(e,t,n){return at(e,t,n,"get"),Ze(n).get(e,t)},ct=it,st=function(e,t,n,r){var o=Ze(n);if(null==o.set)throw new ot("Attempt to set read-only RecoilValue: ".concat(n));var a=o.set;return at(e,t,n,"set"),a(e,t,r)},ft=function(e,t){var n,r=e.getState();null===(n=r.nodeCleanupFunctions.get(t))||void 0===n||n(),r.nodeCleanupFunctions.delete(t)},dt=function(e,t,n){var r,o,a,i=e.getState(),u=e.getGraph(t.version),l=i.knownAtoms.has(n)?"atom":i.knownSelectors.has(n)?"selector":void 0,c=Qe(ut(e,t,new Set([n])),(function(e){return e!==n}));return{loadable:it(e,t,n),isActive:i.knownAtoms.has(n)||i.knownSelectors.has(n),isSet:"selector"!==l&&t.atomValues.has(n),isModified:t.dirtyAtoms.has(n),type:l,deps:tt(null!==(r=u.nodeDeps.get(n))&&void 0!==r?r:[]),subscribers:{nodes:tt(c),components:fe(null!==(o=null===(a=i.nodeToComponentSubscriptions.get(n))||void 0===a?void 0:a.values())&&void 0!==o?o:[],(function(e){return{name:p(e,1)[0]}}))}}},pt=ut,ht=at,vt=pt,yt=lt,mt=st,gt=Ce.getNodeMaybe,bt=Ce.DefaultValue,wt=Ce.RecoilValueNotReady,St=Se.AbstractRecoilValue,Et=Se.RecoilState,_t=Se.RecoilValueReadOnly,kt=Se.isRecoilValue;function xt(e,t,n){if("set"===n.type){var r,o=n.recoilValue,a=function(e,t,n,r){var o=n.key;if("function"==typeof r){var a=yt(e,t,o);if("loading"===a.state)throw new wt(o);if("hasError"===a.state)throw a.contents;return r(a.contents)}return r}(e,t,o,n.valueOrUpdater),i=b(mt(e,t,o.key,a).entries());try{for(i.s();!(r=i.n()).done;){var u=p(r.value,2);Tt(t,u[0],u[1])}}catch(e){i.e(e)}finally{i.f()}}else if("setLoadable"===n.type)Tt(t,n.recoilValue.key,n.loadable);else if("markModified"===n.type){var l=n.recoilValue.key;t.dirtyAtoms.add(l)}else if("setUnvalidated"===n.type){var c,s=n.recoilValue.key,f=n.unvalidatedValue,d=gt(s);null==d||null===(c=d.invalidate)||void 0===c||c.call(d,t),t.atomValues.delete(s),t.nonvalidatedAtoms.set(s,f),t.dirtyAtoms.add(s)}else de("Unknown action ".concat(n.type))}function Tt(e,t,n){"hasValue"===n.state&&n.contents instanceof bt?e.atomValues.delete(t):e.atomValues.set(t,n),e.dirtyAtoms.add(t),e.nonvalidatedAtoms.delete(t)}function Rt(e,t){e.replaceState((function(n){var r,o=Ct(n),a=b(t);try{for(a.s();!(r=a.n()).done;){var i=r.value;xt(e,o,i)}}catch(e){a.e(e)}finally{a.f()}return Nt(e,o),o}))}function At(e,t){if(Ot.length){var n=Ot[Ot.length-1],r=n.get(e);r||n.set(e,r=[]),r.push(t)}else Rt(e,[t])}var Ot=[];function Ct(e){return _(_({},e),{},{atomValues:e.atomValues.clone(),nonvalidatedAtoms:e.nonvalidatedAtoms.clone(),dirtyAtoms:new Set(e.dirtyAtoms)})}function Nt(e,t){var n,r=b(vt(e,t,t.dirtyAtoms));try{for(r.s();!(n=r.n()).done;){var o,a,i=n.value;null===(o=gt(i))||void 0===o||null===(a=o.invalidate)||void 0===a||a.call(o,t)}}catch(e){r.e(e)}finally{r.f()}}function Lt(e,t,n){At(e,{type:"set",recoilValue:t,valueOrUpdater:n})}var Pt=0,jt={RecoilValueReadOnly:_t,AbstractRecoilValue:St,RecoilState:Et,getRecoilValueAsLoadable:function(e,t){var n,r,o=t.key,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.getState().currentTree,i=e.getState();a.version!==i.currentTree.version&&a.version!==(null===(n=i.nextTree)||void 0===n?void 0:n.version)&&a.version!==(null===(r=i.previousTree)||void 0===r?void 0:r.version)&&de("Tried to read from a discarded tree");var u=yt(e,a,o);return"loading"===u.state&&u.contents.catch((function(){})),u},setRecoilValue:Lt,setRecoilValueLoadable:function(e,t,n){if(n instanceof bt)return Lt(e,t,n);At(e,{type:"setLoadable",recoilValue:t,loadable:n})},markRecoilValueModified:function(e,t){At(e,{type:"markModified",recoilValue:t})},setUnvalidatedRecoilValue:function(e,t,n){At(e,{type:"setUnvalidated",recoilValue:t,unvalidatedValue:n})},subscribeToRecoilValue:function(e,t,n){var r=t.key,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,a=Pt++,i=e.getState();if(i.nodeToComponentSubscriptions.has(r)||i.nodeToComponentSubscriptions.set(r,new Map),U(i.nodeToComponentSubscriptions.get(r)).set(a,[null!=o?o:"<not captured>",n]),se("recoil_early_rendering_2021")){var u=e.getState().nextTree;u&&u.dirtyAtoms.has(r)&&n(u)}return{release:function(){var t=e.getState(),n=t.nodeToComponentSubscriptions.get(r);void 0!==n&&n.has(a)?(n.delete(a),0===n.size&&t.nodeToComponentSubscriptions.delete(r)):de("Subscription missing at release time for atom ".concat(r,". This is a bug in Recoil."))}}},isRecoilValue:kt,applyAtomValueWrites:function(e,t){var n=e.clone();return t.forEach((function(e,t){"hasValue"===e.state&&e.contents instanceof bt?n.delete(t):n.set(t,e)})),n},batchStart:function(){var e=new Map;return Ot.push(e),function(){var t,n=b(e);try{for(n.s();!(t=n.n()).done;){var r=p(t.value,2);Rt(r[0],r[1])}}catch(e){n.e(e)}finally{n.f()}Ot.pop()!==e&&de("Incorrect order of batch popping")}},writeLoadableToTreeState:Tt,invalidateDownstreams:Nt,copyTreeState:Ct,invalidateDownstreams_FOR_TESTING:Nt},It=function(e,t,n){for(var r=e.entries(),o=r.next();!o.done;){var a=o.value;if(t.call(n,a[1],a[0],e))return!0;o=r.next()}return!1},Mt=ft,Ut=Ce.deleteNodeConfigIfPossible,Ft=Ce.getNode,zt=Xe,Dt=new Set;function Vt(e,t){var n=e.getState(),r=n.currentTree;if(n.nextTree)de("releaseNodesNowOnCurrentTree should only be called at the end of a batch");else{var o,a=new Set,i=b(t);try{for(i.s();!(o=i.n()).done;){var u=o.value;if(u instanceof zt){var l,c=b($t(n,u));try{for(c.s();!(l=c.n()).done;){var s=l.value;a.add(s)}}catch(e){c.e(e)}finally{c.f()}}else a.add(u)}}catch(e){i.e(e)}finally{i.f()}var f,d=function(e,t){var n=e.getState(),r=n.currentTree,o=e.getGraph(r.version),a=new Set,i=new Set;return function t(u){var l,c=new Set,s=function(e,t,n,r,o){for(var a=e.getGraph(t.version),i=[],u=new Set;n.size>0;)l(U(n.values().next().value));return i;function l(e){if(r.has(e)||o.has(e))n.delete(e);else if(!u.has(e)){var t=a.nodeToNodeSubscriptions.get(e);if(t){var c,s=b(t);try{for(s.s();!(c=s.n()).done;)l(c.value)}catch(e){s.e(e)}finally{s.f()}}u.add(e),n.delete(e),i.push(e)}}}(e,r,u,a,i),f=b(s);try{for(f.s();!(l=f.n()).done;){var d,p=l.value;if("recoilRoot"!==Ft(p).retainedBy)if((null!==(d=n.retention.referenceCounts.get(p))&&void 0!==d?d:0)>0)i.add(p);else if(Wt(p).some((function(e){return n.retention.referenceCounts.get(e)})))i.add(p);else{var h=o.nodeToNodeSubscriptions.get(p);h&&It(h,(function(e){return i.has(e)}))?i.add(p):(a.add(p),c.add(p))}else i.add(p)}}catch(e){f.e(e)}finally{f.f()}var v,y=new Set,m=b(c);try{for(m.s();!(v=m.n()).done;){var g,w=v.value,S=b(null!==(E=o.nodeDeps.get(w))&&void 0!==E?E:Dt);try{for(S.s();!(g=S.n()).done;){var E,_=g.value;a.has(_)||y.add(_)}}catch(e){S.e(e)}finally{S.f()}}}catch(e){m.e(e)}finally{m.f()}y.size&&t(y)}(t),a}(e,a),p=b(d);try{for(p.s();!(f=p.n()).done;)Bt(e,r,f.value)}catch(e){p.e(e)}finally{p.f()}}}function Bt(e,t,n){if(se("recoil_memory_managament_2020")){Mt(e,n);var r=e.getState();r.knownAtoms.delete(n),r.knownSelectors.delete(n),r.nodeTransactionSubscriptions.delete(n),r.retention.referenceCounts.delete(n);var o,a=b(Wt(n));try{for(a.s();!(o=a.n()).done;){var i,u=o.value;null===(i=r.retention.nodesRetainedByZone.get(u))||void 0===i||i.delete(n)}}catch(e){a.e(e)}finally{a.f()}t.atomValues.delete(n),t.dirtyAtoms.delete(n),t.nonvalidatedAtoms.delete(n);var l=r.graphsByVersion.get(t.version);if(l){var c=l.nodeDeps.get(n);if(void 0!==c){l.nodeDeps.delete(n);var s,f=b(c);try{for(f.s();!(s=f.n()).done;){var d,p=s.value;null===(d=l.nodeToNodeSubscriptions.get(p))||void 0===d||d.delete(n)}}catch(e){f.e(e)}finally{f.f()}}l.nodeToNodeSubscriptions.delete(n)}Ut(n)}}function $t(e,t){var n;return null!==(n=e.retention.nodesRetainedByZone.get(t))&&void 0!==n?n:Dt}function Wt(e){var t=Ft(e).retainedBy;return void 0===t||"components"===t||"recoilRoot"===t?[]:t instanceof zt?[t]:t}var Ht=function(e,t,n){var r;if(se("recoil_memory_managament_2020")){var o=e.getState().retention.referenceCounts,a=(null!==(r=o.get(t))&&void 0!==r?r:0)+n;0===a?function(e,t){se("recoil_memory_managament_2020")&&(e.getState().retention.referenceCounts.delete(t),function(e,t){var n=e.getState();n.nextTree?n.retention.retainablesToCheckForRelease.add(t):Vt(e,new Set([t]))}(e,t))}(e,t):o.set(t,a)}},qt=function(e){return void 0===e?"recoilRoot":e};function Gt(e){var t,n,r,o,a,i;return regeneratorRuntime.wrap((function(u){for(;;)switch(u.prev=u.next){case 0:t=b(e),u.prev=1,t.s();case 3:if((n=t.n()).done){u.next=24;break}r=n.value,o=b(r),u.prev=6,o.s();case 8:if((a=o.n()).done){u.next=14;break}return i=a.value,u.next=12,i;case 12:u.next=8;break;case 14:u.next=19;break;case 16:u.prev=16,u.t0=u.catch(6),o.e(u.t0);case 19:return u.prev=19,o.f(),u.finish(19);case 22:u.next=3;break;case 24:u.next=29;break;case 26:u.prev=26,u.t1=u.catch(1),t.e(u.t1);case 29:return u.prev=29,t.f(),u.finish(29);case 32:case"end":return u.stop()}}),d,null,[[1,26,29,32],[6,16,19,22]])}var Kt=Gt,Qt={isSSR:"undefined"==typeof window,isReactNative:"undefined"!=typeof navigator&&"ReactNative"===navigator.product},Yt=t.unstable_batchedUpdates,Xt=jt.batchStart,Jt=Yt,Zt=function(e){Jt((function(){var t=function(){};try{t=Xt(),e()}finally{t()}}))},en=Qt.isSSR,tn=Zt,nn=ht,rn=dt,on=De,an=Ce.DEFAULT_VALUE,un=Ce.recoilValues,ln=Ce.recoilValuesForKeys,cn=jt.AbstractRecoilValue,sn=jt.getRecoilValueAsLoadable,fn=jt.setRecoilValue,dn=jt.setUnvalidatedRecoilValue,pn=Ht,hn=qe,vn=He,yn=function(){function e(t){var n=this;L(this,e),F(this,"_store",void 0),F(this,"_refCount",0),F(this,"getLoadable",(function(e){return n.checkRefCount_INTERNAL(),sn(n._store,e)})),F(this,"getPromise",(function(e){return n.checkRefCount_INTERNAL(),n.getLoadable(e).toPromise()})),F(this,"getNodes_UNSTABLE",(function(e){if(n.checkRefCount_INTERNAL(),!0===(null==e?void 0:e.isModified)){if(!1===(null==e?void 0:e.isInitialized))return[];var t=n._store.getState().currentTree;return ln(t.dirtyAtoms)}var r=n._store.getState().knownAtoms,o=n._store.getState().knownSelectors;return null==(null==e?void 0:e.isInitialized)?un.values():!0===e.isInitialized?ln(Kt([n._store.getState().knownAtoms,n._store.getState().knownSelectors])):Qe(un.values(),(function(e){var t=e.key;return!r.has(t)&&!o.has(t)}))})),F(this,"getInfo_UNSTABLE",(function(e){var t=e.key;return n.checkRefCount_INTERNAL(),rn(n._store,n._store.getState().currentTree,t)})),F(this,"map",(function(e){n.checkRefCount_INTERNAL();var t=new bn(n,tn);return e(t),gn(t.getStore_INTERNAL())})),F(this,"asyncMap",function(){var e,t=(e=regeneratorRuntime.mark((function e(t){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.checkRefCount_INTERNAL(),r=new bn(n,tn),e.next=4,t(r);case 4:return e.abrupt("return",gn(r.getStore_INTERNAL()));case 5:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){s(a,r,o,i,u,"next",e)}function u(e){s(a,r,o,i,u,"throw",e)}i(void 0)}))});return function(e){return t.apply(this,arguments)}}()),this._store={getState:function(){return t},replaceState:function(e){t.currentTree=e(t.currentTree)},getGraph:function(e){var n=t.graphsByVersion;if(n.has(e))return U(n.get(e));var r=on();return n.set(e,r),r},subscribeToTransactions:function(){return{release:function(){}}},addTransactionMetadata:function(){throw I("Cannot subscribe to Snapshots")}};var r,o=b(this._store.getState().nodeCleanupFunctions.keys());try{for(o.s();!(r=o.n()).done;){var a=r.value;nn(this._store,t.currentTree,a,"get"),pn(this._store,a,1)}}catch(e){o.e(e)}finally{o.f()}this.retain(),this.autorelease_INTERNAL()}return j(e,[{key:"retain",value:function(){var e=this;if(!se("recoil_memory_managament_2020"))return function(){};this._refCount++;var t=!1;return function(){t||(t=!0,e.release_INTERNAL())}}},{key:"autorelease_INTERNAL",value:function(){var e=this;se("recoil_memory_managament_2020")&&(en||window.setTimeout((function(){return e.release_INTERNAL()}),0))}},{key:"release_INTERNAL",value:function(){se("recoil_memory_managament_2020")&&(this._refCount--,this._refCount)}},{key:"checkRefCount_INTERNAL",value:function(){se("recoil_memory_managament_2020")&&this._refCount}},{key:"getStore_INTERNAL",value:function(){return this.checkRefCount_INTERNAL(),this._store}},{key:"getID",value:function(){return this.checkRefCount_INTERNAL(),this.getID_INTERNAL()}},{key:"getID_INTERNAL",value:function(){return this.checkRefCount_INTERNAL(),this._store.getState().currentTree.stateID}}]),e}();function mn(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=e.getState(),o=n?hn():t.version;return{currentTree:n?{version:o,stateID:o,transactionMetadata:_({},t.transactionMetadata),dirtyAtoms:new Set(t.dirtyAtoms),atomValues:t.atomValues.clone(),nonvalidatedAtoms:t.nonvalidatedAtoms.clone()}:t,commitDepth:0,nextTree:null,previousTree:null,knownAtoms:new Set(r.knownAtoms),knownSelectors:new Set(r.knownSelectors),transactionSubscriptions:new Map,nodeTransactionSubscriptions:new Map,nodeToComponentSubscriptions:new Map,queuedComponentCallbacks_DEPRECATED:[],suspendedComponentResolvers:new Set,graphsByVersion:(new Map).set(o,e.getGraph(t.version)),versionsUsedByComponent:new Map,retention:{referenceCounts:new Map,nodesRetainedByZone:new Map,retainablesToCheckForRelease:new Set},nodeCleanupFunctions:new Map}}function gn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"current",n=e.getState(),r="current"===t?n.currentTree:U(n.previousTree);return new yn(mn(e,r))}var bn=function(e){x(n,e);var t=R(n);function n(e,r){var o;return L(this,n),F(O(o=t.call(this,mn(e.getStore_INTERNAL(),e.getStore_INTERNAL().getState().currentTree,!0))),"_batch",void 0),F(O(o),"set",(function(e,t){o.checkRefCount_INTERNAL();var n=o.getStore_INTERNAL();o._batch((function(){pn(n,e.key,1),fn(o.getStore_INTERNAL(),e,t)}))})),F(O(o),"reset",(function(e){o.checkRefCount_INTERNAL();var t=o.getStore_INTERNAL();o._batch((function(){pn(t,e.key,1),fn(o.getStore_INTERNAL(),e,an)}))})),F(O(o),"setUnvalidatedAtomValues_DEPRECATED",(function(e){o.checkRefCount_INTERNAL();var t=o.getStore_INTERNAL();tn((function(){var n,r=b(e.entries());try{for(r.s();!(n=r.n()).done;){var o=p(n.value,2),a=o[0],i=o[1];pn(t,a,1),dn(t,new cn(a),i)}}catch(e){r.e(e)}finally{r.f()}}))})),o._batch=r,o}return n}(yn),wn={Snapshot:yn,MutableSnapshot:bn,freshSnapshot:function(e){var t=new yn(vn());return null!=e?t.map(e):t},cloneSnapshot:gn},Sn=wn.Snapshot,En=wn.MutableSnapshot,_n=wn.freshSnapshot,kn=wn.cloneSnapshot,xn=Object.freeze({__proto__:null,Snapshot:Sn,MutableSnapshot:En,freshSnapshot:_n,cloneSnapshot:kn}),Tn=qe,Rn=He,An=ft,On=pt,Cn=st,Nn=function(e,t,n){var r,o=et(t);return null==o||null===(r=o.invalidate)||void 0===r||r.call(o,e),_(_({},e),{},{atomValues:e.atomValues.clone().delete(t),nonvalidatedAtoms:e.nonvalidatedAtoms.clone().set(t,n),dirtyAtoms:Je(e.dirtyAtoms,t)})},Ln=De,Pn=function(e){return{nodeDeps:Fe(e.nodeDeps,(function(e){return new Set(e)})),nodeToNodeSubscriptions:Fe(e.nodeToNodeSubscriptions,(function(e){return new Set(e)}))}},jn=jt.applyAtomValueWrites,In=function(e){if(se("recoil_memory_managament_2020")){var t=e.getState();Vt(e,t.retention.retainablesToCheckForRelease),t.retention.retainablesToCheckForRelease.clear()}},Mn=xn.freshSnapshot,Un=e.useCallback,Fn=e.useContext,zn=e.useEffect,Dn=e.useMemo,Vn=e.useRef,Bn=e.useState;function $n(){throw I("This component must be used inside a <RecoilRoot> component.")}var Wn=Object.freeze({getState:$n,replaceState:$n,getGraph:$n,subscribeToTransactions:$n,addTransactionMetadata:$n}),Hn=!1;function qn(e){if(Hn)throw I("An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.");var t=e.getState();if(null===t.nextTree){se("recoil_memory_managament_2020")&&se("recoil_release_on_cascading_update_killswitch_2021")&&t.commitDepth>0&&In(e);var n=t.currentTree.version,r=Tn();t.nextTree=_(_({},t.currentTree),{},{version:r,stateID:r,dirtyAtoms:new Set,transactionMetadata:{}}),t.graphsByVersion.set(r,Pn(U(t.graphsByVersion.get(n))))}}var Gn=e.createContext({current:Wn}),Kn=function(){return Fn(Gn)},Qn=e.createContext(null);function Yn(e,t,n){var r,o=b(On(e,n,n.dirtyAtoms));try{for(o.s();!(r=o.n()).done;){var a=r.value,i=t.nodeToComponentSubscriptions.get(a);if(i){var u,l=b(i);try{for(l.s();!(u=l.n()).done;){var c=p(u.value,2),s=(c[0],p(c[1],2));s[0],(0,s[1])(n)}}catch(e){l.e(e)}finally{l.f()}}}}catch(e){o.e(e)}finally{o.f()}}function Xn(e){var t=e.setNotifyBatcherOfChange,n=Kn(),r=p(Bn([]),2),o=(r[0],r[1]);return t((function(){return o({})})),zn((function(){Ne("Batcher",(function(){!function(e){var t=e.current.getState();t.commitDepth++;try{var n=t.nextTree;if(null===n)return;t.previousTree=t.currentTree,t.currentTree=n,t.nextTree=null,function(e){var t=e.getState(),n=t.currentTree,r=n.dirtyAtoms;if(r.size){var o,a=b(t.nodeTransactionSubscriptions);try{for(a.s();!(o=a.n()).done;){var i=p(o.value,2),u=i[0],l=i[1];if(r.has(u)){var c,s=b(l);try{for(s.s();!(c=s.n()).done;){var f=p(c.value,2);f[0],(0,f[1])(e)}}catch(e){s.e(e)}finally{s.f()}}}}catch(e){a.e(e)}finally{a.f()}var d,h=b(t.transactionSubscriptions);try{for(h.s();!(d=h.n()).done;){var v=p(d.value,2);v[0],(0,v[1])(e)}}catch(e){h.e(e)}finally{h.f()}se("recoil_early_rendering_2021")&&!t.suspendedComponentResolvers.size||(Yn(e,t,n),t.suspendedComponentResolvers.forEach((function(e){return e()})),t.suspendedComponentResolvers.clear())}t.queuedComponentCallbacks_DEPRECATED.forEach((function(e){return e(n)})),t.queuedComponentCallbacks_DEPRECATED.splice(0,t.queuedComponentCallbacks_DEPRECATED.length)}(e.current),null!=t.previousTree?t.graphsByVersion.delete(t.previousTree.version):de("Ended batch with no previous state, which is unexpected","recoil"),t.previousTree=null,se("recoil_memory_managament_2020")&&In(e.current)}finally{t.commitDepth--}}(n)}))})),zn((function(){return function(){t((function(){}))}}),[t]),null}var Jn=0;function Zn(t){var n,r,o=t.initializeState_DEPRECATED,a=t.initializeState,i=t.store_INTERNAL,u=t.children,l=Vn(null),c=Un((function(e){l.current=e}),[l]),s=null!==(n=e.createMutableSource)&&void 0!==n?n:e.unstable_createMutableSource,f=null!=i?i:{getState:function(){return r.current},replaceState:function(e){var t=d.current.getState();qn(d.current);var n,r=U(t.nextTree);try{Hn=!0,n=e(r)}finally{Hn=!1}n!==r&&(t.nextTree=n,se("recoil_early_rendering_2021")&&Yn(f,t,n),U(l.current)())},getGraph:function(e){var t=r.current.graphsByVersion;if(t.has(e))return U(t.get(e));var n=Ln();return t.set(e,n),n},subscribeToTransactions:function(e,t){if(null==t){var n=d.current.getState().transactionSubscriptions,r=Jn++;return n.set(r,e),{release:function(){n.delete(r)}}}var o=d.current.getState().nodeTransactionSubscriptions;o.has(t)||o.set(t,new Map);var a=Jn++;return U(o.get(t)).set(a,e),{release:function(){var e=o.get(t);e&&(e.delete(a),0===e.size&&o.delete(t))}}},addTransactionMetadata:function(e){qn(d.current);for(var t=0,n=Object.keys(e);t<n.length;t++){var r=n[t];U(d.current.getState().nextTree).transactionMetadata[r]=e[r]}}},d=Vn(f);r=Vn(null!=o?function(e,t){var n=Rn();return t({set:function(t,r){var o,a=n.currentTree,i=Cn(e,a,t.key,r),u=new Set(i.keys()),l=a.nonvalidatedAtoms.clone(),c=b(u);try{for(c.s();!(o=c.n()).done;){var s=o.value;l.delete(s)}}catch(e){c.e(e)}finally{c.f()}n.currentTree=_(_({},a),{},{dirtyAtoms:Ge(a.dirtyAtoms,u),atomValues:jn(a.atomValues,i),nonvalidatedAtoms:l})},setUnvalidatedAtomValues:function(e){e.forEach((function(e,t){n.currentTree=Nn(n.currentTree,t,e)}))}}),n}(f,o):null!=a?function(e){return Mn().map(e).getStore_INTERNAL().getState()}(a):Rn());var p=Dn((function(){return s?s(r,(function(){return r.current.currentTree.version})):null}),[s,r]);return zn((function(){return function(){var e,t=b(d.current.getState().knownAtoms);try{for(t.s();!(e=t.n()).done;){var n=e.value;An(d.current,n)}}catch(e){t.e(e)}finally{t.f()}}}),[]),e.createElement(Gn.Provider,{value:d},e.createElement(Qn.Provider,{value:p},e.createElement(Xn,{setNotifyBatcherOfChange:c}),u))}var er=Kn,tr=function(t){var n=t.override,o=c(t,r),a=Kn();return!1===n&&a.current!==Wn?t.children:e.createElement(Zn,o)},nr=e.useRef,rr=function(){return nr(),"<component name not available>"},or=e.useEffect,ar=e.useRef,ir=function(e){var t=ar();return or((function(){t.current=e})),t.current},ur=er,lr=Ht,cr=Xe,sr=Qt.isSSR,fr=e.useEffect,dr=e.useRef,pr=function(e){if(se("recoil_memory_managament_2020"))return function(e){var t=(Array.isArray(e)?e:[e]).map((function(e){return e instanceof cr?e:e.key})),n=ur();fr((function(){if(se("recoil_memory_managament_2020")){var e=n.current;if(r.current&&!sr)window.clearTimeout(r.current),r.current=null;else{var o,a=b(t);try{for(a.s();!(o=a.n()).done;){var i=o.value;lr(e,i,1)}}catch(e){a.e(e)}finally{a.f()}}return function(){var n,r=b(t);try{for(r.s();!(n=r.n()).done;){var o=n.value;lr(e,o,-1)}}catch(e){r.e(e)}finally{r.f()}}}}),[n].concat(u(t)));var r=dr(),o=ir(t);if(!(sr||void 0!==o&&function(e,t){if(e===t)return!0;if(e.length!==t.length)return!1;for(var n=0,r=e.length;n<r;n++)if(e[n]!==t[n])return!1;return!0}(o,t))){var a,i=n.current,l=b(t);try{for(l.s();!(a=l.n()).done;){var c=a.value;lr(i,c,1)}}catch(e){l.e(e)}finally{l.f()}if(o){var s,f=b(o);try{for(f.s();!(s=f.n()).done;){var d=s.value;lr(i,d,-1)}}catch(e){f.e(e)}finally{f.f()}}r.current&&window.clearTimeout(r.current),r.current=window.setTimeout((function(){r.current=null;var e,n=b(t);try{for(n.s();!(e=n.n()).done;){var o=e.value;lr(i,o,-1)}}catch(e){n.e(e)}finally{n.f()}}),12e4)}}(e)},hr=Zt,vr=Ce.DEFAULT_VALUE,yr=function(){var e=Fn(Qn);return e},mr=er,gr=(Se.isRecoilValue,jt.AbstractRecoilValue),br=jt.getRecoilValueAsLoadable,wr=jt.setRecoilValue,Sr=jt.setUnvalidatedRecoilValue,Er=jt.subscribeToRecoilValue,_r=ie.mutableSourceExists,kr=ie.useMutableSource,xr=e.useCallback,Tr=e.useEffect,Rr=(e.useMemo,e.useRef),Ar=e.useState;function Or(e){return se("recoil_memory_managament_2020")&&pr(e),_r()?function(e){var t=mr(),n=xr((function(){var n,r=t.current,o=r.getState(),a=se("recoil_early_rendering_2021")&&null!==(n=o.nextTree)&&void 0!==n?n:o.currentTree;return br(r,e,a)}),[t,e]),r=xr((function(){return n()}),[n]),o=rr(),a=xr((function(r,a){var i=t.current;return Er(i,e,(function(){if(!se("recoil_suppress_rerender_in_callback"))return a();var e=n();l.current.is(e)||a(),l.current=e}),o).release}),[t,e,o,n]),i=yr(),u=kr(i,r,a),l=Rr(u);return Tr((function(){l.current=u})),u}(e):function(e){var t=mr(),n=p(Ar([]),2),r=(n[0],n[1]),o=rr();Tr((function(){var n=t.current,a=n.getState(),u=Er(n,e,(function(t){var o;if(!se("recoil_suppress_rerender_in_callback"))return r([]);var a=br(n,e,n.getState().currentTree);(null===(o=i.current)||void 0===o?void 0:o.is(a))||r(a),i.current=a}),o);if(a.nextTree)n.getState().queuedComponentCallbacks_DEPRECATED.push((function(){i.current=null,r([])}));else{var l;if(!se("recoil_suppress_rerender_in_callback"))return r([]);var c=br(n,e,n.getState().currentTree);(null===(l=i.current)||void 0===l?void 0:l.is(c))||r(c),i.current=c}return u.release}),[o,e,t]);var a=br(t.current,e),i=Rr(a);return Tr((function(){i.current=a})),a}(e)}function Cr(e){var t=mr();return function(e,t,n){if("hasValue"===e.state)return e.contents;if("loading"===e.state)throw new Promise((function(e){n.current.getState().suspendedComponentResolvers.add(e)}));throw"hasError"===e.state?e.contents:I('Invalid value of loadable atom "'.concat(t.key,'"'))}(Or(e),e,t)}function Nr(e){var t=mr();return xr((function(n){wr(t.current,e,n)}),[t,e])}var Lr=Cr,Pr=Or,jr=Nr,Ir=Zt,Mr=Ce.DEFAULT_VALUE,Ur=Ce.getNode,Fr=Ce.nodes,zr=er,Dr=jt.AbstractRecoilValue,Vr=jt.setRecoilValueLoadable,Br=(xn.Snapshot,xn.cloneSnapshot),$r=Qt.isSSR,Wr=e.useCallback,Hr=e.useEffect,qr=e.useRef,Gr=e.useState;function Kr(e){var t=zr();Hr((function(){return t.current.subscribeToTransactions(e).release}),[e,t])}function Qr(e){var t=e.atomValues.toMap(),n=Fe(function(e,t){var n,r=new Map,o=b(e);try{for(o.s();!(n=o.n()).done;){var a=p(n.value,2),i=a[0],u=a[1];t(u,i)&&r.set(i,u)}}catch(e){o.e(e)}finally{o.f()}return r}(t,(function(e,t){var n=Ur(t).persistence_UNSTABLE;return null!=n&&"none"!==n.type&&"hasValue"===e.state})),(function(e){return e.contents}));return function(){for(var e=new Map,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];for(var o=0;o<n.length;o++)for(var a=n[o].keys(),i=void 0;!(i=a.next()).done;)e.set(i.value,n[o].get(i.value));return e}(e.nonvalidatedAtoms.toMap(),n)}var Yr=function(){var e=zr();return Wr((function(t){var n,r=e.current.getState(),o=null!==(n=r.nextTree)&&void 0!==n?n:r.currentTree,a=t.getStore_INTERNAL().getState().currentTree;Ir((function(){for(var n=new Set,r=0,i=[o.atomValues.keys(),a.atomValues.keys()];r<i.length;r++){var u,l=b(i[r]);try{for(l.s();!(u=l.n()).done;){var c,s,f=u.value;(null===(c=o.atomValues.get(f))||void 0===c?void 0:c.contents)!==(null===(s=a.atomValues.get(f))||void 0===s?void 0:s.contents)&&Ur(f).shouldRestoreFromSnapshots&&n.add(f)}}catch(e){l.e(e)}finally{l.f()}}n.forEach((function(t){Vr(e.current,new Dr(t),a.atomValues.has(t)?U(a.atomValues.get(t)):Mr)})),e.current.replaceState((function(e){return _(_({},e),{},{stateID:t.getID_INTERNAL()})}))}))}),[e])},Xr=dt,Jr=er,Zr=tr,eo=er,to=e.useMemo,no=oe.loadableWithValue,ro=Ce.DEFAULT_VALUE,oo=Ce.getNode,ao=jt.copyTreeState,io=jt.getRecoilValueAsLoadable,uo=jt.invalidateDownstreams,lo=jt.writeLoadableToTreeState;function co(e){return"atom"===oo(e.key).nodeType}var so=function(){function e(t,n){var r=this;L(this,e),F(this,"_store",void 0),F(this,"_treeState",void 0),F(this,"_changes",void 0),F(this,"get",(function(e){if(r._changes.has(e.key))return r._changes.get(e.key);if(!co(e))throw I("Reading selectors within atomicUpdate is not supported");var t=io(r._store,e,r._treeState);if("hasValue"===t.state)return t.contents;throw"hasError"===t.state?t.contents:I("Expected Recoil atom ".concat(e.key," to have a value, but it is in a loading state."))})),F(this,"set",(function(e,t){if(!co(e))throw I("Setting selectors within atomicUpdate is not supported");if("function"==typeof t){var n=r.get(e);r._changes.set(e.key,t(n))}else r._changes.set(e.key,t)})),F(this,"reset",(function(e){r.set(e,ro)})),this._store=t,this._treeState=n,this._changes=new Map}return j(e,[{key:"newTreeState_INTERNAL",value:function(){if(0===this._changes.size)return this._treeState;var e,t=ao(this._treeState),n=b(this._changes);try{for(n.s();!(e=n.n()).done;){var r=p(e.value,2),o=r[0],a=r[1];lo(t,o,no(a))}}catch(e){n.e(e)}finally{n.f()}return uo(this._store,t),t}}]),e}(),fo=Object.freeze({__proto__:null,atomicUpdater:function(e){return function(t){e.replaceState((function(n){var r=new so(e,n);return t(r),r.newTreeState_INTERNAL()}))}}}),po=function(e,t){if(!e)throw new Error(t)},ho=fo.atomicUpdater,vo=Zt,yo=Ce.DEFAULT_VALUE,mo=er,go=jt.setRecoilValue,bo=(xn.Snapshot,xn.cloneSnapshot),wo=Yr,So=e.useCallback,Eo=function e(){L(this,e)},_o=new Eo,ko=Ce.getNode,xo=er,To=e.useCallback,Ro=fo.atomicUpdater,Ao=er,Oo=e.useMemo;function Co(e,t,n){if("string"==typeof e&&!e.includes('"')&&!e.includes("\\"))return'"'.concat(e,'"');switch(y(e)){case"undefined":return"";case"boolean":return e?"true":"false";case"number":case"symbol":return String(e);case"string":return JSON.stringify(e);case"function":if(!0!==(null==t?void 0:t.allowFunctions))throw I("Attempt to serialize function in a Recoil cache key");return"__FUNCTION(".concat(e.name,")__")}if(null===e)return"null";var r;if("object"!==y(e))return null!==(r=JSON.stringify(e))&&void 0!==r?r:"";if(M(e))return"__PROMISE__";if(Array.isArray(e))return"[".concat(e.map((function(e,n){return Co(e,t,n.toString())})),"]");if("function"==typeof e.toJSON)return Co(e.toJSON(n),t,n);if(e instanceof Map){var o,a={},i=b(e);try{for(i.s();!(o=i.n()).done;){var u=p(o.value,2),l=u[0],c=u[1];a["string"==typeof l?l:Co(l,t)]=c}}catch(e){i.e(e)}finally{i.f()}return Co(a,t,n)}return e instanceof Set?Co(Array.from(e).sort((function(e,n){return Co(e,t).localeCompare(Co(n,t))})),t,n):void 0!==Symbol&&null!=e[Symbol.iterator]&&"function"==typeof e[Symbol.iterator]?Co(Array.from(e),t,n):"{".concat(Object.keys(e).filter((function(t){return void 0!==e[t]})).sort().map((function(n){return"".concat(Co(n,t),":").concat(Co(e[n],t,n))})).join(","),"}")}var No=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{allowFunctions:!1};return Co(e,t)},Lo=function(){function e(t){var n,r,o;L(this,e),F(this,"_numLeafs",void 0),F(this,"_root",void 0),F(this,"_onHit",void 0),F(this,"_onSet",void 0),F(this,"_mapNodeValue",void 0),this._numLeafs=0,this._root=null,this._onHit=null!==(n=null==t?void 0:t.onHit)&&void 0!==n?n:function(){},this._onSet=null!==(r=null==t?void 0:t.onSet)&&void 0!==r?r:function(){},this._mapNodeValue=null!==(o=null==t?void 0:t.mapNodeValue)&&void 0!==o?o:function(e){return e}}return j(e,[{key:"size",value:function(){return this._numLeafs}},{key:"root",value:function(){return this._root}},{key:"get",value:function(e,t){var n;return null===(n=this.getLeafNode(e,t))||void 0===n?void 0:n.value}},{key:"getLeafNode",value:function(e,t){var n=this;return Po(this.root(),(function(t){return n._mapNodeValue(e(t))}),{onNodeVisit:function(e){null==t||t.onNodeVisit(e),"leaf"===e.type&&n._onHit(e)}})}},{key:"set",value:function(e,t,n){var r,o=this,a=null;!function i(){a=jo(o.root(),e.map((function(e){var t=p(e,2),n=t[0],r=t[1];return[n,o._mapNodeValue(r)]})),null,t,null,{onNodeVisit:function(e){null==n||n.onNodeVisit(e),"leaf"===e.type&&(r=e)}},(function(){o.clear(),i()}))}(),this.root()||(this._root=a),this._numLeafs++,this._onSet(U(r))}},{key:"delete",value:function(e){if(!this.root())return!1;var t=U(this.root());return!!Io(t,e,e.parent)&&(e===t||"branch"===t.type&&!t.branches.size?(this._root=null,this._numLeafs=0,!0):(this._numLeafs-=Uo(e),!0))}},{key:"clear",value:function(){this._numLeafs=0,this._root=null}}]),e}(),Po=function e(t,n,r){var o;if(null!=t){if(null==r||null===(o=r.onNodeVisit)||void 0===o||o.call(r,t),"leaf"===t.type)return t;var a=n(t.nodeKey);return e(t.branches.get(a),n,r)}},jo=function e(t,n,r,o,a,u,l){var c,s;if(null==t)if(0===n.length)s={type:"leaf",value:o,parent:r,branchKey:a};else{var f=i(n),d=f[0],h=f.slice(1),v=p(d,2),y=v[0],m=v[1];(s={type:"branch",nodeKey:y,parent:r,branches:new Map,branchKey:a}).branches.set(m,e(null,h,s,o,m,u,l))}else if(s=t,n.length){var g=i(n),b=g[0],w=g.slice(1),S=p(b,2),E=S[0],_=S[1];if("branch"!==t.type||t.nodeKey!==E)return de("Existing cache must have a branch midway through the route with matching node key. Resetting cache."),l(),s;t.branches.set(_,e(t.branches.get(_),w,t,o,_,u,l))}return null==u||null===(c=u.onNodeVisit)||void 0===c||c.call(u,s),s},Io=function(e,t,n){return n?(n.branches.delete(t.branchKey),Mo(e,n,n.parent)):e===t},Mo=function e(t,n,r){return r?(0===n.branches.size&&r.branches.delete(n.branchKey),e(t,r,r.parent)):t===n},Uo=function e(t){return"leaf"===t.type?1:Array.from(t.branches.values()).reduce((function(t,n){return t+e(n)}),0)},Fo=Lo,zo=Object.freeze({__proto__:null,TreeCache:Fo}),Do=function(){function e(t){var n;L(this,e),F(this,"_maxSize",void 0),F(this,"_size",void 0),F(this,"_head",void 0),F(this,"_tail",void 0),F(this,"_map",void 0),F(this,"_keyMapper",void 0),this._maxSize=t.maxSize,this._size=0,this._head=null,this._tail=null,this._map=new Map,this._keyMapper=null!==(n=t.mapKey)&&void 0!==n?n:function(e){return e}}return j(e,[{key:"head",value:function(){return this._head}},{key:"tail",value:function(){return this._tail}},{key:"size",value:function(){return this._size}},{key:"maxSize",value:function(){return this._maxSize}},{key:"has",value:function(e){return this._map.has(this._keyMapper(e))}},{key:"get",value:function(e){var t=this._keyMapper(e),n=this._map.get(t);if(n)return this.set(e,n.value),n.value}},{key:"set",value:function(e,t){var n=this._keyMapper(e);this._map.get(n)&&this.delete(e);var r=this.head(),o={key:e,right:r,left:null,value:t};r?r.left=o:this._tail=o,this._map.set(n,o),this._head=o,this._size++,this._maybeDeleteLRU()}},{key:"_maybeDeleteLRU",value:function(){this.size()>this.maxSize()&&this.deleteLru()}},{key:"deleteLru",value:function(){var e=this.tail();e&&this.delete(e.key)}},{key:"delete",value:function(e){var t=this._keyMapper(e);if(this._size&&this._map.has(t)){var n=U(this._map.get(t)),r=n.right,o=n.left;r&&(r.left=n.left),o&&(o.right=n.right),n===this.head()&&(this._head=r),n===this.tail()&&(this._tail=o),this._map.delete(t),this._size--}}},{key:"clear",value:function(){this._size=0,this._head=null,this._tail=null,this._map=new Map}}]),e}(),Vo=Object.freeze({__proto__:null,LRUCache:Do}),Bo=Vo.LRUCache,$o=zo.TreeCache,Wo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e},n=new Bo({maxSize:e}),r=new $o({mapNodeValue:t,onHit:function(e){n.set(e,!0)},onSet:function(t){var o=n.tail();n.set(t,!0),o&&r.size()>e&&r.delete(o.key)}});return r},Ho=zo.TreeCache,qo={equality:"reference",eviction:"keep-all",maxSize:1/0};function Go(e){switch(e){case"reference":return function(e){return e};case"value":return function(e){return No(e)}}throw I("Unrecognized equality policy ".concat(e))}function Ko(e,t,n){switch(e){case"keep-all":return new Ho({mapNodeValue:n});case"lru":return Wo(U(t),n);case"most-recent":return Wo(1,n)}throw I("Unrecognized eviction policy ".concat(e))}var Qo,Yo=oe.loadableWithError,Xo=oe.loadableWithPromise,Jo=oe.loadableWithValue,Zo=lt,ea=ct,ta=st,na=function(e,t,n){var r,o,a,i,u=t.getState();n!==u.currentTree.version&&n!==(null===(r=u.nextTree)||void 0===r?void 0:r.version)&&n!==(null===(o=u.previousTree)||void 0===o?void 0:o.version)&&de("Tried to save dependencies to a discarded tree");var l=t.getGraph(n);if(ze(e,l),n===(null===(a=u.previousTree)||void 0===a?void 0:a.version)&&ze(e,t.getGraph(u.currentTree.version),l),n===(null===(i=u.previousTree)||void 0===i?void 0:i.version)||n===u.currentTree.version){var c,s=null===(c=u.nextTree)||void 0===c?void 0:c.version;void 0!==s&&ze(e,t.getGraph(s),l)}},ra=Ce.DEFAULT_VALUE,oa=Ce.RecoilValueNotReady,aa=Ce.getConfigDeletionHandler,ia=Ce.getNode,ua=Ce.registerNode,la=Se.isRecoilValue,ca=Se.AbstractRecoilValue,sa=jt.markRecoilValueModified,fa=jt.setRecoilValueLoadable,da=qt,pa=xn.cloneSnapshot,ha=function(e){return function(){return null}},va=function e(){L(this,e)},ya=new va,ma=[],ga=new Map,ba=(Qo=0,function(){return Qo++}),wa=function(e){var t=null,n=e.key,r=e.get,o=e.cachePolicy_UNSTABLE,a=null!=e.set?e.set:void 0,i=new Set,u=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:qo,t=e.equality,n=void 0===t?qo.equality:t,r=e.eviction,o=void 0===r?qo.eviction:r,a=e.maxSize,i=void 0===a?qo.maxSize:a,u=Go(n);return Ko(o,i,u)}(null!=o?o:{equality:"reference",eviction:"keep-all"}),l=da(e.retainedBy_UNSTABLE),c=new Map,s=0;function f(){return!se("recoil_memory_managament_2020")||s>0}function d(e){return c.has(e)||c.set(e,{depValuesDiscoveredSoFarDuringAsyncWork:null,latestLoadable:null,latestExecutionId:null,stateVersion:null}),U(c.get(e))}function h(e){return s++,e.getState().knownSelectors.add(n),function(){s--,e.getState().knownSelectors.delete(n),c.delete(e)}}function v(){return void 0!==aa(n)&&!f()}function y(e,t,n){if("loading"===t.state){var r=ga.get(n);null==r&&ga.set(n,r=new Set),r.add(e)}}function m(e,t,n){var r=e.getState().knownSelectors.has(n);if(r&&t.atomValues.has(n))return U(t.atomValues.get(n));var o=Zo(e,t,n);return"loading"!==o.state&&r&&t.atomValues.set(n,o),o}function g(e,t,n,r,o,a){return t.then((function(r){if(!f())throw O(e,o),ya;null!=a.loadingDepKey&&a.loadingDepPromise===t?n.atomValues.set(a.loadingDepKey,Jo(r)):e.getState().knownSelectors.forEach((function(e){n.atomValues.delete(e)}));var i=_(e,n);if(i&&"hasValue"===i.state)return R(i,e),i.contents;if(!C(e,o)){var u,l=x(n);if("loading"===(null==l||null===(u=l.latestLoadable)||void 0===u?void 0:u.state))return l.latestLoadable.contents}var c=p(E(e,n,o),2),s=c[0],d=c[1];if(C(e,o)&&A(d,e,o),"loading"!==s.state&&(L(n,k(d),s),S(e,n,new Set(d.keys()),o),w(e,s,o)),"hasError"===s.state)throw s.contents;return s.contents})).catch((function(t){if(t instanceof va)throw de("Selector was released while it had dependencies"),ya;if(!f())throw O(e,o),ya;var a=Yo(t);throw N(),L(n,k(r),Yo(t)),S(e,n,new Set(r.keys()),o),w(e,a,o),t}))}function w(e,t,r){C(e,r)&&(R(t,e),function(e,t){var r=ga.get(t);if(void 0!==r){var o,a=b(r);try{for(a.s();!(o=a.n()).done;){var i=o.value;fa(i,new ca(n),e)}}catch(e){a.e(e)}finally{a.f()}ga.delete(t)}}(t,r))}function S(e,t,r,o){var a,i,u,l,c,s,f;(C(e,o)||t.version===(null===(a=e.getState())||void 0===a||null===(i=a.currentTree)||void 0===i?void 0:i.version)||t.version===(null===(u=e.getState())||void 0===u||null===(l=u.nextTree)||void 0===l?void 0:l.version))&&na(new Map([[n,r]]),e,null!==(c=null===(s=e.getState())||void 0===s||null===(f=s.nextTree)||void 0===f?void 0:f.version)&&void 0!==c?c:e.getState().currentTree.version)}function E(e,t,o){var a,i,u=ha(n),l=!1,c={loadingDepKey:null,loadingDepPromise:null},s=new Map,d=new Set;function p(n){var r=n.key;!function(e,t,n,r,o){n.add(r),S(e,t,n,o)}(e,t,d,r,o);var a=m(e,t,r);switch(s.set(r,a),a.state){case"hasValue":return a.contents;case"hasError":throw a.contents;case"loading":throw c.loadingDepKey=r,c.loadingDepPromise=a.contents,a.contents}throw I("Invalid Loadable state")}S(e,t,d,o);var h=!1;try{a=r({get:p,getCallback:function(t){return function(){if(!h)throw I("getCallback() should only be called asynchronously after the selector is evalutated.  It can be used for selectors to return objects with callbacks that can obtain the current Recoil state without a subscription.");var n=pa(e),r=t({snapshot:n});if("function"!=typeof r)throw I("getCallback() expects a function that returns a function.");return r.apply(void 0,arguments)}}}),a=la(a)?p(a):a,h=!0,M(a)?a=function(e,t,n,r,o,a){return t.then((function(t){if(!f())throw O(e,o),ya;var a=Jo(t);return N(),L(n,k(r),a),S(e,n,new Set(r.keys()),o),w(e,a,o),t})).catch((function(t){if(!f())throw O(e,o),ya;if(C(e,o)&&A(r,e,o),M(t))return g(e,t,n,r,o,a);var i=Yo(t);throw N(),L(n,k(r),i),S(e,n,new Set(r.keys()),o),w(e,i,o),t}))}(e,a,t,s,o,c).finally(u):u()}catch(n){M(a=n)?a=g(e,a,t,s,o,c).finally(u):(l=!0,u())}return"loading"!==(i=l?Yo(a):M(a)?Xo(a):Jo(a)).state&&N(i.contents),[i,s]}function _(e,t){var r,o=new Set,a=d(e);try{r=u.get((function(n){return"string"!=typeof n&&po(!1),m(e,t,n).contents}),{onNodeVisit:function(e){"branch"===e.type&&e.nodeKey!==n&&"string"==typeof e.nodeKey&&(o.add(e.nodeKey),i.add(e.nodeKey))}})}catch(e){throw I('Problem with cache lookup for selector "'.concat(n,'": ').concat(e.message))}return r&&S(e,t,o,a.latestExecutionId),r}function k(e){return Array.from(e.entries()).map((function(e){var t=p(e,2);return[t[0],t[1].contents]}))}function x(e){var t,n=null!==(t=Array.from(c.entries()).find((function(t){var n=p(t,2),r=n[0],o=n[1];return null!=o.latestLoadable&&null!=o.latestExecutionId&&!function(e,t){var n,r,o=d(e),a=null!==(n=o.depValuesDiscoveredSoFarDuringAsyncWork)&&void 0!==n?n:new Map,i=Array((null!==(r=T.get(t.version))&&void 0!==r?r:new Map).entries()),u=T.has(t.version)&&i.length===a.size&&i.every((function(e){var t=p(e,2),n=t[0],r=t[1];return a.get(n)===r}));return null!=a&&t.version!==o.stateVersion&&!u&&(T.set(t.version,new Map(a)),Array.from(a).some((function(n){var r=p(n,2),o=r[0],a=r[1];return m(e,t,o).contents!==a.contents})))}(r,e)})))&&void 0!==t?t:[];return p(n,2)[1]}var T=new Map;function R(e,t,n,r,o){var a=d(t);"loading"===e.state?(a.depValuesDiscoveredSoFarDuringAsyncWork=n,a.latestExecutionId=r,a.latestLoadable=e,a.stateVersion=null==o?void 0:o.version):(a.depValuesDiscoveredSoFarDuringAsyncWork=null,a.latestExecutionId=null,a.latestLoadable=null,a.stateVersion=null)}function A(e,t,n){var r=d(t);C(t,n)&&(r.depValuesDiscoveredSoFarDuringAsyncWork=e)}function O(e,t){C(e,t)&&c.delete(e)}function C(e,t){return t===d(e).latestExecutionId}function N(e){}function L(e,t,r){e.atomValues.set(n,r);try{u.set(t,r)}catch(e){throw I('Problem with setting cache for selector "'.concat(n,'": ').concat(e.message))}}function P(e,t){return u.get((function(n){"string"!=typeof n&&po(!1);var r=ea(e,t,n);return null==r?void 0:r.contents}))}function j(e,t){return function(r){if(ma.includes(n)){var o="Recoil selector has circular dependencies: ".concat(ma.slice(ma.indexOf(n)).join(" → "));return Yo(I(o))}ma.push(n);try{return function(e,t){var n=_(e,t);if(null!=n)return R(n,e),n;var r=x(t);if(r){var o=r;return y(e,U(o.latestLoadable),U(o.latestExecutionId)),U(o.latestLoadable)}return function(e,t){var n=ba(),r=p(E(e,t,n),2),o=r[0],a=r[1];return R(o,e,a,n,t),function(e,t,n){"loading"!==n.state&&L(e,t,n)}(t,k(a),o),y(e,o,n),o}(e,t)}(e,t)}finally{ma.pop()}}()}function F(e){e.atomValues.delete(n)}function z(e,n){null==t&&po(!1);var r,o=b(i);try{for(o.s();!(r=o.n()).done;){var a,l=r.value,c=ia(l);null===(a=c.clearCache)||void 0===a||a.call(c,e,n)}}catch(e){o.e(e)}finally{o.f()}F(n),u.clear(),sa(e,t)}return t=ua(null!=a?{key:n,nodeType:"selector",peek:P,get:j,set:function(e,t,n){var r=!1,o=new Map;function i(n){var o=n.key;if(r)throw I("Recoil: Async selector sets are not currently supported.");var a=m(e,t,o);if("hasValue"===a.state)return a.contents;throw"loading"===a.state?new oa(o):a.contents}function u(n,a){if(r)throw I("Recoil: Async selector sets are not currently supported.");var u="function"==typeof a?a(i(n)):a;ta(e,t,n.key,u).forEach((function(e,t){return o.set(t,e)}))}var l=a({set:u,get:i,reset:function(e){u(e,ra)}},n);if(void 0!==l)throw M(l)?I("Recoil: Async selector sets are not currently supported."):I("Recoil: selector set should be a void function.");return r=!0,o},init:h,invalidate:F,clearCache:z,shouldDeleteConfigOnRelease:v,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1,retainedBy:l}:{key:n,nodeType:"selector",peek:P,get:j,init:h,invalidate:F,clearCache:z,shouldDeleteConfigOnRelease:v,dangerouslyAllowMutability:e.dangerouslyAllowMutability,shouldRestoreFromSnapshots:!1,retainedBy:l})},Sa=oe.loadableWithError,Ea=oe.loadableWithPromise,_a=oe.loadableWithValue,ka=dt,xa=Ce.DEFAULT_VALUE,Ta=Ce.DefaultValue,Ra=Ce.getConfigDeletionHandler,Aa=Ce.registerNode,Oa=Ce.setConfigDeletionHandler,Ca=Se.isRecoilValue,Na=jt.getRecoilValueAsLoadable,La=jt.markRecoilValueModified,Pa=jt.setRecoilValue,ja=jt.setRecoilValueLoadable,Ia=qt;var Ma=function e(t){var n=t.default,r=c(t,o);return Ca(n)?function(t){var n=e(_(_({},t),{},{default:xa,persistence_UNSTABLE:void 0===t.persistence_UNSTABLE?void 0:_(_({},t.persistence_UNSTABLE),{},{validator:function(e){return e instanceof Ta?e:U(t.persistence_UNSTABLE).validator(e,xa)}}),effects_UNSTABLE:t.effects_UNSTABLE})),r=wa({key:"".concat(t.key,"__withFallback"),get:function(e){var r=(0,e.get)(n);return r instanceof Ta?t.default:r},set:function(e,t){return(0,e.set)(n,t)},dangerouslyAllowMutability:t.dangerouslyAllowMutability});return Oa(r.key,Ra(t.key)),r}(_(_({},r),{},{default:n})):function(e){var t=e.key,n=e.persistence_UNSTABLE,r=Ia(e.retainedBy_UNSTABLE),o=0,a=M(e.default)?Ea(e.default.then((function(e){return a=_a(e),e})).catch((function(e){throw a=Sa(e),e}))):_a(e.default);e.default;var i=void 0,l=new Map,c=Aa({key:t,nodeType:"atom",peek:function(e,n){var r,o;return null!==(r=null!==(o=n.atomValues.get(t))&&void 0!==o?o:i)&&void 0!==r?r:a},get:function(e,r){if(r.atomValues.has(t))return U(r.atomValues.get(t));if(r.nonvalidatedAtoms.has(t)){if(null!=i)return i;if(null==n)return"Tried to restore a persisted value for atom ".concat(t," but it has no persistence settings."),a;var o=r.nonvalidatedAtoms.get(t),u=n.validator(o,xa),l=u instanceof Ta?a:_a(u);return i=l}return a},set:function(e,n,r){if(n.atomValues.has(t)){var o=U(n.atomValues.get(t));if("hasValue"===o.state&&r===o.contents)return new Map}else if(!n.nonvalidatedAtoms.has(t)&&r instanceof Ta)return new Map;return i=void 0,(new Map).set(t,_a(r))},init:function(n,r,i){o++;var s=n.getState().knownAtoms.has(t);if(n.getState().knownAtoms.add(t),"loading"===a.state){var f=function(){var e;(null!==(e=n.getState().nextTree)&&void 0!==e?e:n.getState().currentTree).atomValues.has(t)||La(n,c)};a.contents.then(f).catch(f)}var d=xa,p=null;if(null!=e.effects_UNSTABLE&&!s){var h,v=function(e){if(g&&e.key===t&&!(d instanceof Ta)){var r=d;return r instanceof Ta?a:M(r)?Ea(r.then((function(e){return e instanceof Ta?a.toPromise():e}))):_a(r)}return Na(n,e)},y=function(e){return v(e).toPromise()},m=function(e){var r,o=ka(n,null!==(r=n.getState().nextTree)&&void 0!==r?r:n.getState().currentTree,e.key);return!g||e.key!==t||d instanceof Ta?o:_(_({},o),{},{isSet:!0,loadable:v(e)})},g=!0,w=function(e){return function(t){if(g){var r=d instanceof Ta||M(d)?"hasValue"===a.state?a.contents:xa:d;d="function"==typeof t?t(r):t,M(d)&&(d=d.then((function(t){return p={effect:e,value:t},t})))}else{if(M(t))throw I("Setting atoms to async values is not implemented.");"function"!=typeof t&&(p={effect:e,value:t}),Pa(n,c,"function"==typeof t?function(n){var r=t(n);return p={effect:e,value:r},r}:t)}}},S=function(e){return function(){return w(e)(xa)}},E=function(e){return function(r){n.subscribeToTransactions((function(n){var o,i=n.getState(),u=i.currentTree,l=i.previousTree;l||(de("Transaction subscribers notified without a next tree being present -- this is a bug in Recoil"),l=u);var c=null!==(o=u.atomValues.get(t))&&void 0!==o?o:a;if("hasValue"===c.state){var s,f,d,h,v=c.contents,y=null!==(s=l.atomValues.get(t))&&void 0!==s?s:a,m="hasValue"===y.state?y.contents:xa;(null===(f=p)||void 0===f?void 0:f.effect)!==e||(null===(d=p)||void 0===d?void 0:d.value)!==v?r(v,m,!u.atomValues.has(t)):(null===(h=p)||void 0===h?void 0:h.effect)===e&&(p=null)}}),t)}},k=b(null!==(x=e.effects_UNSTABLE)&&void 0!==x?x:[]);try{for(k.s();!(h=k.n()).done;){var x,T,R=h.value,A=R({node:c,trigger:i,setSelf:w(R),resetSelf:S(R),onSet:E(R),getPromise:y,getLoadable:v,getInfo_UNSTABLE:m});null!=A&&l.set(n,[].concat(u(null!==(T=l.get(n))&&void 0!==T?T:[]),[A]))}}catch(e){k.e(e)}finally{k.f()}g=!1}if(!(d instanceof Ta)){var O,C=d,N=M(C)?Ea(function(e,n){var r=n.then((function(n){var o,a;return(null===(a=(null!==(o=e.getState().nextTree)&&void 0!==o?o:e.getState().currentTree).atomValues.get(t))||void 0===a?void 0:a.contents)===r&&Pa(e,c,n),n})).catch((function(n){var o,a;throw(null===(a=(null!==(o=e.getState().nextTree)&&void 0!==o?o:e.getState().currentTree).atomValues.get(t))||void 0===a?void 0:a.contents)===r&&ja(e,c,Sa(n)),n}));return r}(n,C)):_a(C);r.atomValues.set(t,N),null===(O=n.getState().nextTree)||void 0===O||O.atomValues.set(t,N)}return function(){var e;o--,null===(e=l.get(n))||void 0===e||e.forEach((function(e){return e()})),l.delete(n),n.getState().knownAtoms.delete(t)}},invalidate:function(){i=void 0},shouldDeleteConfigOnRelease:function(){return void 0!==Ra(t)&&o<=0},dangerouslyAllowMutability:e.dangerouslyAllowMutability,persistence_UNSTABLE:e.persistence_UNSTABLE?{type:e.persistence_UNSTABLE.type,backButton:e.persistence_UNSTABLE.backButton}:void 0,shouldRestoreFromSnapshots:!0,retainedBy:r});return c}(_(_({},r),{},{default:n}))},Ua=function(){function e(t){var n;L(this,e),F(this,"_map",void 0),F(this,"_keyMapper",void 0),this._map=new Map,this._keyMapper=null!==(n=null==t?void 0:t.mapKey)&&void 0!==n?n:function(e){return e}}return j(e,[{key:"size",value:function(){return this._map.size}},{key:"has",value:function(e){return this._map.has(this._keyMapper(e))}},{key:"get",value:function(e){return this._map.get(this._keyMapper(e))}},{key:"set",value:function(e,t){this._map.set(this._keyMapper(e),t)}},{key:"delete",value:function(e){this._map.delete(this._keyMapper(e))}},{key:"clear",value:function(){this._map.clear()}}]),e}(),Fa=Object.freeze({__proto__:null,MapCache:Ua}),za=Vo.LRUCache,Da=Fa.MapCache,Va={equality:"reference",eviction:"none",maxSize:1/0};function Ba(e){switch(e){case"reference":return function(e){return e};case"value":return function(e){return No(e)}}throw I("Unrecognized equality policy ".concat(e))}function $a(e,t,n){switch(e){case"keep-all":return new Da({mapKey:n});case"lru":return new za({mapKey:n,maxSize:U(t)});case"most-recent":return new za({mapKey:n,maxSize:1})}throw I("Unrecognized eviction policy ".concat(e))}var Wa=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Va,t=e.equality,n=void 0===t?Va.equality:t,r=e.eviction,o=void 0===r?Va.eviction:r,a=e.maxSize,i=void 0===a?Va.maxSize:a,u=Ba(n),l=$a(o,i,u);return l},Ha=Ce.setConfigDeletionHandler,qa=Ce.setConfigDeletionHandler,Ga=0,Ka=function(e){var t,n,r=Wa({equality:null!==(t=null===(n=e.cachePolicyForParams_UNSTABLE)||void 0===n?void 0:n.equality)&&void 0!==t?t:"value",eviction:"keep-all"});return function(t){var n,o=r.get(t);if(null!=o)return o;var a,i="".concat(e.key,"__selectorFamily/").concat(null!==(n=No(t,{allowFunctions:!0}))&&void 0!==n?n:"void","/").concat(Ga++),u=function(n){return e.get(t)(n)},l=e.cachePolicy_UNSTABLE,c="function"==typeof e.retainedBy_UNSTABLE?e.retainedBy_UNSTABLE(t):e.retainedBy_UNSTABLE;if(null!=e.set){var s=e.set;a=wa({key:i,get:u,set:function(e,n){return s(t)(e,n)},cachePolicy_UNSTABLE:l,dangerouslyAllowMutability:e.dangerouslyAllowMutability,retainedBy_UNSTABLE:c})}else a=wa({key:i,get:u,cachePolicy_UNSTABLE:l,dangerouslyAllowMutability:e.dangerouslyAllowMutability,retainedBy_UNSTABLE:c});return r.set(t,a),qa(a.key,(function(){r.delete(t)})),a}},Qa=Ka({key:"__constant",get:function(e){return function(){return e}},cachePolicyForParams_UNSTABLE:{equality:"reference"}}),Ya=Ka({key:"__error",get:function(e){return function(){throw I(e)}},cachePolicyForParams_UNSTABLE:{equality:"reference"}}),Xa=oe.loadableWithError,Ja=oe.loadableWithPromise,Za=oe.loadableWithValue;function ei(e,t){var n,r=Array(t.length).fill(void 0),o=Array(t.length).fill(void 0),a=b(t.entries());try{for(a.s();!(n=a.n()).done;){var i=p(n.value,2),u=i[0],l=i[1];try{r[u]=e(l)}catch(e){o[u]=e}}}catch(e){a.e(e)}finally{a.f()}return[r,o]}function ti(e){return null!=e&&!M(e)}function ni(e){return Array.isArray(e)?e:Object.getOwnPropertyNames(e).map((function(t){return e[t]}))}function ri(e,t){return Array.isArray(e)?t:Object.getOwnPropertyNames(e).reduce((function(e,n,r){return _(_({},e),{},k({},n,t[r]))}),{})}function oi(e,t,n){return ri(e,n.map((function(e,n){return null==e?Za(t[n]):M(e)?Ja(e):Xa(e)})))}var ai=Ka({key:"__waitForNone",get:function(e){return function(t){var n=p(ei(t.get,ni(e)),2),r=n[0],o=n[1];return oi(e,r,o)}},dangerouslyAllowMutability:!0}),ii=Ka({key:"__waitForAny",get:function(e){return function(t){var n=p(ei(t.get,ni(e)),2),r=n[0],o=n[1];return o.some((function(e){return!M(e)}))?oi(e,r,o):new Promise((function(t){var n,a=b(o.entries());try{var i=function(){var a=p(n.value,2),i=a[0],u=a[1];M(u)&&u.then((function(n){r[i]=n,o[i]=void 0,t(oi(e,r,o))})).catch((function(n){o[i]=n,t(oi(e,r,o))}))};for(a.s();!(n=a.n()).done;)i()}catch(e){a.e(e)}finally{a.f()}}))}},dangerouslyAllowMutability:!0}),ui={waitForNone:ai,waitForAny:ii,waitForAll:Ka({key:"__waitForAll",get:function(e){return function(t){var n=p(ei(t.get,ni(e)),2),r=n[0],o=n[1];if(o.every((function(e){return null==e})))return ri(e,r);var a=o.find(ti);if(null!=a)throw a;return Promise.all(o).then((function(t){return ri(e,(n=r,t.map((function(e,t){return void 0===e?n[t]:e}))));var n}))}},dangerouslyAllowMutability:!0}),waitForAllSettled:Ka({key:"__waitForAllSettled",get:function(e){return function(t){var n=p(ei(t.get,ni(e)),2),r=n[0],o=n[1];return o.every((function(e){return!M(e)}))?oi(e,r,o):Promise.all(o.map((function(e,t){return M(e)?e.then((function(e){r[t]=e,o[t]=void 0})).catch((function(e){r[t]=void 0,o[t]=e})):null}))).then((function(){return oi(e,r,o)}))}},dangerouslyAllowMutability:!0}),noWait:Ka({key:"__noWait",get:function(e){return function(t){var n=t.get;try{return Za(n(e))}catch(e){return M(e)?Ja(e):Xa(e)}}},dangerouslyAllowMutability:!0})},li=oe.RecoilLoadable,ci=Ce.DefaultValue,si=tr,fi=Se.isRecoilValue,di=function(){return new Ye},pi=xn.freshSnapshot,hi={DefaultValue:ci,isRecoilValue:fi,RecoilLoadable:li,RecoilRoot:si,useRecoilBridgeAcrossReactRoots_UNSTABLE:function(){var t=eo().current;return to((function(){return function(n){var r=n.children;return e.createElement(Zr,{store_INTERNAL:t},r)}}),[t])},atom:Ma,selector:wa,atomFamily:function(e){var t,n,r=Wa({equality:null!==(t=null===(n=e.cachePolicyForParams_UNSTABLE)||void 0===n?void 0:n.equality)&&void 0!==t?t:"value",eviction:"keep-all"});return function(t){var n,o=r.get(t);if(null!=o)return o;e.cachePolicyForParams_UNSTABLE;var i=c(e,a),u=Ma(_(_({},i),{},{key:"".concat(e.key,"__").concat(null!==(n=No(t))&&void 0!==n?n:"void"),default:"function"==typeof e.default?e.default(t):e.default,retainedBy_UNSTABLE:"function"==typeof e.retainedBy_UNSTABLE?e.retainedBy_UNSTABLE(t):e.retainedBy_UNSTABLE,effects_UNSTABLE:"function"==typeof e.effects_UNSTABLE?e.effects_UNSTABLE(t):e.effects_UNSTABLE}));return r.set(t,u),Ha(u.key,(function(){r.delete(t)})),u}},selectorFamily:Ka,constSelector:function(e){return Qa(e)},errorSelector:function(e){return Ya(e)},readOnlySelector:function(e){return e},noWait:ui.noWait,waitForNone:ui.waitForNone,waitForAny:ui.waitForAny,waitForAll:ui.waitForAll,waitForAllSettled:ui.waitForAllSettled,useRecoilValue:Lr,useRecoilValueLoadable:Pr,useRecoilState:function(e){return[Cr(e),Nr(e)]},useRecoilStateLoadable:function(e){return[Or(e),Nr(e)]},useSetRecoilState:jr,useResetRecoilState:function(e){var t=mr();return xr((function(){wr(t.current,e,vr)}),[t,e])},useGetRecoilValueInfo_UNSTABLE:function(){var e=Jr();return function(t){var n=t.key;return Xr(e.current,e.current.getState().currentTree,n)}},useRecoilRefresher_UNSTABLE:function(e){var t=xo();return To((function(){var n,r=t.current,o=r.getState().currentTree,a=ko(e.key);null===(n=a.clearCache)||void 0===n||n.call(a,r,o)}),[e,t])},useRecoilCallback:function(e,t){var n=mo(),r=wo();return So((function(){for(var t=arguments.length,o=new Array(t),a=0;a<t;a++)o[a]=arguments[a];function i(e,t){go(n.current,e,t)}function u(e){go(n.current,e,yo)}var l=bo(n.current),c=ho(n.current),s=_o;return vo((function(){var t="useRecoilCallback expects a function that returns a function: it accepts a function of the type (RecoilInterface) => T = R and returns a callback function T => R, where RecoilInterface is an object {snapshot, set, ...} and T and R are the argument and return types of the callback you want to create.  Please see the docs at recoiljs.org for details.";if("function"!=typeof e)throw I(t);var n=e({set:i,reset:u,snapshot:l,gotoSnapshot:r,transact_UNSTABLE:c});if("function"!=typeof n)throw I(t);s=n.apply(void 0,o)})),s instanceof Eo&&po(!1),s}),null!=t?[].concat(u(t),[n]):void 0)},useRecoilTransaction_UNSTABLE:function(e,t){var n=Ao();return Oo((function(){return function(){for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];var a=Ro(n.current);a((function(t){e(t).apply(void 0,r)}))}}),null!=t?[].concat(u(t),[n]):void 0)},useGotoRecoilSnapshot:Yr,useRecoilSnapshot:function(){var e=zr(),t=p(Gr((function(){return Br(e.current)})),2),n=t[0],r=t[1],o=ir(n),a=qr();return Hr((function(){return a.current&&!$r&&window.clearTimeout(a.current),n.retain()}),[n]),Kr(Wr((function(e){return r(Br(e))}),[])),o===n||$r||(a.current&&(null==o||o.release_INTERNAL(),window.clearTimeout(a.current)),n.retain(),a.current=window.setTimeout((function(){n.release_INTERNAL(),a.current=null}),12e4)),n},useRecoilTransactionObserver_UNSTABLE:function(e){Kr(Wr((function(t){var n=Br(t,"current"),r=Br(t,"previous");e({snapshot:n,previousSnapshot:r})}),[e]))},useTransactionObservation_UNSTABLE:function(e){Kr(Wr((function(t){var n=t.getState().previousTree,r=t.getState().currentTree;n||(de("Transaction subscribers notified without a previous tree being present -- this is a bug in Recoil"),n=t.getState().currentTree);var o=Qr(r),a=Qr(n),i=Fe(Fr,(function(e){var t,n,r,o;return{persistence_UNSTABLE:{type:null!==(t=null===(n=e.persistence_UNSTABLE)||void 0===n?void 0:n.type)&&void 0!==t?t:"none",backButton:null!==(r=null===(o=e.persistence_UNSTABLE)||void 0===o?void 0:o.backButton)&&void 0!==r&&r}}})),u=function(e,t){var n,r=new Set,o=b(e);try{for(o.s();!(n=o.n()).done;){var a=n.value;t(a)&&r.add(a)}}catch(e){o.e(e)}finally{o.f()}return r}(r.dirtyAtoms,(function(e){return o.has(e)||a.has(e)}));e({atomValues:o,previousAtomValues:a,atomInfo:i,modifiedAtoms:u,transactionMetadata:_({},r.transactionMetadata)})}),[e]))},useSetUnvalidatedAtomValues_UNSTABLE:function(){var e=mr();return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};hr((function(){e.current.addTransactionMetadata(n),t.forEach((function(t,n){return Sr(e.current,new gr(n),t)}))}))}},snapshot_UNSTABLE:pi,useRetain:pr,retentionZone:di},vi=hi.RecoilRoot,yi=hi.atom,mi=hi.selector,gi=hi.useRecoilValue,bi=hi.useSetRecoilState;function wi(){return wi=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},wi.apply(this,arguments)}n(9601),n(6755),n(285),n(4765);var Si,Ei=Si||(Si={});Ei.Pop="POP",Ei.Push="PUSH",Ei.Replace="REPLACE";function _i(e){e.preventDefault(),e.returnValue=""}function ki(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function xi(e){var t={};if(e){var n=e.indexOf("#");0<=n&&(t.hash=e.substr(n),e=e.substr(0,n)),0<=(n=e.indexOf("?"))&&(t.search=e.substr(n),e=e.substr(0,n)),e&&(t.pathname=e)}return t}function Ti(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ri(e,t){if(!e)throw new Error(t)}n(7852),n(6644),n(4603);var Ai=(0,e.createContext)(null),Oi=(0,e.createContext)(null),Ci=(0,e.createContext)({outlet:null,matches:[]});function Ni(t){var n=t.to,r=t.replace,o=t.state;Mi()||Ri(!1);var a=Fi();return(0,e.useEffect)((function(){a(n,{replace:r,state:o})})),null}function Li(t){return(0,e.useContext)(Ci).outlet}function Pi(e){Ri(!1)}function ji(t){var n=t.basename,r=void 0===n?"/":n,o=t.children,a=void 0===o?null:o,i=t.location,u=t.navigationType,l=void 0===u?Si.Pop:u,c=t.navigator,s=t.static,f=void 0!==s&&s;Mi()&&Ri(!1);var d=Ki(r),p=(0,e.useMemo)((function(){return{basename:d,navigator:c,static:f}}),[d,c,f]);"string"==typeof i&&(i=xi(i));var h=i,v=h.pathname,y=void 0===v?"/":v,m=h.search,g=void 0===m?"":m,b=h.hash,w=void 0===b?"":b,S=h.state,E=void 0===S?null:S,_=h.key,k=void 0===_?"default":_,x=(0,e.useMemo)((function(){var e=qi(y,d);return null==e?null:{pathname:e,search:g,hash:w,state:E,key:k}}),[d,y,g,w,E,k]);return null==x?null:(0,e.createElement)(Ai.Provider,{value:p},(0,e.createElement)(Oi.Provider,{children:a,value:{location:x,navigationType:l}}))}function Ii(t){var n=t.children,r=t.location;return function(t,n){Mi()||Ri(!1);var r=(0,e.useContext)(Ci).matches,o=r[r.length-1],a=o?o.params:{},i=(o&&o.pathname,o?o.pathnameBase:"/");o&&o.route;var u,l=Ui();if(n){var c,s="string"==typeof n?xi(n):n;"/"===i||(null==(c=s.pathname)?void 0:c.startsWith(i))||Ri(!1),u=s}else u=l;var f=u.pathname||"/",d=function(e,t,n){void 0===n&&(n="/");var r=qi(("string"==typeof t?xi(t):t).pathname||"/",n);if(null==r)return null;var o=Di(e);!function(e){e.sort((function(e,t){return e.score!==t.score?t.score-e.score:function(e,t){var n=e.length===t.length&&e.slice(0,-1).every((function(e,n){return e===t[n]}));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((function(e){return e.childrenIndex})),t.routesMeta.map((function(e){return e.childrenIndex})))}))}(o);for(var a=null,i=0;null==a&&i<o.length;++i)a=Wi(o[i],e,r);return a}(t,{pathname:"/"===i?f:f.slice(i.length)||"/"});return function(t,n){return void 0===n&&(n=[]),null==t?null:t.reduceRight((function(r,o,a){return(0,e.createElement)(Ci.Provider,{children:void 0!==o.route.element?o.route.element:(0,e.createElement)(Li,null),value:{outlet:r,matches:n.concat(t.slice(0,a+1))}})}),null)}(d&&d.map((function(e){return Object.assign({},e,{params:Object.assign({},a,e.params),pathname:Gi([i,e.pathname]),pathnameBase:"/"===e.pathnameBase?i:Gi([i,e.pathnameBase])})})),r)}(zi(n),r)}function Mi(){return null!=(0,e.useContext)(Oi)}function Ui(){return Mi()||Ri(!1),(0,e.useContext)(Oi).location}function Fi(){Mi()||Ri(!1);var t=(0,e.useContext)(Ai),n=t.basename,r=t.navigator,o=(0,e.useContext)(Ci).matches,a=Ui().pathname,i=JSON.stringify(o.map((function(e){return e.pathnameBase}))),u=(0,e.useRef)(!1);return(0,e.useEffect)((function(){u.current=!0})),(0,e.useCallback)((function(e,t){if(void 0===t&&(t={}),u.current)if("number"!=typeof e){var o=function(e,t,n){var r,o="string"==typeof e?xi(e):e,a=""===e||""===o.pathname?"/":o.pathname;if(null==a)r=n;else{var i=t.length-1;if(a.startsWith("..")){for(var u=a.split("/");".."===u[0];)u.shift(),i-=1;o.pathname=u.join("/")}r=i>=0?t[i]:"/"}var l=function(e,t){void 0===t&&(t="/");var n="string"==typeof e?xi(e):e,r=n.pathname,o=n.search,a=void 0===o?"":o,i=n.hash,u=void 0===i?"":i,l=r?r.startsWith("/")?r:function(e,t){var n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((function(e){".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(r,t):t;return{pathname:l,search:Qi(a),hash:Yi(u)}}(o,r);return a&&"/"!==a&&a.endsWith("/")&&!l.pathname.endsWith("/")&&(l.pathname+="/"),l}(e,JSON.parse(i),a);"/"!==n&&(o.pathname=Gi([n,o.pathname])),(t.replace?r.replace:r.push)(o,t.state)}else r.go(e)}),[n,r,i,a])}function zi(t){var n=[];return e.Children.forEach(t,(function(t){if((0,e.isValidElement)(t))if(t.type!==e.Fragment){t.type!==Pi&&Ri(!1);var r={caseSensitive:t.props.caseSensitive,element:t.props.element,index:t.props.index,path:t.props.path};t.props.children&&(r.children=zi(t.props.children)),n.push(r)}else n.push.apply(n,zi(t.props.children))})),n}function Di(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach((function(e,o){var a={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:o};a.relativePath.startsWith("/")&&(a.relativePath.startsWith(r)||Ri(!1),a.relativePath=a.relativePath.slice(r.length));var i=Gi([r,a.relativePath]),u=n.concat(a);e.children&&e.children.length>0&&(!0===e.index&&Ri(!1),Di(e.children,t,u,i)),(null!=e.path||e.index)&&t.push({path:i,score:$i(i,e.index),routesMeta:u})})),t}var Vi=/^:\w+$/,Bi=function(e){return"*"===e};function $i(e,t){var n=e.split("/"),r=n.length;return n.some(Bi)&&(r+=-2),t&&(r+=2),n.filter((function(e){return!Bi(e)})).reduce((function(e,t){return e+(Vi.test(t)?3:""===t?1:10)}),r)}function Wi(e,t,n){for(var r=t,o=e.routesMeta,a={},i="/",u=[],l=0;l<o.length;++l){var c=o[l],s=l===o.length-1,f="/"===i?n:n.slice(i.length)||"/",d=Hi({path:c.relativePath,caseSensitive:c.caseSensitive,end:s},f);if(!d)return null;Object.assign(a,d.params);var p=r[c.childrenIndex];u.push({params:a,pathname:Gi([i,d.pathname]),pathnameBase:Gi([i,d.pathnameBase]),route:p}),"/"!==d.pathnameBase&&(i=Gi([i,d.pathnameBase])),r=p.children}return u}function Hi(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});var n,r,o=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);var r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,(function(e,t){return r.push(t),"([^\\/]+)"}));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):o+=n?"\\/*$":"(?:\\b|$)",[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),a=(r=2,function(e){if(Array.isArray(e))return e}(n=o)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,o,a=[],i=!0,u=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){u=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(u)throw o}}return a}}(n,r)||function(e,t){if(e){if("string"==typeof e)return Ti(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ti(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[0],u=a[1],l=t.match(i);if(!l)return null;var c=l[0],s=c.replace(/(.)\/+$/,"$1"),f=l.slice(1);return{params:u.reduce((function(e,t,n){if("*"===t){var r=f[n]||"";s=c.slice(0,c.length-r.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(f[n]||""),e}),{}),pathname:c,pathnameBase:s,pattern:e}}function qi(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;var n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}var Gi=function(e){return e.join("/").replace(/\/\/+/g,"/")},Ki=function(e){return e.replace(/\/+$/,"").replace(/^\/*/,"/")},Qi=function(e){return e&&"?"!==e?e.startsWith("?")?e:"?"+e:""},Yi=function(e){return e&&"#"!==e?e.startsWith("#")?e:"#"+e:""};function Xi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,o,a=[],i=!0,u=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){u=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(u)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Ji(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ji(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ji(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Zi(t){var n=t.basename,r=t.children,o=t.window,a=(0,e.useRef)();null==a.current&&(a.current=function(e){function t(){var e=i.location,t=u.state||{};return[t.idx,{pathname:e.pathname,search:e.search,hash:e.hash,state:t.usr||null,key:t.key||"default"}]}function n(e){return"string"==typeof e?e:function(e){var t=e.pathname,n=e.search;return(void 0===t?"/":t)+(void 0===n?"":n)+(void 0===(e=e.hash)?"":e)}(e)}function r(e,t){return void 0===t&&(t=null),wi({pathname:f.pathname,hash:"",search:""},"string"==typeof e?xi(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function o(e){c=e,e=t(),s=e[0],f=e[1],d.call({action:c,location:f})}function a(e){u.go(e)}void 0===e&&(e={});var i=void 0===(e=e.window)?document.defaultView:e,u=i.history,l=null;i.addEventListener("popstate",(function(){if(l)p.call(l),l=null;else{var e=Si.Pop,n=t(),r=n[0];if(n=n[1],p.length){if(null!=r){var i=s-r;i&&(l={action:e,location:n,retry:function(){a(-1*i)}},a(i))}}else o(e)}}));var c=Si.Pop,s=(e=t())[0],f=e[1],d=ki(),p=ki();return null==s&&(s=0,u.replaceState(wi({},u.state,{idx:s}),"")),{get action(){return c},get location(){return f},createHref:n,push:function e(t,a){var l=Si.Push,c=r(t,a);if(!p.length||(p.call({action:l,location:c,retry:function(){e(t,a)}}),0)){var f=[{usr:c.state,key:c.key,idx:s+1},n(c)];c=f[0],f=f[1];try{u.pushState(c,"",f)}catch(e){i.location.assign(f)}o(l)}},replace:function e(t,a){var i=Si.Replace,l=r(t,a);p.length&&(p.call({action:i,location:l,retry:function(){e(t,a)}}),1)||(l=[{usr:l.state,key:l.key,idx:s},n(l)],u.replaceState(l[0],"",l[1]),o(i))},go:a,back:function(){a(-1)},forward:function(){a(1)},listen:function(e){return d.push(e)},block:function(e){var t=p.push(e);return 1===p.length&&i.addEventListener("beforeunload",_i),function(){t(),p.length||i.removeEventListener("beforeunload",_i)}}}}({window:o}));var i=a.current,u=Xi((0,e.useState)({action:i.action,location:i.location}),2),l=u[0],c=u[1];return(0,e.useLayoutEffect)((function(){return i.listen(c)}),[i]),(0,e.createElement)(ji,{basename:n,children:r,location:l.location,navigationType:l.action,navigator:i})}var eu="/",tu="/signin",nu=(n(9653),n(4129),n(8206),n(866)),ru=n.n(nu);function ou(e){return ou="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ou(e)}var au=function(e){return function(e){return!!e&&"object"===ou(e)}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===iu}(e)}(e)},iu="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function uu(e,t){return!1!==t.clone&&t.isMergeableObject(e)?cu((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function lu(e,t,n){return e.concat(t).map((function(e){return uu(e,n)}))}function cu(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||lu,n.isMergeableObject=n.isMergeableObject||au;var r=Array.isArray(t);return r===Array.isArray(e)?r?n.arrayMerge(e,t,n):function(e,t,n){var r={};return n.isMergeableObject(e)&&Object.keys(e).forEach((function(t){r[t]=uu(e[t],n)})),Object.keys(t).forEach((function(o){n.isMergeableObject(t[o])&&e[o]?r[o]=cu(e[o],t[o],n):r[o]=uu(t[o],n)})),r}(e,t,n):uu(t,n)}cu.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce((function(e,n){return cu(e,n,t)}),{})};var su=cu;function fu(e){return fu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fu(e)}var du="object"==("undefined"==typeof global?"undefined":fu(global))&&global&&global.Object===Object&&global;function pu(e){return pu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},pu(e)}var hu="object"==("undefined"==typeof self?"undefined":pu(self))&&self&&self.Object===Object&&self,vu=du||hu||Function("return this")(),yu=vu.Symbol,mu=Object.prototype,gu=mu.hasOwnProperty,bu=mu.toString,wu=yu?yu.toStringTag:void 0,Su=Object.prototype.toString,Eu=yu?yu.toStringTag:void 0,_u=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Eu&&Eu in Object(e)?function(e){var t=gu.call(e,wu),n=e[wu];try{e[wu]=void 0;var r=!0}catch(e){}var o=bu.call(e);return r&&(t?e[wu]=n:delete e[wu]),o}(e):function(e){return Su.call(e)}(e)},ku=function(e,t){return function(n){return e(t(n))}},xu=ku(Object.getPrototypeOf,Object);function Tu(e){return Tu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tu(e)}var Ru=function(e){return null!=e&&"object"==Tu(e)},Au=Function.prototype,Ou=Object.prototype,Cu=Au.toString,Nu=Ou.hasOwnProperty,Lu=Cu.call(Object),Pu=function(e){if(!Ru(e)||"[object Object]"!=_u(e))return!1;var t=xu(e);if(null===t)return!0;var n=Nu.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&Cu.call(n)==Lu},ju=function(e,t){return e===t||e!=e&&t!=t},Iu=function(e,t){for(var n=e.length;n--;)if(ju(e[n][0],t))return n;return-1},Mu=Array.prototype.splice;function Uu(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}Uu.prototype.clear=function(){this.__data__=[],this.size=0},Uu.prototype.delete=function(e){var t=this.__data__,n=Iu(t,e);return!(n<0||(n==t.length-1?t.pop():Mu.call(t,n,1),--this.size,0))},Uu.prototype.get=function(e){var t=this.__data__,n=Iu(t,e);return n<0?void 0:t[n][1]},Uu.prototype.has=function(e){return Iu(this.__data__,e)>-1},Uu.prototype.set=function(e,t){var n=this.__data__,r=Iu(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this};var Fu=Uu;function zu(e){return zu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},zu(e)}var Du,Vu=function(e){var t=zu(e);return null!=e&&("object"==t||"function"==t)},Bu=function(e){if(!Vu(e))return!1;var t=_u(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t},$u=vu["__core-js_shared__"],Wu=(Du=/[^.]+$/.exec($u&&$u.keys&&$u.keys.IE_PROTO||""))?"Symbol(src)_1."+Du:"",Hu=Function.prototype.toString,qu=function(e){if(null!=e){try{return Hu.call(e)}catch(e){}try{return e+""}catch(e){}}return""},Gu=/^\[object .+?Constructor\]$/,Ku=Function.prototype,Qu=Object.prototype,Yu=Ku.toString,Xu=Qu.hasOwnProperty,Ju=RegExp("^"+Yu.call(Xu).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Zu=function(e){return!(!Vu(e)||(t=e,Wu&&Wu in t))&&(Bu(e)?Ju:Gu).test(qu(e));var t},el=function(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Zu(n)?n:void 0},tl=el(vu,"Map"),nl=el(Object,"create"),rl=Object.prototype.hasOwnProperty,ol=Object.prototype.hasOwnProperty;function al(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}al.prototype.clear=function(){this.__data__=nl?nl(null):{},this.size=0},al.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},al.prototype.get=function(e){var t=this.__data__;if(nl){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return rl.call(t,e)?t[e]:void 0},al.prototype.has=function(e){var t=this.__data__;return nl?void 0!==t[e]:ol.call(t,e)},al.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=nl&&void 0===t?"__lodash_hash_undefined__":t,this};var il=al;function ul(e){return ul="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ul(e)}var ll=function(e,t){var n,r,o=e.__data__;return("string"==(r=ul(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map};function cl(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}cl.prototype.clear=function(){this.size=0,this.__data__={hash:new il,map:new(tl||Fu),string:new il}},cl.prototype.delete=function(e){var t=ll(this,e).delete(e);return this.size-=t?1:0,t},cl.prototype.get=function(e){return ll(this,e).get(e)},cl.prototype.has=function(e){return ll(this,e).has(e)},cl.prototype.set=function(e,t){var n=ll(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this};var sl=cl;function fl(e){var t=this.__data__=new Fu(e);this.size=t.size}fl.prototype.clear=function(){this.__data__=new Fu,this.size=0},fl.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},fl.prototype.get=function(e){return this.__data__.get(e)},fl.prototype.has=function(e){return this.__data__.has(e)},fl.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Fu){var r=n.__data__;if(!tl||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new sl(r)}return n.set(e,t),this.size=n.size,this};var dl=fl,pl=function(){try{var e=el(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),hl=function(e,t,n){"__proto__"==t&&pl?pl(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n},vl=Object.prototype.hasOwnProperty,yl=function(e,t,n){var r=e[t];vl.call(e,t)&&ju(r,n)&&(void 0!==n||t in e)||hl(e,t,n)},ml=function(e,t,n,r){var o=!n;n||(n={});for(var a=-1,i=t.length;++a<i;){var u=t[a],l=r?r(n[u],e[u],u,n,e):void 0;void 0===l&&(l=e[u]),o?hl(n,u,l):yl(n,u,l)}return n},gl=function(e){return Ru(e)&&"[object Arguments]"==_u(e)},bl=Object.prototype,wl=bl.hasOwnProperty,Sl=bl.propertyIsEnumerable,El=gl(function(){return arguments}())?gl:function(e){return Ru(e)&&wl.call(e,"callee")&&!Sl.call(e,"callee")},_l=El,kl=Array.isArray;function xl(e){return xl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xl(e)}var Tl="object"==("undefined"==typeof exports?"undefined":xl(exports))&&exports&&!exports.nodeType&&exports,Rl=Tl&&"object"==("undefined"==typeof module?"undefined":xl(module))&&module&&!module.nodeType&&module,Al=Rl&&Rl.exports===Tl?vu.Buffer:void 0,Ol=(Al?Al.isBuffer:void 0)||function(){return!1};function Cl(e){return Cl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Cl(e)}var Nl=/^(?:0|[1-9]\d*)$/,Ll=function(e,t){var n=Cl(e);return!!(t=null==t?9007199254740991:t)&&("number"==n||"symbol"!=n&&Nl.test(e))&&e>-1&&e%1==0&&e<t},Pl=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991},jl={};jl["[object Float32Array]"]=jl["[object Float64Array]"]=jl["[object Int8Array]"]=jl["[object Int16Array]"]=jl["[object Int32Array]"]=jl["[object Uint8Array]"]=jl["[object Uint8ClampedArray]"]=jl["[object Uint16Array]"]=jl["[object Uint32Array]"]=!0,jl["[object Arguments]"]=jl["[object Array]"]=jl["[object ArrayBuffer]"]=jl["[object Boolean]"]=jl["[object DataView]"]=jl["[object Date]"]=jl["[object Error]"]=jl["[object Function]"]=jl["[object Map]"]=jl["[object Number]"]=jl["[object Object]"]=jl["[object RegExp]"]=jl["[object Set]"]=jl["[object String]"]=jl["[object WeakMap]"]=!1;var Il=function(e){return function(t){return e(t)}};function Ml(e){return Ml="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ml(e)}var Ul="object"==("undefined"==typeof exports?"undefined":Ml(exports))&&exports&&!exports.nodeType&&exports,Fl=Ul&&"object"==("undefined"==typeof module?"undefined":Ml(module))&&module&&!module.nodeType&&module,zl=Fl&&Fl.exports===Ul&&du.process,Dl=function(){try{return Fl&&Fl.require&&Fl.require("util").types||zl&&zl.binding&&zl.binding("util")}catch(e){}}(),Vl=Dl&&Dl.isTypedArray,Bl=Vl?Il(Vl):function(e){return Ru(e)&&Pl(e.length)&&!!jl[_u(e)]},$l=Object.prototype.hasOwnProperty,Wl=function(e,t){var n=kl(e),r=!n&&_l(e),o=!n&&!r&&Ol(e),a=!n&&!r&&!o&&Bl(e),i=n||r||o||a,u=i?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],l=u.length;for(var c in e)!t&&!$l.call(e,c)||i&&("length"==c||o&&("offset"==c||"parent"==c)||a&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Ll(c,l))||u.push(c);return u},Hl=Object.prototype,ql=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||Hl)},Gl=ku(Object.keys,Object),Kl=Object.prototype.hasOwnProperty,Ql=function(e){return null!=e&&Pl(e.length)&&!Bu(e)},Yl=function(e){return Ql(e)?Wl(e):function(e){if(!ql(e))return Gl(e);var t=[];for(var n in Object(e))Kl.call(e,n)&&"constructor"!=n&&t.push(n);return t}(e)},Xl=Object.prototype.hasOwnProperty,Jl=function(e){if(!Vu(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t=ql(e),n=[];for(var r in e)("constructor"!=r||!t&&Xl.call(e,r))&&n.push(r);return n},Zl=function(e){return Ql(e)?Wl(e,!0):Jl(e)};function ec(e){return ec="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ec(e)}var tc="object"==("undefined"==typeof exports?"undefined":ec(exports))&&exports&&!exports.nodeType&&exports,nc=tc&&"object"==("undefined"==typeof module?"undefined":ec(module))&&module&&!module.nodeType&&module,rc=nc&&nc.exports===tc?vu.Buffer:void 0,oc=rc?rc.allocUnsafe:void 0,ac=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t},ic=function(){return[]},uc=Object.prototype.propertyIsEnumerable,lc=Object.getOwnPropertySymbols,cc=lc?function(e){return null==e?[]:(e=Object(e),function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,a=[];++n<r;){var i=e[n];t(i,n,e)&&(a[o++]=i)}return a}(lc(e),(function(t){return uc.call(e,t)})))}:ic,sc=function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e},fc=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)sc(t,cc(e)),e=xu(e);return t}:ic,dc=function(e,t,n){var r=t(e);return kl(e)?r:sc(r,n(e))},pc=function(e){return dc(e,Yl,cc)},hc=function(e){return dc(e,Zl,fc)},vc=el(vu,"DataView"),yc=el(vu,"Promise"),mc=el(vu,"Set"),gc=el(vu,"WeakMap"),bc="[object Map]",wc="[object Promise]",Sc="[object Set]",Ec="[object WeakMap]",_c="[object DataView]",kc=qu(vc),xc=qu(tl),Tc=qu(yc),Rc=qu(mc),Ac=qu(gc),Oc=_u;(vc&&Oc(new vc(new ArrayBuffer(1)))!=_c||tl&&Oc(new tl)!=bc||yc&&Oc(yc.resolve())!=wc||mc&&Oc(new mc)!=Sc||gc&&Oc(new gc)!=Ec)&&(Oc=function(e){var t=_u(e),n="[object Object]"==t?e.constructor:void 0,r=n?qu(n):"";if(r)switch(r){case kc:return _c;case xc:return bc;case Tc:return wc;case Rc:return Sc;case Ac:return Ec}return t});var Cc=Oc,Nc=Object.prototype.hasOwnProperty,Lc=vu.Uint8Array,Pc=function(e){var t=new e.constructor(e.byteLength);return new Lc(t).set(new Lc(e)),t},jc=(n(3475),/\w*$/),Ic=yu?yu.prototype:void 0,Mc=Ic?Ic.valueOf:void 0,Uc=function(e,t,n){var r,o,a,i=e.constructor;switch(t){case"[object ArrayBuffer]":return Pc(e);case"[object Boolean]":case"[object Date]":return new i(+e);case"[object DataView]":return function(e,t){var n=t?Pc(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,n);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return function(e,t){var n=t?Pc(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}(e,n);case"[object Map]":case"[object Set]":return new i;case"[object Number]":case"[object String]":return new i(e);case"[object RegExp]":return(a=new(o=e).constructor(o.source,jc.exec(o))).lastIndex=o.lastIndex,a;case"[object Symbol]":return r=e,Mc?Object(Mc.call(r)):{}}},Fc=Object.create,zc=function(){function e(){}return function(t){if(!Vu(t))return{};if(Fc)return Fc(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}(),Dc=Dl&&Dl.isMap,Vc=Dc?Il(Dc):function(e){return Ru(e)&&"[object Map]"==Cc(e)},Bc=Dl&&Dl.isSet,$c=Bc?Il(Bc):function(e){return Ru(e)&&"[object Set]"==Cc(e)},Wc="[object Arguments]",Hc="[object Function]",qc={};qc[Wc]=qc["[object Array]"]=qc["[object ArrayBuffer]"]=qc["[object DataView]"]=qc["[object Boolean]"]=qc["[object Date]"]=qc["[object Float32Array]"]=qc["[object Float64Array]"]=qc["[object Int8Array]"]=qc["[object Int16Array]"]=qc["[object Int32Array]"]=qc["[object Map]"]=qc["[object Number]"]=qc["[object Object]"]=qc["[object RegExp]"]=qc["[object Set]"]=qc["[object String]"]=qc["[object Symbol]"]=qc["[object Uint8Array]"]=qc["[object Uint8ClampedArray]"]=qc["[object Uint16Array]"]=qc["[object Uint32Array]"]=!0,qc["[object Error]"]=qc[Hc]=qc["[object WeakMap]"]=!1;var Gc=function e(t,n,r,o,a,i){var u,l=1&n,c=2&n,s=4&n;if(r&&(u=a?r(t,o,a,i):r(t)),void 0!==u)return u;if(!Vu(t))return t;var f=kl(t);if(f){if(u=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&Nc.call(e,"index")&&(n.index=e.index,n.input=e.input),n}(t),!l)return ac(t,u)}else{var d=Cc(t),p=d==Hc||"[object GeneratorFunction]"==d;if(Ol(t))return function(e,t){if(t)return e.slice();var n=e.length,r=oc?oc(n):new e.constructor(n);return e.copy(r),r}(t,l);if("[object Object]"==d||d==Wc||p&&!a){if(u=c||p?{}:function(e){return"function"!=typeof e.constructor||ql(e)?{}:zc(xu(e))}(t),!l)return c?function(e,t){return ml(e,fc(e),t)}(t,function(e,t){return e&&ml(t,Zl(t),e)}(u,t)):function(e,t){return ml(e,cc(e),t)}(t,function(e,t){return e&&ml(t,Yl(t),e)}(u,t))}else{if(!qc[d])return a?t:{};u=Uc(t,d,l)}}i||(i=new dl);var h=i.get(t);if(h)return h;i.set(t,u),$c(t)?t.forEach((function(o){u.add(e(o,n,r,o,t,i))})):Vc(t)&&t.forEach((function(o,a){u.set(a,e(o,n,r,a,t,i))}));var v=f?void 0:(s?c?hc:pc:c?Zl:Yl)(t);return function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););}(v||t,(function(o,a){v&&(o=t[a=o]),yl(u,a,e(o,n,r,a,t,i))})),u},Kc=function(e){return Gc(e,4)},Qc=function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o};function Yc(e){return Yc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Yc(e)}var Xc=function(e){return"symbol"==Yc(e)||Ru(e)&&"[object Symbol]"==_u(e)};function Jc(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function n(){var r=arguments,o=t?t.apply(this,r):r[0],a=n.cache;if(a.has(o))return a.get(o);var i=e.apply(this,r);return n.cache=a.set(o,i)||a,i};return n.cache=new(Jc.Cache||sl),n}Jc.Cache=sl;var Zc,es,ts=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ns=/\\(\\)?/g,rs=(Zc=Jc((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(ts,(function(e,n,r,o){t.push(r?o.replace(ns,"$1"):n||e)})),t}),(function(e){return 500===es.size&&es.clear(),e})),es=Zc.cache,Zc),os=function(e){if("string"==typeof e||Xc(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t},as=yu?yu.prototype:void 0,is=as?as.toString:void 0,us=function e(t){if("string"==typeof t)return t;if(kl(t))return Qc(t,e)+"";if(Xc(t))return is?is.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n},ls=function(e){return null==e?"":us(e)},cs=function(e){return kl(e)?Qc(e,os):Xc(e)?[e]:ac(rs(ls(e)))};n(2583);var ss=function(e){return Gc(e,5)};function fs(e){return fs="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fs(e)}function ds(){return ds=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ds.apply(this,arguments)}function ps(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function hs(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var vs=function(e){return Array.isArray(e)&&0===e.length},ys=function(e){return"function"==typeof e},ms=function(e){return null!==e&&"object"===fs(e)},gs=function(e){return String(Math.floor(Number(e)))===e},bs=function(e){return"[object String]"===Object.prototype.toString.call(e)},ws=function(e){return ms(e)&&ys(e.then)};function Ss(e,t,n,r){void 0===r&&(r=0);for(var o=cs(t);e&&r<o.length;)e=e[o[r++]];return void 0===e?n:e}function Es(e,t,n){for(var r=Kc(e),o=r,a=0,i=cs(t);a<i.length-1;a++){var u=i[a],l=Ss(e,i.slice(0,a+1));if(l&&(ms(l)||Array.isArray(l)))o=o[u]=Kc(l);else{var c=i[a+1];o=o[u]=gs(c)&&Number(c)>=0?[]:{}}}return(0===a?e:o)[i[a]]===n?e:(void 0===n?delete o[i[a]]:o[i[a]]=n,0===a&&void 0===n&&delete r[i[a]],r)}function _s(e,t,n,r){void 0===n&&(n=new WeakMap),void 0===r&&(r={});for(var o=0,a=Object.keys(e);o<a.length;o++){var i=a[o],u=e[i];ms(u)?n.get(u)||(n.set(u,!0),r[i]=Array.isArray(u)?[]:{},_s(u,t,n,r[i])):r[i]=t}return r}var ks=(0,e.createContext)(void 0);function xs(e,t){switch(t.type){case"SET_VALUES":return ds({},e,{values:t.payload});case"SET_TOUCHED":return ds({},e,{touched:t.payload});case"SET_ERRORS":return ru()(e.errors,t.payload)?e:ds({},e,{errors:t.payload});case"SET_STATUS":return ds({},e,{status:t.payload});case"SET_ISSUBMITTING":return ds({},e,{isSubmitting:t.payload});case"SET_ISVALIDATING":return ds({},e,{isValidating:t.payload});case"SET_FIELD_VALUE":return ds({},e,{values:Es(e.values,t.payload.field,t.payload.value)});case"SET_FIELD_TOUCHED":return ds({},e,{touched:Es(e.touched,t.payload.field,t.payload.value)});case"SET_FIELD_ERROR":return ds({},e,{errors:Es(e.errors,t.payload.field,t.payload.value)});case"RESET_FORM":return ds({},e,t.payload);case"SET_FORMIK_STATE":return t.payload(e);case"SUBMIT_ATTEMPT":return ds({},e,{touched:_s(e.values,!0),isSubmitting:!0,submitCount:e.submitCount+1});case"SUBMIT_FAILURE":case"SUBMIT_SUCCESS":return ds({},e,{isSubmitting:!1});default:return e}}ks.displayName="FormikContext",ks.Provider,ks.Consumer;var Ts={},Rs={};function As(t){var n=t.validateOnChange,r=void 0===n||n,o=t.validateOnBlur,a=void 0===o||o,i=t.validateOnMount,u=void 0!==i&&i,l=t.isInitialValid,c=t.enableReinitialize,s=void 0!==c&&c,f=t.onSubmit,d=ps(t,["validateOnChange","validateOnBlur","validateOnMount","isInitialValid","enableReinitialize","onSubmit"]),p=ds({validateOnChange:r,validateOnBlur:a,validateOnMount:u,onSubmit:f},d),h=(0,e.useRef)(p.initialValues),v=(0,e.useRef)(p.initialErrors||Ts),y=(0,e.useRef)(p.initialTouched||Rs),m=(0,e.useRef)(p.initialStatus),g=(0,e.useRef)(!1),b=(0,e.useRef)({});(0,e.useEffect)((function(){return g.current=!0,function(){g.current=!1}}),[]);var w=(0,e.useReducer)(xs,{values:p.initialValues,errors:p.initialErrors||Ts,touched:p.initialTouched||Rs,status:p.initialStatus,isSubmitting:!1,isValidating:!1,submitCount:0}),S=w[0],E=w[1],_=(0,e.useCallback)((function(e,t){return new Promise((function(n,r){var o=p.validate(e,t);null==o?n(Ts):ws(o)?o.then((function(e){n(e||Ts)}),(function(e){r(e)})):n(o)}))}),[p.validate]),k=(0,e.useCallback)((function(e,t){var n=p.validationSchema,r=ys(n)?n(t):n,o=t&&r.validateAt?r.validateAt(t,e):function(e,t,n,r){void 0===n&&(n=!1),void 0===r&&(r={});var o=Os(e);return t[n?"validateSync":"validate"](o,{abortEarly:!1,context:r})}(e,r);return new Promise((function(e,t){o.then((function(){e(Ts)}),(function(n){"ValidationError"===n.name?e(function(e){var t={};if(e.inner){if(0===e.inner.length)return Es(t,e.path,e.message);var n=e.inner,r=Array.isArray(n),o=0;for(n=r?n:n[Symbol.iterator]();;){var a;if(r){if(o>=n.length)break;a=n[o++]}else{if((o=n.next()).done)break;a=o.value}var i=a;Ss(t,i.path)||(t=Es(t,i.path,i.message))}}return t}(n)):t(n)}))}))}),[p.validationSchema]),x=(0,e.useCallback)((function(e,t){return new Promise((function(n){return n(b.current[e].validate(t))}))}),[]),T=(0,e.useCallback)((function(e){var t=Object.keys(b.current).filter((function(e){return ys(b.current[e].validate)})),n=t.length>0?t.map((function(t){return x(t,Ss(e,t))})):[Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];return Promise.all(n).then((function(e){return e.reduce((function(e,n,r){return"DO_NOT_DELETE_YOU_WILL_BE_FIRED"===n||n&&(e=Es(e,t[r],n)),e}),{})}))}),[x]),R=(0,e.useCallback)((function(e){return Promise.all([T(e),p.validationSchema?k(e):{},p.validate?_(e):{}]).then((function(e){var t=e[0],n=e[1],r=e[2];return su.all([t,n,r],{arrayMerge:Cs})}))}),[p.validate,p.validationSchema,T,_,k]),A=Ls((function(e){return void 0===e&&(e=S.values),E({type:"SET_ISVALIDATING",payload:!0}),R(e).then((function(e){return g.current&&(E({type:"SET_ISVALIDATING",payload:!1}),E({type:"SET_ERRORS",payload:e})),e}))}));(0,e.useEffect)((function(){u&&!0===g.current&&ru()(h.current,p.initialValues)&&A(h.current)}),[u,A]);var O=(0,e.useCallback)((function(e){var t=e&&e.values?e.values:h.current,n=e&&e.errors?e.errors:v.current?v.current:p.initialErrors||{},r=e&&e.touched?e.touched:y.current?y.current:p.initialTouched||{},o=e&&e.status?e.status:m.current?m.current:p.initialStatus;h.current=t,v.current=n,y.current=r,m.current=o;var a=function(){E({type:"RESET_FORM",payload:{isSubmitting:!!e&&!!e.isSubmitting,errors:n,touched:r,status:o,values:t,isValidating:!!e&&!!e.isValidating,submitCount:e&&e.submitCount&&"number"==typeof e.submitCount?e.submitCount:0}})};if(p.onReset){var i=p.onReset(S.values,K);ws(i)?i.then(a):a()}else a()}),[p.initialErrors,p.initialStatus,p.initialTouched]);(0,e.useEffect)((function(){!0!==g.current||ru()(h.current,p.initialValues)||(s&&(h.current=p.initialValues,O()),u&&A(h.current))}),[s,p.initialValues,O,u,A]),(0,e.useEffect)((function(){s&&!0===g.current&&!ru()(v.current,p.initialErrors)&&(v.current=p.initialErrors||Ts,E({type:"SET_ERRORS",payload:p.initialErrors||Ts}))}),[s,p.initialErrors]),(0,e.useEffect)((function(){s&&!0===g.current&&!ru()(y.current,p.initialTouched)&&(y.current=p.initialTouched||Rs,E({type:"SET_TOUCHED",payload:p.initialTouched||Rs}))}),[s,p.initialTouched]),(0,e.useEffect)((function(){s&&!0===g.current&&!ru()(m.current,p.initialStatus)&&(m.current=p.initialStatus,E({type:"SET_STATUS",payload:p.initialStatus}))}),[s,p.initialStatus,p.initialTouched]);var C=Ls((function(e){if(b.current[e]&&ys(b.current[e].validate)){var t=Ss(S.values,e),n=b.current[e].validate(t);return ws(n)?(E({type:"SET_ISVALIDATING",payload:!0}),n.then((function(e){return e})).then((function(t){E({type:"SET_FIELD_ERROR",payload:{field:e,value:t}}),E({type:"SET_ISVALIDATING",payload:!1})}))):(E({type:"SET_FIELD_ERROR",payload:{field:e,value:n}}),Promise.resolve(n))}return p.validationSchema?(E({type:"SET_ISVALIDATING",payload:!0}),k(S.values,e).then((function(e){return e})).then((function(t){E({type:"SET_FIELD_ERROR",payload:{field:e,value:t[e]}}),E({type:"SET_ISVALIDATING",payload:!1})}))):Promise.resolve()})),N=(0,e.useCallback)((function(e,t){var n=t.validate;b.current[e]={validate:n}}),[]),L=(0,e.useCallback)((function(e){delete b.current[e]}),[]),P=Ls((function(e,t){return E({type:"SET_TOUCHED",payload:e}),(void 0===t?a:t)?A(S.values):Promise.resolve()})),j=(0,e.useCallback)((function(e){E({type:"SET_ERRORS",payload:e})}),[]),I=Ls((function(e,t){var n=ys(e)?e(S.values):e;return E({type:"SET_VALUES",payload:n}),(void 0===t?r:t)?A(n):Promise.resolve()})),M=(0,e.useCallback)((function(e,t){E({type:"SET_FIELD_ERROR",payload:{field:e,value:t}})}),[]),U=Ls((function(e,t,n){return E({type:"SET_FIELD_VALUE",payload:{field:e,value:t}}),(void 0===n?r:n)?A(Es(S.values,e,t)):Promise.resolve()})),F=(0,e.useCallback)((function(e,t){var n,r=t,o=e;if(!bs(e)){e.persist&&e.persist();var a=e.target?e.target:e.currentTarget,i=a.type,u=a.name,l=a.id,c=a.value,s=a.checked,f=(a.outerHTML,a.options),d=a.multiple;r=t||u||l,o=/number|range/.test(i)?(n=parseFloat(c),isNaN(n)?"":n):/checkbox/.test(i)?function(e,t,n){if("boolean"==typeof e)return Boolean(t);var r=[],o=!1,a=-1;if(Array.isArray(e))r=e,o=(a=e.indexOf(n))>=0;else if(!n||"true"==n||"false"==n)return Boolean(t);return t&&n&&!o?r.concat(n):o?r.slice(0,a).concat(r.slice(a+1)):r}(Ss(S.values,r),s,c):f&&d?function(e){return Array.from(e).filter((function(e){return e.selected})).map((function(e){return e.value}))}(f):c}r&&U(r,o)}),[U,S.values]),z=Ls((function(e){if(bs(e))return function(t){return F(t,e)};F(e)})),D=Ls((function(e,t,n){return void 0===t&&(t=!0),E({type:"SET_FIELD_TOUCHED",payload:{field:e,value:t}}),(void 0===n?a:n)?A(S.values):Promise.resolve()})),V=(0,e.useCallback)((function(e,t){e.persist&&e.persist();var n=e.target,r=n.name,o=n.id,a=(n.outerHTML,t||r||o);D(a,!0)}),[D]),B=Ls((function(e){if(bs(e))return function(t){return V(t,e)};V(e)})),$=(0,e.useCallback)((function(e){ys(e)?E({type:"SET_FORMIK_STATE",payload:e}):E({type:"SET_FORMIK_STATE",payload:function(){return e}})}),[]),W=(0,e.useCallback)((function(e){E({type:"SET_STATUS",payload:e})}),[]),H=(0,e.useCallback)((function(e){E({type:"SET_ISSUBMITTING",payload:e})}),[]),q=Ls((function(){return E({type:"SUBMIT_ATTEMPT"}),A().then((function(e){var t=e instanceof Error;if(!t&&0===Object.keys(e).length){var n;try{if(void 0===(n=Q()))return}catch(e){throw e}return Promise.resolve(n).then((function(e){return g.current&&E({type:"SUBMIT_SUCCESS"}),e})).catch((function(e){if(g.current)throw E({type:"SUBMIT_FAILURE"}),e}))}if(g.current&&(E({type:"SUBMIT_FAILURE"}),t))throw e}))})),G=Ls((function(e){e&&e.preventDefault&&ys(e.preventDefault)&&e.preventDefault(),e&&e.stopPropagation&&ys(e.stopPropagation)&&e.stopPropagation(),q().catch((function(e){console.warn("Warning: An unhandled error was caught from submitForm()",e)}))})),K={resetForm:O,validateForm:A,validateField:C,setErrors:j,setFieldError:M,setFieldTouched:D,setFieldValue:U,setStatus:W,setSubmitting:H,setTouched:P,setValues:I,setFormikState:$,submitForm:q},Q=Ls((function(){return f(S.values,K)})),Y=Ls((function(e){e&&e.preventDefault&&ys(e.preventDefault)&&e.preventDefault(),e&&e.stopPropagation&&ys(e.stopPropagation)&&e.stopPropagation(),O()})),X=(0,e.useCallback)((function(e){return{value:Ss(S.values,e),error:Ss(S.errors,e),touched:!!Ss(S.touched,e),initialValue:Ss(h.current,e),initialTouched:!!Ss(y.current,e),initialError:Ss(v.current,e)}}),[S.errors,S.touched,S.values]),J=(0,e.useCallback)((function(e){return{setValue:function(t,n){return U(e,t,n)},setTouched:function(t,n){return D(e,t,n)},setError:function(t){return M(e,t)}}}),[U,D,M]),Z=(0,e.useCallback)((function(e){var t=ms(e),n=t?e.name:e,r=Ss(S.values,n),o={name:n,value:r,onChange:z,onBlur:B};if(t){var a=e.type,i=e.value,u=e.as,l=e.multiple;"checkbox"===a?void 0===i?o.checked=!!r:(o.checked=!(!Array.isArray(r)||!~r.indexOf(i)),o.value=i):"radio"===a?(o.checked=r===i,o.value=i):"select"===u&&l&&(o.value=o.value||[],o.multiple=!0)}return o}),[B,z,S.values]),ee=(0,e.useMemo)((function(){return!ru()(h.current,S.values)}),[h.current,S.values]),te=(0,e.useMemo)((function(){return void 0!==l?ee?S.errors&&0===Object.keys(S.errors).length:!1!==l&&ys(l)?l(p):l:S.errors&&0===Object.keys(S.errors).length}),[l,ee,S.errors,p]);return ds({},S,{initialValues:h.current,initialErrors:v.current,initialTouched:y.current,initialStatus:m.current,handleBlur:B,handleChange:z,handleReset:Y,handleSubmit:G,resetForm:O,setErrors:j,setFormikState:$,setFieldTouched:D,setFieldValue:U,setFieldError:M,setStatus:W,setSubmitting:H,setTouched:P,setValues:I,submitForm:q,validateForm:A,validateField:C,isValid:te,dirty:ee,unregisterField:L,registerField:N,getFieldProps:Z,getFieldMeta:X,getFieldHelpers:J,validateOnBlur:a,validateOnChange:r,validateOnMount:u})}function Os(e){var t=Array.isArray(e)?[]:{};for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=String(n);!0===Array.isArray(e[r])?t[r]=e[r].map((function(e){return!0===Array.isArray(e)||Pu(e)?Os(e):""!==e?e:void 0})):Pu(e[r])?t[r]=Os(e[r]):t[r]=""!==e[r]?e[r]:void 0}return t}function Cs(e,t,n){var r=e.slice();return t.forEach((function(t,o){if(void 0===r[o]){var a=!1!==n.clone&&n.isMergeableObject(t);r[o]=a?su(Array.isArray(t)?[]:{},t,n):t}else n.isMergeableObject(t)?r[o]=su(e[o],t,n):-1===e.indexOf(t)&&r.push(t)})),r}var Ns="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?e.useLayoutEffect:e.useEffect;function Ls(t){var n=(0,e.useRef)(t);return Ns((function(){n.current=t})),(0,e.useCallback)((function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return n.current.apply(void 0,t)}),[])}(0,e.forwardRef)((function(t,n){var r=t.action,o=ps(t,["action"]),a=null!=r?r:"#",i=(0,e.useContext)(ks),u=i.handleReset,l=i.handleSubmit;return(0,e.createElement)("form",Object.assign({onSubmit:l,ref:n,onReset:u,action:a},o))})).displayName="Form";var Ps=function(e,t,n){var r=js(e);return r.splice(t,0,n),r},js=function(e){if(e){if(Array.isArray(e))return[].concat(e);var t=Object.keys(e).map((function(e){return parseInt(e)})).reduce((function(e,t){return t>e?t:e}),0);return Array.from(ds({},e,{length:t+1}))}return[]},Is=function(t){function n(e){var n;return(n=t.call(this,e)||this).updateArrayField=function(e,t,r){var o=n.props,a=o.name;(0,o.formik.setFormikState)((function(n){var o="function"==typeof r?r:e,i="function"==typeof t?t:e,u=Es(n.values,a,e(Ss(n.values,a))),l=r?o(Ss(n.errors,a)):void 0,c=t?i(Ss(n.touched,a)):void 0;return vs(l)&&(l=void 0),vs(c)&&(c=void 0),ds({},n,{values:u,errors:r?Es(n.errors,a,l):n.errors,touched:t?Es(n.touched,a,c):n.touched})}))},n.push=function(e){return n.updateArrayField((function(t){return[].concat(js(t),[ss(e)])}),!1,!1)},n.handlePush=function(e){return function(){return n.push(e)}},n.swap=function(e,t){return n.updateArrayField((function(n){return function(e,t,n){var r=js(e),o=r[t];return r[t]=r[n],r[n]=o,r}(n,e,t)}),!0,!0)},n.handleSwap=function(e,t){return function(){return n.swap(e,t)}},n.move=function(e,t){return n.updateArrayField((function(n){return function(e,t,n){var r=js(e),o=r[t];return r.splice(t,1),r.splice(n,0,o),r}(n,e,t)}),!0,!0)},n.handleMove=function(e,t){return function(){return n.move(e,t)}},n.insert=function(e,t){return n.updateArrayField((function(n){return Ps(n,e,t)}),(function(t){return Ps(t,e,null)}),(function(t){return Ps(t,e,null)}))},n.handleInsert=function(e,t){return function(){return n.insert(e,t)}},n.replace=function(e,t){return n.updateArrayField((function(n){return function(e,t,n){var r=js(e);return r[t]=n,r}(n,e,t)}),!1,!1)},n.handleReplace=function(e,t){return function(){return n.replace(e,t)}},n.unshift=function(e){var t=-1;return n.updateArrayField((function(n){var r=n?[e].concat(n):[e];return t<0&&(t=r.length),r}),(function(e){var n=e?[null].concat(e):[null];return t<0&&(t=n.length),n}),(function(e){var n=e?[null].concat(e):[null];return t<0&&(t=n.length),n})),t},n.handleUnshift=function(e){return function(){return n.unshift(e)}},n.handleRemove=function(e){return function(){return n.remove(e)}},n.handlePop=function(){return function(){return n.pop()}},n.remove=n.remove.bind(hs(n)),n.pop=n.pop.bind(hs(n)),n}var r,o;o=t,(r=n).prototype=Object.create(o.prototype),r.prototype.constructor=r,r.__proto__=o;var a=n.prototype;return a.componentDidUpdate=function(e){this.props.validateOnChange&&this.props.formik.validateOnChange&&!ru()(Ss(e.formik.values,e.name),Ss(this.props.formik.values,this.props.name))&&this.props.formik.validateForm(this.props.formik.values)},a.remove=function(e){var t;return this.updateArrayField((function(n){var r=n?js(n):[];return t||(t=r[e]),ys(r.splice)&&r.splice(e,1),r}),!0,!0),t},a.pop=function(){var e;return this.updateArrayField((function(t){var n=t;return e||(e=n&&n.pop&&n.pop()),n}),!0,!0),e},a.render=function(){var t={push:this.push,pop:this.pop,swap:this.swap,move:this.move,insert:this.insert,replace:this.replace,unshift:this.unshift,remove:this.remove,handlePush:this.handlePush,handlePop:this.handlePop,handleSwap:this.handleSwap,handleMove:this.handleMove,handleInsert:this.handleInsert,handleReplace:this.handleReplace,handleUnshift:this.handleUnshift,handleRemove:this.handleRemove},n=this.props,r=n.component,o=n.render,a=n.children,i=n.name,u=ds({},t,{form:ps(n.formik,["validate","validationSchema"]),name:i});return r?(0,e.createElement)(r,u):o?o(u):a?"function"==typeof a?a(u):function(t){return 0===e.Children.count(t)}(a)?null:e.Children.only(a):null},n}(e.Component);Is.defaultProps={validateOnChange:!0},e.Component,e.Component;var Ms=function(t){var n=t.title,r=t.onClick;return e.createElement("button",{onClick:r},n)},Us=function(t){var n=t.label,r=t.name,o=t.type,a=t.value,i=t.onChange;return e.createElement("div",{className:"s2dqi0j"},e.createElement("label",{htmlFor:r},n),e.createElement("input",{className:"iyf9swr",name:r,type:o,onChange:i,value:a}))};function Fs(e,t,n,r,o,a,i){try{var u=e[a](i),l=u.value}catch(e){return void n(e)}u.done?t(l):Promise.resolve(l).then(r,o)}function zs(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Fs(a,r,o,i,u,"next",e)}function u(e){Fs(a,r,o,i,u,"throw",e)}i(void 0)}))}}n(8731);var Ds=function(){var e=zs(regeneratorRuntime.mark((function e(t,n){var r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,new Promise((function(e,t){setTimeout((function(){e("dummy")}),1e3)}));case 3:return r=e.sent,e.abrupt("return",r);case 7:if(e.prev=7,e.t0=e.catch(0),!(e.t0 instanceof Error)){e.next=11;break}return e.abrupt("return",e.t0);case 11:return e.abrupt("return",new Error(e.t0));case 12:case"end":return e.stop()}}),e,null,[[0,7]])})));return function(t,n){return e.apply(this,arguments)}}(),Vs=function(){var e=zs(regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,new Promise((function(e,t){setTimeout((function(){e()}),1e3)}));case 3:e.next=10;break;case 5:if(e.prev=5,e.t0=e.catch(0),!(e.t0 instanceof Error)){e.next=9;break}return e.abrupt("return",e.t0);case 9:return e.abrupt("return",new Error(e.t0));case 10:case"end":return e.stop()}}),e,null,[[0,5]])})));return function(){return e.apply(this,arguments)}}(),Bs=yi({key:"authState",default:""}),$s=mi({key:"isAuthedSelector",get:function(e){return!!(0,e.get)(Bs)}});function Ws(e,t,n,r,o,a,i){try{var u=e[a](i),l=u.value}catch(e){return void n(e)}u.done?t(l):Promise.resolve(l).then(r,o)}var Hs=function(){var t,n,r=Fi(),o=bi(Bs),a=As({initialValues:{name:"",password:""},onSubmit:(t=regeneratorRuntime.mark((function e(t){var n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Ds(t.name,t.password);case 2:(n=e.sent)instanceof Error||(o(n),r(eu));case 4:case"end":return e.stop()}}),e)})),n=function(){var e=this,n=arguments;return new Promise((function(r,o){var a=t.apply(e,n);function i(e){Ws(a,r,o,i,u,"next",e)}function u(e){Ws(a,r,o,i,u,"throw",e)}i(void 0)}))},function(e){return n.apply(this,arguments)})});return e.createElement("div",{className:"wqgukfe"},e.createElement("div",{className:"sx7kdhw"},e.createElement(Us,{label:"name",name:"name",type:"text",onChange:a.handleChange,value:a.values.name}),e.createElement(Us,{label:"password",name:"password",type:"password",onChange:a.handleChange,value:a.values.password}),e.createElement(Ms,{onClick:a.submitForm,title:"Sign in"})))};n(3946);var qs=n(1100),Gs=function(){return e.createElement("div",{className:"s1ptdlji"},e.createElement("header",{className:"App-header"},e.createElement("img",{src:qs,className:"App-logo",alt:"logo"}),e.createElement("p",null,"Edit ",e.createElement("code",null,"src/App.tsx")," and save to reload."),e.createElement("a",{className:"App-link",href:"https://reactjs.org",target:"_blank",rel:"noopener noreferrer"},"Learn React")))};n(3401);var Ks=function(t){return e.createElement("div",{className:"s3xpfh4"},t.items.map((function(t){return e.createElement("div",{key:t.title,onClick:t.onClick},e.createElement("a",null,t.title))})))};function Qs(e,t,n,r,o,a,i){try{var u=e[a](i),l=u.value}catch(e){return void n(e)}u.done?t(l):Promise.resolve(l).then(r,o)}n(5304);var Ys=function(t){var n=t.element,r=Fi(),o=gi($s),a=bi(Bs),i=(0,e.useMemo)((function(){return[{title:"Home",onClick:function(){r(eu)}},{title:"Sign out",onClick:(e=regeneratorRuntime.mark((function e(){return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Vs();case 2:e.sent instanceof Error||(a(""),r(tu));case 4:case"end":return e.stop()}}),e)})),t=function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Qs(a,r,o,i,u,"next",e)}function u(e){Qs(a,r,o,i,u,"throw",e)}i(void 0)}))},function(){return t.apply(this,arguments)})}];var e,t}),[r,a]);return o?e.createElement(e.Fragment,null,e.createElement(Ks,{items:i}),n):e.createElement(Ni,{to:tu,state:{from:location}})},Xs=function(){return e.createElement(Ii,null,e.createElement(Pi,{path:tu,element:e.createElement(Hs,null)}),e.createElement(Pi,{path:eu,element:e.createElement(Ys,{element:e.createElement(Gs,null)})}),e.createElement(Pi,{path:"*",element:e.createElement(Ni,{to:eu,replace:!0})}))},Js=function(t){return e.createElement("div",{className:"suwg8pj"},t.children)},Zs=function(){return e.createElement(vi,null,e.createElement(Js,null,e.createElement(Zi,null,e.createElement(Xs,null))))};n(5414),t.render(e.createElement(Zs,null),document.getElementById("root"))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QzJ6RSxHQUFELENBQVV2aUcsR0FBSTJuRyxHQUFhMXRFLFNBQU8sUUNBM0R5aEIsR0FBVSxTQUFDcGlCLEdBQ2YsT0FBTyx1QkFBS3lpRixVQUxkLFdBS2lDemlGLEVBQS9CLFdBZUYsR0FaWSxXQUNWLE9BQ0Usd0JBQ0Usd0JBQ0Usd0JBQ0UscUNDaEJWMGpGLEVBQUFBLE9BQWdCLGdCQUFoQkEsR0FBZ0IsTUFBU24zRyxTQUFBQSxlQUF6Qm0zRyIsInNvdXJjZXMiOlsid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvcmVhY3QtZmFzdC1jb21wYXJlL2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXItbmF0aXZlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tYWRkLWFsbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi1kZWxldGUtYWxsLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy13ZWJvcy13ZWJraXQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnJlZXppbmcuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1zZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWVlZTc1NC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtdXJsLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25vdC1hLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zYW1lLXZhbHVlLXplcm8uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NhbWUtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1wdW55Y29kZS10by1hc2NpaS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdGFzay5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2hpdGVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWxsLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmV2ZXJzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tanNvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5qc29uLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXAuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmNsejMyLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc2V0LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLndlYWstc2V0LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFycmF5Lmxhc3QtaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmRlbGV0ZS1hbGwuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmV2ZXJ5LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLmZpbmQta2V5LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5maW5kLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAua2V5LW9mLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0Lm1hcC5tYXAta2V5cy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAubWFwLXZhbHVlcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAubWVyZ2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQubWFwLnJlZHVjZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAuc29tZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5tYXAudXBkYXRlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5hZGQtYWxsLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5kZWxldGUtYWxsLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5kaWZmZXJlbmNlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5ldmVyeS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuZmlsdGVyLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5maW5kLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5pbnRlcnNlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmlzLWRpc2pvaW50LWZyb20uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmlzLXN1YnNldC1vZi5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQuaXMtc3VwZXJzZXQtb2YuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0LmpvaW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQuc2V0Lm1hcC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQucmVkdWNlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5zb21lLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LnNldC5zeW1tZXRyaWMtZGlmZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5zZXQudW5pb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lc25leHQud2Vhay1tYXAuZGVsZXRlLWFsbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC53ZWFrLXNldC5hZGQtYWxsLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LndlYWstc2V0LmRlbGV0ZS1hbGwuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvcmVjb2lsL2VzL3JlY29pbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi4vLi4vLi4vcGFja2FnZXMvcmVhY3Qtcm91dGVyL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi4vLi4vLi4vcGFja2FnZXMvcmVhY3Qtcm91dGVyLWRvbS9pbmRleC50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vc3JjL3JvdXRlcy9pbmRleC50cyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvZGVlcG1lcmdlL2Rpc3QvZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vdmVyQXJnLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9lcS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hc3NvY0luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlSGFzLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzTWFza2VkLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3RvU291cmNlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc05hdGl2ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fTWFwLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoR2V0LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hIYXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fSGFzaC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaERlbGV0ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoU2V0LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRNYXBEYXRhLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX01hcENhY2hlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVTZXQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3RhY2suanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc3RhY2tDbGVhci5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0RlbGV0ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0dldC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0hhcy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja1NldC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlQXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29weU9iamVjdC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0J1ZmZlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3N0dWJGYWxzZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0luZGV4LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVGltZXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlS2V5cy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMva2V5cy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlS2V5c0luLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25hdGl2ZUtleXNJbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2tleXNJbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb3B5QXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9zdHViQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0U3ltYm9scy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheUZpbHRlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheVB1c2guanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0U3ltYm9sc0luLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRBbGxLZXlzLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0QWxsS2V5c0luLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0RhdGFWaWV3LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU2V0LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1dlYWtNYXAuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0VGFnLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2luaXRDbG9uZUFycmF5LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1VpbnQ4QXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVBcnJheUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZVJlZ0V4cC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZVN5bWJvbC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pbml0Q2xvbmVCeVRhZy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZURhdGFWaWV3LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nsb25lVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlQ3JlYXRlLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNNYXAuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzTWFwLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNTZXQuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzU2V0LmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VDbG9uZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pbml0Q2xvbmVPYmplY3QuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29weVN5bWJvbHNJbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlQXNzaWduSW4uanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29weVN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUFzc2lnbi5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheUVhY2guanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9jbG9uZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheU1hcC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzU3ltYm9sLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tZW1vaXplQ2FwcGVkLmpzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0cmluZ1RvUGF0aC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL190b0tleS5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RvUGF0aC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2Nsb25lRGVlcC5qcyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi4vc3JjL3V0aWxzLnRzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uLi9zcmMvRm9ybWlrQ29udGV4dC50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4uL3NyYy9Gb3JtaWsudHN4Iiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uLi9zcmMvRm9ybS50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4uL3NyYy9GaWVsZEFycmF5LnRzeCIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvLi4vc3JjL0Vycm9yTWVzc2FnZS50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4uL3NyYy9GYXN0RmllbGQudHN4Iiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL3NyYy9jb21wb25lbnRzL0J1dHRvbi50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlL3NyYy9jb21wb25lbnRzL0Zvcm0udHN4Iiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL3NyYy91c2VjYXNlcy9hdXRoLnRzIiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL3NyYy9yZWNvaWwvYXV0aC9pbmRleC50cyIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvc3JjL3BhZ2VzL1NpZ25Jbi50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlL3NyYy9wYWdlcy9NYWluLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvc3JjL2NvbXBvbmVudHMvU2lkZU5hdi50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlLy4vc3JjL3JvdXRlcy9Qcml2YXRlUm91dGUudHN4Iiwid2VicGFjazovL3JlYWN0LXR5cGVzY3JpcHQtZXhhbXBsZS8uL3NyYy9yb3V0ZXMvUm91dGVzLnRzeCIsIndlYnBhY2s6Ly9yZWFjdC10eXBlc2NyaXB0LWV4YW1wbGUvc3JjL0FwcC50c3giLCJ3ZWJwYWNrOi8vcmVhY3QtdHlwZXNjcmlwdC1leGFtcGxlL3NyYy9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH1cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMi4wXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtcbnZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7ZnVuY3Rpb24geShhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIHooYSl7cmV0dXJuIHkoYSk9PT1tfVxuZXhwb3J0cy50eXBlT2Y9eTtleHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT12fHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXgpfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpfHx5KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPXo7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1ofTtcbmV4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09dH07ZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1wfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB5KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih5KDIyNykpO3ZhciBiYT1uZXcgU2V0LGNhPXt9O2Z1bmN0aW9uIGRhKGEsYil7ZWEoYSxiKTtlYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gZWEoYSxiKXtjYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspYmEuYWRkKGJbYV0pfVxudmFyIGZhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxoYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8saWE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxcbmphPXt9LGthPXt9O2Z1bmN0aW9uIGxhKGEpe2lmKGlhLmNhbGwoa2EsYSkpcmV0dXJuITA7aWYoaWEuY2FsbChqYSxhKSlyZXR1cm4hMTtpZihoYS50ZXN0KGEpKXJldHVybiBrYVthXT0hMDtqYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBtYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIG5hKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fG1hKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gQihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIEQ9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RFtiXT1uZXcgQihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciBvYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHBhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLFxucGEpO0RbYl09bmV3IEIoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxwYSk7RFtiXT1uZXcgQihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuRC54bGlua0hyZWY9bmV3IEIoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gcWEoYSxiLGMsZCl7dmFyIGU9RC5oYXNPd25Qcm9wZXJ0eShiKT9EW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwobmEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP2xhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgcmE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsc2E9NjAxMDMsdGE9NjAxMDYsdWE9NjAxMDcsd2E9NjAxMDgseGE9NjAxMTQseWE9NjAxMDksemE9NjAxMTAsQWE9NjAxMTIsQmE9NjAxMTMsQ2E9NjAxMjAsRGE9NjAxMTUsRWE9NjAxMTYsRmE9NjAxMjEsR2E9NjAxMjgsSGE9NjAxMjksSWE9NjAxMzAsSmE9NjAxMzE7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgRT1TeW1ib2wuZm9yO3NhPUUoXCJyZWFjdC5lbGVtZW50XCIpO3RhPUUoXCJyZWFjdC5wb3J0YWxcIik7dWE9RShcInJlYWN0LmZyYWdtZW50XCIpO3dhPUUoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTt4YT1FKFwicmVhY3QucHJvZmlsZXJcIik7eWE9RShcInJlYWN0LnByb3ZpZGVyXCIpO3phPUUoXCJyZWFjdC5jb250ZXh0XCIpO0FhPUUoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtCYT1FKFwicmVhY3Quc3VzcGVuc2VcIik7Q2E9RShcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7RGE9RShcInJlYWN0Lm1lbW9cIik7RWE9RShcInJlYWN0LmxhenlcIik7RmE9RShcInJlYWN0LmJsb2NrXCIpO0UoXCJyZWFjdC5zY29wZVwiKTtHYT1FKFwicmVhY3Qub3BhcXVlLmlkXCIpO0hhPUUoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO0lhPUUoXCJyZWFjdC5vZmZzY3JlZW5cIik7SmE9RShcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG52YXIgS2E9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIExhKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1LYSYmYVtLYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgTWE7ZnVuY3Rpb24gTmEoYSl7aWYodm9pZCAwPT09TWEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TWE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK01hK2F9dmFyIE9hPSExO1xuZnVuY3Rpb24gUGEoYSxiKXtpZighYXx8T2EpcmV0dXJuXCJcIjtPYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2goayl7dmFyIGQ9a31SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGspe2Q9a31hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGspe2Q9a31hKCl9fWNhdGNoKGspe2lmKGsmJmQmJlwic3RyaW5nXCI9PT10eXBlb2Ygay5zdGFjayl7Zm9yKHZhciBlPWsuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSlyZXR1cm5cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO3doaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtPYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP05hKGEpOlwiXCJ9XG5mdW5jdGlvbiBRYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTmEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBOYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTmEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBOYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9UGEoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9UGEoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDIyOnJldHVybiBhPVBhKGEudHlwZS5fcmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1QYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFJhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgdGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIHhhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHdhOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgQmE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgQ2E6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgemE6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgeWE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgQWE6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7XG5yZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIERhOnJldHVybiBSYShhLnR5cGUpO2Nhc2UgRmE6cmV0dXJuIFJhKGEuX3JlbmRlcik7Y2FzZSBFYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUmEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBtKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uICRhKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmcWEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGFiKGEsYil7JGEoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9iYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZiYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBiYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBkYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBlYihhLGIpe2E9bSh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWRiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHkoOTEpKTtyZXR1cm4gbSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih5KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IoeSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIGtiPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIGxiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gbWIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2xiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG5iLG9iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PWtiLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle25iPW5ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO25iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW5iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIHBiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcWI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scmI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHFiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cWJbYl09cWJbYV19KX0pO2Z1bmN0aW9uIHNiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxxYi5oYXNPd25Qcm9wZXJ0eShhKSYmcWJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gdGIoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9c2IoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdWI9bSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHZiKGEsYil7aWYoYil7aWYodWJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih5KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih5KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih5KDYyKSk7fX1cbmZ1bmN0aW9uIHdiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX1mdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHkoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSWIoKXt9dmFyIEpiPUdiLEtiPSExLExiPSExO2Z1bmN0aW9uIE1iKCl7aWYobnVsbCE9PXpifHxudWxsIT09QWIpSWIoKSxGYigpfVxuZnVuY3Rpb24gTmIoYSxiLGMpe2lmKExiKXJldHVybiBhKGIsYyk7TGI9ITA7dHJ5e3JldHVybiBKYihhLGIsYyl9ZmluYWxseXtMYj0hMSxNYigpfX1cbmZ1bmN0aW9uIE9iKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IoeSgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBQYj0hMTtpZihmYSl0cnl7dmFyIFFiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShRYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7UGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKX1jYXRjaChhKXtQYj0hMX1mdW5jdGlvbiBSYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobil7dGhpcy5vbkVycm9yKG4pfX12YXIgU2I9ITEsVGI9bnVsbCxVYj0hMSxWYj1udWxsLFdiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe1NiPSEwO1RiPWF9fTtmdW5jdGlvbiBYYihhLGIsYyxkLGUsZixnLGgsayl7U2I9ITE7VGI9bnVsbDtSYi5hcHBseShXYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gWWIoYSxiLGMsZCxlLGYsZyxoLGspe1hiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihTYil7aWYoU2Ipe3ZhciBsPVRiO1NiPSExO1RiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih5KDE5OCkpO1VifHwoVWI9ITAsVmI9bCl9fWZ1bmN0aW9uIFpiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBhYyhhKXtpZihaYihhKSE9PWEpdGhyb3cgRXJyb3IoeSgxODgpKTt9XG5mdW5jdGlvbiBiYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1aYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBhYyhlKSxhO2lmKGY9PT1kKXJldHVybiBhYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHkoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IoeSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih5KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGNjKGEpe2E9YmMoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkYyhhLGIpe2Zvcih2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09Yjspe2lmKGI9PT1hfHxiPT09YylyZXR1cm4hMDtiPWIucmV0dXJufXJldHVybiExfXZhciBlYyxmYyxnYyxoYyxpYz0hMSxqYz1bXSxrYz1udWxsLGxjPW51bGwsbWM9bnVsbCxuYz1uZXcgTWFwLG9jPW5ldyBNYXAscGM9W10scWM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gcmMoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsZG9tRXZlbnROYW1lOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDE2LG5hdGl2ZUV2ZW50OmUsdGFyZ2V0Q29udGFpbmVyczpbZF19fWZ1bmN0aW9uIHNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6a2M9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmxjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOm1jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpuYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpvYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIHRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9cmMoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJmZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIGtjPXRjKGtjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBsYz10YyhsYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gbWM9dGMobWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtuYy5zZXQoZix0YyhuYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsb2Muc2V0KGYsdGMob2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gdmMoYSl7dmFyIGI9d2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1aYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj0kYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtoYyhhLmxhbmVQcmlvcml0eSxmdW5jdGlvbigpe3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXtnYyhjKX0pfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIHhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09YylyZXR1cm4gYj1DYihjKSxudWxsIT09YiYmZmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gemMoYSxiLGMpe3hjKGEpJiZjLmRlbGV0ZShiKX1cbmZ1bmN0aW9uIEFjKCl7Zm9yKGljPSExOzA8amMubGVuZ3RoOyl7dmFyIGE9amNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPUNiKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmZWMoYSk7YnJlYWt9Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpe2EuYmxvY2tlZE9uPWM7YnJlYWt9Yi5zaGlmdCgpfW51bGw9PT1hLmJsb2NrZWRPbiYmamMuc2hpZnQoKX1udWxsIT09a2MmJnhjKGtjKSYmKGtjPW51bGwpO251bGwhPT1sYyYmeGMobGMpJiYobGM9bnVsbCk7bnVsbCE9PW1jJiZ4YyhtYykmJihtYz1udWxsKTtuYy5mb3JFYWNoKHpjKTtvYy5mb3JFYWNoKHpjKX1cbmZ1bmN0aW9uIEJjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxpY3x8KGljPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LEFjKSkpfVxuZnVuY3Rpb24gQ2MoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gQmMoYixhKX1pZigwPGpjLmxlbmd0aCl7QmMoamNbMF0sYSk7Zm9yKHZhciBjPTE7YzxqYy5sZW5ndGg7YysrKXt2YXIgZD1qY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PWtjJiZCYyhrYyxhKTtudWxsIT09bGMmJkJjKGxjLGEpO251bGwhPT1tYyYmQmMobWMsYSk7bmMuZm9yRWFjaChiKTtvYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxwYy5sZW5ndGg7YysrKWQ9cGNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPHBjLmxlbmd0aCYmKGM9cGNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspdmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZwYy5zaGlmdCgpfVxuZnVuY3Rpb24gRGMoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgRWM9e2FuaW1hdGlvbmVuZDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOkRjKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sRmM9e30sR2M9e307XG5mYSYmKEdjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIEVjLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIEVjLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIEVjLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gSGMoYSl7aWYoRmNbYV0pcmV0dXJuIEZjW2FdO2lmKCFFY1thXSlyZXR1cm4gYTt2YXIgYj1FY1thXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBHYylyZXR1cm4gRmNbYV09YltjXTtyZXR1cm4gYX1cbnZhciBJYz1IYyhcImFuaW1hdGlvbmVuZFwiKSxKYz1IYyhcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxLYz1IYyhcImFuaW1hdGlvbnN0YXJ0XCIpLExjPUhjKFwidHJhbnNpdGlvbmVuZFwiKSxNYz1uZXcgTWFwLE5jPW5ldyBNYXAsT2M9W1wiYWJvcnRcIixcImFib3J0XCIsSWMsXCJhbmltYXRpb25FbmRcIixKYyxcImFuaW1hdGlvbkl0ZXJhdGlvblwiLEtjLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFxuXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsTGMsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIFBjKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdO2U9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7TmMuc2V0KGQsYik7TWMuc2V0KGQsZSk7ZGEoZSxbZF0pfX12YXIgUWM9ci51bnN0YWJsZV9ub3c7UWMoKTt2YXIgRj04O1xuZnVuY3Rpb24gUmMoYSl7aWYoMCE9PSgxJmEpKXJldHVybiBGPTE1LDE7aWYoMCE9PSgyJmEpKXJldHVybiBGPTE0LDI7aWYoMCE9PSg0JmEpKXJldHVybiBGPTEzLDQ7dmFyIGI9MjQmYTtpZigwIT09YilyZXR1cm4gRj0xMixiO2lmKDAhPT0oYSYzMikpcmV0dXJuIEY9MTEsMzI7Yj0xOTImYTtpZigwIT09YilyZXR1cm4gRj0xMCxiO2lmKDAhPT0oYSYyNTYpKXJldHVybiBGPTksMjU2O2I9MzU4NCZhO2lmKDAhPT1iKXJldHVybiBGPTgsYjtpZigwIT09KGEmNDA5NikpcmV0dXJuIEY9Nyw0MDk2O2I9NDE4NjExMiZhO2lmKDAhPT1iKXJldHVybiBGPTYsYjtiPTYyOTE0NTYwJmE7aWYoMCE9PWIpcmV0dXJuIEY9NSxiO2lmKGEmNjcxMDg4NjQpcmV0dXJuIEY9NCw2NzEwODg2NDtpZigwIT09KGEmMTM0MjE3NzI4KSlyZXR1cm4gRj0zLDEzNDIxNzcyODtiPTgwNTMwNjM2OCZhO2lmKDAhPT1iKXJldHVybiBGPTIsYjtpZigwIT09KDEwNzM3NDE4MjQmYSkpcmV0dXJuIEY9MSwxMDczNzQxODI0O1xuRj04O3JldHVybiBhfWZ1bmN0aW9uIFNjKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiAxNTtjYXNlIDk4OnJldHVybiAxMDtjYXNlIDk3OmNhc2UgOTY6cmV0dXJuIDg7Y2FzZSA5NTpyZXR1cm4gMjtkZWZhdWx0OnJldHVybiAwfX1mdW5jdGlvbiBUYyhhKXtzd2l0Y2goYSl7Y2FzZSAxNTpjYXNlIDE0OnJldHVybiA5OTtjYXNlIDEzOmNhc2UgMTI6Y2FzZSAxMTpjYXNlIDEwOnJldHVybiA5ODtjYXNlIDk6Y2FzZSA4OmNhc2UgNzpjYXNlIDY6Y2FzZSA0OmNhc2UgNTpyZXR1cm4gOTc7Y2FzZSAzOmNhc2UgMjpjYXNlIDE6cmV0dXJuIDk1O2Nhc2UgMDpyZXR1cm4gOTA7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDM1OCxhKSk7fX1cbmZ1bmN0aW9uIFVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIEY9MDt2YXIgZD0wLGU9MCxmPWEuZXhwaXJlZExhbmVzLGc9YS5zdXNwZW5kZWRMYW5lcyxoPWEucGluZ2VkTGFuZXM7aWYoMCE9PWYpZD1mLGU9Rj0xNTtlbHNlIGlmKGY9YyYxMzQyMTc3MjcsMCE9PWYpe3ZhciBrPWYmfmc7MCE9PWs/KGQ9UmMoayksZT1GKTooaCY9ZiwwIT09aCYmKGQ9UmMoaCksZT1GKSl9ZWxzZSBmPWMmfmcsMCE9PWY/KGQ9UmMoZiksZT1GKTowIT09aCYmKGQ9UmMoaCksZT1GKTtpZigwPT09ZClyZXR1cm4gMDtkPTMxLVZjKGQpO2Q9YyYoKDA+ZD8wOjE8PGQpPDwxKS0xO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmcpKXtSYyhiKTtpZihlPD1GKXJldHVybiBiO0Y9ZX1iPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLVZjKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gV2MoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIFhjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTU6cmV0dXJuIDE7Y2FzZSAxNDpyZXR1cm4gMjtjYXNlIDEyOnJldHVybiBhPVljKDI0Jn5iKSwwPT09YT9YYygxMCxiKTphO2Nhc2UgMTA6cmV0dXJuIGE9WWMoMTkyJn5iKSwwPT09YT9YYyg4LGIpOmE7Y2FzZSA4OnJldHVybiBhPVljKDM1ODQmfmIpLDA9PT1hJiYoYT1ZYyg0MTg2MTEyJn5iKSwwPT09YSYmKGE9NTEyKSksYTtjYXNlIDI6cmV0dXJuIGI9WWMoODA1MzA2MzY4Jn5iKSwwPT09YiYmKGI9MjY4NDM1NDU2KSxifXRocm93IEVycm9yKHkoMzU4LGEpKTt9ZnVuY3Rpb24gWWMoYSl7cmV0dXJuIGEmLWF9ZnVuY3Rpb24gWmMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiAkYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7dmFyIGQ9Yi0xO2Euc3VzcGVuZGVkTGFuZXMmPWQ7YS5waW5nZWRMYW5lcyY9ZDthPWEuZXZlbnRUaW1lcztiPTMxLVZjKGIpO2FbYl09Y312YXIgVmM9TWF0aC5jbHozMj9NYXRoLmNsejMyOmFkLGJkPU1hdGgubG9nLGNkPU1hdGguTE4yO2Z1bmN0aW9uIGFkKGEpe3JldHVybiAwPT09YT8zMjozMS0oYmQoYSkvY2R8MCl8MH12YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBnZChhLGIsYyxkKXtLYnx8SWIoKTt2YXIgZT1oZCxmPUtiO0tiPSEwO3RyeXtIYihlLGEsYixjLGQpfWZpbmFsbHl7KEtiPWYpfHxNYigpfX1mdW5jdGlvbiBpZChhLGIsYyxkKXtlZChkZCxoZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCl7aWYoZmQpe3ZhciBlO2lmKChlPTA9PT0oYiY0KSkmJjA8amMubGVuZ3RoJiYtMTxxYy5pbmRleE9mKGEpKWE9cmMobnVsbCxhLGIsYyxkKSxqYy5wdXNoKGEpO2Vsc2V7dmFyIGY9eWMoYSxiLGMsZCk7aWYobnVsbD09PWYpZSYmc2MoYSxkKTtlbHNle2lmKGUpe2lmKC0xPHFjLmluZGV4T2YoYSkpe2E9cmMoZixhLGIsYyxkKTtqYy5wdXNoKGEpO3JldHVybn1pZih1YyhmLGEsYixjLGQpKXJldHVybjtzYyhhLGQpfWpkKGEsYixkLG51bGwsYyl9fX19XG5mdW5jdGlvbiB5YyhhLGIsYyxkKXt2YXIgZT14YihkKTtlPXdjKGUpO2lmKG51bGwhPT1lKXt2YXIgZj1aYihlKTtpZihudWxsPT09ZillPW51bGw7ZWxzZXt2YXIgZz1mLnRhZztpZigxMz09PWcpe2U9JGIoZik7aWYobnVsbCE9PWUpcmV0dXJuIGU7ZT1udWxsfWVsc2UgaWYoMz09PWcpe2lmKGYuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1mLnRhZz9mLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7ZT1udWxsfWVsc2UgZiE9PWUmJihlPW51bGwpfX1qZChhLGIsZCxlLGMpO3JldHVybiBudWxsfXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtcbmZ1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfW0oYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPW0oe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1tKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1tKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1tKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9bSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPW0oe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9bSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPW0oe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9bSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9bSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPW0oe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPW0oe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWZhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2ZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1mYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWZhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGZhKXt2YXIgeGU7aWYoZmEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTthPXJlO2lmKEtiKWEoYik7ZWxzZXtLYj0hMDt0cnl7R2IoYSxiKX1maW5hbGx5e0tiPSExLE1iKCl9fX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZSxJZT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gSmUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIUllLmNhbGwoYixjW2RdKXx8IUhlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gS2UoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gTGUoYSxiKXt2YXIgYz1LZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1LZShjKX19ZnVuY3Rpb24gTWUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9NZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBOZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBPZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxudmFyIFBlPWZhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZPZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZKZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5QYyhcImNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzaW4gZm9jdXMgZm9jdXNvdXQgYmx1ciBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLFxuMCk7UGMoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7UGMoT2MsMik7Zm9yKHZhciBWZT1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksV2U9MDtXZTxWZS5sZW5ndGg7V2UrKylOYy5zZXQoVmVbV2VdLDApO2VhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7XG5lYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2VhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtkYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2RhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZGEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2RhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBYZT1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksWWU9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQoWGUpKTtcbmZ1bmN0aW9uIFplKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1liKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a319fWlmKFViKXRocm93IGE9VmIsVWI9ITEsVmI9bnVsbCxhO31cbmZ1bmN0aW9uIEcoYSxiKXt2YXIgYz0kZShiKSxkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwoYWYoYixhLDIsITEpLGMuYWRkKGQpKX12YXIgYmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBjZihhKXthW2JmXXx8KGFbYmZdPSEwLGJhLmZvckVhY2goZnVuY3Rpb24oYil7WWUuaGFzKGIpfHxkZihiLCExLGEsbnVsbCk7ZGYoYiwhMCxhLG51bGwpfSkpfVxuZnVuY3Rpb24gZGYoYSxiLGMsZCl7dmFyIGU9NDxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNF0/YXJndW1lbnRzWzRdOjAsZj1jO1wic2VsZWN0aW9uY2hhbmdlXCI9PT1hJiY5IT09Yy5ub2RlVHlwZSYmKGY9Yy5vd25lckRvY3VtZW50KTtpZihudWxsIT09ZCYmIWImJlllLmhhcyhhKSl7aWYoXCJzY3JvbGxcIiE9PWEpcmV0dXJuO2V8PTI7Zj1kfXZhciBnPSRlKGYpLGg9YStcIl9fXCIrKGI/XCJjYXB0dXJlXCI6XCJidWJibGVcIik7Zy5oYXMoaCl8fChiJiYoZXw9NCksYWYoZixhLGUsYiksZy5hZGQoaCkpfVxuZnVuY3Rpb24gYWYoYSxiLGMsZCl7dmFyIGU9TmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1lPzI6ZSl7Y2FzZSAwOmU9Z2Q7YnJlYWs7Y2FzZSAxOmU9aWQ7YnJlYWs7ZGVmYXVsdDplPWhkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFQYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBqZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPXdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1OYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9TWMuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLHg9YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6eD1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjp4PVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSBJYzpjYXNlIEpjOmNhc2UgS2M6az1IZDticmVhaztjYXNlIExjOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHc9MCE9PShiJjQpLHo9IXcmJlwic2Nyb2xsXCI9PT1hLHU9dz9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt3PVtdO2Zvcih2YXIgdD1kLHE7bnVsbCE9PVxudDspe3E9dDt2YXIgdj1xLnN0YXRlTm9kZTs1PT09cS50YWcmJm51bGwhPT12JiYocT12LG51bGwhPT11JiYodj1PYih0LHUpLG51bGwhPXYmJncucHVzaChlZih0LHYscSkpKSk7aWYoeilicmVhazt0PXQucmV0dXJufTA8dy5sZW5ndGgmJihoPW5ldyBrKGgseCxudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp3fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmMD09PShiJjE2KSYmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKHdjKHgpfHx4W2ZmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKHg9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQseD14P3djKHgpOm51bGwsbnVsbCE9PVxueCYmKHo9WmIoeCkseCE9PXp8fDUhPT14LnRhZyYmNiE9PXgudGFnKSl4PW51bGx9ZWxzZSBrPW51bGwseD1kO2lmKGshPT14KXt3PUJkO3Y9XCJvbk1vdXNlTGVhdmVcIjt1PVwib25Nb3VzZUVudGVyXCI7dD1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXc9VGQsdj1cIm9uUG9pbnRlckxlYXZlXCIsdT1cIm9uUG9pbnRlckVudGVyXCIsdD1cInBvaW50ZXJcIjt6PW51bGw9PWs/aDp1ZShrKTtxPW51bGw9PXg/aDp1ZSh4KTtoPW5ldyB3KHYsdCtcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PXo7aC5yZWxhdGVkVGFyZ2V0PXE7dj1udWxsO3djKGUpPT09ZCYmKHc9bmV3IHcodSx0K1wiZW50ZXJcIix4LGMsZSksdy50YXJnZXQ9cSx3LnJlbGF0ZWRUYXJnZXQ9eix2PXcpO3o9djtpZihrJiZ4KWI6e3c9azt1PXg7dD0wO2ZvcihxPXc7cTtxPWdmKHEpKXQrKztxPTA7Zm9yKHY9dTt2O3Y9Z2YodikpcSsrO2Zvcig7MDx0LXE7KXc9Z2YodyksdC0tO2Zvcig7MDxxLXQ7KXU9XG5nZih1KSxxLS07Zm9yKDt0LS07KXtpZih3PT09dXx8bnVsbCE9PXUmJnc9PT11LmFsdGVybmF0ZSlicmVhayBiO3c9Z2Yodyk7dT1nZih1KX13PW51bGx9ZWxzZSB3PW51bGw7bnVsbCE9PWsmJmhmKGcsaCxrLHcsITEpO251bGwhPT14JiZudWxsIT09eiYmaGYoZyx6LHgsdywhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgSj12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKUo9RmU7ZWxzZXtKPURlO3ZhciBLPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYoSj1FZSk7aWYoSiYmKEo9SihhLGQpKSl7bmUoZyxKLGMsZSk7YnJlYWsgYX1LJiZLKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoSz1oLl93cmFwcGVyU3RhdGUpJiZcbksuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmYmIoaCxcIm51bWJlclwiLGgudmFsdWUpfUs9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoSyl8fFwidHJ1ZVwiPT09Sy5jb250ZW50RWRpdGFibGUpUWU9SyxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyIFE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOkw9XCJvbkNvbXBvc2l0aW9uRW5kXCI7YnJlYWsgYjtcbmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOkw9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1MPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihMPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7TCYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09TD9cIm9uQ29tcG9zaXRpb25FbmRcIj09PUwmJmllJiYoUT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLEs9b2UoZCxMKSwwPEsubGVuZ3RoJiYoTD1uZXcgTGQoTCxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OkwsbGlzdGVuZXJzOkt9KSxRP0wuZGF0YT1ROihRPWhlKGMpLG51bGwhPT1RJiYoTC5kYXRhPVEpKSkpO2lmKFE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFxuXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9USl9c2UoZyxiKX0pfWZ1bmN0aW9uIGVmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1PYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdChlZihhLGYsZSkpLGY9T2IoYSxiKSxudWxsIT1mJiZkLnB1c2goZWYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiBnZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gaGYoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1PYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdChlZihjLGssaCkpKTplfHwoaz1PYihjLGYpLG51bGwhPWsmJmcucHVzaChlZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfWZ1bmN0aW9uIGpmKCl7fXZhciBrZj1udWxsLGxmPW51bGw7ZnVuY3Rpb24gbWYoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gbmYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBvZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxwZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gcWYoYSl7MT09PWEubm9kZVR5cGU/YS50ZXh0Q29udGVudD1cIlwiOjk9PT1hLm5vZGVUeXBlJiYoYT1hLmJvZHksbnVsbCE9YSYmKGEudGV4dENvbnRlbnQ9XCJcIikpfVxuZnVuY3Rpb24gcmYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9ZnVuY3Rpb24gc2YoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIHRmPTA7ZnVuY3Rpb24gdWYoYSl7cmV0dXJueyQkdHlwZW9mOkdhLHRvU3RyaW5nOmEsdmFsdWVPZjphfX12YXIgdmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksd2Y9XCJfX3JlYWN0RmliZXIkXCIrdmYseGY9XCJfX3JlYWN0UHJvcHMkXCIrdmYsZmY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK3ZmLHlmPVwiX19yZWFjdEV2ZW50cyRcIit2ZjtcbmZ1bmN0aW9uIHdjKGEpe3ZhciBiPWFbd2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW2ZmXXx8Y1t3Zl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1zZihhKTtudWxsIT09YTspe2lmKGM9YVt3Zl0pcmV0dXJuIGM7YT1zZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW3dmXXx8YVtmZl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih5KDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW3hmXXx8bnVsbH1cbmZ1bmN0aW9uICRlKGEpe3ZhciBiPWFbeWZdO3ZvaWQgMD09PWImJihiPWFbeWZdPW5ldyBTZXQpO3JldHVybiBifXZhciB6Zj1bXSxBZj0tMTtmdW5jdGlvbiBCZihhKXtyZXR1cm57Y3VycmVudDphfX1mdW5jdGlvbiBIKGEpezA+QWZ8fChhLmN1cnJlbnQ9emZbQWZdLHpmW0FmXT1udWxsLEFmLS0pfWZ1bmN0aW9uIEkoYSxiKXtBZisrO3pmW0FmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIENmPXt9LE09QmYoQ2YpLE49QmYoITEpLERmPUNmO1xuZnVuY3Rpb24gRWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBDZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBGZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uIEdmKCl7SChOKTtIKE0pfWZ1bmN0aW9uIEhmKGEsYixjKXtpZihNLmN1cnJlbnQhPT1DZil0aHJvdyBFcnJvcih5KDE2OCkpO0koTSxiKTtJKE4sYyl9XG5mdW5jdGlvbiBJZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHkoMTA4LFJhKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG0oe30sYyxkKX1mdW5jdGlvbiBKZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8Q2Y7RGY9TS5jdXJyZW50O0koTSxhKTtJKE4sTi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBLZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IoeSgxNjkpKTtjPyhhPUlmKGEsYixEZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoTiksSChNKSxJKE0sYSkpOkgoTik7SShOLGMpfVxudmFyIExmPW51bGwsTWY9bnVsbCxOZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxPZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssUGY9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxRZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFJmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LFNmPXIudW5zdGFibGVfbm93LFRmPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsVWY9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxWZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFdmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksWGY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxZZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxaZj17fSwkZj12b2lkIDAhPT1SZj9SZjpmdW5jdGlvbigpe30sYWc9bnVsbCxiZz1udWxsLGNnPSExLGRnPVNmKCksTz0xRTQ+ZGc/U2Y6ZnVuY3Rpb24oKXtyZXR1cm4gU2YoKS1kZ307XG5mdW5jdGlvbiBlZygpe3N3aXRjaChUZigpKXtjYXNlIFVmOnJldHVybiA5OTtjYXNlIFZmOnJldHVybiA5ODtjYXNlIFdmOnJldHVybiA5NztjYXNlIFhmOnJldHVybiA5NjtjYXNlIFlmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBmZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gVWY7Y2FzZSA5ODpyZXR1cm4gVmY7Y2FzZSA5NzpyZXR1cm4gV2Y7Y2FzZSA5NjpyZXR1cm4gWGY7Y2FzZSA5NTpyZXR1cm4gWWY7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZ2coYSxiKXthPWZnKGEpO3JldHVybiBOZihhLGIpfWZ1bmN0aW9uIGhnKGEsYixjKXthPWZnKGEpO3JldHVybiBPZihhLGIsYyl9ZnVuY3Rpb24gaWcoKXtpZihudWxsIT09Ymcpe3ZhciBhPWJnO2JnPW51bGw7UGYoYSl9amcoKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWNnJiZudWxsIT09YWcpe2NnPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPWFnO2dnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTthZz1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1hZyYmKGFnPWFnLnNsaWNlKGErMSkpLE9mKFVmLGlnKSxjO31maW5hbGx5e2NnPSExfX19dmFyIGtnPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIGxnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBtZz1CZihudWxsKSxuZz1udWxsLG9nPW51bGwscGc9bnVsbDtmdW5jdGlvbiBxZygpe3BnPW9nPW5nPW51bGx9XG5mdW5jdGlvbiByZyhhKXt2YXIgYj1tZy5jdXJyZW50O0gobWcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gc2coYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoKGEuY2hpbGRMYW5lcyZiKT09PWIpaWYobnVsbD09PWN8fChjLmNoaWxkTGFuZXMmYik9PT1iKWJyZWFrO2Vsc2UgYy5jaGlsZExhbmVzfD1iO2Vsc2UgYS5jaGlsZExhbmVzfD1iLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKTthPWEucmV0dXJufX1mdW5jdGlvbiB0ZyhhLGIpe25nPWE7cGc9b2c9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJih1Zz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiB2ZyhhLGIpe2lmKHBnIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YilwZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09b2cpe2lmKG51bGw9PT1uZyl0aHJvdyBFcnJvcih5KDMwOCkpO29nPWI7bmcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBvZz1vZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgd2c9ITE7ZnVuY3Rpb24geGcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24geWcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gemcoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19ZnVuY3Rpb24gQWcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiBCZyhhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gQ2coYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt3Zz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBuPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXtuPW4udXBkYXRlUXVldWU7dmFyIEE9bi5sYXN0QmFzZVVwZGF0ZTtBIT09ZyYmKG51bGw9PT1BP24uZmlyc3RCYXNlVXBkYXRlPWw6QS5uZXh0PWwsbi5sYXN0QmFzZVVwZGF0ZT1rKX19aWYobnVsbCE9PWYpe0E9ZS5iYXNlU3RhdGU7Zz0wO249bD1rPW51bGw7ZG97aD1mLmxhbmU7dmFyIHA9Zi5ldmVudFRpbWU7aWYoKGQmaCk9PT1oKXtudWxsIT09biYmKG49bi5uZXh0PXtldmVudFRpbWU6cCxsYW5lOjAsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgQz1hLHg9ZjtoPWI7cD1jO3N3aXRjaCh4LnRhZyl7Y2FzZSAxOkM9eC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDKXtBPUMuY2FsbChwLEEsaCk7YnJlYWsgYX1BPUM7YnJlYWsgYTtjYXNlIDM6Qy5mbGFncz1DLmZsYWdzJi00MDk3fDY0O2Nhc2UgMDpDPXgucGF5bG9hZDtoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDP0MuY2FsbChwLEEsaCk6QztpZihudWxsPT09aHx8dm9pZCAwPT09aClicmVhayBhO0E9bSh7fSxBLGgpO2JyZWFrIGE7Y2FzZSAyOndnPSEwfX1udWxsIT09Zi5jYWxsYmFjayYmKGEuZmxhZ3N8PTMyLGg9ZS5lZmZlY3RzLG51bGw9PT1oP2UuZWZmZWN0cz1bZl06aC5wdXNoKGYpKX1lbHNlIHA9e2V2ZW50VGltZTpwLGxhbmU6aCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1uPyhsPW49cCxrPUEpOm49bi5uZXh0PXAsZ3w9aDtmPWYubmV4dDtpZihudWxsPT09XG5mKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIGY9aC5uZXh0LGgubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9aCxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW4mJihrPUEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW47RGd8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1BfX1mdW5jdGlvbiBFZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IoeSgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBGZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztcbmZ1bmN0aW9uIEdnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjptKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBLZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9aYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1IZygpLGU9SWcoYSksZj16ZyhkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUhnKCksZD1JZyhhKSxlPXpnKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9XG5iKTtBZyhhLGUpO0pnKGEsZCxjKX19O2Z1bmN0aW9uIExnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUplKGMsZCl8fCFKZShlLGYpOiEwfVxuZnVuY3Rpb24gTWcoYSxiLGMpe3ZhciBkPSExLGU9Q2Y7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9dmcoZik6KGU9RmYoYik/RGY6TS5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/RWYoYSxlKTpDZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUtnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gT2coYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1GZzt4ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXZnKGYpOihmPUZmKGIpP0RmOk0uY3VycmVudCxlLmNvbnRleHQ9RWYoYSxmKSk7Q2coYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEdnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJktnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLENnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQpfXZhciBQZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUWcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHkoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUZnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHkoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHkoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBSZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih5KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO31cbmZ1bmN0aW9uIFNnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZmxhZ3M9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9VGcoYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3M9MixcbmMpOmQ7Yi5mbGFncz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFncz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VWcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UWcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVZnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVFnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuV2coYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG4oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVhnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gQShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VWcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGM9VmcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UWcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHRhOnJldHVybiBiPVdnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihQZyhiKXx8TGEoYikpcmV0dXJuIGI9WGcoYixcbmEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtSZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHAoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT11YT9uKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgdGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoUGcoYyl8fExhKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm4oYSxiLGMsZCxudWxsKTtSZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEMoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09dWE/bihiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgdGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoUGcoZCl8fExhKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG4oYixhLGQsZSxudWxsKTtSZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLHU9Zyx6PWc9MCxxPW51bGw7bnVsbCE9PXUmJno8aC5sZW5ndGg7eisrKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciBuPXAoZSx1LGhbel0sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcseik7bnVsbD09PXQ/bD1uOnQuc2libGluZz1uO3Q9bjt1PXF9aWYoej09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDt6PGgubGVuZ3RoO3orKyl1PUEoZSxoW3pdLGspLG51bGwhPT11JiYoZz1mKHUsZyx6KSxudWxsPT09dD9sPXU6dC5zaWJsaW5nPXUsdD11KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7ejxoLmxlbmd0aDt6KyspcT1DKHUsZSx6LGhbel0sayksbnVsbCE9PXEmJihhJiZudWxsIT09cS5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1xLmtleT96OnEua2V5KSxnPWYocSxnLHopLG51bGw9PT10P2w9cTp0LnNpYmxpbmc9cSx0PXEpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gdyhlLGcsaCxrKXt2YXIgbD1MYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcih5KDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PVxuaCl0aHJvdyBFcnJvcih5KDE1MSkpO2Zvcih2YXIgdD1sPW51bGwsdT1nLHo9Zz0wLHE9bnVsbCxuPWgubmV4dCgpO251bGwhPT11JiYhbi5kb25lO3orKyxuPWgubmV4dCgpKXt1LmluZGV4Pno/KHE9dSx1PW51bGwpOnE9dS5zaWJsaW5nO3ZhciB3PXAoZSx1LG4udmFsdWUsayk7aWYobnVsbD09PXcpe251bGw9PT11JiYodT1xKTticmVha31hJiZ1JiZudWxsPT09dy5hbHRlcm5hdGUmJmIoZSx1KTtnPWYodyxnLHopO251bGw9PT10P2w9dzp0LnNpYmxpbmc9dzt0PXc7dT1xfWlmKG4uZG9uZSlyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7IW4uZG9uZTt6Kyssbj1oLm5leHQoKSluPUModSxlLHosbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmXG51LmRlbGV0ZShudWxsPT09bi5rZXk/ejpuLmtleSksZz1mKG4sZyx6KSxudWxsPT09dD9sPW46dC5zaWJsaW5nPW4sdD1uKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT11YSYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBzYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PXVhKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7XG5kPWUoayxmLnByb3BzKTtkLnJlZj1RZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PXVhPyhkPVhnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1WZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1RZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgdGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9XG5XZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1VZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihQZyhmKSlyZXR1cm4geChhLGQsZixoKTtpZihMYShmKSlyZXR1cm4gdyhhLGQsZixoKTtsJiZSZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAyMjpjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnRocm93IEVycm9yKHkoMTUyLFJhKGEudHlwZSl8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFlnPVNnKCEwKSxaZz1TZyghMSksJGc9e30sYWg9QmYoJGcpLGJoPUJmKCRnKSxjaD1CZigkZyk7XG5mdW5jdGlvbiBkaChhKXtpZihhPT09JGcpdGhyb3cgRXJyb3IoeSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBlaChhLGIpe0koY2gsYik7SShiaCxhKTtJKGFoLCRnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOm1iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1tYihiLGEpfUgoYWgpO0koYWgsYil9ZnVuY3Rpb24gZmgoKXtIKGFoKTtIKGJoKTtIKGNoKX1mdW5jdGlvbiBnaChhKXtkaChjaC5jdXJyZW50KTt2YXIgYj1kaChhaC5jdXJyZW50KTt2YXIgYz1tYihiLGEudHlwZSk7YiE9PWMmJihJKGJoLGEpLEkoYWgsYykpfWZ1bmN0aW9uIGhoKGEpe2JoLmN1cnJlbnQ9PT1hJiYoSChhaCksSChiaCkpfXZhciBQPUJmKDApO1xuZnVuY3Rpb24gaWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgamg9bnVsbCxraD1udWxsLGxoPSExO1xuZnVuY3Rpb24gbWgoYSxiKXt2YXIgYz1uaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5mbGFncz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gb2goYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHBoKGEpe2lmKGxoKXt2YXIgYj1raDtpZihiKXt2YXIgYz1iO2lmKCFvaChhLGIpKXtiPXJmKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhb2goYSxiKSl7YS5mbGFncz1hLmZsYWdzJi0xMDI1fDI7bGg9ITE7amg9YTtyZXR1cm59bWgoamgsYyl9amg9YTtraD1yZihiLmZpcnN0Q2hpbGQpfWVsc2UgYS5mbGFncz1hLmZsYWdzJi0xMDI1fDIsbGg9ITEsamg9YX19ZnVuY3Rpb24gcWgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO2poPWF9XG5mdW5jdGlvbiByaChhKXtpZihhIT09amgpcmV0dXJuITE7aWYoIWxoKXJldHVybiBxaChhKSxsaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIW5mKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1raDtiOyltaChhLGIpLGI9cmYoYi5uZXh0U2libGluZyk7cWgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih5KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXtraD1yZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfWtoPW51bGx9fWVsc2Uga2g9amg/cmYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBzaCgpe2toPWpoPW51bGw7bGg9ITF9dmFyIHRoPVtdO2Z1bmN0aW9uIHVoKCl7Zm9yKHZhciBhPTA7YTx0aC5sZW5ndGg7YSsrKXRoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7dGgubGVuZ3RoPTB9dmFyIHZoPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsd2g9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcseGg9MCxSPW51bGwsUz1udWxsLFQ9bnVsbCx5aD0hMSx6aD0hMTtmdW5jdGlvbiBBaCgpe3Rocm93IEVycm9yKHkoMzIxKSk7fWZ1bmN0aW9uIEJoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBDaChhLGIsYyxkLGUsZil7eGg9ZjtSPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDt2aC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP0RoOkVoO2E9YyhkLGUpO2lmKHpoKXtmPTA7ZG97emg9ITE7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih5KDMwMSkpO2YrPTE7VD1TPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO3ZoLmN1cnJlbnQ9Rmg7YT1jKGQsZSl9d2hpbGUoemgpfXZoLmN1cnJlbnQ9R2g7Yj1udWxsIT09UyYmbnVsbCE9PVMubmV4dDt4aD0wO1Q9Uz1SPW51bGw7eWg9ITE7aWYoYil0aHJvdyBFcnJvcih5KDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIEhoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hO3JldHVybiBUfVxuZnVuY3Rpb24gSWgoKXtpZihudWxsPT09Uyl7dmFyIGE9Ui5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Uy5uZXh0O3ZhciBiPW51bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZTpULm5leHQ7aWYobnVsbCE9PWIpVD1iLFM9YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHkoMzEwKSk7Uz1hO2E9e21lbW9pemVkU3RhdGU6Uy5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpTLmJhc2VTdGF0ZSxiYXNlUXVldWU6Uy5iYXNlUXVldWUscXVldWU6Uy5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YX1yZXR1cm4gVH1mdW5jdGlvbiBKaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIEtoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9UyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmxhbmU7aWYoKHhoJmwpPT09bCludWxsIT09aCYmKGg9aC5uZXh0PXtsYW5lOjAsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtlbHNle3ZhciBuPXtsYW5lOmwsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixcbmVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1uLGY9ZCk6aD1oLm5leHQ9bjtSLmxhbmVzfD1sO0RnfD1sfWs9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBMaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIE1oKGEsYixjKXt2YXIgZD1iLl9nZXRWZXJzaW9uO2Q9ZChiLl9zb3VyY2UpO3ZhciBlPWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk7aWYobnVsbCE9PWUpYT1lPT09ZDtlbHNlIGlmKGE9YS5tdXRhYmxlUmVhZExhbmVzLGE9KHhoJmEpPT09YSliLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWQsdGgucHVzaChiKTtpZihhKXJldHVybiBjKGIuX3NvdXJjZSk7dGgucHVzaChiKTt0aHJvdyBFcnJvcih5KDM1MCkpO31cbmZ1bmN0aW9uIE5oKGEsYixjLGQpe3ZhciBlPVU7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IoeSgzNDkpKTt2YXIgZj1iLl9nZXRWZXJzaW9uLGc9ZihiLl9zb3VyY2UpLGg9dmguY3VycmVudCxrPWgudXNlU3RhdGUoZnVuY3Rpb24oKXtyZXR1cm4gTWgoZSxiLGMpfSksbD1rWzFdLG49a1swXTtrPVQ7dmFyIEE9YS5tZW1vaXplZFN0YXRlLHA9QS5yZWZzLEM9cC5nZXRTbmFwc2hvdCx4PUEuc291cmNlO0E9QS5zdWJzY3JpYmU7dmFyIHc9UjthLm1lbW9pemVkU3RhdGU9e3JlZnM6cCxzb3VyY2U6YixzdWJzY3JpYmU6ZH07aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtwLmdldFNuYXBzaG90PWM7cC5zZXRTbmFwc2hvdD1sO3ZhciBhPWYoYi5fc291cmNlKTtpZighSGUoZyxhKSl7YT1jKGIuX3NvdXJjZSk7SGUobixhKXx8KGwoYSksYT1JZyh3KSxlLm11dGFibGVSZWFkTGFuZXN8PWEmZS5wZW5kaW5nTGFuZXMpO2E9ZS5tdXRhYmxlUmVhZExhbmVzO2UuZW50YW5nbGVkTGFuZXN8PWE7Zm9yKHZhciBkPVxuZS5lbnRhbmdsZW1lbnRzLGg9YTswPGg7KXt2YXIgaz0zMS1WYyhoKSx2PTE8PGs7ZFtrXXw9YTtoJj1+dn19fSxbYyxiLGRdKTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3JldHVybiBkKGIuX3NvdXJjZSxmdW5jdGlvbigpe3ZhciBhPXAuZ2V0U25hcHNob3QsYz1wLnNldFNuYXBzaG90O3RyeXtjKGEoYi5fc291cmNlKSk7dmFyIGQ9SWcodyk7ZS5tdXRhYmxlUmVhZExhbmVzfD1kJmUucGVuZGluZ0xhbmVzfWNhdGNoKHEpe2MoZnVuY3Rpb24oKXt0aHJvdyBxO30pfX0pfSxbYixkXSk7SGUoQyxjKSYmSGUoeCxiKSYmSGUoQSxkKXx8KGE9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6bn0sYS5kaXNwYXRjaD1sPU9oLmJpbmQobnVsbCxSLGEpLGsucXVldWU9YSxrLmJhc2VRdWV1ZT1udWxsLG49TWgoZSxiLGMpLGsubWVtb2l6ZWRTdGF0ZT1rLmJhc2VTdGF0ZT1uKTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFBoKGEsYixjKXt2YXIgZD1JaCgpO3JldHVybiBOaChkLGEsYixjKX1mdW5jdGlvbiBRaChhKXt2YXIgYj1IaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIFJoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPVIudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sUi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBTaChhKXt2YXIgYj1IaCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfWZ1bmN0aW9uIFRoKCl7cmV0dXJuIEloKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBVaChhLGIsYyxkKXt2YXIgZT1IaCgpO1IuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiBWaChhLGIsYyxkKXt2YXIgZT1JaCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1TKXt2YXIgZz1TLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJkJoKGQsZy5kZXBzKSl7UmgoYixjLGYsZCk7cmV0dXJufX1SLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIFdoKGEsYil7cmV0dXJuIFVoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWGgoYSxiKXtyZXR1cm4gVmgoNTE2LDQsYSxiKX1mdW5jdGlvbiBZaChhLGIpe3JldHVybiBWaCg0LDIsYSxiKX1mdW5jdGlvbiBaaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fVxuZnVuY3Rpb24gJGgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBWaCg0LDIsWmguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gYWkoKXt9ZnVuY3Rpb24gYmkoYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gY2koYSxiKXt2YXIgYz1JaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmQmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBkaShhLGIpe3ZhciBjPWVnKCk7Z2coOTg+Yz85ODpjLGZ1bmN0aW9uKCl7YSghMCl9KTtnZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYz13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7YSghMSksYigpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1jfX0pfVxuZnVuY3Rpb24gT2goYSxiLGMpe3ZhciBkPUhnKCksZT1JZyhhKSxmPXtsYW5lOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH0sZz1iLnBlbmRpbmc7bnVsbD09PWc/Zi5uZXh0PWY6KGYubmV4dD1nLm5leHQsZy5uZXh0PWYpO2IucGVuZGluZz1mO2c9YS5hbHRlcm5hdGU7aWYoYT09PVJ8fG51bGwhPT1nJiZnPT09Uil6aD15aD0hMDtlbHNle2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWd8fDA9PT1nLmxhbmVzKSYmKGc9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1nKSl0cnl7dmFyIGg9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxrPWcoaCxjKTtmLmVhZ2VyUmVkdWNlcj1nO2YuZWFnZXJTdGF0ZT1rO2lmKEhlKGssaCkpcmV0dXJufWNhdGNoKGwpe31maW5hbGx5e31KZyhhLGUsZCl9fVxudmFyIEdoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpBaCx1c2VDb250ZXh0OkFoLHVzZUVmZmVjdDpBaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkFoLHVzZUxheW91dEVmZmVjdDpBaCx1c2VNZW1vOkFoLHVzZVJlZHVjZXI6QWgsdXNlUmVmOkFoLHVzZVN0YXRlOkFoLHVzZURlYnVnVmFsdWU6QWgsdXNlRGVmZXJyZWRWYWx1ZTpBaCx1c2VUcmFuc2l0aW9uOkFoLHVzZU11dGFibGVTb3VyY2U6QWgsdXNlT3BhcXVlSWRlbnRpZmllcjpBaCx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LERoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe0hoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OldoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBVaCg0LDIsWmguYmluZChudWxsLFxuYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFVoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9SGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6U2gsdXNlU3RhdGU6UWgsdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPVFoKGEpLGM9YlswXSxkPWJbMV07V2goZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO1xud2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVFoKCExKSxiPWFbMF07YT1kaS5iaW5kKG51bGwsYVsxXSk7U2goYSk7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7ZC5tZW1vaXplZFN0YXRlPXtyZWZzOntnZXRTbmFwc2hvdDpiLHNldFNuYXBzaG90Om51bGx9LHNvdXJjZTphLHN1YnNjcmliZTpjfTtyZXR1cm4gTmgoZCxhLGIsYyl9LHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtpZihsaCl7dmFyIGE9ITEsYj11ZihmdW5jdGlvbigpe2F8fChhPSEwLGMoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpKTt0aHJvdyBFcnJvcih5KDM1NSkpO30pLGM9UWgoYilbMV07MD09PShSLm1vZGUmMikmJihSLmZsYWdzfD01MTYsUmgoNSxmdW5jdGlvbigpe2MoXCJyOlwiKyh0ZisrKS50b1N0cmluZygzNikpfSxcbnZvaWQgMCxudWxsKSk7cmV0dXJuIGJ9Yj1cInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KTtRaChiKTtyZXR1cm4gYn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxFaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOktoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBLaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1LaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUtoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBLaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRmg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpMaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9TGgoSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1MaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gTGgoSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LGVpPXJhLlJlYWN0Q3VycmVudE93bmVyLHVnPSExO2Z1bmN0aW9uIGZpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WmcoYixudWxsLGMsZCk6WWcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gZ2koYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3RnKGIsZSk7ZD1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWppKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGtpKGEsYixnLGQsZSxmKTthPVZnKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZigwPT09KGUmZikmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6SmUsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gaGkoYSxiLGYpO2IuZmxhZ3N8PTE7YT1UZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGtpKGEsYixjLGQsZSxmKXtpZihudWxsIT09YSYmSmUoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmKWlmKHVnPSExLDAhPT0oZiZlKSkwIT09KGEuZmxhZ3MmMTYzODQpJiYodWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcyxoaShhLGIsZik7cmV0dXJuIGxpKGEsYixjLGQsZil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZXx8XCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsYyk7ZWxzZSBpZigwIT09KGMmMTA3Mzc0MTgyNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixudWxsIT09Zj9mLmJhc2VMYW5lczpjKTtlbHNlIHJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmF9LG5pKGIsYSksbnVsbDtlbHNlIG51bGwhPT1mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxuaShiLGQpO2ZpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gb2koYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9MTI4fWZ1bmN0aW9uIGxpKGEsYixjLGQsZSl7dmFyIGY9RmYoYyk/RGY6TS5jdXJyZW50O2Y9RWYoYixmKTt0ZyhiLGUpO2M9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gcGkoYSxiLGMsZCxlKXtpZihGZihjKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO3RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLE1nKGIsYyxkKSxPZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD12ZyhsKToobD1GZihjKT9EZjpNLmN1cnJlbnQsbD1FZihiLGwpKTt2YXIgbj1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxBPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTmcoYixnLGQsbCk7d2c9ITE7dmFyIHA9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8cCE9PWt8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuJiYoR2coYixjLG4sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXdnfHxMZyhiLGMsaCxkLHAsayxsKSk/KEF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTt5ZyhhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmxnKGIudHlwZSxoKTtnLnByb3BzPWw7QT1iLnBlbmRpbmdQcm9wcztwPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPXZnKGspOihrPUZmKGMpP0RmOk0uY3VycmVudCxrPUVmKGIsaykpO3ZhciBDPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBDfHxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09QXx8cCE9PWspJiZOZyhiLGcsZCxrKTt3Zz0hMTtwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2ghPT1BfHxwIT09eHx8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIEMmJihHZyhiLGMsQyxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKGw9d2d8fExnKGIsYyxsLGQscCx4LGspKT8obnx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxcbmg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTI1NiksZD0hMSl9cmV0dXJuIHFpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIHFpKGEsYixjLGQsZSxmKXtvaShhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZLZihiLGMsITEpLGhpKGEsYixmKTtkPWIuc3RhdGVOb2RlO2VpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WWcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1ZZyhiLG51bGwsaCxmKSk6ZmkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmS2YoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0hmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkhmKGEsYi5jb250ZXh0LCExKTtlaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgc2k9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeUxhbmU6MH07XG5mdW5jdGlvbiB0aShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1QLmN1cnJlbnQsZj0hMSxnOyhnPTAhPT0oYi5mbGFncyY2NCkpfHwoZz1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2c/KGY9ITAsYi5mbGFncyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZC5mYWxsYmFja3x8ITA9PT1kLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZXw9MSk7SShQLGUmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWQuZmFsbGJhY2smJnBoKGIpO2E9ZC5jaGlsZHJlbjtlPWQuZmFsbGJhY2s7aWYoZilyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxiLm1lbW9pemVkU3RhdGU9c2ksYTtpZihcIm51bWJlclwiPT09dHlwZW9mIGQudW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSlyZXR1cm4gYT11aShiLGEsZSxjKSxiLmNoaWxkLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczpjfSxcbmIubWVtb2l6ZWRTdGF0ZT1zaSxiLmxhbmVzPTMzNTU0NDMyLGE7Yz12aSh7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjphfSxiLm1vZGUsYyxudWxsKTtjLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWN9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTp7YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31pZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9Olxue2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9ZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9YS5tb2RlLGY9YS5jaGlsZDtiPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Yn07MD09PShlJjIpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9Yik6Zj12aShiLGUsMCxudWxsKTtjPVhnKGMsZSxkLG51bGwpO2YucmV0dXJuPWE7Yy5yZXR1cm49YTtmLnNpYmxpbmc9YzthLmNoaWxkPWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB4aShhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2E9ZS5zaWJsaW5nO2M9VGcoZSx7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpjfSk7MD09PShiLm1vZGUmMikmJihjLmxhbmVzPWQpO2MucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihhLm5leHRFZmZlY3Q9bnVsbCxhLmZsYWdzPTgsYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YSk7cmV0dXJuIGIuY2hpbGQ9Y31cbmZ1bmN0aW9uIHdpKGEsYixjLGQsZSl7dmFyIGY9Yi5tb2RlLGc9YS5jaGlsZDthPWcuc2libGluZzt2YXIgaD17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmN9OzA9PT0oZiYyKSYmYi5jaGlsZCE9PWc/KGM9Yi5jaGlsZCxjLmNoaWxkTGFuZXM9MCxjLnBlbmRpbmdQcm9wcz1oLGc9Yy5sYXN0RWZmZWN0LG51bGwhPT1nPyhiLmZpcnN0RWZmZWN0PWMuZmlyc3RFZmZlY3QsYi5sYXN0RWZmZWN0PWcsZy5uZXh0RWZmZWN0PW51bGwpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PW51bGwpOmM9VGcoZyxoKTtudWxsIT09YT9kPVRnKGEsZCk6KGQ9WGcoZCxmLGUsbnVsbCksZC5mbGFnc3w9Mik7ZC5yZXR1cm49YjtjLnJldHVybj1iO2Muc2libGluZz1kO2IuY2hpbGQ9YztyZXR1cm4gZH1mdW5jdGlvbiB5aShhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtzZyhhLnJldHVybixiKX1cbmZ1bmN0aW9uIHppKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBBaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO2ZpKGEsYixkLmNoaWxkcmVuLGMpO2Q9UC5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ5aShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZyl5aShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKFAsZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWloKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7emkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXppKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp6aShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO0RnfD1iLmxhbmVzO2lmKDAhPT0oYyZiLmNoaWxkTGFuZXMpKXtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IoeSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9VGcoYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVRnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9cmV0dXJuIG51bGx9dmFyIEJpLENpLERpLEVpO1xuQmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0NpPWZ1bmN0aW9uKCl7fTtcbkRpPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtkaChhaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxlKTtkPWViKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1tKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfXZiKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09XG5sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fFxuKGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLGMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZHKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUdhP2sudG9TdHJpbmcoKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsXG5jKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07RWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07ZnVuY3Rpb24gRmkoYSxiKXtpZighbGgpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2Q9Yi5zdGF0ZU5vZGU7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKXJoKGIpP2IuZmxhZ3N8PTQ6ZC5oeWRyYXRlfHwoYi5mbGFnc3w9MjU2KTtDaShiKTtyZXR1cm4gbnVsbDtjYXNlIDU6aGgoYik7dmFyIGU9ZGgoY2guY3VycmVudCk7Yz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKURpKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PVxuYi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtyZXR1cm4gbnVsbH1hPWRoKGFoLmN1cnJlbnQpO2lmKHJoKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW3dmXT1iO2RbeGZdPWY7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsZCk7RyhcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxYZS5sZW5ndGg7YSsrKUcoWGVbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGQpO0coXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtHKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRyhcImludmFsaWRcIixkKX12YihjLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilmLmhhc093blByb3BlcnR5KGcpJiYoZT1mW2ddLFwiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBlP2QudGV4dENvbnRlbnQhPT1lJiYoYT1bXCJjaGlsZHJlblwiLGVdKTpcIm51bWJlclwiPT09dHlwZW9mIGUmJmQudGV4dENvbnRlbnQhPT1cIlwiK2UmJihhPVtcImNoaWxkcmVuXCIsXCJcIitlXSk6Y2EuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWUmJlwib25TY3JvbGxcIj09PWcmJkcoXCJzY3JvbGxcIixkKSk7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2NiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9XG5qZil9ZD1hO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDthPT09a2IuaHRtbCYmKGE9bGIoYykpO2E9PT1rYi5odG1sP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVt3Zl09YjthW3hmXT1kO0JpKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXdiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpHKFwiY2FuY2VsXCIsYSk7RyhcImNsb3NlXCIsYSk7XG5lPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8WGUubGVuZ3RoO2UrKylHKFhlW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkcoXCJlcnJvclwiLGEpO0coXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9XG5nYihhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dmIoYyxlKTt2YXIgaD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3RiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZvYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Y3x8XCJcIiE9PWspJiZwYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmcGIoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihjYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZHKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmcWEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtjYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9amYpfW1mKGMsZCkmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlFaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjYpKTtcbmM9ZGgoY2guY3VycmVudCk7ZGgoYWguY3VycmVudCk7cmgoYik/KGQ9Yi5zdGF0ZU5vZGUsYz1iLm1lbW9pemVkUHJvcHMsZFt3Zl09YixkLm5vZGVWYWx1ZSE9PWMmJihiLmZsYWdzfD00KSk6KGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW3dmXT1iLGIuc3RhdGVOb2RlPWQpfXJldHVybiBudWxsO2Nhc2UgMTM6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZmxhZ3MmNjQpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2M9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZyaChiKTpjPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoZCYmIWMmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShQLmN1cnJlbnQmMSkpMD09PVYmJihWPTMpO2Vsc2V7aWYoMD09PVZ8fDM9PT1WKVY9XG40O251bGw9PT1VfHwwPT09KERnJjEzNDIxNzcyNykmJjA9PT0oSGkmMTM0MjE3NzI3KXx8SWkoVSxXKX1pZihkfHxjKWIuZmxhZ3N8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLENpKGIpLG51bGw9PT1hJiZjZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gRmYoYi50eXBlKSYmR2YoKSxudWxsO2Nhc2UgMTk6SChQKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtmPTAhPT0oYi5mbGFncyY2NCk7Zz1kLnJlbmRlcmluZztpZihudWxsPT09ZylpZihmKUZpKGQsITEpO2Vsc2V7aWYoMCE9PVZ8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPWloKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD02NDtGaShkLCExKTtmPWcudXBkYXRlUXVldWU7bnVsbCE9PWYmJihiLnVwZGF0ZVF1ZXVlPWYsYi5mbGFnc3w9NCk7XG5udWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTIsZi5uZXh0RWZmZWN0PW51bGwsZi5maXJzdEVmZmVjdD1udWxsLGYubGFzdEVmZmVjdD1udWxsLGc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxcbmYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7SShQLFAuY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9YS5zaWJsaW5nfW51bGwhPT1kLnRhaWwmJk8oKT5KaSYmKGIuZmxhZ3N8PTY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMil9ZWxzZXtpZighZilpZihhPWloKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD02NCxmPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxGaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhbGgpcmV0dXJuIGI9Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMipPKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+SmkmJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9XG42NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpO2QuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxkLmxhc3Q9Zyl9cmV0dXJuIG51bGwhPT1kLnRhaWw/KGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPU8oKSxjLnNpYmxpbmc9bnVsbCxiPVAuY3VycmVudCxJKFAsZj9iJjF8MjpiJjEpLGMpOm51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09KG51bGwhPT1iLm1lbW9pemVkU3RhdGUpJiZcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCIhPT1kLm1vZGUmJihiLmZsYWdzfD00KSxudWxsfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gTGkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6RmYoYS50eXBlKSYmR2YoKTt2YXIgYj1hLmZsYWdzO3JldHVybiBiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2I9YS5mbGFncztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHkoMjg1KSk7YS5mbGFncz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gaGgoYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKFApLGI9YS5mbGFncyxiJjQwOTY/KGEuZmxhZ3M9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoUCksbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksbnVsbDtjYXNlIDEwOnJldHVybiByZyhhKSxudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gTWkoYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UWEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmV9fWZ1bmN0aW9uIE5pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBPaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBQaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtRaXx8KFFpPSEwLFJpPWQpO05pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gU2koYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe05pKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1UaT9UaT1uZXcgU2V0KFt0aGlzXSk6VGkuYWRkKHRoaXMpLE5pKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfXZhciBVaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtcbmZ1bmN0aW9uIFZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe1dpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBYaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5mbGFncyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmxnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpiLmZsYWdzJjI1NiYmcWYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cmV0dXJuO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gWWkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOmI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve2lmKDM9PT0oYS50YWcmMykpe3ZhciBkPWEuY3JlYXRlO2EuZGVzdHJveT1kKCl9YT1hLm5leHR9d2hpbGUoYSE9PWIpfWI9Yy51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXthPWI9Yi5uZXh0O2Rve3ZhciBlPWE7ZD1lLm5leHQ7ZT1lLnRhZzswIT09KGUmNCkmJjAhPT0oZSYxKSYmKFppKGMsYSksJGkoYyxhKSk7YT1kfXdoaWxlKGEhPT1iKX1yZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7Yy5mbGFncyY0JiYobnVsbD09PWI/YS5jb21wb25lbnREaWRNb3VudCgpOihkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmxnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpLGEuY29tcG9uZW50RGlkVXBkYXRlKGQsXG5iLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSkpKTtiPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkVnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9RWcoYyxiLGEpfXJldHVybjtjYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5mbGFncyY0JiZtZihjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJkNjKGMpKSkpO1xucmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6Y2FzZSAyMzpjYXNlIDI0OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIGFqKGEsYil7Zm9yKHZhciBjPWE7Oyl7aWYoNT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihiKWQ9ZC5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5zZXRQcm9wZXJ0eT9kLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmQuZGlzcGxheT1cIm5vbmVcIjtlbHNle2Q9Yy5zdGF0ZU5vZGU7dmFyIGU9Yy5tZW1vaXplZFByb3BzLnN0eWxlO2U9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsO2Quc3R5bGUuZGlzcGxheT1zYihcImRpc3BsYXlcIixlKX19ZWxzZSBpZig2PT09Yy50YWcpYy5zdGF0ZU5vZGUubm9kZVZhbHVlPWI/XCJcIjpjLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigoMjMhPT1jLnRhZyYmMjQhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8Yz09PWEpJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PVxuYSlicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YSlyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGJqKGEsYil7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7TWYub25Db21taXRGaWJlclVubW91bnQoTGYsYil9Y2F0Y2goZil7fXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgYz1hPWEubmV4dDtkb3t2YXIgZD1jLGU9ZC5kZXN0cm95O2Q9ZC50YWc7aWYodm9pZCAwIT09ZSlpZigwIT09KGQmNCkpWmkoYixjKTtlbHNle2Q9Yjt0cnl7ZSgpfWNhdGNoKGYpe1dpKGQsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1hKX1icmVhaztjYXNlIDE6VmkoYik7YT1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHMsYS5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsYS5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe1dpKGIsXG5mKX1icmVhaztjYXNlIDU6VmkoYik7YnJlYWs7Y2FzZSA0OmNqKGEsYil9fWZ1bmN0aW9uIGRqKGEpe2EuYWx0ZXJuYXRlPW51bGw7YS5jaGlsZD1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5yZXR1cm49bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gZWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBmaihhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihlaihiKSlicmVhayBhO2I9Yi5yZXR1cm59dGhyb3cgRXJyb3IoeSgxNjApKTt9dmFyIGM9YjtiPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgxNjEpKTt9Yy5mbGFncyYxNiYmKHBiKGIsXCJcIiksYy5mbGFncyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGVqKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZmxhZ3MmMiljb250aW51ZSBiO2lmKG51bGw9PT1cbmMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmZsYWdzJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/Z2ooYSxjLGIpOmhqKGEsYyxiKX1cbmZ1bmN0aW9uIGdqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1qZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihnaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGhqKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoaGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOyloaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBjaihhLGIpe2Zvcih2YXIgYz1iLGQ9ITEsZSxmOzspe2lmKCFkKXtkPWMucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZCl0aHJvdyBFcnJvcih5KDE2MCkpO2U9ZC5zdGF0ZU5vZGU7c3dpdGNoKGQudGFnKXtjYXNlIDU6Zj0hMTticmVhayBhO2Nhc2UgMzplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGE7Y2FzZSA0OmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYX1kPWQucmV0dXJufWQ9ITB9aWYoNT09PWMudGFnfHw2PT09Yy50YWcpe2E6Zm9yKHZhciBnPWEsaD1jLGs9aDs7KWlmKGJqKGcsayksbnVsbCE9PWsuY2hpbGQmJjQhPT1rLnRhZylrLmNoaWxkLnJldHVybj1rLGs9ay5jaGlsZDtlbHNle2lmKGs9PT1oKWJyZWFrIGE7Zm9yKDtudWxsPT09ay5zaWJsaW5nOyl7aWYobnVsbD09PWsucmV0dXJufHxrLnJldHVybj09PWgpYnJlYWsgYTtrPWsucmV0dXJufWsuc2libGluZy5yZXR1cm49ay5yZXR1cm47az1rLnNpYmxpbmd9Zj8oZz1lLGg9Yy5zdGF0ZU5vZGUsXG44PT09Zy5ub2RlVHlwZT9nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaCk6Zy5yZW1vdmVDaGlsZChoKSk6ZS5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09Yy50YWcpe2lmKG51bGwhPT1jLmNoaWxkKXtlPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zj0hMDtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihiaihhLGMpLG51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybjs0PT09Yy50YWcmJihkPSExKX1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX1cbmZ1bmN0aW9uIGlqKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjp2YXIgYz1iLnVwZGF0ZVF1ZXVlO2M9bnVsbCE9PWM/Yy5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWMpe3ZhciBkPWM9Yy5uZXh0O2RvIDM9PT0oZC50YWcmMykmJihhPWQuZGVzdHJveSxkLmRlc3Ryb3k9dm9pZCAwLHZvaWQgMCE9PWEmJmEoKSksZD1kLm5leHQ7d2hpbGUoZCE9PWMpfXJldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTpjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe2Q9Yi5tZW1vaXplZFByb3BzO3ZhciBlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW3hmXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiYkYShjLGQpO3diKGEsZSk7Yj13YihhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz1cbjIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz90YihjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/b2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP3BiKGMsaCk6cWEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOmFiKGMsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YT1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxmPWQudmFsdWUsbnVsbCE9Zj9mYihjLCEhZC5tdWx0aXBsZSxmLCExKTphIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/ZmIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOmZiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IoeSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9XG5iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpjPWIuc3RhdGVOb2RlO2MuaHlkcmF0ZSYmKGMuaHlkcmF0ZT0hMSxDYyhjLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsIT09Yi5tZW1vaXplZFN0YXRlJiYoamo9TygpLGFqKGIuY2hpbGQsITApKTtraihiKTtyZXR1cm47Y2FzZSAxOTpraihiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm47Y2FzZSAyMzpjYXNlIDI0OmFqKGIsbnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSk7cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fWZ1bmN0aW9uIGtqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IFVpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9bGouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBtaihhLGIpe3JldHVybiBudWxsIT09YSYmKGE9YS5tZW1vaXplZFN0YXRlLG51bGw9PT1hfHxudWxsIT09YS5kZWh5ZHJhdGVkKT8oYj1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWImJm51bGw9PT1iLmRlaHlkcmF0ZWQpOiExfXZhciBuaj1NYXRoLmNlaWwsb2o9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixwaj1yYS5SZWFjdEN1cnJlbnRPd25lcixYPTAsVT1udWxsLFk9bnVsbCxXPTAscWo9MCxyaj1CZigwKSxWPTAsc2o9bnVsbCx0aj0wLERnPTAsSGk9MCx1aj0wLHZqPW51bGwsamo9MCxKaT1JbmZpbml0eTtmdW5jdGlvbiB3aigpe0ppPU8oKSs1MDB9dmFyIFo9bnVsbCxRaT0hMSxSaT1udWxsLFRpPW51bGwseGo9ITEseWo9bnVsbCx6aj05MCxBaj1bXSxCaj1bXSxDaj1udWxsLERqPTAsRWo9bnVsbCxGaj0tMSxHaj0wLEhqPTAsSWo9bnVsbCxKaj0hMTtmdW5jdGlvbiBIZygpe3JldHVybiAwIT09KFgmNDgpP08oKTotMSE9PUZqP0ZqOkZqPU8oKX1cbmZ1bmN0aW9uIElnKGEpe2E9YS5tb2RlO2lmKDA9PT0oYSYyKSlyZXR1cm4gMTtpZigwPT09KGEmNCkpcmV0dXJuIDk5PT09ZWcoKT8xOjI7MD09PUdqJiYoR2o9dGopO2lmKDAhPT1rZy50cmFuc2l0aW9uKXswIT09SGomJihIaj1udWxsIT09dmo/dmoucGVuZGluZ0xhbmVzOjApO2E9R2o7dmFyIGI9NDE4NjExMiZ+SGo7YiY9LWI7MD09PWImJihhPTQxODYxMTImfmEsYj1hJi1hLDA9PT1iJiYoYj04MTkyKSk7cmV0dXJuIGJ9YT1lZygpOzAhPT0oWCY0KSYmOTg9PT1hP2E9WGMoMTIsR2opOihhPVNjKGEpLGE9WGMoYSxHaikpO3JldHVybiBhfVxuZnVuY3Rpb24gSmcoYSxiLGMpe2lmKDUwPERqKXRocm93IERqPTAsRWo9bnVsbCxFcnJvcih5KDE4NSkpO2E9S2ooYSxiKTtpZihudWxsPT09YSlyZXR1cm4gbnVsbDskYyhhLGIsYyk7YT09PVUmJihIaXw9Yiw0PT09ViYmSWkoYSxXKSk7dmFyIGQ9ZWcoKTsxPT09Yj8wIT09KFgmOCkmJjA9PT0oWCY0OCk/TGooYSk6KE1qKGEsYyksMD09PVgmJih3aigpLGlnKCkpKTooMD09PShYJjQpfHw5OCE9PWQmJjk5IT09ZHx8KG51bGw9PT1Daj9Daj1uZXcgU2V0KFthXSk6Q2ouYWRkKGEpKSxNaihhLGMpKTt2aj1hfWZ1bmN0aW9uIEtqKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH1cbmZ1bmN0aW9uIE1qKGEsYil7Zm9yKHZhciBjPWEuY2FsbGJhY2tOb2RlLGQ9YS5zdXNwZW5kZWRMYW5lcyxlPWEucGluZ2VkTGFuZXMsZj1hLmV4cGlyYXRpb25UaW1lcyxnPWEucGVuZGluZ0xhbmVzOzA8Zzspe3ZhciBoPTMxLVZjKGcpLGs9MTw8aCxsPWZbaF07aWYoLTE9PT1sKXtpZigwPT09KGsmZCl8fDAhPT0oayZlKSl7bD1iO1JjKGspO3ZhciBuPUY7ZltoXT0xMDw9bj9sKzI1MDo2PD1uP2wrNUUzOi0xfX1lbHNlIGw8PWImJihhLmV4cGlyZWRMYW5lc3w9ayk7ZyY9fmt9ZD1VYyhhLGE9PT1VP1c6MCk7Yj1GO2lmKDA9PT1kKW51bGwhPT1jJiYoYyE9PVpmJiZQZihjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wKTtlbHNle2lmKG51bGwhPT1jKXtpZihhLmNhbGxiYWNrUHJpb3JpdHk9PT1iKXJldHVybjtjIT09WmYmJlBmKGMpfTE1PT09Yj8oYz1Mai5iaW5kKG51bGwsYSksbnVsbD09PWFnPyhhZz1bY10sYmc9T2YoVWYsamcpKTphZy5wdXNoKGMpLFxuYz1aZik6MTQ9PT1iP2M9aGcoOTksTGouYmluZChudWxsLGEpKTooYz1UYyhiKSxjPWhnKGMsTmouYmluZChudWxsLGEpKSk7YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBOaihhKXtGaj0tMTtIaj1Haj0wO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYj1hLmNhbGxiYWNrTm9kZTtpZihPaigpJiZhLmNhbGxiYWNrTm9kZSE9PWIpcmV0dXJuIG51bGw7dmFyIGM9VWMoYSxhPT09VT9XOjApO2lmKDA9PT1jKXJldHVybiBudWxsO3ZhciBkPWM7dmFyIGU9WDtYfD0xNjt2YXIgZj1QaigpO2lmKFUhPT1hfHxXIT09ZCl3aigpLFFqKGEsZCk7ZG8gdHJ5e1JqKCk7YnJlYWt9Y2F0Y2goaCl7U2ooYSxoKX13aGlsZSgxKTtxZygpO29qLmN1cnJlbnQ9ZjtYPWU7bnVsbCE9PVk/ZD0wOihVPW51bGwsVz0wLGQ9Vik7aWYoMCE9PSh0aiZIaSkpUWooYSwwKTtlbHNlIGlmKDAhPT1kKXsyPT09ZCYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxjPVdjKGEpLDAhPT1jJiYoZD1UaihhLGMpKSk7aWYoMT09PWQpdGhyb3cgYj1zaixRaihhLDApLElpKGEsYyksTWooYSxPKCkpLGI7YS5maW5pc2hlZFdvcms9XG5hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1jO3N3aXRjaChkKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHkoMzQ1KSk7Y2FzZSAyOlVqKGEpO2JyZWFrO2Nhc2UgMzpJaShhLGMpO2lmKChjJjYyOTE0NTYwKT09PWMmJihkPWpqKzUwMC1PKCksMTA8ZCkpe2lmKDAhPT1VYyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZjKSE9PWMpe0hnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksZCk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA0OklpKGEsYyk7aWYoKGMmNDE4NjExMik9PT1jKWJyZWFrO2Q9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8Yzspe3ZhciBnPTMxLVZjKGMpO2Y9MTw8ZztnPWRbZ107Zz5lJiYoZT1nKTtjJj1+Zn1jPWU7Yz1PKCktYztjPSgxMjA+Yz8xMjA6NDgwPmM/NDgwOjEwODA+Yz8xMDgwOjE5MjA+Yz8xOTIwOjNFMz5jPzNFMzo0MzIwPlxuYz80MzIwOjE5NjAqbmooYy8xOTYwKSktYztpZigxMDxjKXthLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGMpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNTpVaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMzI5KSk7fX1NaihhLE8oKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yj9Oai5iaW5kKG51bGwsYSk6bnVsbH1mdW5jdGlvbiBJaShhLGIpe2ImPX51ajtiJj1+SGk7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1WYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19XG5mdW5jdGlvbiBMaihhKXtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7T2ooKTtpZihhPT09VSYmMCE9PShhLmV4cGlyZWRMYW5lcyZXKSl7dmFyIGI9Vzt2YXIgYz1UaihhLGIpOzAhPT0odGomSGkpJiYoYj1VYyhhLGIpLGM9VGooYSxiKSl9ZWxzZSBiPVVjKGEsMCksYz1UaihhLGIpOzAhPT1hLnRhZyYmMj09PWMmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYj1XYyhhKSwwIT09YiYmKGM9VGooYSxiKSkpO2lmKDE9PT1jKXRocm93IGM9c2osUWooYSwwKSxJaShhLGIpLE1qKGEsTygpKSxjO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7VWooYSk7TWooYSxPKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gVmooKXtpZihudWxsIT09Q2ope3ZhciBhPUNqO0NqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2EuZXhwaXJlZExhbmVzfD0yNCZhLnBlbmRpbmdMYW5lcztNaihhLE8oKSl9KX1pZygpfWZ1bmN0aW9uIFdqKGEsYil7dmFyIGM9WDtYfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIFhqKGEsYil7dmFyIGM9WDtYJj0tMjtYfD04O3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fWZ1bmN0aW9uIG5pKGEsYil7SShyaixxaik7cWp8PWI7dGp8PWJ9ZnVuY3Rpb24gS2koKXtxaj1yai5jdXJyZW50O0gocmopfVxuZnVuY3Rpb24gUWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEscGYoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmR2YoKTticmVhaztjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTticmVhaztjYXNlIDU6aGgoZCk7YnJlYWs7Y2FzZSA0OmZoKCk7YnJlYWs7Y2FzZSAxMzpIKFApO2JyZWFrO2Nhc2UgMTk6SChQKTticmVhaztjYXNlIDEwOnJnKGQpO2JyZWFrO2Nhc2UgMjM6Y2FzZSAyNDpLaSgpfWM9Yy5yZXR1cm59VT1hO1k9VGcoYS5jdXJyZW50LG51bGwpO1c9cWo9dGo9YjtWPTA7c2o9bnVsbDt1aj1IaT1EZz0wfVxuZnVuY3Rpb24gU2ooYSxiKXtkb3t2YXIgYz1ZO3RyeXtxZygpO3ZoLmN1cnJlbnQ9R2g7aWYoeWgpe2Zvcih2YXIgZD1SLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fXloPSExfXhoPTA7VD1TPVI9bnVsbDt6aD0hMTtwai5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7Vj0xO3NqPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9VztoLmZsYWdzfD0yMDQ4O2guZmlyc3RFZmZlY3Q9aC5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9aztpZigwPT09KGgubW9kZSYyKSl7dmFyIG49aC5hbHRlcm5hdGU7bj8oaC51cGRhdGVRdWV1ZT1uLnVwZGF0ZVF1ZXVlLGgubWVtb2l6ZWRTdGF0ZT1uLm1lbW9pemVkU3RhdGUsaC5sYW5lcz1uLmxhbmVzKTpcbihoLnVwZGF0ZVF1ZXVlPW51bGwsaC5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBBPTAhPT0oUC5jdXJyZW50JjEpLHA9Zztkb3t2YXIgQztpZihDPTEzPT09cC50YWcpe3ZhciB4PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eClDPW51bGwhPT14LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgdz1wLm1lbW9pemVkUHJvcHM7Qz12b2lkIDA9PT13LmZhbGxiYWNrPyExOiEwIT09dy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDpBPyExOiEwfX1pZihDKXt2YXIgej1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT16KXt2YXIgdT1uZXcgU2V0O3UuYWRkKGwpO3AudXBkYXRlUXVldWU9dX1lbHNlIHouYWRkKGwpO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmZsYWdzfD02NDtoLmZsYWdzfD0xNjM4NDtoLmZsYWdzJj0tMjk4MTtpZigxPT09aC50YWcpaWYobnVsbD09PWguYWx0ZXJuYXRlKWgudGFnPTE3O2Vsc2V7dmFyIHQ9emcoLTEsMSk7dC50YWc9MjtBZyhoLHQpfWgubGFuZXN8PTE7YnJlYWsgYX1rPVxudm9pZCAwO2g9Yjt2YXIgcT1mLnBpbmdDYWNoZTtudWxsPT09cT8ocT1mLnBpbmdDYWNoZT1uZXcgT2ksaz1uZXcgU2V0LHEuc2V0KGwsaykpOihrPXEuZ2V0KGwpLHZvaWQgMD09PWsmJihrPW5ldyBTZXQscS5zZXQobCxrKSkpO2lmKCFrLmhhcyhoKSl7ay5hZGQoaCk7dmFyIHY9WWouYmluZChudWxsLGYsbCxoKTtsLnRoZW4odix2KX1wLmZsYWdzfD00MDk2O3AubGFuZXM9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2s9RXJyb3IoKFJhKGgudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIil9NSE9PVYmJihWPTIpO2s9TWkoayxoKTtwPVxuZztkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzpmPWs7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBKPVBpKHAsZixiKTtCZyhwLEopO2JyZWFrIGE7Y2FzZSAxOmY9azt2YXIgSz1wLnR5cGUsUT1wLnN0YXRlTm9kZTtpZigwPT09KHAuZmxhZ3MmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEsuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09USYmXCJmdW5jdGlvblwiPT09dHlwZW9mIFEuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoUSkpKSl7cC5mbGFnc3w9NDA5NjtiJj0tYjtwLmxhbmVzfD1iO3ZhciBMPVNpKHAsZixiKTtCZyhwLEwpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVpqKGMpfWNhdGNoKHZhKXtiPXZhO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBQaigpe3ZhciBhPW9qLmN1cnJlbnQ7b2ouY3VycmVudD1HaDtyZXR1cm4gbnVsbD09PWE/R2g6YX1mdW5jdGlvbiBUaihhLGIpe3ZhciBjPVg7WHw9MTY7dmFyIGQ9UGooKTtVPT09YSYmVz09PWJ8fFFqKGEsYik7ZG8gdHJ5e2FrKCk7YnJlYWt9Y2F0Y2goZSl7U2ooYSxlKX13aGlsZSgxKTtxZygpO1g9Yztvai5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IoeSgyNjEpKTtVPW51bGw7Vz0wO3JldHVybiBWfWZ1bmN0aW9uIGFrKCl7Zm9yKDtudWxsIT09WTspYmsoWSl9ZnVuY3Rpb24gUmooKXtmb3IoO251bGwhPT1ZJiYhUWYoKTspYmsoWSl9ZnVuY3Rpb24gYmsoYSl7dmFyIGI9Y2soYS5hbHRlcm5hdGUsYSxxaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1pqKGEpOlk9Yjtwai5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBaaihhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjIwNDgpKXtjPUdpKGMsYixxaik7aWYobnVsbCE9PWMpe1k9YztyZXR1cm59Yz1iO2lmKDI0IT09Yy50YWcmJjIzIT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fDAhPT0ocWomMTA3Mzc0MTgyNCl8fDA9PT0oYy5tb2RlJjQpKXtmb3IodmFyIGQ9MCxlPWMuY2hpbGQ7bnVsbCE9PWU7KWR8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGU9ZS5zaWJsaW5nO2MuY2hpbGRMYW5lcz1kfW51bGwhPT1hJiYwPT09KGEuZmxhZ3MmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9Yi5maXJzdEVmZmVjdCksbnVsbCE9PWIubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0KSwxPGIuZmxhZ3MmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YjphLmZpcnN0RWZmZWN0PWIsYS5sYXN0RWZmZWN0PWIpKX1lbHNle2M9TGkoYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTIwNDc7WT1jO3JldHVybn1udWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5mbGFnc3w9MjA0OCl9Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1WJiYoVj01KX1mdW5jdGlvbiBVaihhKXt2YXIgYj1lZygpO2dnKDk5LGRrLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRrKGEsYil7ZG8gT2ooKTt3aGlsZShudWxsIT09eWopO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yaztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IoeSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO3ZhciBkPWMubGFuZXN8Yy5jaGlsZExhbmVzLGU9ZCxmPWEucGVuZGluZ0xhbmVzJn5lO2EucGVuZGluZ0xhbmVzPWU7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9ZTthLm11dGFibGVSZWFkTGFuZXMmPWU7YS5lbnRhbmdsZWRMYW5lcyY9ZTtlPWEuZW50YW5nbGVtZW50cztmb3IodmFyIGc9YS5ldmVudFRpbWVzLGg9YS5leHBpcmF0aW9uVGltZXM7MDxmOyl7dmFyIGs9MzEtVmMoZiksbD0xPDxrO2Vba109MDtnW2tdPS0xO2hba109LTE7ZiY9fmx9bnVsbCE9PVxuQ2omJjA9PT0oZCYyNCkmJkNqLmhhcyhhKSYmQ2ouZGVsZXRlKGEpO2E9PT1VJiYoWT1VPW51bGwsVz0wKTsxPGMuZmxhZ3M/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxkPWMuZmlyc3RFZmZlY3QpOmQ9YzpkPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWQpe2U9WDtYfD0zMjtwai5jdXJyZW50PW51bGw7a2Y9ZmQ7Zz1OZSgpO2lmKE9lKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKWg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6aWYoaD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3csKGw9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCkpJiYwIT09bC5yYW5nZUNvdW50KXtoPWwuYW5jaG9yTm9kZTtmPWwuYW5jaG9yT2Zmc2V0O2s9bC5mb2N1c05vZGU7bD1sLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLGsubm9kZVR5cGV9Y2F0Y2godmEpe2g9bnVsbDtcbmJyZWFrIGF9dmFyIG49MCxBPS0xLHA9LTEsQz0wLHg9MCx3PWcsej1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHU7Oyl7dyE9PWh8fDAhPT1mJiYzIT09dy5ub2RlVHlwZXx8KEE9bitmKTt3IT09a3x8MCE9PWwmJjMhPT13Lm5vZGVUeXBlfHwocD1uK2wpOzM9PT13Lm5vZGVUeXBlJiYobis9dy5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHU9dy5maXJzdENoaWxkKSlicmVhazt6PXc7dz11fWZvcig7Oyl7aWYodz09PWcpYnJlYWsgYjt6PT09aCYmKytDPT09ZiYmKEE9bik7ej09PWsmJisreD09PWwmJihwPW4pO2lmKG51bGwhPT0odT13Lm5leHRTaWJsaW5nKSlicmVhazt3PXo7ej13LnBhcmVudE5vZGV9dz11fWg9LTE9PT1BfHwtMT09PXA/bnVsbDp7c3RhcnQ6QSxlbmQ6cH19ZWxzZSBoPW51bGw7aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPW51bGw7bGY9e2ZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7SWo9bnVsbDtKaj0hMTtaPWQ7ZG8gdHJ5e2VrKCl9Y2F0Y2godmEpe2lmKG51bGw9PT1cblopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7SWo9bnVsbDtaPWQ7ZG8gdHJ5e2ZvcihnPWE7bnVsbCE9PVo7KXt2YXIgdD1aLmZsYWdzO3QmMTYmJnBiKFouc3RhdGVOb2RlLFwiXCIpO2lmKHQmMTI4KXt2YXIgcT1aLmFsdGVybmF0ZTtpZihudWxsIT09cSl7dmFyIHY9cS5yZWY7bnVsbCE9PXYmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdj92KG51bGwpOnYuY3VycmVudD1udWxsKX19c3dpdGNoKHQmMTAzOCl7Y2FzZSAyOmZqKFopO1ouZmxhZ3MmPS0zO2JyZWFrO2Nhc2UgNjpmaihaKTtaLmZsYWdzJj0tMztpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDEwMjQ6Wi5mbGFncyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlouZmxhZ3MmPS0xMDI1O2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgNDppaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDg6aD1aO2NqKGcsaCk7dmFyIEo9aC5hbHRlcm5hdGU7ZGooaCk7bnVsbCE9PVxuSiYmZGooSil9Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTt2PWxmO3E9TmUoKTt0PXYuZm9jdXNlZEVsZW07Zz12LnNlbGVjdGlvblJhbmdlO2lmKHEhPT10JiZ0JiZ0Lm93bmVyRG9jdW1lbnQmJk1lKHQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdCkpe251bGwhPT1nJiZPZSh0KSYmKHE9Zy5zdGFydCx2PWcuZW5kLHZvaWQgMD09PXYmJih2PXEpLFwic2VsZWN0aW9uU3RhcnRcImluIHQ/KHQuc2VsZWN0aW9uU3RhcnQ9cSx0LnNlbGVjdGlvbkVuZD1NYXRoLm1pbih2LHQudmFsdWUubGVuZ3RoKSk6KHY9KHE9dC5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJnEuZGVmYXVsdFZpZXd8fHdpbmRvdyx2LmdldFNlbGVjdGlvbiYmKHY9di5nZXRTZWxlY3Rpb24oKSxoPXQudGV4dENvbnRlbnQubGVuZ3RoLEo9TWF0aC5taW4oZy5zdGFydCxoKSxnPXZvaWQgMD09PVxuZy5lbmQ/SjpNYXRoLm1pbihnLmVuZCxoKSwhdi5leHRlbmQmJko+ZyYmKGg9ZyxnPUosSj1oKSxoPUxlKHQsSiksZj1MZSh0LGcpLGgmJmYmJigxIT09di5yYW5nZUNvdW50fHx2LmFuY2hvck5vZGUhPT1oLm5vZGV8fHYuYW5jaG9yT2Zmc2V0IT09aC5vZmZzZXR8fHYuZm9jdXNOb2RlIT09Zi5ub2RlfHx2LmZvY3VzT2Zmc2V0IT09Zi5vZmZzZXQpJiYocT1xLmNyZWF0ZVJhbmdlKCkscS5zZXRTdGFydChoLm5vZGUsaC5vZmZzZXQpLHYucmVtb3ZlQWxsUmFuZ2VzKCksSj5nPyh2LmFkZFJhbmdlKHEpLHYuZXh0ZW5kKGYubm9kZSxmLm9mZnNldCkpOihxLnNldEVuZChmLm5vZGUsZi5vZmZzZXQpLHYuYWRkUmFuZ2UocSkpKSkpKTtxPVtdO2Zvcih2PXQ7dj12LnBhcmVudE5vZGU7KTE9PT12Lm5vZGVUeXBlJiZxLnB1c2goe2VsZW1lbnQ6dixsZWZ0OnYuc2Nyb2xsTGVmdCx0b3A6di5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgdC5mb2N1cyYmdC5mb2N1cygpO2Zvcih0PVxuMDt0PHEubGVuZ3RoO3QrKyl2PXFbdF0sdi5lbGVtZW50LnNjcm9sbExlZnQ9di5sZWZ0LHYuZWxlbWVudC5zY3JvbGxUb3A9di50b3B9ZmQ9ISFrZjtsZj1rZj1udWxsO2EuY3VycmVudD1jO1o9ZDtkbyB0cnl7Zm9yKHQ9YTtudWxsIT09Wjspe3ZhciBLPVouZmxhZ3M7SyYzNiYmWWkodCxaLmFsdGVybmF0ZSxaKTtpZihLJjEyOCl7cT12b2lkIDA7dmFyIFE9Wi5yZWY7aWYobnVsbCE9PVEpe3ZhciBMPVouc3RhdGVOb2RlO3N3aXRjaChaLnRhZyl7Y2FzZSA1OnE9TDticmVhaztkZWZhdWx0OnE9TH1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUT9RKHEpOlEuY3VycmVudD1xfX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO1o9bnVsbDskZigpO1g9ZX1lbHNlIGEuY3VycmVudD1jO2lmKHhqKXhqPSExLHlqPWEsemo9YjtlbHNlIGZvcihaPWQ7bnVsbCE9PVo7KWI9XG5aLm5leHRFZmZlY3QsWi5uZXh0RWZmZWN0PW51bGwsWi5mbGFncyY4JiYoSz1aLEsuc2libGluZz1udWxsLEsuc3RhdGVOb2RlPW51bGwpLFo9YjtkPWEucGVuZGluZ0xhbmVzOzA9PT1kJiYoVGk9bnVsbCk7MT09PWQ/YT09PUVqP0RqKys6KERqPTAsRWo9YSk6RGo9MDtjPWMuc3RhdGVOb2RlO2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclJvb3QpdHJ5e01mLm9uQ29tbWl0RmliZXJSb290KExmLGMsdm9pZCAwLDY0PT09KGMuY3VycmVudC5mbGFncyY2NCkpfWNhdGNoKHZhKXt9TWooYSxPKCkpO2lmKFFpKXRocm93IFFpPSExLGE9UmksUmk9bnVsbCxhO2lmKDAhPT0oWCY4KSlyZXR1cm4gbnVsbDtpZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZWsoKXtmb3IoO251bGwhPT1aOyl7dmFyIGE9Wi5hbHRlcm5hdGU7Smp8fG51bGw9PT1Janx8KDAhPT0oWi5mbGFncyY4KT9kYyhaLElqKSYmKEpqPSEwKToxMz09PVoudGFnJiZtaihhLFopJiZkYyhaLElqKSYmKEpqPSEwKSk7dmFyIGI9Wi5mbGFnczswIT09KGImMjU2KSYmWGkoYSxaKTswPT09KGImNTEyKXx8eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSk7Wj1aLm5leHRFZmZlY3R9fWZ1bmN0aW9uIE9qKCl7aWYoOTAhPT16ail7dmFyIGE9OTc8emo/OTc6emo7emo9OTA7cmV0dXJuIGdnKGEsZmspfXJldHVybiExfWZ1bmN0aW9uICRpKGEsYil7QWoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfWZ1bmN0aW9uIFppKGEsYil7QmoucHVzaChiLGEpO3hqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpfVxuZnVuY3Rpb24gZmsoKXtpZihudWxsPT09eWopcmV0dXJuITE7dmFyIGE9eWo7eWo9bnVsbDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzMxKSk7dmFyIGI9WDtYfD0zMjt2YXIgYz1CajtCaj1bXTtmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrPTIpe3ZhciBlPWNbZF0sZj1jW2QrMV0sZz1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyl0cnl7ZygpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Yz1BajtBaj1bXTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7ZT1jW2RdO2Y9Y1tkKzFdO3RyeXt2YXIgaD1lLmNyZWF0ZTtlLmRlc3Ryb3k9aCgpfWNhdGNoKGspe2lmKG51bGw9PT1mKXRocm93IEVycm9yKHkoMzMwKSk7V2koZixrKX19Zm9yKGg9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1oOylhPWgubmV4dEVmZmVjdCxoLm5leHRFZmZlY3Q9bnVsbCxoLmZsYWdzJjgmJihoLnNpYmxpbmc9XG5udWxsLGguc3RhdGVOb2RlPW51bGwpLGg9YTtYPWI7aWcoKTtyZXR1cm4hMH1mdW5jdGlvbiBnayhhLGIsYyl7Yj1NaShjLGIpO2I9UGkoYSxiLDEpO0FnKGEsYik7Yj1IZygpO2E9S2ooYSwxKTtudWxsIT09YSYmKCRjKGEsMSxiKSxNaihhLGIpKX1cbmZ1bmN0aW9uIFdpKGEsYil7aWYoMz09PWEudGFnKWdrKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7Z2soYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXthPU1pKGIsYSk7dmFyIGU9U2koYyxhLDEpO0FnKGMsZSk7ZT1IZygpO2M9S2ooYywxKTtpZihudWxsIT09YykkYyhjLDEsZSksTWooYyxlKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl0cnl7ZC5jb21wb25lbnREaWRDYXRjaChiLGEpfWNhdGNoKGYpe31icmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBZaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7VT09PWEmJihXJmMpPT09YyYmKDQ9PT1WfHwzPT09ViYmKFcmNjI5MTQ1NjApPT09VyYmNTAwPk8oKS1qaj9RaihhLDApOnVqfD1jKTtNaihhLGIpfWZ1bmN0aW9uIGxqKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9YS5tb2RlLDA9PT0oYiYyKT9iPTE6MD09PShiJjQpP2I9OTk9PT1lZygpPzE6MjooMD09PUdqJiYoR2o9dGopLGI9WWMoNjI5MTQ1NjAmfkdqKSwwPT09YiYmKGI9NDE5NDMwNCkpKTtjPUhnKCk7YT1LaihhLGIpO251bGwhPT1hJiYoJGMoYSxiLGMpLE1qKGEsYykpfXZhciBjaztcbmNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmxhbmVzO2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxOLmN1cnJlbnQpdWc9ITA7ZWxzZSBpZigwIT09KGMmZCkpdWc9MCE9PShhLmZsYWdzJjE2Mzg0KT8hMDohMTtlbHNle3VnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOnJpKGIpO3NoKCk7YnJlYWs7Y2FzZSA1OmdoKGIpO2JyZWFrO2Nhc2UgMTpGZihiLnR5cGUpJiZKZihiKTticmVhaztjYXNlIDQ6ZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO3ZhciBlPWIudHlwZS5fY29udGV4dDtJKG1nLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gdGkoYSxiLGMpO0koUCxQLmN1cnJlbnQmMSk7Yj1oaShhLGIsYyk7cmV0dXJuIG51bGwhPT1cbmI/Yi5zaWJsaW5nOm51bGx9SShQLFAuY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjY0KSl7aWYoZClyZXR1cm4gQWkoYSxiLGMpO2IuZmxhZ3N8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7SShQLFAuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gYi5sYW5lcz0wLG1pKGEsYixjKX1yZXR1cm4gaGkoYSxiLGMpfWVsc2UgdWc9ITE7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1FZihiLE0uY3VycmVudCk7dGcoYixjKTtlPUNoKG51bGwsYixkLGEsZSxjKTtiLmZsYWdzfD0xO2lmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihGZihkKSl7dmFyIGY9ITA7SmYoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7eGcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkdnKGIsZCxnLGEpO2UudXBkYXRlcj1LZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxzPWI7T2coYixkLGEsYyk7Yj1xaShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxmaShudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7YTp7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7XG5hPWIucGVuZGluZ1Byb3BzO2Y9ZS5faW5pdDtlPWYoZS5fcGF5bG9hZCk7Yi50eXBlPWU7Zj1iLnRhZz1oayhlKTthPWxnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWxpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1waShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPWdpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9aWkobnVsbCxiLGUsbGcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih5KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGxpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLHBpKGEsYixkLGUsYyk7Y2FzZSAzOnJpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IoeSgyODIpKTtcbmQ9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt5ZyhhLGIpO0NnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpc2goKSxiPWhpKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZj1lLmh5ZHJhdGUpa2g9cmYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxqaD1iLGY9bGg9ITA7aWYoZil7YT1lLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE7aWYobnVsbCE9YSlmb3IoZT0wO2U8YS5sZW5ndGg7ZSs9MilmPWFbZV0sZi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1hW2UrMV0sdGgucHVzaChmKTtjPVpnKGIsbnVsbCxkLGMpO2ZvcihiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDEwMjQsYz1jLnNpYmxpbmd9ZWxzZSBmaShhLGIsZCxjKSxzaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGdoKGIpLG51bGw9PT1hJiZcbnBoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sbmYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJm5mKGQsZikmJihiLmZsYWdzfD0xNiksb2koYSxiKSxmaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJnBoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdGkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WWcoYixudWxsLGQsYyk6ZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLGdpKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbmMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShtZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPUhlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFOLmN1cnJlbnQpe2I9aGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWspe2c9aC5jaGlsZDtmb3IodmFyIGw9XG5rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9emcoLTEsYyYtYyksbC50YWc9MixBZyhoLGwpKTtoLmxhbmVzfD1jO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJihsLmxhbmVzfD1jKTtzZyhoLnJldHVybixjKTtrLmxhbmVzfD1jO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPWd9ZmkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4sdGcoYixjKSxlPXZnKGUsXG5mLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZmxhZ3N8PTEsZmkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWxnKGUsYi5wZW5kaW5nUHJvcHMpLGY9bGcoZS50eXBlLGYpLGlpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBraShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxiLnRhZz0xLEZmKGQpPyhhPSEwLEpmKGIpKTphPSExLHRnKGIsYyksTWcoYixkLGUpLE9nKGIsZCxlLGMpLHFpKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gQWkoYSxiLGMpO2Nhc2UgMjM6cmV0dXJuIG1pKGEsYixjKTtjYXNlIDI0OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTtcbn07ZnVuY3Rpb24gaWsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmZsYWdzPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIG5oKGEsYixjLGQpe3JldHVybiBuZXcgaWsoYSxiLGMsZCl9ZnVuY3Rpb24gamkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uIGhrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBqaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09QWEpcmV0dXJuIDExO2lmKGE9PT1EYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBUZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPW5oKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFZnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlqaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm4gWGcoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBIYTpnPTg7ZXw9MTY7YnJlYWs7Y2FzZSB3YTpnPTg7ZXw9MTticmVhaztjYXNlIHhhOnJldHVybiBhPW5oKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9eGEsYS50eXBlPXhhLGEubGFuZXM9ZixhO2Nhc2UgQmE6cmV0dXJuIGE9bmgoMTMsYyxiLGUpLGEudHlwZT1CYSxhLmVsZW1lbnRUeXBlPUJhLGEubGFuZXM9ZixhO2Nhc2UgQ2E6cmV0dXJuIGE9bmgoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9Q2EsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gdmkoYyxlLGYsYik7Y2FzZSBKYTpyZXR1cm4gYT1uaCgyNCxjLGIsZSksYS5lbGVtZW50VHlwZT1KYSxhLmxhbmVzPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB5YTpnPTEwO2JyZWFrIGE7Y2FzZSB6YTpnPTk7YnJlYWsgYTtjYXNlIEFhOmc9MTE7YnJlYWsgYTtjYXNlIERhOmc9MTQ7YnJlYWsgYTtjYXNlIEVhOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBGYTpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1uaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIFhnKGEsYixjLGQpe2E9bmgoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHZpKGEsYixjLGQpe2E9bmgoMjMsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIFVnKGEsYixjKXthPW5oKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFdnKGEsYixjKXtiPW5oKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gamsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9WmMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9WmMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9WmMoMCk7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPW51bGx9XG5mdW5jdGlvbiBrayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gbGsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9SGcoKSxnPUlnKGUpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFscztiOntpZihaYihjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEZmKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IoeSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoRmYoaykpe2M9SWYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9Q2Y7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj16ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1cbmQmJihiLmNhbGxiYWNrPWQpO0FnKGUsYik7SmcoZSxnLGYpO3JldHVybiBnfWZ1bmN0aW9uIG1rKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gbmsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIG9rKGEsYil7bmsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJm5rKGEsYil9ZnVuY3Rpb24gcGsoKXtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHFrKGEsYixjKXt2YXIgZD1udWxsIT1jJiZudWxsIT1jLmh5ZHJhdGlvbk9wdGlvbnMmJmMuaHlkcmF0aW9uT3B0aW9ucy5tdXRhYmxlU291cmNlc3x8bnVsbDtjPW5ldyBqayhhLGIsbnVsbCE9YyYmITA9PT1jLmh5ZHJhdGUpO2I9bmgoMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2MuY3VycmVudD1iO2Iuc3RhdGVOb2RlPWM7eGcoYik7YVtmZl09Yy5jdXJyZW50O2NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspe2I9ZFthXTt2YXIgZT1iLl9nZXRWZXJzaW9uO2U9ZShiLl9zb3VyY2UpO251bGw9PWMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2IsZV06Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYixlKX10aGlzLl9pbnRlcm5hbFJvb3Q9Y31cbnFrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7bGsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07cWsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87bGsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW2ZmXT1udWxsfSl9O2Z1bmN0aW9uIHJrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1cbmZ1bmN0aW9uIHNrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgcWsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiB0ayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2guY2FsbChhKX19bGsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1zayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtrLmNhbGwoYSl9fVhqKGZ1bmN0aW9uKCl7bGsoYixnLGEsZSl9KX1yZXR1cm4gbWsoZyl9ZWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDQsYik7b2soYSw0KX19O2ZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw2NzEwODg2NCxiKTtvayhhLDY3MTA4ODY0KX19O1xuZ2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKSxjPUlnKGEpO0pnKGEsYyxiKTtvayhhLGMpfX07aGM9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYigpfTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YWIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHkoOTApKTtXYShkKTthYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9V2o7XG5IYj1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVg7WHw9NDt0cnl7cmV0dXJuIGdnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1g9ZiwwPT09WCYmKHdqKCksaWcoKSl9fTtJYj1mdW5jdGlvbigpezA9PT0oWCY0OSkmJihWaigpLE9qKCkpfTtKYj1mdW5jdGlvbihhLGIpe3ZhciBjPVg7WHw9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX07ZnVuY3Rpb24gdWsoYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4ga2soYSxiLG51bGwsYyl9dmFyIHZrPXtFdmVudHM6W0NiLHVlLERiLEViLEZiLE9qLHtjdXJyZW50OiExfV19LHdrPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE3LjAuMVwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgeGs9e2J1bmRsZVR5cGU6d2suYnVuZGxlVHlwZSx2ZXJzaW9uOndrLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp3ay5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOndrLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1jYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2suZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxucGssZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB5az1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXlrLmlzRGlzYWJsZWQmJnlrLnN1cHBvcnRzRmliZXIpdHJ5e0xmPXlrLmluamVjdCh4ayksTWY9eWt9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXZrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPXVrO1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih5KDE4OCkpO3Rocm93IEVycm9yKHkoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9Y2MoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe3ZhciBjPVg7aWYoMCE9PShjJjQ4KSlyZXR1cm4gYShiKTtYfD0xO3RyeXtpZihhKXJldHVybiBnZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtYPWMsaWcoKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcmsoYSkpdGhyb3cgRXJyb3IoeSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFhqKGZ1bmN0aW9uKCl7dGsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW2ZmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9V2o7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdWsoYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFyayhjKSl0aHJvdyBFcnJvcih5KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHkoMzgpKTtyZXR1cm4gdGsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIga2V5TGlzdCA9IE9iamVjdC5rZXlzO1xudmFyIGhhc1Byb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGhhc0VsZW1lbnRUeXBlID0gdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG5mdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gIC8vIGZhc3QtZGVlcC1lcXVhbCBpbmRleC5qcyAyLjAuMVxuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiA9PSAnb2JqZWN0Jykge1xuICAgIHZhciBhcnJBID0gaXNBcnJheShhKVxuICAgICAgLCBhcnJCID0gaXNBcnJheShiKVxuICAgICAgLCBpXG4gICAgICAsIGxlbmd0aFxuICAgICAgLCBrZXk7XG5cbiAgICBpZiAoYXJyQSAmJiBhcnJCKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgICAgaWYgKCFlcXVhbChhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGFyckEgIT0gYXJyQikgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIGRhdGVBID0gYSBpbnN0YW5jZW9mIERhdGVcbiAgICAgICwgZGF0ZUIgPSBiIGluc3RhbmNlb2YgRGF0ZTtcbiAgICBpZiAoZGF0ZUEgIT0gZGF0ZUIpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZGF0ZUEgJiYgZGF0ZUIpIHJldHVybiBhLmdldFRpbWUoKSA9PSBiLmdldFRpbWUoKTtcblxuICAgIHZhciByZWdleHBBID0gYSBpbnN0YW5jZW9mIFJlZ0V4cFxuICAgICAgLCByZWdleHBCID0gYiBpbnN0YW5jZW9mIFJlZ0V4cDtcbiAgICBpZiAocmVnZXhwQSAhPSByZWdleHBCKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHJlZ2V4cEEgJiYgcmVnZXhwQikgcmV0dXJuIGEudG9TdHJpbmcoKSA9PSBiLnRvU3RyaW5nKCk7XG5cbiAgICB2YXIga2V5cyA9IGtleUxpc3QoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG5cbiAgICBpZiAobGVuZ3RoICE9PSBrZXlMaXN0KGIpLmxlbmd0aClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgIGlmICghaGFzUHJvcC5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gZW5kIGZhc3QtZGVlcC1lcXVhbFxuXG4gICAgLy8gc3RhcnQgcmVhY3QtZmFzdC1jb21wYXJlXG4gICAgLy8gY3VzdG9tIGhhbmRsaW5nIGZvciBET00gZWxlbWVudHNcbiAgICBpZiAoaGFzRWxlbWVudFR5cGUgJiYgYSBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgYiBpbnN0YW5jZW9mIEVsZW1lbnQpXG4gICAgICByZXR1cm4gYSA9PT0gYjtcblxuICAgIC8vIGN1c3RvbSBoYW5kbGluZyBmb3IgUmVhY3RcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoa2V5ID09PSAnX293bmVyJyAmJiBhLiQkdHlwZW9mKSB7XG4gICAgICAgIC8vIFJlYWN0LXNwZWNpZmljOiBhdm9pZCB0cmF2ZXJzaW5nIFJlYWN0IGVsZW1lbnRzJyBfb3duZXIuXG4gICAgICAgIC8vICBfb3duZXIgY29udGFpbnMgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICAgICAgICAvLyBhbmQgaXMgbm90IG5lZWRlZCB3aGVuIGNvbXBhcmluZyB0aGUgYWN0dWFsIGVsZW1lbnRzIChhbmQgbm90IHRoZWlyIG93bmVycylcbiAgICAgICAgLy8gLiQkdHlwZW9mIGFuZCAuX3N0b3JlIG9uIGp1c3QgcmVhc29uYWJsZSBtYXJrZXJzIG9mIGEgcmVhY3QgZWxlbWVudFxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFsbCBvdGhlciBwcm9wZXJ0aWVzIHNob3VsZCBiZSB0cmF2ZXJzZWQgYXMgdXN1YWxcbiAgICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZW5kIHJlYWN0LWZhc3QtY29tcGFyZVxuXG4gICAgLy8gZmFzdC1kZWVwLWVxdWFsIGluZGV4LmpzIDIuMC4xXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gYSAhPT0gYSAmJiBiICE9PSBiO1xufVxuLy8gZW5kIGZhc3QtZGVlcC1lcXVhbFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4cG9ydGVkRXF1YWwoYSwgYikge1xuICB0cnkge1xuICAgIHJldHVybiBlcXVhbChhLCBiKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoKGVycm9yLm1lc3NhZ2UgJiYgZXJyb3IubWVzc2FnZS5tYXRjaCgvc3RhY2t8cmVjdXJzaW9uL2kpKSB8fCAoZXJyb3IubnVtYmVyID09PSAtMjE0NjgyODI2MCkpIHtcbiAgICAgIC8vIHdhcm4gb24gY2lyY3VsYXIgcmVmZXJlbmNlcywgZG9uJ3QgY3Jhc2hcbiAgICAgIC8vIGJyb3dzZXJzIGdpdmUgdGhpcyBkaWZmZXJlbnQgZXJyb3JzIG5hbWUgYW5kIG1lc3NhZ2VzOlxuICAgICAgLy8gY2hyb21lL3NhZmFyaTogXCJSYW5nZUVycm9yXCIsIFwiTWF4aW11bSBjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIlxuICAgICAgLy8gZmlyZWZveDogXCJJbnRlcm5hbEVycm9yXCIsIHRvbyBtdWNoIHJlY3Vyc2lvblwiXG4gICAgICAvLyBlZGdlOiBcIkVycm9yXCIsIFwiT3V0IG9mIHN0YWNrIHNwYWNlXCJcbiAgICAgIGNvbnNvbGUud2FybignV2FybmluZzogcmVhY3QtZmFzdC1jb21wYXJlIGRvZXMgbm90IGhhbmRsZSBjaXJjdWxhciByZWZlcmVuY2VzLicsIGVycm9yLm5hbWUsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBzb21lIG90aGVyIGVycm9yLiB3ZSBzaG91bGQgZGVmaW5pdGVseSBrbm93IGFib3V0IHRoZXNlXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49NjAxMDMscD02MDEwNjtleHBvcnRzLkZyYWdtZW50PTYwMTA3O2V4cG9ydHMuU3RyaWN0TW9kZT02MDEwODtleHBvcnRzLlByb2ZpbGVyPTYwMTE0O3ZhciBxPTYwMTA5LHI9NjAxMTAsdD02MDExMjtleHBvcnRzLlN1c3BlbnNlPTYwMTEzO3ZhciB1PTYwMTE1LHY9NjAxMTY7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgdz1TeW1ib2wuZm9yO249dyhcInJlYWN0LmVsZW1lbnRcIik7cD13KFwicmVhY3QucG9ydGFsXCIpO2V4cG9ydHMuRnJhZ21lbnQ9dyhcInJlYWN0LmZyYWdtZW50XCIpO2V4cG9ydHMuU3RyaWN0TW9kZT13KFwicmVhY3Quc3RyaWN0X21vZGVcIik7ZXhwb3J0cy5Qcm9maWxlcj13KFwicmVhY3QucHJvZmlsZXJcIik7cT13KFwicmVhY3QucHJvdmlkZXJcIik7cj13KFwicmVhY3QuY29udGV4dFwiKTt0PXcoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtleHBvcnRzLlN1c3BlbnNlPXcoXCJyZWFjdC5zdXNwZW5zZVwiKTt1PXcoXCJyZWFjdC5tZW1vXCIpO3Y9dyhcInJlYWN0LmxhenlcIil9dmFyIHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24geShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eCYmYVt4XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIHooYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgQT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQj17fTtmdW5jdGlvbiBDKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9Qy5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtDLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3Ioeig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Qy5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBEKCl7fUQucHJvdG90eXBlPUMucHJvdG90eXBlO2Z1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX12YXIgRj1FLnByb3RvdHlwZT1uZXcgRDtGLmNvbnN0cnVjdG9yPUU7bChGLEMucHJvdG90eXBlKTtGLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBHPXtjdXJyZW50Om51bGx9LEg9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxJPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBKKGEsYixjKXt2YXIgZSxkPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUguY2FsbChiLGUpJiYhSS5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1kW2VdJiYoZFtlXT1nW2VdKTtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6ZCxfb3duZXI6Ry5jdXJyZW50fX1cbmZ1bmN0aW9uIEsoYSxiKXtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIEwoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PW59ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBNPS9cXC8rL2c7ZnVuY3Rpb24gTihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIE8oYSxiLGMsZSxkKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbjpjYXNlIHA6aD0hMH19aWYoaClyZXR1cm4gaD1hLGQ9ZChoKSxhPVwiXCI9PT1lP1wiLlwiK04oaCwwKTplLEFycmF5LmlzQXJyYXkoZCk/KGM9XCJcIixudWxsIT1hJiYoYz1hLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIiksTyhkLGIsYyxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWQmJihMKGQpJiYoZD1LKGQsYysoIWQua2V5fHxoJiZoLmtleT09PWQua2V5P1wiXCI6KFwiXCIrZC5rZXkpLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChkKSksMTtoPTA7ZT1cIlwiPT09ZT9cIi5cIjplK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBnPVxuMDtnPGEubGVuZ3RoO2crKyl7az1hW2ddO3ZhciBmPWUrTihrLGcpO2grPU8oayxiLGMsZixkKX1lbHNlIGlmKGY9eShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZStOKGssZysrKSxoKz1PKGssYixjLGYsZCk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVwiXCIrYSxFcnJvcih6KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpKTtyZXR1cm4gaH1mdW5jdGlvbiBQKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdLGQ9MDtPKGEsZSxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChjLGEsZCsrKX0pO3JldHVybiBlfVxuZnVuY3Rpb24gUShhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2EuX3N0YXR1cz0wO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0O3Rocm93IGEuX3Jlc3VsdDt9dmFyIFI9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gUygpe3ZhciBhPVIuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcih6KDMyMSkpO3JldHVybiBhfXZhciBUPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlIsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3RyYW5zaXRpb246MH0sUmVhY3RDdXJyZW50T3duZXI6RyxJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O1xuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlAsZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7UChhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGMpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1AoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBQKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIUwoYSkpdGhyb3cgRXJyb3IoeigxNDMpKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUM7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUU7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1UO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKHooMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUcuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSC5jYWxsKGIsZikmJiFJLmhhc093blByb3BlcnR5KGYpJiYoZVtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtmb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmsscHJvcHM6ZSxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnIsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjpxLF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1KO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp0LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1MO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6UX19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp1LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4yMC4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX1cbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciB0PW51bGwsdT1udWxsLHc9ZnVuY3Rpb24oKXtpZihudWxsIT09dCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0KCEwLGEpO3Q9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHcsMCksYjt9fTtmPWZ1bmN0aW9uKGEpe251bGwhPT10P3NldFRpbWVvdXQoZiwwLGEpOih0PWEsc2V0VGltZW91dCh3LDApKX07Zz1mdW5jdGlvbihhLGIpe3U9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2s9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgeD13aW5kb3cuc2V0VGltZW91dCx5PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgej1cbndpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB6JiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKX12YXIgQT0hMSxCPW51bGwsQz0tMSxEPTUsRT0wO2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49XG5FfTtrPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpEPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgRj1uZXcgTWVzc2FnZUNoYW5uZWwsRz1GLnBvcnQyO0YucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7aWYobnVsbCE9PUIpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7RT1hK0Q7dHJ5e0IoITAsYSk/Ry5wb3N0TWVzc2FnZShudWxsKTooQT0hMSxCPW51bGwpfWNhdGNoKGIpe3Rocm93IEcucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQT0hMX07Zj1mdW5jdGlvbihhKXtCPWE7QXx8KEE9ITAsRy5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtDPVxueChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eShDKTtDPS0xfX1mdW5jdGlvbiBIKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEkoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEooYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIEsoYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SShuLGMpKXZvaWQgMCE9PXImJjA+SShyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SShyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSShhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTD1bXSxNPVtdLE49MSxPPW51bGwsUD0zLFE9ITEsUj0hMSxTPSExO1xuZnVuY3Rpb24gVChhKXtmb3IodmFyIGI9SihNKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKUsoTSk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlLKE0pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSChMLGIpO2Vsc2UgYnJlYWs7Yj1KKE0pfX1mdW5jdGlvbiBVKGEpe1M9ITE7VChhKTtpZighUilpZihudWxsIT09SihMKSlSPSEwLGYoVik7ZWxzZXt2YXIgYj1KKE0pO251bGwhPT1iJiZnKFUsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gVihhLGIpe1I9ITE7UyYmKFM9ITEsaCgpKTtRPSEwO3ZhciBjPVA7dHJ5e1QoYik7Zm9yKE89SihMKTtudWxsIT09TyYmKCEoTy5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQoKSk7KXt2YXIgZD1PLmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXtPLmNhbGxiYWNrPW51bGw7UD1PLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChPLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/Ty5jYWxsYmFjaz1lOk89PT1KKEwpJiZLKEwpO1QoYil9ZWxzZSBLKEwpO089SihMKX1pZihudWxsIT09Tyl2YXIgbT0hMDtlbHNle3ZhciBuPUooTSk7bnVsbCE9PW4mJmcoVSxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7Tz1udWxsLFA9YyxRPSExfX12YXIgVz1rO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1J8fFF8fChSPSEwLGYoVikpfTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gSihMKX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1XO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6TisrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsSChNLGEpLG51bGw9PT1KKEwpJiZhPT09SihNKSYmKFM/aCgpOlM9ITAsZyhVLGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxIKEwsYSksUnx8UXx8KFI9ITAsZihWKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSAmJiBpdCAhPT0gbnVsbCkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArIFN0cmluZyhpdCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xuXG4vLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGNoYXJBdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgJyArIChuYW1lID8gbmFtZSArICcgJyA6ICcnKSArICdpbnZvY2F0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tdHlwZWQtYXJyYXlzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRGF0YVZpZXcgIT09ICd1bmRlZmluZWQnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5hdGl2ZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXgnKTtcbnZhciBJRUVFNzU0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llZWU3NTQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZpbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGgnO1xudmFyIFdST05HX0lOREVYID0gJ1dyb25nIGluZGV4JztcbnZhciBOYXRpdmVBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICRBcnJheUJ1ZmZlciA9IE5hdGl2ZUFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyICREYXRhVmlld1Byb3RvdHlwZSA9ICREYXRhVmlldyAmJiAkRGF0YVZpZXdbUFJPVE9UWVBFXTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcblxudmFyIHBhY2tJRUVFNzU0ID0gSUVFRTc1NC5wYWNrO1xudmFyIHVucGFja0lFRUU3NTQgPSBJRUVFNzU0LnVucGFjaztcblxudmFyIHBhY2tJbnQ4ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkZdO1xufTtcblxudmFyIHBhY2tJbnQxNiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIFtudW1iZXIgJiAweEZGLCBudW1iZXIgPj4gOCAmIDB4RkZdO1xufTtcblxudmFyIHBhY2tJbnQzMiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIFtudW1iZXIgJiAweEZGLCBudW1iZXIgPj4gOCAmIDB4RkYsIG51bWJlciA+PiAxNiAmIDB4RkYsIG51bWJlciA+PiAyNCAmIDB4RkZdO1xufTtcblxudmFyIHVucGFja0ludDMyID0gZnVuY3Rpb24gKGJ1ZmZlcikge1xuICByZXR1cm4gYnVmZmVyWzNdIDw8IDI0IHwgYnVmZmVyWzJdIDw8IDE2IHwgYnVmZmVyWzFdIDw8IDggfCBidWZmZXJbMF07XG59O1xuXG52YXIgcGFja0Zsb2F0MzIgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChudW1iZXIsIDIzLCA0KTtcbn07XG5cbnZhciBwYWNrRmxvYXQ2NCA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KG51bWJlciwgNTIsIDgpO1xufTtcblxudmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChDb25zdHJ1Y3Rvciwga2V5KSB7XG4gIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yW1BST1RPVFlQRV0sIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcylba2V5XTsgfSB9KTtcbn07XG5cbnZhciBnZXQgPSBmdW5jdGlvbiAodmlldywgY291bnQsIGluZGV4LCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KGluZGV4KTtcbiAgdmFyIHN0b3JlID0gZ2V0SW50ZXJuYWxTdGF0ZSh2aWV3KTtcbiAgaWYgKGludEluZGV4ICsgY291bnQgPiBzdG9yZS5ieXRlTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIGJ5dGVzID0gZ2V0SW50ZXJuYWxTdGF0ZShzdG9yZS5idWZmZXIpLmJ5dGVzO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHN0b3JlLmJ5dGVPZmZzZXQ7XG4gIHZhciBwYWNrID0gYnl0ZXMuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgY291bnQpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59O1xuXG52YXIgc2V0ID0gZnVuY3Rpb24gKHZpZXcsIGNvdW50LCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgoaW5kZXgpO1xuICB2YXIgc3RvcmUgPSBnZXRJbnRlcm5hbFN0YXRlKHZpZXcpO1xuICBpZiAoaW50SW5kZXggKyBjb3VudCA+IHN0b3JlLmJ5dGVMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgYnl0ZXMgPSBnZXRJbnRlcm5hbFN0YXRlKHN0b3JlLmJ1ZmZlcikuYnl0ZXM7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgc3RvcmUuYnl0ZU9mZnNldDtcbiAgdmFyIHBhY2sgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykgYnl0ZXNbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogY291bnQgLSBpIC0gMV07XG59O1xuXG5pZiAoIU5BVElWRV9BUlJBWV9CVUZGRVIpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICBieXRlczogYXJyYXlGaWxsLmNhbGwobmV3IEFycmF5KGJ5dGVMZW5ndGgpLCAwKSxcbiAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGhcbiAgICB9KTtcbiAgICBpZiAoIURFU0NSSVBUT1JTKSB0aGlzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGdldEludGVybmFsU3RhdGUoYnVmZmVyKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIGJ1ZmZlcjogYnVmZmVyLFxuICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aCxcbiAgICAgIGJ5dGVPZmZzZXQ6IG9mZnNldFxuICAgIH0pO1xuICAgIGlmICghREVTQ1JJUFRPUlMpIHtcbiAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgICAgIHRoaXMuYnl0ZU9mZnNldCA9IG9mZnNldDtcbiAgICB9XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgJ2J5dGVMZW5ndGgnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCAnYnVmZmVyJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J5dGVMZW5ndGgnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCAnYnl0ZU9mZnNldCcpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG4gICAgfSxcbiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0ludDMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0ludDMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpLCAyMyk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCksIDUyKTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSW50OCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0ludDgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJbnQxNiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0ludDE2LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0ludDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSW50MzIsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0Zsb2F0MzIsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Zsb2F0NjQsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xuICBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBOYXRpdmVBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgTmF0aXZlQXJyYXlCdWZmZXIoLTEpO1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKCk7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKDEuNSk7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKE5hTik7XG4gICAgcmV0dXJuIE5hdGl2ZUFycmF5QnVmZmVyLm5hbWUgIT0gQVJSQVlfQlVGRkVSO1xuICB9KSkge1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIpO1xuICAgICAgcmV0dXJuIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG90eXBlID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBOYXRpdmVBcnJheUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvciAodmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZUFycmF5QnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoJEFycmF5QnVmZmVyLCBrZXksIE5hdGl2ZUFycmF5QnVmZmVyW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBBcnJheUJ1ZmZlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuXG4gIC8vIFdlYktpdCBidWcgLSB0aGUgc2FtZSBwYXJlbnQgcHJvdG90eXBlIGZvciB0eXBlZCBhcnJheXMgYW5kIGRhdGEgdmlld1xuICBpZiAoc2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoJERhdGFWaWV3UHJvdG90eXBlKSAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgc2V0UHJvdG90eXBlT2YoJERhdGFWaWV3UHJvdG90eXBlLCBPYmplY3RQcm90b3R5cGUpO1xuICB9XG5cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB0ZXN0VmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1Byb3RvdHlwZS5zZXRJbnQ4O1xuICB0ZXN0Vmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB0ZXN0Vmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodGVzdFZpZXcuZ2V0SW50OCgwKSB8fCAhdGVzdFZpZXcuZ2V0SW50OCgxKSkgcmVkZWZpbmVBbGwoJERhdGFWaWV3UHJvdG90eXBlLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG59XG5cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIsXG4gIERhdGFWaWV3OiAkRGF0YVZpZXdcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsbGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWxsXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUgKGVuZFBvcyA+IGluZGV4KSBPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2ZvckVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbm1vZHVsZS5leHBvcnRzID0gIVNUUklDVF9NRVRIT0QgPyBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWZvcmVhY2ggLS0gc2FmZVxufSA6IFtdLmZvckVhY2g7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gIC8vIGlmIHRoZSB0YXJnZXQgaXMgbm90IGl0ZXJhYmxlIG9yIGl0J3MgYW4gYXJyYXkgd2l0aCB0aGUgZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBhIHNpbXBsZSBjYXNlXG4gIGlmIChpdGVyYXRvck1ldGhvZCAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYXRvck1ldGhvZC5jYWxsKE8pO1xuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgIHJlc3VsdCA9IG5ldyBDKCk7XG4gICAgZm9yICg7IShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZTtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XTtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuICBpbmNsdWRlczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4LCBmaWx0ZXJPdXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgSVNfRklMVEVSX09VVCA9IFRZUEUgPT0gNztcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNyZWF0ZSA9IHNwZWNpZmljQ3JlYXRlIHx8IGFycmF5U3BlY2llc0NyZWF0ZTtcbiAgICB2YXIgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSIHx8IElTX0ZJTFRFUl9PVVQgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2Ugc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICAgICAgY2FzZSA3OiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlck91dFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiB0YXJnZXQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICBmb3JFYWNoOiBjcmVhdGVNZXRob2QoMCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuICBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuICBzb21lOiBjcmVhdGVNZXRob2QoMyksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4gIGZpbmQ6IGNyZWF0ZU1ldGhvZCg1KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcbiAgZmluZEluZGV4OiBjcmVhdGVNZXRob2QoNiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyT3V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZmlsdGVyaW5nXG4gIGZpbHRlck91dDogY3JlYXRlTWV0aG9kKDcpXG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAvLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICByZXR1cm4gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCxuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyB0aHJvdyAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgcmVkdWNlLCByZWR1Y2VSaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX1JJR0hUKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYXJndW1lbnRzTGVuZ3RoLCBtZW1vKSB7XG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gSVNfUklHSFQgPyBsZW5ndGggLSAxIDogMDtcbiAgICB2YXIgaSA9IElTX1JJR0hUID8gLTEgOiAxO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPCAyKSB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgICBpbmRleCArPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBpZiAoSVNfUklHSFQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoO0lTX1JJR0hUID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VcbiAgbGVmdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZXJpZ2h0XG4gIHJpZ2h0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20sIG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvY29sbGVjdGlvbi1tZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgvKiAuLi5lbGVtZW50cyAqLykge1xuICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciBhZGRlciA9IGFGdW5jdGlvbihzZXQuYWRkKTtcbiAgZm9yICh2YXIgayA9IDAsIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgIGFkZGVyLmNhbGwoc2V0LCBhcmd1bWVudHNba10pO1xuICB9XG4gIHJldHVybiBzZXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2NvbGxlY3Rpb24tbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLyogLi4uZWxlbWVudHMgKi8pIHtcbiAgdmFyIGNvbGxlY3Rpb24gPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlbW92ZXIgPSBhRnVuY3Rpb24oY29sbGVjdGlvblsnZGVsZXRlJ10pO1xuICB2YXIgYWxsRGVsZXRlZCA9IHRydWU7XG4gIHZhciB3YXNEZWxldGVkO1xuICBmb3IgKHZhciBrID0gMCwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgayA8IGxlbjsgaysrKSB7XG4gICAgd2FzRGVsZXRlZCA9IHJlbW92ZXIuY2FsbChjb2xsZWN0aW9uLCBhcmd1bWVudHNba10pO1xuICAgIGFsbERlbGV0ZWQgPSBhbGxEZWxldGVkICYmIHdhc0RlbGV0ZWQ7XG4gIH1cbiAgcmV0dXJuICEhYWxsRGVsZXRlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykuZmFzdEtleTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgaW50ZXJuYWxTdGF0ZUdldHRlckZvciA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICB0eXBlOiBDT05TVFJVQ1RPUl9OQU1FLFxuICAgICAgICBpbmRleDogY3JlYXRlKG51bGwpLFxuICAgICAgICBmaXJzdDogdW5kZWZpbmVkLFxuICAgICAgICBsYXN0OiB1bmRlZmluZWQsXG4gICAgICAgIHNpemU6IDBcbiAgICAgIH0pO1xuICAgICAgaWYgKCFERVNDUklQVE9SUykgdGhhdC5zaXplID0gMDtcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICB9KTtcblxuICAgIHZhciBnZXRJbnRlcm5hbFN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTtcblxuICAgIHZhciBkZWZpbmUgPSBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICB2YXIgcHJldmlvdXMsIGluZGV4O1xuICAgICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgZW50cnkudmFsdWUgPSB2YWx1ZTtcbiAgICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLmxhc3QgPSBlbnRyeSA9IHtcbiAgICAgICAgICBpbmRleDogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksXG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIHByZXZpb3VzOiBwcmV2aW91cyA9IHN0YXRlLmxhc3QsXG4gICAgICAgICAgbmV4dDogdW5kZWZpbmVkLFxuICAgICAgICAgIHJlbW92ZWQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGlmICghc3RhdGUuZmlyc3QpIHN0YXRlLmZpcnN0ID0gZW50cnk7XG4gICAgICAgIGlmIChwcmV2aW91cykgcHJldmlvdXMubmV4dCA9IGVudHJ5O1xuICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUrKztcbiAgICAgICAgZWxzZSB0aGF0LnNpemUrKztcbiAgICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSBzdGF0ZS5pbmRleFtpbmRleF0gPSBlbnRyeTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfTtcblxuICAgIHZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAvLyBmYXN0IGNhc2VcbiAgICAgIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgICAgIHZhciBlbnRyeTtcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gc3RhdGUuaW5kZXhbaW5kZXhdO1xuICAgICAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gICAgICBmb3IgKGVudHJ5ID0gc3RhdGUuZmlyc3Q7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm5leHQpIHtcbiAgICAgICAgaWYgKGVudHJ5LmtleSA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgICAgdmFyIGRhdGEgPSBzdGF0ZS5pbmRleDtcbiAgICAgICAgdmFyIGVudHJ5ID0gc3RhdGUuZmlyc3Q7XG4gICAgICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wcmV2aW91cykgZW50cnkucHJldmlvdXMgPSBlbnRyeS5wcmV2aW91cy5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmluZGV4XTtcbiAgICAgICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZmlyc3QgPSBzdGF0ZS5sYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUgPSAwO1xuICAgICAgICBlbHNlIHRoYXQuc2l6ZSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubmV4dDtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5pbmRleFtlbnRyeS5pbmRleF07XG4gICAgICAgICAgZW50cnkucmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubmV4dCA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucHJldmlvdXMgPSBwcmV2O1xuICAgICAgICAgIGlmIChzdGF0ZS5maXJzdCA9PSBlbnRyeSkgc3RhdGUuZmlyc3QgPSBuZXh0O1xuICAgICAgICAgIGlmIChzdGF0ZS5sYXN0ID09IGVudHJ5KSBzdGF0ZS5sYXN0ID0gcHJldjtcbiAgICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUtLTtcbiAgICAgICAgICBlbHNlIHRoYXQuc2l6ZS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uZXh0IDogc3RhdGUuZmlyc3QpIHtcbiAgICAgICAgICBib3VuZEZ1bmN0aW9uKGVudHJ5LnZhbHVlLCBlbnRyeS5rZXksIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yZW1vdmVkKSBlbnRyeSA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBJU19NQVAgPyB7XG4gICAgICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnZhbHVlO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gOiB7XG4gICAgICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNpemU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCkge1xuICAgIHZhciBJVEVSQVRPUl9OQU1FID0gQ09OU1RSVUNUT1JfTkFNRSArICcgSXRlcmF0b3InO1xuICAgIHZhciBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgdmFyIGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoSVRFUkFUT1JfTkFNRSk7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgIGRlZmluZUl0ZXJhdG9yKEMsIENPTlNUUlVDVE9SX05BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICAgIHR5cGU6IElURVJBVE9SX05BTUUsXG4gICAgICAgIHRhcmdldDogaXRlcmF0ZWQsXG4gICAgICAgIHN0YXRlOiBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZShpdGVyYXRlZCksXG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIGxhc3Q6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICAgICAgdmFyIGVudHJ5ID0gc3RhdGUubGFzdDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCFzdGF0ZS50YXJnZXQgfHwgIShzdGF0ZS5sYXN0ID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5zdGF0ZS5maXJzdCkpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7IHZhbHVlOiBlbnRyeS5rZXksIGRvbmU6IGZhbHNlIH07XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IGVudHJ5LnZhbHVlLCBkb25lOiBmYWxzZSB9O1xuICAgICAgcmV0dXJuIHsgdmFsdWU6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXSwgZG9uZTogZmFsc2UgfTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoQ09OU1RSVUNUT1JfTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2Vha0RhdGEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5nZXRXZWFrRGF0YTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgQXJyYXlJdGVyYXRpb25Nb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgaW50ZXJuYWxTdGF0ZUdldHRlckZvciA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yO1xudmFyIGZpbmQgPSBBcnJheUl0ZXJhdGlvbk1vZHVsZS5maW5kO1xudmFyIGZpbmRJbmRleCA9IEFycmF5SXRlcmF0aW9uTW9kdWxlLmZpbmRJbmRleDtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgcmV0dXJuIHN0b3JlLmZyb3plbiB8fCAoc3RvcmUuZnJvemVuID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xuXG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbnRyaWVzID0gW107XG59O1xuXG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGZpbmQoc3RvcmUuZW50cmllcywgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblxuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuZW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gZmluZEluZGV4KHRoaXMuZW50cmllcywgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7XG4gICAgICAgIHR5cGU6IENPTlNUUlVDVE9SX05BTUUsXG4gICAgICAgIGlkOiBpZCsrLFxuICAgICAgICBmcm96ZW46IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUoc3RhdGUpLnNldChrZXksIHZhbHVlKTtcbiAgICAgIGVsc2UgZGF0YVtzdGF0ZS5pZF0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgc3RhdGUuaWQpICYmIGRlbGV0ZSBkYXRhW3N0YXRlLmlkXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgc3RhdGUuaWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIElTX01BUCA/IHtcbiAgICAgIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGtleSk7XG4gICAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5nZXQoa2V5KTtcbiAgICAgICAgICByZXR1cm4gZGF0YSA/IGRhdGFbc3RhdGUuaWRdIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSA6IHtcbiAgICAgIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywgdmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIEM7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FLCB3cmFwcGVyLCBjb21tb24pIHtcbiAgdmFyIElTX01BUCA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignTWFwJykgIT09IC0xO1xuICB2YXIgSVNfV0VBSyA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignV2VhaycpICE9PSAtMTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIE5hdGl2ZUNvbnN0cnVjdG9yID0gZ2xvYmFsW0NPTlNUUlVDVE9SX05BTUVdO1xuICB2YXIgTmF0aXZlUHJvdG90eXBlID0gTmF0aXZlQ29uc3RydWN0b3IgJiYgTmF0aXZlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICB2YXIgQ29uc3RydWN0b3IgPSBOYXRpdmVDb25zdHJ1Y3RvcjtcbiAgdmFyIGV4cG9ydGVkID0ge307XG5cbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgbmF0aXZlTWV0aG9kID0gTmF0aXZlUHJvdG90eXBlW0tFWV07XG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvdG90eXBlLCBLRVksXG4gICAgICBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgbmF0aXZlTWV0aG9kLmNhbGwodGhpcywgdmFsdWUgPT09IDAgPyAwIDogdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gOiBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gZmFsc2UgOiBuYXRpdmVNZXRob2QuY2FsbCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gdW5kZWZpbmVkIDogbmF0aXZlTWV0aG9kLmNhbGwodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IGZhbHNlIDogbmF0aXZlTWV0aG9kLmNhbGwodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgbmF0aXZlTWV0aG9kLmNhbGwodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIHZhciBSRVBMQUNFID0gaXNGb3JjZWQoXG4gICAgQ09OU1RSVUNUT1JfTkFNRSxcbiAgICB0eXBlb2YgTmF0aXZlQ29uc3RydWN0b3IgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgTmF0aXZlUHJvdG90eXBlLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpLmVudHJpZXMoKS5uZXh0KCk7XG4gICAgfSkpXG4gICk7XG5cbiAgaWYgKFJFUExBQ0UpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIENvbnN0cnVjdG9yID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpO1xuICAgIEludGVybmFsTWV0YWRhdGFNb2R1bGUuUkVRVUlSRUQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKGlzRm9yY2VkKENPTlNUUlVDVE9SX05BTUUsIHRydWUpKSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9IGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHsgbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKGl0ZXJhYmxlKTsgfSk7XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgTmF0aXZlQ29uc3RydWN0b3IoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcblxuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQ29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uIChkdW1teSwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZShkdW1teSwgQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpLCBkdW1teSwgQ29uc3RydWN0b3IpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBOYXRpdmVQcm90b3R5cGU7XG4gICAgICBOYXRpdmVQcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcbiAgICB9XG5cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG5cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcblxuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgTmF0aXZlUHJvdG90eXBlLmNsZWFyKSBkZWxldGUgTmF0aXZlUHJvdG90eXBlLmNsZWFyO1xuICB9XG5cbiAgZXhwb3J0ZWRbQ09OU1RSVUNUT1JfTkFNRV0gPSBDb25zdHJ1Y3RvcjtcbiAgJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBDb25zdHJ1Y3RvciAhPSBOYXRpdmVDb25zdHJ1Y3RvciB9LCBleHBvcnRlZCk7XG5cbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQ29uc3RydWN0b3I7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzKHRhcmdldCwga2V5KSkgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHZhciByZWdleHAgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgIHRyeSB7XG4gICAgICByZWdleHBbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gICAgfSBjYXRjaCAoZXJyb3IyKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gZmFsc2U7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0cHJvdG90eXBlb2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKGtleSk7XG4gIGlmIChwcm9wZXJ0eUtleSBpbiBvYmplY3QpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBwcm9wZXJ0eUtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W3Byb3BlcnR5S2V5XSA9IHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmF0aXZlSXRlcmF0b3IuY2FsbCh0aGlzKTsgfTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7XG4gIGlmICghaGFzKFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwge1xuICAgIHZhbHVlOiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoTkFNRSlcbiAgfSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIERldGVjdCBJRTgncyBpbmNvbXBsZXRlIGRlZmluZVByb3BlcnR5IGltcGxlbWVudGF0aW9uXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSlbMV0gIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JztcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvKD86aXBob25lfGlwb2R8aXBhZCkuKmFwcGxld2Via2l0L2kudGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3NvZihnbG9iYWwucHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC93ZWIwcyg/IS4qY2hyb21lKS9pLnRlc3QodXNlckFnZW50KTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgdmVyc2lvbiA9IG1hdGNoWzBdIDwgNCA/IDEgOiBtYXRjaFswXSArIG1hdGNoWzFdO1xufSBlbHNlIGlmICh1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSBtYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb24gJiYgK3ZlcnNpb247XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcblxuLypcbiAgb3B0aW9ucy50YXJnZXQgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3RcbiAgb3B0aW9ucy5nbG9iYWwgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdFxuICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnByb3RvICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnJlYWwgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcbiAgb3B0aW9ucy5iaW5kICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMud3JhcCAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuICBvcHRpb25zLnNoYW0gICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICBvcHRpb25zLmVudW1lcmFibGUgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHlcbiAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxuLy8gSUUgPD0gMTEgcmVwbGFjZXMgJDAgd2l0aCB0aGUgd2hvbGUgbWF0Y2gsIGFzIGlmIGl0IHdhcyAkJlxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjAyNDY2Ni9nZXR0aW5nLWllLXRvLXJlcGxhY2UtYS1yZWdleC13aXRoLXRoZS1saXRlcmFsLXN0cmluZy0wXG52YXIgUkVQTEFDRV9LRUVQU18kMCA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvcHJlZmVyLWVzY2FwZS1yZXBsYWNlbWVudC1kb2xsYXItY2hhciAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gJ2EnLnJlcGxhY2UoLy4vLCAnJDAnKSA9PT0gJyQwJztcbn0pKCk7XG5cbnZhciBSRVBMQUNFID0gd2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG4vLyBTYWZhcmkgPD0gMTMuMC4zKD8pIHN1YnN0aXR1dGVzIG50aCBjYXB0dXJlIHdoZXJlIG4+bSB3aXRoIGFuIGVtcHR5IHN0cmluZ1xudmFyIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKC8uL1tSRVBMQUNFXSkge1xuICAgIHJldHVybiAvLi9bUkVQTEFDRV0oJ2EnLCAnJDAnKSA9PT0gJyc7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSkoKTtcblxuLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4vLyBXZWV4IEpTIGhhcyBmcm96ZW4gYnVpbHQtaW4gcHJvdG90eXBlcywgc28gdXNlIHRyeSAvIGNhdGNoIHdyYXBwZXJcbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCAhPT0gMiB8fCByZXN1bHRbMF0gIT09ICdhJyB8fCByZXN1bHRbMV0gIT09ICdiJztcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYywgc2hhbSkge1xuICB2YXIgU1lNQk9MID0gd2VsbEtub3duU3ltYm9sKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG5cbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgcmVhbCByZWdleCBoZXJlIHNpbmNlIGl0IGNhdXNlcyBkZW9wdGltaXphdGlvblxuICAgICAgLy8gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb24gaW4gVjhcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMDZcbiAgICAgIHJlID0ge307XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgICByZS5mbGFncyA9ICcnO1xuICAgICAgcmVbU1lNQk9MXSA9IC8uL1tTWU1CT0xdO1xuICAgIH1cblxuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcblxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSk7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICEoXG4gICAgICBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyAmJlxuICAgICAgUkVQTEFDRV9LRUVQU18kMCAmJlxuICAgICAgIVJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFXG4gICAgKSkgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgbWV0aG9kcyA9IGV4ZWMoU1lNQk9MLCAnJ1tLRVldLCBmdW5jdGlvbiAobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgIHZhciAkZXhlYyA9IHJlZ2V4cC5leGVjO1xuICAgICAgaWYgKCRleGVjID09PSByZWdleHBFeGVjIHx8ICRleGVjID09PSBSZWdFeHBQcm90b3R5cGUuZXhlYykge1xuICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9LCB7XG4gICAgICBSRVBMQUNFX0tFRVBTXyQwOiBSRVBMQUNFX0tFRVBTXyQwLFxuICAgICAgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkU6IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFXG4gICAgfSk7XG4gICAgdmFyIHN0cmluZ01ldGhvZCA9IG1ldGhvZHNbMF07XG4gICAgdmFyIHJlZ2V4TWV0aG9kID0gbWV0aG9kc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyaW5nTWV0aG9kKTtcbiAgICByZWRlZmluZShSZWdFeHBQcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcmVnZXhNZXRob2QuY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByZWdleE1ldGhvZC5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG5cbiAgaWYgKHNoYW0pIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShSZWdFeHBQcm90b3R5cGVbU1lNQk9MXSwgJ3NoYW0nLCB0cnVlKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSwgZXMvbm8tb2JqZWN0LXByZXZlbnRleHRlbnNpb25zIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0KTtcbiAgICB9O1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChDLCBhcmdzTGVuZ3RoLCBhcmdzKSB7XG4gIGlmICghKGFyZ3NMZW5ndGggaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIGxpc3QgPSBbXSwgaSA9IDA7IGkgPCBhcmdzTGVuZ3RoOyBpKyspIGxpc3RbaV0gPSAnYVsnICsgaSArICddJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gd2UgaGF2ZSBubyBwcm9wZXIgYWx0ZXJuYXRpdmVzLCBJRTgtIG9ubHlcbiAgICBmYWN0b3JpZXNbYXJnc0xlbmd0aF0gPSBGdW5jdGlvbignQyxhJywgJ3JldHVybiBuZXcgQygnICsgbGlzdC5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbYXJnc0xlbmd0aF0oQywgYXJncyk7XG59O1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYmluZFxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcbiAgdmFyIGZuID0gYUZ1bmN0aW9uKHRoaXMpO1xuICB2YXIgcGFydEFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gZnVuY3Rpb24gYm91bmQoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZEZ1bmN0aW9uID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfTtcbiAgaWYgKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpIGJvdW5kRnVuY3Rpb24ucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmRGdW5jdGlvbjtcbn07XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhcmlhYmxlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFyaWFibGUgPT0gJ2Z1bmN0aW9uJyA/IHZhcmlhYmxlIDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKHBhdGhbbmFtZXNwYWNlXSkgfHwgYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKVxuICAgIDogcGF0aFtuYW1lc3BhY2VdICYmIHBhdGhbbmFtZXNwYWNlXVttZXRob2RdIHx8IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoaXQpO1xuICBpZiAodHlwZW9mIGl0ZXJhdG9yTWV0aG9kICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gIH0gcmV0dXJuIGFuT2JqZWN0KGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXQpKTtcbn07XG4iLCJ2YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gSVNfUFVSRSA/IGdldEl0ZXJhdG9yIDogZnVuY3Rpb24gKGl0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXAgLS0gc2FmZVxuICByZXR1cm4gTWFwLnByb3RvdHlwZS5lbnRyaWVzLmNhbGwoaXQpO1xufTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBJU19QVVJFID8gZ2V0SXRlcmF0b3IgOiBmdW5jdGlvbiAoaXQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXNldCAtLSBzYWZlXG4gIHJldHVybiBTZXQucHJvdG90eXBlLnZhbHVlcy5jYWxsKGl0KTtcbn07XG4iLCJ2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgcmVwbGFjZSA9ICcnLnJlcGxhY2U7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJidgXXxcXGR7MSwyfXw8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCYnYF18XFxkezEsMn0pL2c7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gIH1cbiAgcmV0dXJuIHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgIHZhciBjYXB0dXJlO1xuICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICBjYXNlICc8JzpcbiAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gIH0pO1xufTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc093bihpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHRvT2JqZWN0KGl0KSwga2V5KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICB2YXIgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGNvbnNvbGUuZXJyb3IoYSkgOiBjb25zb2xlLmVycm9yKGEsIGIpO1xuICB9XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aWVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsIi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xuXG52YXIgcGFjayA9IGZ1bmN0aW9uIChudW1iZXIsIG1hbnRpc3NhTGVuZ3RoLCBieXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGJ5dGVzKTtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbWFudGlzc2FMZW5ndGggPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCB8fCBudW1iZXIgPT09IDAgJiYgMSAvIG51bWJlciA8IDAgPyAxIDogMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGV4cG9uZW50LCBtYW50aXNzYSwgYztcbiAgbnVtYmVyID0gYWJzKG51bWJlcik7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIGlmIChudW1iZXIgIT0gbnVtYmVyIHx8IG51bWJlciA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIG1hbnRpc3NhID0gbnVtYmVyICE9IG51bWJlciA/IDEgOiAwO1xuICAgIGV4cG9uZW50ID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBleHBvbmVudCA9IGZsb29yKGxvZyhudW1iZXIpIC8gTE4yKTtcbiAgICBpZiAobnVtYmVyICogKGMgPSBwb3coMiwgLWV4cG9uZW50KSkgPCAxKSB7XG4gICAgICBleHBvbmVudC0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBudW1iZXIgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1iZXIgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKG51bWJlciAqIGMgPj0gMikge1xuICAgICAgZXhwb25lbnQrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbWFudGlzc2EgPSAwO1xuICAgICAgZXhwb25lbnQgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtYW50aXNzYSA9IChudW1iZXIgKiBjIC0gMSkgKiBwb3coMiwgbWFudGlzc2FMZW5ndGgpO1xuICAgICAgZXhwb25lbnQgPSBleHBvbmVudCArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYW50aXNzYSA9IG51bWJlciAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICAgIGV4cG9uZW50ID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1hbnRpc3NhTGVuZ3RoID49IDg7IGJ1ZmZlcltpbmRleCsrXSA9IG1hbnRpc3NhICYgMjU1LCBtYW50aXNzYSAvPSAyNTYsIG1hbnRpc3NhTGVuZ3RoIC09IDgpO1xuICBleHBvbmVudCA9IGV4cG9uZW50IDw8IG1hbnRpc3NhTGVuZ3RoIHwgbWFudGlzc2E7XG4gIGV4cG9uZW50TGVuZ3RoICs9IG1hbnRpc3NhTGVuZ3RoO1xuICBmb3IgKDsgZXhwb25lbnRMZW5ndGggPiAwOyBidWZmZXJbaW5kZXgrK10gPSBleHBvbmVudCAmIDI1NSwgZXhwb25lbnQgLz0gMjU2LCBleHBvbmVudExlbmd0aCAtPSA4KTtcbiAgYnVmZmVyWy0taW5kZXhdIHw9IHNpZ24gKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG52YXIgdW5wYWNrID0gZnVuY3Rpb24gKGJ1ZmZlciwgbWFudGlzc2FMZW5ndGgpIHtcbiAgdmFyIGJ5dGVzID0gYnVmZmVyLmxlbmd0aDtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZXhwb25lbnRMZW5ndGggLSA3O1xuICB2YXIgaW5kZXggPSBieXRlcyAtIDE7XG4gIHZhciBzaWduID0gYnVmZmVyW2luZGV4LS1dO1xuICB2YXIgZXhwb25lbnQgPSBzaWduICYgMTI3O1xuICB2YXIgbWFudGlzc2E7XG4gIHNpZ24gPj49IDc7XG4gIGZvciAoOyBuQml0cyA+IDA7IGV4cG9uZW50ID0gZXhwb25lbnQgKiAyNTYgKyBidWZmZXJbaW5kZXhdLCBpbmRleC0tLCBuQml0cyAtPSA4KTtcbiAgbWFudGlzc2EgPSBleHBvbmVudCAmICgxIDw8IC1uQml0cykgLSAxO1xuICBleHBvbmVudCA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtYW50aXNzYUxlbmd0aDtcbiAgZm9yICg7IG5CaXRzID4gMDsgbWFudGlzc2EgPSBtYW50aXNzYSAqIDI1NiArIGJ1ZmZlcltpbmRleF0sIGluZGV4LS0sIG5CaXRzIC09IDgpO1xuICBpZiAoZXhwb25lbnQgPT09IDApIHtcbiAgICBleHBvbmVudCA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChleHBvbmVudCA9PT0gZU1heCkge1xuICAgIHJldHVybiBtYW50aXNzYSA/IE5hTiA6IHNpZ24gPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtYW50aXNzYSA9IG1hbnRpc3NhICsgcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50IC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzaWduID8gLTEgOiAxKSAqIG1hbnRpc3NhICogcG93KDIsIGV4cG9uZW50IC0gbWFudGlzc2FMZW5ndGgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhY2s6IHBhY2ssXG4gIHVucGFjazogdW5wYWNrXG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIHR5cGVvZiAoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpID09ICdmdW5jdGlvbicgJiZcbiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiZcbiAgICBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJlxuICAgIE5ld1RhcmdldFByb3RvdHlwZSAhPT0gV3JhcHBlci5wcm90b3R5cGVcbiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTtcbiAgcmV0dXJuICR0aGlzO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGAzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICh0eXBlb2Ygc3RvcmUuaW5zcGVjdFNvdXJjZSAhPSAnZnVuY3Rpb24nKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG5cbnZhciBNRVRBREFUQSA9IHVpZCgnbWV0YScpO1xudmFyIGlkID0gMDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUgLS0gc2FmZVxudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnZhciBzZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBkZWZpbmVQcm9wZXJ0eShpdCwgTUVUQURBVEEsIHsgdmFsdWU6IHtcbiAgICBvYmplY3RJRDogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgd2Vha0RhdGE6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xuXG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBhIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEFEQVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhZGF0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQURBVEFdLm9iamVjdElEO1xufTtcblxudmFyIGdldFdlYWtEYXRhID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEFEQVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhZGF0YShpdCk7XG4gIC8vIHJldHVybiB0aGUgc3RvcmUgb2Ygd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQURBVEFdLndlYWtEYXRhO1xufTtcblxuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaSU5HICYmIG1ldGEuUkVRVUlSRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBREFUQSkpIHNldE1ldGFkYXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgUkVRVUlSRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrRGF0YTogZ2V0V2Vha0RhdGEsXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcblxuaGlkZGVuS2V5c1tNRVRBREFUQV0gPSB0cnVlO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIG9iamVjdEhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCA9ICdPYmplY3QgYWxyZWFkeSBpbml0aWFsaXplZCc7XG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgdmFyIHdtZ2V0ID0gc3RvcmUuZ2V0O1xuICB2YXIgd21oYXMgPSBzdG9yZS5oYXM7XG4gIHZhciB3bXNldCA9IHN0b3JlLnNldDtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmICh3bWhhcy5jYWxsKHN0b3JlLCBpdCkpIHRocm93IG5ldyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIHdtc2V0LmNhbGwoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQuY2FsbChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMuY2FsbChzdG9yZSwgaXQpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpO1xuICBoaWRkZW5LZXlzW1NUQVRFXSA9IHRydWU7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAob2JqZWN0SGFzKGl0LCBTVEFURSkpIHRocm93IG5ldyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxuLy8gYElzQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2FycmF5XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktaXNhcnJheSAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG4vLyBgSXNSZWdFeHBgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc3JlZ2V4cFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY2xhc3NvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG52YXIgUmVzdWx0ID0gZnVuY3Rpb24gKHN0b3BwZWQsIHJlc3VsdCkge1xuICB0aGlzLnN0b3BwZWQgPSBzdG9wcGVkO1xuICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCB1bmJvdW5kRnVuY3Rpb24sIG9wdGlvbnMpIHtcbiAgdmFyIHRoYXQgPSBvcHRpb25zICYmIG9wdGlvbnMudGhhdDtcbiAgdmFyIEFTX0VOVFJJRVMgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuQVNfRU5UUklFUyk7XG4gIHZhciBJU19JVEVSQVRPUiA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JU19JVEVSQVRPUik7XG4gIHZhciBJTlRFUlJVUFRFRCA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JTlRFUlJVUFRFRCk7XG4gIHZhciBmbiA9IGJpbmQodW5ib3VuZEZ1bmN0aW9uLCB0aGF0LCAxICsgQVNfRU5UUklFUyArIElOVEVSUlVQVEVEKTtcbiAgdmFyIGl0ZXJhdG9yLCBpdGVyRm4sIGluZGV4LCBsZW5ndGgsIHJlc3VsdCwgbmV4dCwgc3RlcDtcblxuICB2YXIgc3RvcCA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHtcbiAgICBpZiAoaXRlcmF0b3IpIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpO1xuICAgIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIGNvbmRpdGlvbik7XG4gIH07XG5cbiAgdmFyIGNhbGxGbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmIChBU19FTlRSSUVTKSB7XG4gICAgICBhbk9iamVjdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZVswXSwgdmFsdWVbMV0sIHN0b3ApIDogZm4odmFsdWVbMF0sIHZhbHVlWzFdKTtcbiAgICB9IHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlLCBzdG9wKSA6IGZuKHZhbHVlKTtcbiAgfTtcblxuICBpZiAoSVNfSVRFUkFUT1IpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlO1xuICB9IGVsc2Uge1xuICAgIGl0ZXJGbiA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0ZXJhYmxlKTtcbiAgICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoJ1RhcmdldCBpcyBub3QgaXRlcmFibGUnKTtcbiAgICAvLyBvcHRpbWlzYXRpb24gZm9yIGFycmF5IGl0ZXJhdG9yc1xuICAgIGlmIChpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlckZuKSkge1xuICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCA9IGNhbGxGbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xuICAgIH1cbiAgICBpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTtcbiAgfVxuXG4gIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICB3aGlsZSAoIShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBjYWxsRm4oc3RlcC52YWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdvYmplY3QnICYmIHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IpIHtcbiAgdmFyIHJldHVybk1ldGhvZCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgaWYgKHJldHVybk1ldGhvZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFuT2JqZWN0KHJldHVybk1ldGhvZC5jYWxsKGl0ZXJhdG9yKSkudmFsdWU7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1rZXlzIC0tIHNhZmUgKi9cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxudmFyIE5FV19JVEVSQVRPUl9QUk9UT1RZUEUgPSBJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdGVzdCA9IHt9O1xuICAvLyBGRjQ0LSBsZWdhY3kgaXRlcmF0b3JzIGNhc2VcbiAgcmV0dXJuIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXS5jYWxsKHRlc3QpICE9PSB0ZXN0O1xufSk7XG5cbmlmIChORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCghSVNfUFVSRSB8fCBORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19XRUJPU19XRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLXdlYm9zLXdlYmtpdCcpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xuLy8gTm9kZS5qcyAxMSBzaG93cyBFeHBlcmltZW50YWxXYXJuaW5nIG9uIGdldHRpbmcgYHF1ZXVlTWljcm90YXNrYFxudmFyIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsICdxdWV1ZU1pY3JvdGFzaycpO1xudmFyIHF1ZXVlTWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTtcblxudmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjtcblxuLy8gbW9kZXJuIGVuZ2luZXMgaGF2ZSBxdWV1ZU1pY3JvdGFzayBtZXRob2RcbmlmICghcXVldWVNaWNyb3Rhc2spIHtcbiAgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgLy8gYWxzbyBleGNlcHQgV2ViT1MgV2Via2l0IGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84OThcbiAgaWYgKCFJU19JT1MgJiYgIUlTX05PREUgJiYgIUlTX1dFQk9TX1dFQktJVCAmJiBNdXRhdGlvbk9ic2VydmVyICYmIGRvY3VtZW50KSB7XG4gICAgdG9nZ2xlID0gdHJ1ZTtcbiAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAvLyB3b3JrYXJvdW5kIG9mIFdlYktpdCB+IGlPUyBTYWZhcmkgMTAuMSBidWdcbiAgICBwcm9taXNlLmNvbnN0cnVjdG9yID0gUHJvbWlzZTtcbiAgICB0aGVuID0gcHJvbWlzZS50aGVuO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZW4uY2FsbChwcm9taXNlLCBmbHVzaCk7XG4gICAgfTtcbiAgLy8gTm9kZS5qcyB3aXRob3V0IHByb21pc2VzXG4gIH0gZWxzZSBpZiAoSVNfTk9ERSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVldWVNaWNyb3Rhc2sgfHwgZnVuY3Rpb24gKGZuKSB7XG4gIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgaWYgKCFoZWFkKSB7XG4gICAgaGVhZCA9IHRhc2s7XG4gICAgbm90aWZ5KCk7XG4gIH0gbGFzdCA9IHRhc2s7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFTdHJpbmcoU3ltYm9sKCkpIHx8XG4gICAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgICAvLyBDaHJvbWUgMzgtNDAgc3ltYm9scyBhcmUgbm90IGluaGVyaXRlZCBmcm9tIERPTSBjb2xsZWN0aW9ucyBwcm90b3R5cGVzIHRvIGluc3RhbmNlc1xuICAgICFTeW1ib2wuc2hhbSAmJiBWOF9WRVJTSU9OICYmIFY4X1ZFUlNJT04gPCA0MTtcbn0pO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdXJsID0gbmV3IFVSTCgnYj9hPTEmYj0yJmM9MycsICdodHRwOi8vYScpO1xuICB2YXIgc2VhcmNoUGFyYW1zID0gdXJsLnNlYXJjaFBhcmFtcztcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB1cmwucGF0aG5hbWUgPSAnYyUyMGQnO1xuICBzZWFyY2hQYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIHNlYXJjaFBhcmFtc1snZGVsZXRlJ10oJ2InKTtcbiAgICByZXN1bHQgKz0ga2V5ICsgdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gKElTX1BVUkUgJiYgIXVybC50b0pTT04pXG4gICAgfHwgIXNlYXJjaFBhcmFtcy5zb3J0XG4gICAgfHwgdXJsLmhyZWYgIT09ICdodHRwOi8vYS9jJTIwZD9hPTEmYz0zJ1xuICAgIHx8IHNlYXJjaFBhcmFtcy5nZXQoJ2MnKSAhPT0gJzMnXG4gICAgfHwgU3RyaW5nKG5ldyBVUkxTZWFyY2hQYXJhbXMoJz9hPTEnKSkgIT09ICdhPTEnXG4gICAgfHwgIXNlYXJjaFBhcmFtc1tJVEVSQVRPUl1cbiAgICAvLyB0aHJvd3MgaW4gRWRnZVxuICAgIHx8IG5ldyBVUkwoJ2h0dHBzOi8vYUBiJykudXNlcm5hbWUgIT09ICdhJ1xuICAgIHx8IG5ldyBVUkxTZWFyY2hQYXJhbXMobmV3IFVSTFNlYXJjaFBhcmFtcygnYT1iJykpLmdldCgnYScpICE9PSAnYidcbiAgICAvLyBub3QgcHVueWNvZGVkIGluIEVkZ2VcbiAgICB8fCBuZXcgVVJMKCdodHRwOi8v0YLQtdGB0YInKS5ob3N0ICE9PSAneG4tLWUxYXliYydcbiAgICAvLyBub3QgZXNjYXBlZCBpbiBDaHJvbWUgNjItXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL2Ej0LEnKS5oYXNoICE9PSAnIyVEMCVCMSdcbiAgICAvLyBmYWlscyBpbiBDaHJvbWUgNjYtXG4gICAgfHwgcmVzdWx0ICE9PSAnYTFjMydcbiAgICAvLyB0aHJvd3MgaW4gU2FmYXJpXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL3gnLCB1bmRlZmluZWQpLmhvc3QgIT09ICd4Jztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KGluc3BlY3RTb3VyY2UoV2Vha01hcCkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xuXG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNSZWdFeHAoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiVGhlIG1ldGhvZCBkb2Vzbid0IGFjY2VwdCByZWd1bGFyIGV4cHJlc3Npb25zXCIpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWFzc2lnbiAtLSBzYWZlXG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHNob3VsZCBoYXZlIGNvcnJlY3Qgb3JkZXIgb2Ygb3BlcmF0aW9ucyAoRWRnZSBidWcpXG4gIGlmIChERVNDUklQVE9SUyAmJiAkYXNzaWduKHsgYjogMSB9LCAkYXNzaWduKGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywgJ2InLCB7XG4gICAgICAgIHZhbHVlOiAzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9KSwgeyBiOiAyIH0pKS5iICE9PSAxKSByZXR1cm4gdHJ1ZTtcbiAgLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zeW1ib2wgLS0gc2FmZVxuICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gIHZhciBhbHBoYWJldCA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbc3ltYm9sXSA9IDc7XG4gIGFscGhhYmV0LnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChjaHIpIHsgQltjaHJdID0gY2hyOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBhbHBoYWJldDtcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG4gIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkge1xuICAgIHZhciBTID0gSW5kZXhlZE9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gb2JqZWN0S2V5cyhTKS5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKFMpKSA6IG9iamVjdEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoUywga2V5KSkgVFtrZXldID0gU1trZXldO1xuICAgIH1cbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0IC0tIG9sZCBJRSAqL1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IGRvY3VtZW50LmRvbWFpbiAmJiBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnRpZXMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlICovXG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xuXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJ1xuICAgID8gZ2V0V2luZG93TmFtZXMoaXQpXG4gICAgOiAkZ2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qta2V5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgISRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvIC0tIHNhZmUgKi9cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LXNldHByb3RvdHlwZW9mIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxuICAgIHNldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldDtcbiAgICBzZXR0ZXIuY2FsbCh0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlci5jYWxsKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IHt9LnRvU3RyaW5nIDogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogdHJ1ZSwgdmFsdWU6IGVycm9yIH07XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgb3B0aW9ucyk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIH1cbiAgICBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgICBpZiAoIXN0YXRlLnNvdXJjZSkge1xuICAgICAgc3RhdGUuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICAgIH1cbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL2NsYXNzb2YtcmF3Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vcmVnZXhwLWV4ZWMnKTtcblxuLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG5cbiAgcmV0dXJuIHJlZ2V4cEV4ZWMuY2FsbChSLCBTKTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby1hc3NlcnRpb24tY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAsIHJlZ2V4cC9uby1sYXp5LWVuZHMgLS0gdGVzdGluZyAqL1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLXVzZWxlc3MtcXVhbnRpZmllciAtLSB0ZXN0aW5nICovXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vc2hhcmVkJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xudmFyIG5hdGl2ZVJlcGxhY2UgPSBzaGFyZWQoJ25hdGl2ZS1zdHJpbmctcmVwbGFjZScsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWSB8fCBzdGlja3lIZWxwZXJzLkJST0tFTl9DQVJFVDtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQgfHwgVU5TVVBQT1JURURfWTtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG4gICAgdmFyIHN0aWNreSA9IFVOU1VQUE9SVEVEX1kgJiYgcmUuc3RpY2t5O1xuICAgIHZhciBmbGFncyA9IHJlZ2V4cEZsYWdzLmNhbGwocmUpO1xuICAgIHZhciBzb3VyY2UgPSByZS5zb3VyY2U7XG4gICAgdmFyIGNoYXJzQWRkZWQgPSAwO1xuICAgIHZhciBzdHJDb3B5ID0gc3RyO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgZmxhZ3MgPSBmbGFncy5yZXBsYWNlKCd5JywgJycpO1xuICAgICAgaWYgKGZsYWdzLmluZGV4T2YoJ2cnKSA9PT0gLTEpIHtcbiAgICAgICAgZmxhZ3MgKz0gJ2cnO1xuICAgICAgfVxuXG4gICAgICBzdHJDb3B5ID0gU3RyaW5nKHN0cikuc2xpY2UocmUubGFzdEluZGV4KTtcbiAgICAgIC8vIFN1cHBvcnQgYW5jaG9yZWQgc3RpY2t5IGJlaGF2aW9yLlxuICAgICAgaWYgKHJlLmxhc3RJbmRleCA+IDAgJiYgKCFyZS5tdWx0aWxpbmUgfHwgcmUubXVsdGlsaW5lICYmIHN0cltyZS5sYXN0SW5kZXggLSAxXSAhPT0gJ1xcbicpKSB7XG4gICAgICAgIHNvdXJjZSA9ICcoPzogJyArIHNvdXJjZSArICcpJztcbiAgICAgICAgc3RyQ29weSA9ICcgJyArIHN0ckNvcHk7XG4gICAgICAgIGNoYXJzQWRkZWQrKztcbiAgICAgIH1cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBzdHIgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14oPzonICsgc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgfVxuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHN0aWNreSA/IHJlQ29weSA6IHJlLCBzdHJDb3B5KTtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBtYXRjaC5pbnB1dCA9IG1hdGNoLmlucHV0LnNsaWNlKGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaC5pbmRleCA9IHJlLmxhc3RJbmRleDtcbiAgICAgICAgcmUubGFzdEluZGV4ICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgIH0gZWxzZSByZS5sYXN0SW5kZXggPSAwO1xuICAgIH0gZWxzZSBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZS5sYXN0SW5kZXggPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3Ncbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC5kb3RBbGwpIHJlc3VsdCArPSAncyc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vZmFpbHMnKTtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCdhJywgJ3knKSAtPiAvYS95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3IsXG4vLyBzbyB3ZSB1c2UgYW4gaW50ZXJtZWRpYXRlIGZ1bmN0aW9uLlxuZnVuY3Rpb24gUkUocywgZikge1xuICByZXR1cm4gUmVnRXhwKHMsIGYpO1xufVxuXG5leHBvcnRzLlVOU1VQUE9SVEVEX1kgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgnYScsICd5JykgLT4gL2EveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG4gIHZhciByZSA9IFJFKCdhJywgJ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2FiY2QnKSAhPSBudWxsO1xufSk7XG5cbmV4cG9ydHMuQlJPS0VOX0NBUkVUID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03NzM2ODdcbiAgdmFyIHJlID0gUkUoJ15yJywgJ2d5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdzdHInKSAhPSBudWxsO1xufSk7XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gYFNhbWVWYWx1ZVplcm9gIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zYW1ldmFsdWV6ZXJvXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHJldHVybiB4ID09PSB5IHx8IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwiLy8gYFNhbWVWYWx1ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNhbWV2YWx1ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pcyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTlNUUlVDVE9SX05BTUUpIHtcbiAgdmFyIENvbnN0cnVjdG9yID0gZ2V0QnVpbHRJbihDT05TVFJVQ1RPUl9OQU1FKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgQ29uc3RydWN0b3IgJiYgIUNvbnN0cnVjdG9yW1NQRUNJRVNdKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFNQRUNJRVMsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICAgIH0pO1xuICB9XG59O1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUQUcsIFNUQVRJQykge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IFNUQVRJQyA/IGl0IDogaXQucHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KGl0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMTIuMScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBTcGVjaWVzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zcGVjaWVzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBkZWZhdWx0Q29uc3RydWN0b3IgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBjb2RlUG9pbnRBdCwgYXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4gIGNvZGVBdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG4gIGNoYXJBdDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL3B1bnljb2RlLmpzL2Jsb2IvbWFzdGVyL3B1bnljb2RlLmpzXG52YXIgbWF4SW50ID0gMjE0NzQ4MzY0NzsgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxudmFyIGJhc2UgPSAzNjtcbnZhciB0TWluID0gMTtcbnZhciB0TWF4ID0gMjY7XG52YXIgc2tldyA9IDM4O1xudmFyIGRhbXAgPSA3MDA7XG52YXIgaW5pdGlhbEJpYXMgPSA3MjtcbnZhciBpbml0aWFsTiA9IDEyODsgLy8gMHg4MFxudmFyIGRlbGltaXRlciA9ICctJzsgLy8gJ1xceDJEJ1xudmFyIHJlZ2V4Tm9uQVNDSUkgPSAvW15cXDAtXFx1MDA3RV0vOyAvLyBub24tQVNDSUkgY2hhcnNcbnZhciByZWdleFNlcGFyYXRvcnMgPSAvWy5cXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2c7IC8vIFJGQyAzNDkwIHNlcGFyYXRvcnNcbnZhciBPVkVSRkxPV19FUlJPUiA9ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2Vzcyc7XG52YXIgYmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGVcbiAqIGNoYXJhY3RlciBpbiB0aGUgc3RyaW5nLiBXaGlsZSBKYXZhU2NyaXB0IHVzZXMgVUNTLTIgaW50ZXJuYWxseSxcbiAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG4gKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCxcbiAqIG1hdGNoaW5nIFVURi0xNi5cbiAqL1xudmFyIHVjczJkZWNvZGUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgdmFyIGNvdW50ZXIgPSAwO1xuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuICAgIGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICAgIC8vIEl0J3MgYSBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXIuXG4gICAgICB2YXIgZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspO1xuICAgICAgaWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIExvdyBzdXJyb2dhdGUuXG4gICAgICAgIG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJdCdzIGFuIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZVxuICAgICAgICAvLyBuZXh0IGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci5cbiAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgICAgICBjb3VudGVyLS07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuICovXG52YXIgZGlnaXRUb0Jhc2ljID0gZnVuY3Rpb24gKGRpZ2l0KSB7XG4gIC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG4gIC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuICByZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpO1xufTtcblxuLyoqXG4gKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcbiAqL1xudmFyIGFkYXB0ID0gZnVuY3Rpb24gKGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuICB2YXIgayA9IDA7XG4gIGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG4gIGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcbiAgZm9yICg7IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7XG4gICAgZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuICB9XG4gIHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzIC0tIFRPRE9cbnZhciBlbmNvZGUgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuXG4gIC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIGFuIGFycmF5IG9mIFVuaWNvZGUgY29kZSBwb2ludHMuXG4gIGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cbiAgLy8gQ2FjaGUgdGhlIGxlbmd0aC5cbiAgdmFyIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHN0YXRlLlxuICB2YXIgbiA9IGluaXRpYWxOO1xuICB2YXIgZGVsdGEgPSAwO1xuICB2YXIgYmlhcyA9IGluaXRpYWxCaWFzO1xuICB2YXIgaSwgY3VycmVudFZhbHVlO1xuXG4gIC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHMuXG4gIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldO1xuICAgIGlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7XG4gICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuICB2YXIgaGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aDsgLy8gbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cbiAgLy8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgd2l0aCBhIGRlbGltaXRlciB1bmxlc3MgaXQncyBlbXB0eS5cbiAgaWYgKGJhc2ljTGVuZ3RoKSB7XG4gICAgb3V0cHV0LnB1c2goZGVsaW1pdGVyKTtcbiAgfVxuXG4gIC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcbiAgd2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcbiAgICAvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0IGxhcmdlciBvbmU6XG4gICAgdmFyIG0gPSBtYXhJbnQ7XG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG4gICAgICAgIG0gPSBjdXJyZW50VmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LCBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvdy5cbiAgICB2YXIgaGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuICAgIGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG4gICAgICB0aHJvdyBSYW5nZUVycm9yKE9WRVJGTE9XX0VSUk9SKTtcbiAgICB9XG5cbiAgICBkZWx0YSArPSAobSAtIG4pICogaGFuZGxlZENQQ291bnRQbHVzT25lO1xuICAgIG4gPSBtO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHtcbiAgICAgICAgdGhyb3cgUmFuZ2VFcnJvcihPVkVSRkxPV19FUlJPUik7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFZhbHVlID09IG4pIHtcbiAgICAgICAgLy8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuXG4gICAgICAgIHZhciBxID0gZGVsdGE7XG4gICAgICAgIGZvciAodmFyIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkge1xuICAgICAgICAgIHZhciB0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcbiAgICAgICAgICBpZiAocSA8IHQpIGJyZWFrO1xuICAgICAgICAgIHZhciBxTWludXNUID0gcSAtIHQ7XG4gICAgICAgICAgdmFyIGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCkpKTtcbiAgICAgICAgICBxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxKSkpO1xuICAgICAgICBiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuICAgICAgICBkZWx0YSA9IDA7XG4gICAgICAgICsraGFuZGxlZENQQ291bnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgKytkZWx0YTtcbiAgICArK247XG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBlbmNvZGVkID0gW107XG4gIHZhciBsYWJlbHMgPSBpbnB1dC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXFx1MDAyRScpLnNwbGl0KCcuJyk7XG4gIHZhciBpLCBsYWJlbDtcbiAgZm9yIChpID0gMDsgaSA8IGxhYmVscy5sZW5ndGg7IGkrKykge1xuICAgIGxhYmVsID0gbGFiZWxzW2ldO1xuICAgIGVuY29kZWQucHVzaChyZWdleE5vbkFTQ0lJLnRlc3QobGFiZWwpID8gJ3huLS0nICsgZW5jb2RlKGxhYmVsKSA6IGxhYmVsKTtcbiAgfVxuICByZXR1cm4gZW5jb2RlZC5qb2luKCcuJyk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIG5vbiA9ICdcXHUyMDBCXFx1MDA4NVxcdTE4MEUnO1xuXG4vLyBjaGVjayB0aGF0IGEgbWV0aG9kIHdvcmtzIHdpdGggdGhlIGNvcnJlY3QgbGlzdFxuLy8gb2Ygd2hpdGVzcGFjZXMgYW5kIGhhcyBhIGNvcnJlY3QgbmFtZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgcmV0dXJuIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0oKSB8fCBub25bTUVUSE9EX05BTUVdKCkgIT0gbm9uIHx8IHdoaXRlc3BhY2VzW01FVEhPRF9OQU1FXS5uYW1lICE9PSBNRVRIT0RfTkFNRTtcbiAgfSk7XG59O1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIHdoaXRlc3BhY2UgPSAnWycgKyB3aGl0ZXNwYWNlcyArICddJztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyB3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAod2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKiQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltLCB0cmltU3RhcnQsIHRyaW1FbmQsIHRyaW1MZWZ0LCB0cmltUmlnaHQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMpIHtcbiAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gICAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltTGVmdCwgdHJpbVN0YXJ0IH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiAgdHJpbTogY3JlYXRlTWV0aG9kKDMpXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgbG9jYXRpb24gPSBnbG9iYWwubG9jYXRpb247XG52YXIgc2V0ID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhciA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcblxudmFyIHJ1biA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG5cbnZhciBydW5uZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBydW4oaWQpO1xuICB9O1xufTtcblxudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bihldmVudC5kYXRhKTtcbn07XG5cbnZhciBwb3N0ID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIG9sZCBlbmdpbmVzIGhhdmUgbm90IGxvY2F0aW9uLm9yaWdpblxuICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdCk7XG59O1xuXG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldCB8fCAhY2xlYXIpIHtcbiAgc2V0ID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gc3BlYyByZXF1aXJlbWVudFxuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXIgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAoSVNfTk9ERSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3cocnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICAvLyBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzYyNFxuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsICYmICFJU19JT1MpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGJpbmQocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKFxuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmXG4gICAgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiZcbiAgICAhZ2xvYmFsLmltcG9ydFNjcmlwdHMgJiZcbiAgICBsb2NhdGlvbiAmJiBsb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2ZpbGU6JyAmJlxuICAgICFmYWlscyhwb3N0KVxuICApIHtcbiAgICBkZWZlciA9IHBvc3Q7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bihpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQocnVubmVyKGlkKSwgMCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGNsZWFyOiBjbGVhclxufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYFRvSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGggb3IgaW5kZXgnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbnRlZ2VyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNOYU4oYXJndW1lbnQgPSArYXJndW1lbnQpID8gMCA6IChhcmd1bWVudCA+IDAgPyBmbG9vciA6IGNlaWwpKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIFBSRUZFUlJFRF9TVFJJTkcpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGlucHV0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFQUkVGRVJSRURfU1RSSU5HICYmIHR5cGVvZiAoZm4gPSBpbnB1dC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gICYmICFTeW1ib2wuc2hhbVxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG5leHBvcnRzLmYgPSB3ZWxsS25vd25TeW1ib2w7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkgfHwgIShOQVRJVkVfU1lNQk9MIHx8IHR5cGVvZiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPT0gJ3N0cmluZycpKSB7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzKFN5bWJvbCwgbmFtZSkpIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICAgIH1cbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsIi8vIGEgc3RyaW5nIG9mIGFsbCB2YWxpZCB1bmljb2RlIHdoaXRlc3BhY2VzXG5tb2R1bGUuZXhwb3J0cyA9ICdcXHUwMDA5XFx1MDAwQVxcdTAwMEJcXHUwMDBDXFx1MDAwRFxcdTAwMjBcXHUwMEEwXFx1MTY4MFxcdTIwMDBcXHUyMDAxXFx1MjAwMicgK1xuICAnXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFycmF5QnVmZmVyTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlcicpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcblxudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgQXJyYXlCdWZmZXIgPSBhcnJheUJ1ZmZlck1vZHVsZVtBUlJBWV9CVUZGRVJdO1xudmFyIE5hdGl2ZUFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG5cbi8vIGBBcnJheUJ1ZmZlcmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlidWZmZXItY29uc3RydWN0b3JcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogTmF0aXZlQXJyYXlCdWZmZXIgIT09IEFycmF5QnVmZmVyIH0sIHtcbiAgQXJyYXlCdWZmZXI6IEFycmF5QnVmZmVyXG59KTtcblxuc2V0U3BlY2llcyhBUlJBWV9CVUZGRVIpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBBcnJheUJ1ZmZlck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgQXJyYXlCdWZmZXIgPSBBcnJheUJ1ZmZlck1vZHVsZS5BcnJheUJ1ZmZlcjtcbnZhciBEYXRhVmlldyA9IEFycmF5QnVmZmVyTW9kdWxlLkRhdGFWaWV3O1xudmFyIG5hdGl2ZUFycmF5QnVmZmVyU2xpY2UgPSBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG5cbnZhciBJTkNPUlJFQ1RfU0xJQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3IEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pO1xuXG4vLyBgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlidWZmZXIucHJvdG90eXBlLnNsaWNlXG4kKHsgdGFyZ2V0OiAnQXJyYXlCdWZmZXInLCBwcm90bzogdHJ1ZSwgdW5zYWZlOiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9TTElDRSB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgaWYgKG5hdGl2ZUFycmF5QnVmZmVyU2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5hdGl2ZUFycmF5QnVmZmVyU2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGg7XG4gICAgdmFyIGZpcnN0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1NvdXJjZSA9IG5ldyBEYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1RhcmdldCA9IG5ldyBEYXRhVmlldyhyZXN1bHQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGZpcnN0IDwgZmluKSB7XG4gICAgICB2aWV3VGFyZ2V0LnNldFVpbnQ4KGluZGV4KyssIHZpZXdTb3VyY2UuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSB3ZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGO1xudmFyIE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCA9ICdNYXhpbXVtIGFsbG93ZWQgaW5kZXggZXhjZWVkZWQnO1xuXG4vLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbi8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9IFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICByZXR1cm4gYXJyYXkuY29uY2F0KClbMF0gIT09IGFycmF5O1xufSk7XG5cbnZhciBTUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdjb25jYXQnKTtcblxudmFyIGlzQ29uY2F0U3ByZWFkYWJsZSA9IGZ1bmN0aW9uIChPKSB7XG4gIGlmICghaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNwcmVhZGFibGUgPSBPW0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgcmV0dXJuIHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoTyk7XG59O1xuXG52YXIgRk9SQ0VEID0gIUlTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgfHwgIVNQRUNJRVNfU1VQUE9SVDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29uY2F0XG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAaXNDb25jYXRTcHJlYWRhYmxlIGFuZCBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIGNvbmNhdDogZnVuY3Rpb24gY29uY2F0KGFyZykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgdmFyIG4gPSAwO1xuICAgIHZhciBpLCBrLCBsZW5ndGgsIGxlbiwgRTtcbiAgICBmb3IgKGkgPSAtMSwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBFID0gaSA9PT0gLTEgPyBPIDogYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKGlzQ29uY2F0U3ByZWFkYWJsZShFKSkge1xuICAgICAgICBsZW4gPSB0b0xlbmd0aChFLmxlbmd0aCk7XG4gICAgICAgIGlmIChuICsgbGVuID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eShBLCBuLCBFW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuID49IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShBLCBuKyssIEUpO1xuICAgICAgfVxuICAgIH1cbiAgICBBLmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmlsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1maWxsJyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbGxcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgZmlsbDogZmlsbFxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2ZpbGwnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbnZhciBGSU5EID0gJ2ZpbmQnO1xudmFyIFNLSVBTX0hPTEVTID0gdHJ1ZTtcblxuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChGSU5EIGluIFtdKSBBcnJheSgxKVtGSU5EXShmdW5jdGlvbiAoKSB7IFNLSVBTX0hPTEVTID0gZmFsc2U7IH0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfSwge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoRklORCk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluY2x1ZGVzO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2luY2x1ZGVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUtaW5kZXhvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgbmF0aXZlSW5kZXhPZiA9IFtdLmluZGV4T2Y7XG5cbnZhciBORUdBVElWRV9aRVJPID0gISFuYXRpdmVJbmRleE9mICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdpbmRleE9mJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBORUdBVElWRV9aRVJPIHx8ICFTVFJJQ1RfTUVUSE9EIH0sIHtcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/IG5hdGl2ZUluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgQVJSQVlfSVRFUkFUT1IgPSAnQXJyYXkgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoQVJSQVlfSVRFUkFUT1IpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZW50cmllc1xuLy8gYEFycmF5LnByb3RvdHlwZS5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnZhbHVlc1xuLy8gYEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4vLyBgQ3JlYXRlQXJyYXlJdGVyYXRvcmAgaW50ZXJuYWwgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVhcnJheWl0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciB0YXJnZXQgPSBzdGF0ZS50YXJnZXQ7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgrKztcbiAgaWYgKCF0YXJnZXQgfHwgaW5kZXggPj0gdGFyZ2V0Lmxlbmd0aCkge1xuICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4geyB2YWx1ZTogaW5kZXgsIGRvbmU6IGZhbHNlIH07XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4geyB2YWx1ZTogdGFyZ2V0W2luZGV4XSwgZG9uZTogZmFsc2UgfTtcbiAgcmV0dXJuIHsgdmFsdWU6IFtpbmRleCwgdGFyZ2V0W2luZGV4XV0sIGRvbmU6IGZhbHNlIH07XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGV1bm1hcHBlZGFyZ3VtZW50c29iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgbmF0aXZlSm9pbiA9IFtdLmpvaW47XG5cbnZhciBFUzNfU1RSSU5HUyA9IEluZGV4ZWRPYmplY3QgIT0gT2JqZWN0O1xudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdqb2luJywgJywnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5qb2luYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmpvaW5cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEVTM19TVFJJTkdTIHx8ICFTVFJJQ1RfTUVUSE9EIH0sIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gbmF0aXZlSm9pbi5jYWxsKHRvSW5kZXhlZE9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdtYXAnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcmVkdWNlUmlnaHQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykucmlnaHQ7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgQ0hST01FX1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgncmVkdWNlUmlnaHQnKTtcbi8vIENocm9tZSA4MC04MiBoYXMgYSBjcml0aWNhbCBidWdcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwNDk5ODJcbnZhciBDSFJPTUVfQlVHID0gIUlTX05PREUgJiYgQ0hST01FX1ZFUlNJT04gPiA3OSAmJiBDSFJPTUVfVkVSU0lPTiA8IDgzO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZXJpZ2h0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhU1RSSUNUX01FVEhPRCB8fCBDSFJPTUVfQlVHIH0sIHtcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZVJpZ2h0KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLmxlZnQ7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgQ0hST01FX1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgncmVkdWNlJyk7XG4vLyBDaHJvbWUgODAtODIgaGFzIGEgY3JpdGljYWwgYnVnXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMDQ5OTgyXG52YXIgQ0hST01FX0JVRyA9ICFJU19OT0RFICYmIENIUk9NRV9WRVJTSU9OID4gNzkgJiYgQ0hST01FX1ZFUlNJT04gPCA4MztcblxuLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhU1RSSUNUX01FVEhPRCB8fCBDSFJPTUVfQlVHIH0sIHtcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG5cbnZhciBuYXRpdmVSZXZlcnNlID0gW10ucmV2ZXJzZTtcbnZhciB0ZXN0ID0gWzEsIDJdO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJldmVyc2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmV2ZXJzZVxuLy8gZml4IGZvciBTYWZhcmkgMTIuMCBidWdcbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xODg3OTRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFN0cmluZyh0ZXN0KSA9PT0gU3RyaW5nKHRlc3QucmV2ZXJzZSgpKSB9LCB7XG4gIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtYXNzaWduIC0tIGRpcnR5IGhhY2tcbiAgICBpZiAoaXNBcnJheSh0aGlzKSkgdGhpcy5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICByZXR1cm4gbmF0aXZlUmV2ZXJzZS5jYWxsKHRoaXMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc2xpY2UnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBuYXRpdmVTbGljZSA9IFtdLnNsaWNlO1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNsaWNlXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIC8vIGlubGluZSBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBmb3IgdXNhZ2UgbmF0aXZlIGBBcnJheSNzbGljZWAgd2hlcmUgaXQncyBwb3NzaWJsZVxuICAgIHZhciBDb25zdHJ1Y3RvciwgcmVzdWx0LCBuO1xuICAgIGlmIChpc0FycmF5KE8pKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IE8uY29uc3RydWN0b3I7XG4gICAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgICAgaWYgKHR5cGVvZiBDb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgaXNBcnJheShDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gQ29uc3RydWN0b3JbU1BFQ0lFU107XG4gICAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gbnVsbCkgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNsaWNlLmNhbGwoTywgaywgZmluKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0ID0gbmV3IChDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDb25zdHJ1Y3RvcikobWF4KGZpbiAtIGssIDApKTtcbiAgICBmb3IgKG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgaWYgKGsgaW4gTykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIHRlc3QgPSBbXTtcbnZhciBuYXRpdmVTb3J0ID0gdGVzdC5zb3J0O1xuXG4vLyBJRTgtXG52YXIgRkFJTFNfT05fVU5ERUZJTkVEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pO1xuLy8gVjggYnVnXG52YXIgRkFJTFNfT05fTlVMTCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdGVzdC5zb3J0KG51bGwpO1xufSk7XG4vLyBPbGQgV2ViS2l0XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ3NvcnQnKTtcblxudmFyIEZPUkNFRCA9IEZBSUxTX09OX1VOREVGSU5FRCB8fCAhRkFJTFNfT05fTlVMTCB8fCAhU1RSSUNUX01FVEhPRDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zb3J0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvcnRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/IG5hdGl2ZVNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogbmF0aXZlU29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc3BsaWNlJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBsZW5ndGggZXhjZWVkZWQnO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNwbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zcGxpY2Vcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCAvKiAsIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBhY3R1YWxTdGFydCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaW5zZXJ0Q291bnQsIGFjdHVhbERlbGV0ZUNvdW50LCBBLCBrLCBmcm9tLCB0bztcbiAgICBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAwKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFjdHVhbERlbGV0ZUNvdW50ID0gMDtcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMSkge1xuICAgICAgaW5zZXJ0Q291bnQgPSAwO1xuICAgICAgYWN0dWFsRGVsZXRlQ291bnQgPSBsZW4gLSBhY3R1YWxTdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhcmd1bWVudHNMZW5ndGggLSAyO1xuICAgICAgYWN0dWFsRGVsZXRlQ291bnQgPSBtaW4obWF4KHRvSW50ZWdlcihkZWxldGVDb3VudCksIDApLCBsZW4gLSBhY3R1YWxTdGFydCk7XG4gICAgfVxuICAgIGlmIChsZW4gKyBpbnNlcnRDb3VudCAtIGFjdHVhbERlbGV0ZUNvdW50ID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQpO1xuICAgIH1cbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIGFjdHVhbERlbGV0ZUNvdW50KTtcbiAgICBmb3IgKGsgPSAwOyBrIDwgYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgZnJvbSA9IGFjdHVhbFN0YXJ0ICsgaztcbiAgICAgIGlmIChmcm9tIGluIE8pIGNyZWF0ZVByb3BlcnR5KEEsIGssIE9bZnJvbV0pO1xuICAgIH1cbiAgICBBLmxlbmd0aCA9IGFjdHVhbERlbGV0ZUNvdW50O1xuICAgIGlmIChpbnNlcnRDb3VudCA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBhY3R1YWxTdGFydDsgayA8IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudDtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQ7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgICB9XG4gICAgICBmb3IgKGsgPSBsZW47IGsgPiBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50OyBrLS0pIGRlbGV0ZSBPW2sgLSAxXTtcbiAgICB9IGVsc2UgaWYgKGluc2VydENvdW50ID4gYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrID4gYWN0dWFsU3RhcnQ7IGstLSkge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50IC0gMTtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQgLSAxO1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgPSAwOyBrIDwgaW5zZXJ0Q291bnQ7IGsrKykge1xuICAgICAgT1trICsgYWN0dWFsU3RhcnRdID0gYXJndW1lbnRzW2sgKyAyXTtcbiAgICB9XG4gICAgTy5sZW5ndGggPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50O1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9KU09OYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9qc29uXG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIEZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmcgPSBGdW5jdGlvblByb3RvdHlwZS50b1N0cmluZztcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gRnVuY3Rpb24gaW5zdGFuY2VzIGAubmFtZWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24taW5zdGFuY2VzLW5hbWVcbmlmIChERVNDUklQVE9SUyAmJiAhKE5BTUUgaW4gRnVuY3Rpb25Qcm90b3R5cGUpKSB7XG4gIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uUHJvdG90eXBlVG9TdHJpbmcuY2FsbCh0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG5cbi8vIEpTT05bQEB0b1N0cmluZ1RhZ10gcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24nKTtcbnZhciBjb2xsZWN0aW9uU3Ryb25nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIGBNYXBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC1vYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IGNvbGxlY3Rpb24oJ01hcCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvblN0cm9uZyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMT0cyRSA9IE1hdGguTE9HMkU7XG5cbi8vIGBNYXRoLmNsejMyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5jbHozMlxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gZmxvb3IobG9nKHggKyAwLjUpICogTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuIiwidmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG5cbi8vIE1hdGhbQEB0b1N0cmluZ1RhZ10gcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcblxudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyIE5hdGl2ZU51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIE51bWJlclByb3RvdHlwZSA9IE5hdGl2ZU51bWJlci5wcm90b3R5cGU7XG5cbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DTEFTU09GID0gY2xhc3NvZihjcmVhdGUoTnVtYmVyUHJvdG90eXBlKSkgPT0gTlVNQkVSO1xuXG4vLyBgVG9OdW1iZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b251bWJlclxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIHZhciBmaXJzdCwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlLCBkaWdpdHMsIGxlbmd0aCwgaW5kZXgsIGNvZGU7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gdHJpbShpdCk7XG4gICAgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCBvZiAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCBvZiAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBkaWdpdHMgPSBpdC5zbGljZSgyKTtcbiAgICAgIGxlbmd0aCA9IGRpZ2l0cy5sZW5ndGg7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbi8vIGBOdW1iZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci1jb25zdHJ1Y3RvclxuaWYgKGlzRm9yY2VkKE5VTUJFUiwgIU5hdGl2ZU51bWJlcignIDBvMScpIHx8ICFOYXRpdmVOdW1iZXIoJzBiMScpIHx8IE5hdGl2ZU51bWJlcignKzB4MScpKSkge1xuICB2YXIgTnVtYmVyV3JhcHBlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciBkdW1teSA9IHRoaXM7XG4gICAgcmV0dXJuIGR1bW15IGluc3RhbmNlb2YgTnVtYmVyV3JhcHBlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NMQVNTT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IE51bWJlclByb3RvdHlwZS52YWx1ZU9mLmNhbGwoZHVtbXkpOyB9KSA6IGNsYXNzb2YoZHVtbXkpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgTmF0aXZlTnVtYmVyKHRvTnVtYmVyKGl0KSksIGR1bW15LCBOdW1iZXJXcmFwcGVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IERFU0NSSVBUT1JTID8gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVOdW1iZXIpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVMyMDE1IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVMyMDE1IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlciwnICtcbiAgICAvLyBFU05leHRcbiAgICAnZnJvbVN0cmluZyxyYW5nZSdcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoTmF0aXZlTnVtYmVyLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKE51bWJlcldyYXBwZXIsIGtleSkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KE51bWJlcldyYXBwZXIsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE5hdGl2ZU51bWJlciwga2V5KSk7XG4gICAgfVxuICB9XG4gIE51bWJlcldyYXBwZXIucHJvdG90eXBlID0gTnVtYmVyUHJvdG90eXBlO1xuICBOdW1iZXJQcm90b3R5cGUuY29uc3RydWN0b3IgPSBOdW1iZXJXcmFwcGVyO1xuICByZWRlZmluZShnbG9iYWwsIE5VTUJFUiwgTnVtYmVyV3JhcHBlcik7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbicpO1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtYXNzaWduIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuYXNzaWduICE9PSBhc3NpZ24gfSwge1xuICBhc3NpZ246IGFzc2lnblxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1mcmVlemUgLS0gc2FmZVxudmFyICRmcmVlemUgPSBPYmplY3QuZnJlZXplO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRmcmVlemUoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmZyZWV6ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5mcmVlemVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFGUkVFWklORyB9LCB7XG4gIGZyZWV6ZTogZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShvbkZyZWV6ZShpdCkpIDogaXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcigxKTsgfSk7XG52YXIgRk9SQ0VEID0gIURFU0NSSVBUT1JTIHx8IEZBSUxTX09OX1BSSU1JVElWRVM7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0luZGV4ZWRPYmplY3QoaXQpLCBrZXkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGtleSwgZGVzY3JpcHRvcjtcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkgPSBrZXlzW2luZGV4KytdKTtcbiAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKS5mO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBnZXRPd25Qcm9wZXJ0eU5hbWVzXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRQcm90b3R5cGVPZigxKTsgfSk7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2ZcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgfSwge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNmcm96ZW4gLS0gc2FmZVxudmFyICRpc0Zyb3plbiA9IE9iamVjdC5pc0Zyb3plbjtcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyAkaXNGcm96ZW4oMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmlzRnJvemVuYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmlzZnJvemVuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIH0sIHtcbiAgaXNGcm96ZW46IGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2FtZS12YWx1ZScpO1xuXG4vLyBgT2JqZWN0LmlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmlzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzOiBpc1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUtleXMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGtleXM6IGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyh0b09iamVjdChpdCkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG9uRnJlZXplID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykub25GcmVlemU7XG52YXIgRlJFRVpJTkcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnJlZXppbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LXNlYWwgLS0gc2FmZVxudmFyICRzZWFsID0gT2JqZWN0LnNlYWw7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgJHNlYWwoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LnNlYWxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2VhbFxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgc2VhbDogZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChvbkZyZWV6ZShpdCkpIDogaXQ7XG4gIH1cbn0pO1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICByZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBOYXRpdmVQcm9taXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxuLy8gU2FmYXJpIGJ1ZyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjAwODI5XG52YXIgTk9OX0dFTkVSSUMgPSAhIU5hdGl2ZVByb21pc2UgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICBOYXRpdmVQcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddLmNhbGwoeyB0aGVuOiBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBgUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmZpbmFsbHlcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogTk9OX0dFTkVSSUMgfSwge1xuICAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBnZXRCdWlsdEluKCdQcm9taXNlJykpO1xuICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICAgIHJldHVybiB0aGlzLnRoZW4oXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgICAgfSA6IG9uRmluYWxseSxcbiAgICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHlcbiAgICApO1xuICB9XG59KTtcblxuLy8gbWFrZXMgc3VyZSB0aGF0IG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXMgYFByb21pc2UjZmluYWxseWAgcHJvcGVybHkgd29ya3Mgd2l0aCBwYXRjaGVkIGBQcm9taXNlI3RoZW5gXG5pZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJykge1xuICB2YXIgbWV0aG9kID0gZ2V0QnVpbHRJbignUHJvbWlzZScpLnByb3RvdHlwZVsnZmluYWxseSddO1xuICBpZiAoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSAhPT0gbWV0aG9kKSB7XG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICdmaW5hbGx5JywgbWV0aG9kLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9taWNyb3Rhc2snKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLXJlc29sdmUnKTtcbnZhciBob3N0UmVwb3J0RXJyb3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycycpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfQlJPV1NFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtYnJvd3NlcicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUHJvbWlzZVN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSA9IE5hdGl2ZVByb21pc2UgJiYgTmF0aXZlUHJvbWlzZS5wcm90b3R5cGU7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZTtcbnZhciBQcm9taXNlQ29uc3RydWN0b3JQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlUHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBOQVRJVkVfUkVKRUNUSU9OX0VWRU5UID0gdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nO1xudmFyIFVOSEFORExFRF9SRUpFQ1RJT04gPSAndW5oYW5kbGVkcmVqZWN0aW9uJztcbnZhciBSRUpFQ1RJT05fSEFORExFRCA9ICdyZWplY3Rpb25oYW5kbGVkJztcbnZhciBQRU5ESU5HID0gMDtcbnZhciBGVUxGSUxMRUQgPSAxO1xudmFyIFJFSkVDVEVEID0gMjtcbnZhciBIQU5ETEVEID0gMTtcbnZhciBVTkhBTkRMRUQgPSAyO1xudmFyIFNVQkNMQVNTSU5HID0gZmFsc2U7XG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIEdMT0JBTF9DT1JFX0pTX1BST01JU0UgPSBpbnNwZWN0U291cmNlKFByb21pc2VDb25zdHJ1Y3RvcikgIT09IFN0cmluZyhQcm9taXNlQ29uc3RydWN0b3IpO1xuICAvLyBWOCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAvLyBXZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICBpZiAoIUdMT0JBTF9DT1JFX0pTX1BST01JU0UgJiYgVjhfVkVSU0lPTiA9PT0gNjYpIHJldHVybiB0cnVlO1xuICAvLyBXZSBuZWVkIFByb21pc2UjZmluYWxseSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIVByb21pc2VDb25zdHJ1Y3RvclByb3RvdHlwZVsnZmluYWxseSddKSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgY2FuJ3QgdXNlIEBAc3BlY2llcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbiAgaWYgKFY4X1ZFUlNJT04gPj0gNTEgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KFByb21pc2VDb25zdHJ1Y3RvcikpIHJldHVybiBmYWxzZTtcbiAgLy8gRGV0ZWN0IGNvcnJlY3RuZXNzIG9mIHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUoMSk7IH0pO1xuICB2YXIgRmFrZVByb21pc2UgPSBmdW5jdGlvbiAoZXhlYykge1xuICAgIGV4ZWMoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICB9O1xuICB2YXIgY29uc3RydWN0b3IgPSBwcm9taXNlLmNvbnN0cnVjdG9yID0ge307XG4gIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gRmFrZVByb21pc2U7XG4gIFNVQkNMQVNTSU5HID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTtcbiAgaWYgKCFTVUJDTEFTU0lORykgcmV0dXJuIHRydWU7XG4gIC8vIFVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgcmV0dXJuICFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmIElTX0JST1dTRVIgJiYgIU5BVElWRV9SRUpFQ1RJT05fRVZFTlQ7XG59KTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSBGT1JDRUQgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSlbJ2NhdGNoJ10oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gc3RhdGUucmVhY3Rpb25zO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBjaGFpbltpbmRleCsrXTtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChzdGF0ZSk7XG4gICAgICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLnJlYWN0aW9ucyA9IFtdO1xuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoIU5BVElWRV9SRUpFQ1RJT05fRVZFTlQgJiYgKGhhbmRsZXIgPSBnbG9iYWxbJ29uJyArIG5hbWVdKSkgaGFuZGxlcihldmVudCk7XG4gIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xuXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoSVNfVU5IQU5ETEVEKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKElTX05PREUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEO1xuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhyb3cgcmVzdWx0LnZhbHVlO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnJlamVjdGlvbiAhPT0gSEFORExFRCAmJiAhc3RhdGUucGFyZW50O1xufTtcblxudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgICBpZiAoSVNfTk9ERSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoUkVKRUNUSU9OX0hBTkRMRUQsIHByb21pc2UsIHN0YXRlLnZhbHVlKTtcbiAgfSk7XG59O1xuXG52YXIgYmluZCA9IGZ1bmN0aW9uIChmbiwgc3RhdGUsIHVud3JhcCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgZm4oc3RhdGUsIHZhbHVlLCB1bndyYXApO1xuICB9O1xufTtcblxudmFyIGludGVybmFsUmVqZWN0ID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgc3RhdGUuc3RhdGUgPSBSRUpFQ1RFRDtcbiAgbm90aWZ5KHN0YXRlLCB0cnVlKTtcbn07XG5cbnZhciBpbnRlcm5hbFJlc29sdmUgPSBmdW5jdGlvbiAoc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICB0cnkge1xuICAgIGlmIChzdGF0ZS5mYWNhZGUgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICB2YXIgdGhlbiA9IGlzVGhlbmFibGUodmFsdWUpO1xuICAgIGlmICh0aGVuKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVzb2x2ZSwgd3JhcHBlciwgc3RhdGUpLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlamVjdCwgd3JhcHBlciwgc3RhdGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbnRlcm5hbFJlamVjdCh3cmFwcGVyLCBlcnJvciwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHN0YXRlLnN0YXRlID0gRlVMRklMTEVEO1xuICAgICAgbm90aWZ5KHN0YXRlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGludGVybmFsUmVqZWN0KHsgZG9uZTogZmFsc2UgfSwgZXJyb3IsIHN0YXRlKTtcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmIChGT1JDRUQpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgUHJvbWlzZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoYmluZChpbnRlcm5hbFJlc29sdmUsIHN0YXRlKSwgYmluZChpbnRlcm5hbFJlamVjdCwgc3RhdGUpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaW50ZXJuYWxSZWplY3Qoc3RhdGUsIGVycm9yKTtcbiAgICB9XG4gIH07XG4gIFByb21pc2VDb25zdHJ1Y3RvclByb3RvdHlwZSA9IFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogW10sXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3RvclByb3RvdHlwZSwge1xuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS50aGVuYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLnRoZW5cbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgc3RhdGUucGFyZW50ID0gdHJ1ZTtcbiAgICAgIHN0YXRlLnJlYWN0aW9ucy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmIChzdGF0ZS5zdGF0ZSAhPSBQRU5ESU5HKSBub3RpZnkoc3RhdGUsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gYFByb21pc2UucHJvdG90eXBlLmNhdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmNhdGNoXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgc3RhdGUpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSBQcm9taXNlQ29uc3RydWN0b3IgfHwgQyA9PT0gUHJvbWlzZVdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcblxuICBpZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJyAmJiBOYXRpdmVQcm9taXNlUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgbmF0aXZlVGhlbiA9IE5hdGl2ZVByb21pc2VQcm90b3R5cGUudGhlbjtcblxuICAgIGlmICghU1VCQ0xBU1NJTkcpIHtcbiAgICAgIC8vIG1ha2UgYFByb21pc2UjdGhlbmAgcmV0dXJuIGEgcG9seWZpbGxlZCBgUHJvbWlzZWAgZm9yIG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXNcbiAgICAgIHJlZGVmaW5lKE5hdGl2ZVByb21pc2VQcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBuYXRpdmVUaGVuLmNhbGwodGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjQwXG4gICAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgICAgLy8gbWFrZXMgc3VyZSB0aGF0IG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXMgYFByb21pc2UjY2F0Y2hgIHByb3Blcmx5IHdvcmtzIHdpdGggcGF0Y2hlZCBgUHJvbWlzZSN0aGVuYFxuICAgICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ2NhdGNoJywgUHJvbWlzZUNvbnN0cnVjdG9yUHJvdG90eXBlWydjYXRjaCddLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvLyBtYWtlIGAuY29uc3RydWN0b3IgPT09IFByb21pc2VgIHdvcmsgZm9yIG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXNcbiAgICB0cnkge1xuICAgICAgZGVsZXRlIE5hdGl2ZVByb21pc2VQcm90b3R5cGUuY29uc3RydWN0b3I7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG4gICAgLy8gbWFrZSBgaW5zdGFuY2VvZiBQcm9taXNlYCB3b3JrIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICBzZXRQcm90b3R5cGVPZihOYXRpdmVQcm9taXNlUHJvdG90eXBlLCBQcm9taXNlQ29uc3RydWN0b3JQcm90b3R5cGUpO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIFByb21pc2U6IFByb21pc2VDb25zdHJ1Y3RvclxufSk7XG5cbnNldFRvU3RyaW5nVGFnKFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSwgZmFsc2UsIHRydWUpO1xuc2V0U3BlY2llcyhQUk9NSVNFKTtcblxuUHJvbWlzZVdyYXBwZXIgPSBnZXRCdWlsdEluKFBST01JU0UpO1xuXG4vLyBzdGF0aWNzXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZWplY3RcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgY2FwYWJpbGl0eS5yZWplY3QuY2FsbCh1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZXNvbHZlXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShJU19QVVJFICYmIHRoaXMgPT09IFByb21pc2VXcmFwcGVyID8gUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICAvLyBgUHJvbWlzZS5hbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyBgUHJvbWlzZS5yYWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIG5hdGl2ZUNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG5cbi8vIGBSZWZsZWN0LmNvbnN0cnVjdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuY29uc3RydWN0XG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShuYXRpdmVDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmF0aXZlQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcbnZhciBGT1JDRUQgPSBORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRztcblxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCwgc2hhbTogRk9SQ0VEIH0sIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIG5hdGl2ZUNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIGdldEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZW5mb3JjZTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcbnZhciBOYXRpdmVSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IE5hdGl2ZVJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuXG4vLyBcIm5ld1wiIHNob3VsZCBjcmVhdGUgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z1xudmFyIENPUlJFQ1RfTkVXID0gbmV3IE5hdGl2ZVJlZ0V4cChyZTEpICE9PSByZTE7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xuXG52YXIgRk9SQ0VEID0gREVTQ1JJUFRPUlMgJiYgaXNGb3JjZWQoJ1JlZ0V4cCcsICghQ09SUkVDVF9ORVcgfHwgVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJlMltNQVRDSF0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuIE5hdGl2ZVJlZ0V4cChyZTEpICE9IHJlMSB8fCBOYXRpdmVSZWdFeHAocmUyKSA9PSByZTIgfHwgTmF0aXZlUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpO1xuXG4vLyBgUmVnRXhwYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAtY29uc3RydWN0b3JcbmlmIChGT1JDRUQpIHtcbiAgdmFyIFJlZ0V4cFdyYXBwZXIgPSBmdW5jdGlvbiBSZWdFeHAocGF0dGVybiwgZmxhZ3MpIHtcbiAgICB2YXIgdGhpc0lzUmVnRXhwID0gdGhpcyBpbnN0YW5jZW9mIFJlZ0V4cFdyYXBwZXI7XG4gICAgdmFyIHBhdHRlcm5Jc1JlZ0V4cCA9IGlzUmVnRXhwKHBhdHRlcm4pO1xuICAgIHZhciBmbGFnc0FyZVVuZGVmaW5lZCA9IGZsYWdzID09PSB1bmRlZmluZWQ7XG4gICAgdmFyIHN0aWNreTtcblxuICAgIGlmICghdGhpc0lzUmVnRXhwICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiBwYXR0ZXJuLmNvbnN0cnVjdG9yID09PSBSZWdFeHBXcmFwcGVyICYmIGZsYWdzQXJlVW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcGF0dGVybjtcbiAgICB9XG5cbiAgICBpZiAoQ09SUkVDVF9ORVcpIHtcbiAgICAgIGlmIChwYXR0ZXJuSXNSZWdFeHAgJiYgIWZsYWdzQXJlVW5kZWZpbmVkKSBwYXR0ZXJuID0gcGF0dGVybi5zb3VyY2U7XG4gICAgfSBlbHNlIGlmIChwYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwV3JhcHBlcikge1xuICAgICAgaWYgKGZsYWdzQXJlVW5kZWZpbmVkKSBmbGFncyA9IGdldEZsYWdzLmNhbGwocGF0dGVybik7XG4gICAgICBwYXR0ZXJuID0gcGF0dGVybi5zb3VyY2U7XG4gICAgfVxuXG4gICAgaWYgKFVOU1VQUE9SVEVEX1kpIHtcbiAgICAgIHN0aWNreSA9ICEhZmxhZ3MgJiYgZmxhZ3MuaW5kZXhPZigneScpID4gLTE7XG4gICAgICBpZiAoc3RpY2t5KSBmbGFncyA9IGZsYWdzLnJlcGxhY2UoL3kvZywgJycpO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBpbmhlcml0SWZSZXF1aXJlZChcbiAgICAgIENPUlJFQ1RfTkVXID8gbmV3IE5hdGl2ZVJlZ0V4cChwYXR0ZXJuLCBmbGFncykgOiBOYXRpdmVSZWdFeHAocGF0dGVybiwgZmxhZ3MpLFxuICAgICAgdGhpc0lzUmVnRXhwID8gdGhpcyA6IFJlZ0V4cFByb3RvdHlwZSxcbiAgICAgIFJlZ0V4cFdyYXBwZXJcbiAgICApO1xuXG4gICAgaWYgKFVOU1VQUE9SVEVEX1kgJiYgc3RpY2t5KSB7XG4gICAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZShyZXN1bHQpO1xuICAgICAgc3RhdGUuc3RpY2t5ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5IGluIFJlZ0V4cFdyYXBwZXIgfHwgZGVmaW5lUHJvcGVydHkoUmVnRXhwV3JhcHBlciwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5hdGl2ZVJlZ0V4cFtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgTmF0aXZlUmVnRXhwW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlUmVnRXhwKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgd2hpbGUgKGtleXMubGVuZ3RoID4gaW5kZXgpIHByb3h5KGtleXNbaW5kZXgrK10pO1xuICBSZWdFeHBQcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZWdFeHBXcmFwcGVyO1xuICBSZWdFeHBXcmFwcGVyLnByb3RvdHlwZSA9IFJlZ0V4cFByb3RvdHlwZTtcbiAgcmVkZWZpbmUoZ2xvYmFsLCAnUmVnRXhwJywgUmVnRXhwV3JhcHBlcik7XG59XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC1AQHNwZWNpZXNcbnNldFNwZWNpZXMoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5leGVjYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS5leGVjXG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogLy4vLmV4ZWMgIT09IGV4ZWMgfSwge1xuICBleGVjOiBleGVjXG59KTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIG9iamVjdERlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciByZWdFeHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcbnZhciBVTlNVUFBPUlRFRF9ZID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpLlVOU1VQUE9SVEVEX1k7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3Ncbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1yZWdleHAtcHJvdG90eXBlLWZsYWdzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG5pZiAoREVTQ1JJUFRPUlMgJiYgKC8uL2cuZmxhZ3MgIT0gJ2cnIHx8IFVOU1VQUE9SVEVEX1kpKSB7XG4gIG9iamVjdERlZmluZVByb3BlcnR5TW9kdWxlLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IHJlZ0V4cEZsYWdzXG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBmbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcblxudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcbnZhciBuYXRpdmVUb1N0cmluZyA9IFJlZ0V4cFByb3RvdHlwZVtUT19TVFJJTkddO1xuXG52YXIgTk9UX0dFTkVSSUMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVUb1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG52YXIgSU5DT1JSRUNUX05BTUUgPSBuYXRpdmVUb1N0cmluZy5uYW1lICE9IFRPX1NUUklORztcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoTk9UX0dFTkVSSUMgfHwgSU5DT1JSRUNUX05BTUUpIHtcbiAgcmVkZWZpbmUoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwID0gU3RyaW5nKFIuc291cmNlKTtcbiAgICB2YXIgcmYgPSBSLmZsYWdzO1xuICAgIHZhciBmID0gU3RyaW5nKHJmID09PSB1bmRlZmluZWQgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCAmJiAhKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlKSA/IGZsYWdzLmNhbGwoUikgOiByZik7XG4gICAgcmV0dXJuICcvJyArIHAgKyAnLycgKyBmO1xuICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24nKTtcbnZhciBjb2xsZWN0aW9uU3Ryb25nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIGBTZXRgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC1vYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IGNvbGxlY3Rpb24oJ1NldCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvblN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLWVuZHN3aXRoIC0tIHNhZmVcbnZhciAkZW5kc1dpdGggPSAnJy5lbmRzV2l0aDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIENPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDID0gY29ycmVjdElzUmVnRXhwTG9naWMoJ2VuZHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdlbmRzV2l0aCcpO1xuICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZTtcbn0oKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmVuZHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogbWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFjb3JyZWN0SXNSZWdFeHBMb2dpYygnaW5jbHVkZXMnKSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+U3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpXG4gICAgICAuaW5kZXhPZihub3RBUmVnRXhwKHNlYXJjaFN0cmluZyksIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvclxuZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IFN0cmluZyhpdGVyYXRlZCksXG4gICAgaW5kZXg6IDBcbiAgfSk7XG4vLyBgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTtcbiAgc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChNQVRDSCwgbmF0aXZlTWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBtYXRjaGVyID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgICByZXR1cm4gbWF0Y2hlciAhPT0gdW5kZWZpbmVkID8gbWF0Y2hlci5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1hdGNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG5cbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG5cbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24nKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKFJFUExBQ0UsIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSwgcmVhc29uKSB7XG4gIHZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IHJlYXNvbi5SRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRTtcbiAgdmFyIFJFUExBQ0VfS0VFUFNfJDAgPSByZWFzb24uUkVQTEFDRV9LRUVQU18kMDtcbiAgdmFyIFVOU0FGRV9TVUJTVElUVVRFID0gUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPyAnJCcgOiAnJDAnO1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciByZXBsYWNlciA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIHJlcGxhY2VyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyByZXBsYWNlci5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogbmF0aXZlUmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICBpZiAoXG4gICAgICAgICghUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgJiYgUkVQTEFDRV9LRUVQU18kMCkgfHxcbiAgICAgICAgKHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdzdHJpbmcnICYmIHJlcGxhY2VWYWx1ZS5pbmRleE9mKFVOU0FGRV9TVUJTVElUVVRFKSA9PT0gLTEpXG4gICAgICApIHtcbiAgICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVSZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuXG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcblxuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuXG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2FtZS12YWx1ZScpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoU0VBUkNILCBuYXRpdmVTZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzZWFyY2hlciA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICAgIHJldHVybiBzZWFyY2hlciAhPT0gdW5kZWZpbmVkID8gc2VhcmNoZXIuY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVTZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcblxuICAgICAgdmFyIHByZXZpb3VzTGFzdEluZGV4ID0gcngubGFzdEluZGV4O1xuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgaWYgKCFzYW1lVmFsdWUocngubGFzdEluZGV4LCBwcmV2aW91c0xhc3RJbmRleCkpIHJ4Lmxhc3RJbmRleCA9IHByZXZpb3VzTGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1yZWdleHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY2FsbFJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLlVOU1VQUE9SVEVEX1k7XG52YXIgYXJyYXlQdXNoID0gW10ucHVzaDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBNQVhfVUlOVDMyID0gMHhGRkZGRkZGRjtcblxuLy8gQEBzcGxpdCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKFNQTElULCBuYXRpdmVTcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnLnNwbGl0KC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT0gNCB8fFxuICAgICdhYicuc3BsaXQoLyg/OmFiKSovKS5sZW5ndGggIT0gMiB8fFxuICAgICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT0gNCB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tYXNzZXJ0aW9uLWNhcHR1cmluZy1ncm91cCwgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgJy4nLnNwbGl0KC8oKSgpLykubGVuZ3RoID4gMSB8fFxuICAgICcnLnNwbGl0KC8uPy8pLmxlbmd0aFxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFtzdHJpbmddO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlU3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltKTtcbiAgICAgIH1cbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhwRXhlYy5jYWxsKHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weS5sYXN0SW5kZXg7XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmcubGVuZ3RoKSBhcnJheVB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXQubGVuZ3RoID49IGxpbSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHkubGFzdEluZGV4ID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXgrKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dC5sZW5ndGggPiBsaW0gPyBvdXRwdXQuc2xpY2UoMCwgbGltKSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnLnNwbGl0KHVuZGVmaW5lZCwgMCkubGVuZ3RoKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IG5hdGl2ZVNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIGludGVybmFsU3BsaXQgPSBuYXRpdmVTcGxpdDtcblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3BsaXRcbiAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgc3BsaXR0ZXIgPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICAgIHJldHVybiBzcGxpdHRlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gc3BsaXR0ZXIuY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KVxuICAgICAgICA6IGludGVybmFsU3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChyZWdleHAsIGxpbWl0KSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09IG5hdGl2ZVNwbGl0KTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoVU5TVVBQT1JURURfWSA/ICdnJyA6ICd5Jyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhVTlNVUFBPUlRFRF9ZID8gJ14oPzonICsgcnguc291cmNlICsgJyknIDogcngsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBVTlNVUFBPUlRFRF9ZID8gMCA6IHE7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFVOU1VQUE9SVEVEX1kgPyBTLnNsaWNlKHEpIDogUyk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChVTlNVUFBPUlRFRF9ZID8gcSA6IDApKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQS5wdXNoKFMuc2xpY2UocCwgcSkpO1xuICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgQS5wdXNoKHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIEEucHVzaChTLnNsaWNlKHApKTtcbiAgICAgIHJldHVybiBBO1xuICAgIH1cbiAgXTtcbn0sIFVOU1VQUE9SVEVEX1kpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS1zdGFydHN3aXRoIC0tIHNhZmVcbnZhciAkc3RhcnRzV2l0aCA9ICcnLnN0YXJ0c1dpdGg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyA9IGNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdzdGFydHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdzdGFydHNXaXRoJyk7XG4gIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlO1xufSgpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdGFydHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICBub3RBUmVnRXhwKHNlYXJjaFN0cmluZyk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgobWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIGZvcmNlZFN0cmluZ1RyaW1NZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnRyaW1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdUcmltTWV0aG9kKCd0cmltJykgfSwge1xuICB0cmltOiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzKTtcbiAgfVxufSk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLmFzeW5jSXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5hc3luY2l0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2FzeW5jSXRlcmF0b3InKTtcbiIsIi8vIGBTeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvblxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG5cbnZhciBOYXRpdmVTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xuXG5pZiAoREVTQ1JJUFRPUlMgJiYgdHlwZW9mIE5hdGl2ZVN5bWJvbCA9PSAnZnVuY3Rpb24nICYmICghKCdkZXNjcmlwdGlvbicgaW4gTmF0aXZlU3ltYm9sLnByb3RvdHlwZSkgfHxcbiAgLy8gU2FmYXJpIDEyIGJ1Z1xuICBOYXRpdmVTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkXG4pKSB7XG4gIHZhciBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUgPSB7fTtcbiAgLy8gd3JhcCBTeW1ib2wgY29uc3RydWN0b3IgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHVuZGVmaW5lZCBkZXNjcmlwdGlvblxuICB2YXIgU3ltYm9sV3JhcHBlciA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciByZXN1bHQgPSB0aGlzIGluc3RhbmNlb2YgU3ltYm9sV3JhcHBlclxuICAgICAgPyBuZXcgTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKVxuICAgICAgLy8gaW4gRWRnZSAxMywgU3RyaW5nKFN5bWJvbCh1bmRlZmluZWQpKSA9PT0gJ1N5bWJvbCh1bmRlZmluZWQpJ1xuICAgICAgOiBkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gTmF0aXZlU3ltYm9sKCkgOiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gJycpIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZVtyZXN1bHRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFN5bWJvbFdyYXBwZXIsIE5hdGl2ZVN5bWJvbCk7XG4gIHZhciBzeW1ib2xQcm90b3R5cGUgPSBTeW1ib2xXcmFwcGVyLnByb3RvdHlwZSA9IE5hdGl2ZVN5bWJvbC5wcm90b3R5cGU7XG4gIHN5bWJvbFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bWJvbFdyYXBwZXI7XG5cbiAgdmFyIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG90eXBlLnRvU3RyaW5nO1xuICB2YXIgbmF0aXZlID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgndGVzdCcpKSA9PSAnU3ltYm9sKHRlc3QpJztcbiAgdmFyIHJlZ2V4cCA9IC9eU3ltYm9sXFwoKC4qKVxcKVteKV0rJC87XG4gIGRlZmluZVByb3BlcnR5KHN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgdmFyIHN5bWJvbCA9IGlzT2JqZWN0KHRoaXMpID8gdGhpcy52YWx1ZU9mKCkgOiB0aGlzO1xuICAgICAgdmFyIHN0cmluZyA9IHN5bWJvbFRvU3RyaW5nLmNhbGwoc3ltYm9sKTtcbiAgICAgIGlmIChoYXMoRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlLCBzeW1ib2wpKSByZXR1cm4gJyc7XG4gICAgICB2YXIgZGVzYyA9IG5hdGl2ZSA/IHN0cmluZy5zbGljZSg3LCAtMSkgOiBzdHJpbmcucmVwbGFjZShyZWdleHAsICckMScpO1xuICAgICAgcmV0dXJuIGRlc2MgPT09ICcnID8gdW5kZWZpbmVkIDogZGVzYztcbiAgICB9XG4gIH0pO1xuXG4gICQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgU3ltYm9sOiBTeW1ib2xXcmFwcGVyXG4gIH0pO1xufVxuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5pdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLml0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIG5hdGl2ZU9iamVjdENyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIEhJRERFTiA9IHNoYXJlZEtleSgnaGlkZGVuJyk7XG52YXIgU1lNQk9MID0gJ1N5bWJvbCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1lNQk9MKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkc3RyaW5naWZ5ID0gZ2V0QnVpbHRJbignSlNPTicsICdzdHJpbmdpZnknKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N0cmluZy10by1zeW1ib2wtcmVnaXN0cnknKTtcbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBVU0VfU0VUVEVSID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdENyZWF0ZShuYXRpdmVEZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoTywgUCwgQXR0cmlidXRlcykge1xuICB2YXIgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIFApO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcikgZGVsZXRlIE9iamVjdFByb3RvdHlwZVtQXTtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yICYmIE8gIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZSwgUCwgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcik7XG4gIH1cbn0gOiBuYXRpdmVEZWZpbmVQcm9wZXJ0eTtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnLCBkZXNjcmlwdGlvbikge1xuICB2YXIgc3ltYm9sID0gQWxsU3ltYm9sc1t0YWddID0gbmF0aXZlT2JqZWN0Q3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHNldEludGVybmFsU3RhdGUoc3ltYm9sLCB7XG4gICAgdHlwZTogU1lNQk9MLFxuICAgIHRhZzogdGFnLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykgc3ltYm9sLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHJldHVybiBzeW1ib2w7XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGl0KSBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBpZiAoTyA9PT0gT2JqZWN0UHJvdG90eXBlKSAkZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCwgQXR0cmlidXRlcyk7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUF0dHJpYnV0ZXMuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoTywgSElEREVOKSkgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgSElEREVOLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwge30pKTtcbiAgICAgIE9bSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhPLCBISURERU4pICYmIE9bSElEREVOXVtrZXldKSBPW0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgQXR0cmlidXRlcyA9IG5hdGl2ZU9iamVjdENyZWF0ZShBdHRyaWJ1dGVzLCB7IGVudW1lcmFibGU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzY3JpcHRvcihPLCBrZXksIEF0dHJpYnV0ZXMpO1xuICB9IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBrZXksIEF0dHJpYnV0ZXMpO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcGVydGllcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKHByb3BlcnRpZXMpLmNvbmNhdCgkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHByb3BlcnRpZXMpKTtcbiAgJGZvckVhY2goa2V5cywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghREVTQ1JJUFRPUlMgfHwgJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocHJvcGVydGllcywga2V5KSkgJGRlZmluZVByb3BlcnR5KE8sIGtleSwgcHJvcGVydGllc1trZXldKTtcbiAgfSk7XG4gIHJldHVybiBPO1xufTtcblxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gbmF0aXZlT2JqZWN0Q3JlYXRlKE8pIDogJGRlZmluZVByb3BlcnRpZXMobmF0aXZlT2JqZWN0Q3JlYXRlKE8pLCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBQID0gdG9QcmltaXRpdmUoViwgdHJ1ZSk7XG4gIHZhciBlbnVtZXJhYmxlID0gbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh0aGlzLCBQKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXMoQWxsU3ltYm9scywgUCkgJiYgIWhhcyhPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzKHRoaXMsIFApIHx8ICFoYXMoQWxsU3ltYm9scywgUCkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdID8gZW51bWVyYWJsZSA6IHRydWU7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIHZhciBpdCA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIGRlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG4gIGlmIChkZXNjcmlwdG9yICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIHtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICB9XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhoaWRkZW5LZXlzLCBrZXkpKSByZXN1bHQucHVzaChrZXkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pIHtcbiAgdmFyIElTX09CSkVDVF9QUk9UT1RZUEUgPSBPID09PSBPYmplY3RQcm90b3R5cGU7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoSVNfT0JKRUNUX1BST1RPVFlQRSA/IE9iamVjdFByb3RvdHlwZVN5bWJvbHMgOiB0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICghSVNfT0JKRUNUX1BST1RPVFlQRSB8fCBoYXMoT2JqZWN0UHJvdG90eXBlLCBrZXkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLWNvbnN0cnVjdG9yXG5pZiAoIU5BVElWRV9TWU1CT0wpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gIWFyZ3VtZW50cy5sZW5ndGggfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBTdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgdGFnID0gdWlkKGRlc2NyaXB0aW9uKTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlKSBzZXR0ZXIuY2FsbChPYmplY3RQcm90b3R5cGVTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2NyaXB0b3IodGhpcywgdGFnLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBVU0VfU0VUVEVSKSBzZXRTeW1ib2xEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiBzZXR0ZXIgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnLCBkZXNjcmlwdGlvbik7XG4gIH07XG5cbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS50YWc7XG4gIH0pO1xuXG4gIHJlZGVmaW5lKCRTeW1ib2wsICd3aXRob3V0U2V0dGVyJywgZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIHdyYXAodWlkKGRlc2NyaXB0aW9uKSwgZGVzY3JpcHRpb24pO1xuICB9KTtcblxuICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gJGRlZmluZVByb3BlcnR5O1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZiA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdlbGxLbm93blN5bWJvbChuYW1lKSwgbmFtZSk7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtU3ltYm9sLWRlc2NyaXB0aW9uXG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIUlTX1BVUkUpIHtcbiAgICAgIHJlZGVmaW5lKE9iamVjdFByb3RvdHlwZSwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIU5BVElWRV9TWU1CT0wgfSwge1xuICBTeW1ib2w6ICRTeW1ib2xcbn0pO1xuXG4kZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiBTWU1CT0wsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgU3ltYm9sLmZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmZvclxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcoa2V5KTtcbiAgICBpZiAoaGFzKFN0cmluZ1RvU3ltYm9sUmVnaXN0cnksIHN0cmluZykpIHJldHVybiBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ107XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woc3RyaW5nKTtcbiAgICBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ10gPSBzeW1ib2w7XG4gICAgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1ib2xdID0gc3RyaW5nO1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH0sXG4gIC8vIGBTeW1ib2wua2V5Rm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wua2V5Zm9yXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sJyk7XG4gICAgaWYgKGhhcyhTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5LCBzeW0pKSByZXR1cm4gU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1dO1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gZmFsc2U7IH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eXN5bWJvbHNcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogZmFpbHMoZnVuY3Rpb24gKCkgeyBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZigxKTsgfSkgfSwge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2QgYmVoYXZpb3Igd2l0aCBzeW1ib2xzXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5XG5pZiAoJHN0cmluZ2lmeSkge1xuICB2YXIgRk9SQ0VEX0pTT05fU1RSSU5HSUZZID0gIU5BVElWRV9TWU1CT0wgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKCk7XG4gICAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgICByZXR1cm4gJHN0cmluZ2lmeShbc3ltYm9sXSkgIT0gJ1tudWxsXSdcbiAgICAgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAgICAgfHwgJHN0cmluZ2lmeSh7IGE6IHN5bWJvbCB9KSAhPSAne30nXG4gICAgICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICAgICAgfHwgJHN0cmluZ2lmeShPYmplY3Qoc3ltYm9sKSkgIT0gJ3t9JztcbiAgfSk7XG5cbiAgJCh7IHRhcmdldDogJ0pTT04nLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRF9KU09OX1NUUklOR0lGWSB9LCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCwgcmVwbGFjZXIsIHNwYWNlKSB7XG4gICAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgICB2YXIgaW5kZXggPSAxO1xuICAgICAgdmFyICRyZXBsYWNlcjtcbiAgICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaW5kZXgpIGFyZ3MucHVzaChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgICAgJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgICAgcmV0dXJuICRzdHJpbmdpZnkuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0pIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG59XG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC50b1N0cmluZ1RhZ2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnRvc3RyaW5ndGFnXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIEludGVybmFsTWV0YWRhdGFNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKTtcbnZhciBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24nKTtcbnZhciBjb2xsZWN0aW9uV2VhayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLXdlYWsnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBlbmZvcmNlSXRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZW5mb3JjZTtcbnZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG5cbnZhciBJU19JRTExID0gIWdsb2JhbC5BY3RpdmVYT2JqZWN0ICYmICdBY3RpdmVYT2JqZWN0JyBpbiBnbG9iYWw7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSAtLSBzYWZlXG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciBJbnRlcm5hbFdlYWtNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG4vLyBgV2Vha01hcGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC1jb25zdHJ1Y3RvclxudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSBjb2xsZWN0aW9uKCdXZWFrTWFwJywgd3JhcHBlciwgY29sbGVjdGlvbldlYWspO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG4vLyBXZSBjYW4ndCB1c2UgZmVhdHVyZSBkZXRlY3Rpb24gYmVjYXVzZSBpdCBjcmFzaCBzb21lIG9sZCBJRSBidWlsZHNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80ODVcbmlmIChOQVRJVkVfV0VBS19NQVAgJiYgSVNfSUUxMSkge1xuICBJbnRlcm5hbFdlYWtNYXAgPSBjb2xsZWN0aW9uV2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCAnV2Vha01hcCcsIHRydWUpO1xuICBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlLlJFUVVJUkVEID0gdHJ1ZTtcbiAgdmFyIFdlYWtNYXBQcm90b3R5cGUgPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVEZWxldGUgPSBXZWFrTWFwUHJvdG90eXBlWydkZWxldGUnXTtcbiAgdmFyIG5hdGl2ZUhhcyA9IFdlYWtNYXBQcm90b3R5cGUuaGFzO1xuICB2YXIgbmF0aXZlR2V0ID0gV2Vha01hcFByb3RvdHlwZS5nZXQ7XG4gIHZhciBuYXRpdmVTZXQgPSBXZWFrTWFwUHJvdG90eXBlLnNldDtcbiAgcmVkZWZpbmVBbGwoV2Vha01hcFByb3RvdHlwZSwge1xuICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUl0ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFzdGF0ZS5mcm96ZW4pIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZURlbGV0ZS5jYWxsKHRoaXMsIGtleSkgfHwgc3RhdGUuZnJvemVuWydkZWxldGUnXShrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlRGVsZXRlLmNhbGwodGhpcywga2V5KTtcbiAgICB9LFxuICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJdGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVIYXMuY2FsbCh0aGlzLCBrZXkpIHx8IHN0YXRlLmZyb3plbi5oYXMoa2V5KTtcbiAgICAgIH0gcmV0dXJuIG5hdGl2ZUhhcy5jYWxsKHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpICYmICFpc0V4dGVuc2libGUoa2V5KSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSXRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIXN0YXRlLmZyb3plbikgc3RhdGUuZnJvemVuID0gbmV3IEludGVybmFsV2Vha01hcCgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlSGFzLmNhbGwodGhpcywga2V5KSA/IG5hdGl2ZUdldC5jYWxsKHRoaXMsIGtleSkgOiBzdGF0ZS5mcm96ZW4uZ2V0KGtleSk7XG4gICAgICB9IHJldHVybiBuYXRpdmVHZXQuY2FsbCh0aGlzLCBrZXkpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJdGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIG5hdGl2ZUhhcy5jYWxsKHRoaXMsIGtleSkgPyBuYXRpdmVTZXQuY2FsbCh0aGlzLCBrZXksIHZhbHVlKSA6IHN0YXRlLmZyb3plbi5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgbmF0aXZlU2V0LmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25XZWFrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24td2VhaycpO1xuXG4vLyBgV2Vha1NldGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC1jb25zdHJ1Y3RvclxuY29sbGVjdGlvbignV2Vha1NldCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIGNvbGxlY3Rpb25XZWFrKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4YCBnZXR0ZXJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9rZWl0aGFtdXMvcHJvcG9zYWwtYXJyYXktbGFzdFxuaWYgKERFU0NSSVBUT1JTICYmICEoJ2xhc3RJbmRleCcgaW4gW10pKSB7XG4gIGRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ2xhc3RJbmRleCcsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBsYXN0SW5kZXgoKSB7XG4gICAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIHJldHVybiBsZW4gPT0gMCA/IDAgOiBsZW4gLSAxO1xuICAgIH1cbiAgfSk7XG5cbiAgYWRkVG9VbnNjb3BhYmxlcygnbGFzdEluZGV4Jyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBjb2xsZWN0aW9uRGVsZXRlQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tZGVsZXRlLWFsbCcpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS5kZWxldGVBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIGRlbGV0ZUFsbDogZnVuY3Rpb24gZGVsZXRlQWxsKC8qIC4uLmVsZW1lbnRzICovKSB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb25EZWxldGVBbGwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXAgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRNYXBJdGVyYXRvcihtYXApO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgcmV0dXJuICFpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgc3RvcCkge1xuICAgICAgaWYgKCFib3VuZEZ1bmN0aW9uKHZhbHVlLCBrZXksIG1hcCkpIHJldHVybiBzdG9wKCk7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlLCBJU19JVEVSQVRPUjogdHJ1ZSwgSU5URVJSVVBURUQ6IHRydWUgfSkuc3RvcHBlZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXAgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRNYXBJdGVyYXRvcihtYXApO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgdmFyIG5ld01hcCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG1hcCwgZ2V0QnVpbHRJbignTWFwJykpKSgpO1xuICAgIHZhciBzZXR0ZXIgPSBhRnVuY3Rpb24obmV3TWFwLnNldCk7XG4gICAgaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChib3VuZEZ1bmN0aW9uKHZhbHVlLCBrZXksIG1hcCkpIHNldHRlci5jYWxsKG5ld01hcCwga2V5LCB2YWx1ZSk7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlLCBJU19JVEVSQVRPUjogdHJ1ZSB9KTtcbiAgICByZXR1cm4gbmV3TWFwO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0TWFwSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1hcC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS5maW5kS2V5YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBmaW5kS2V5OiBmdW5jdGlvbiBmaW5kS2V5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldE1hcEl0ZXJhdG9yKG1hcCk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICByZXR1cm4gaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKGtleSwgdmFsdWUsIHN0b3ApIHtcbiAgICAgIGlmIChib3VuZEZ1bmN0aW9uKHZhbHVlLCBrZXksIG1hcCkpIHJldHVybiBzdG9wKGtleSk7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlLCBJU19JVEVSQVRPUjogdHJ1ZSwgSU5URVJSVVBURUQ6IHRydWUgfSkucmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0TWFwSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1hcC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldE1hcEl0ZXJhdG9yKG1hcCk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICByZXR1cm4gaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKGtleSwgdmFsdWUsIHN0b3ApIHtcbiAgICAgIGlmIChib3VuZEZ1bmN0aW9uKHZhbHVlLCBrZXksIG1hcCkpIHJldHVybiBzdG9wKHZhbHVlKTtcbiAgICB9LCB7IEFTX0VOVFJJRVM6IHRydWUsIElTX0lURVJBVE9SOiB0cnVlLCBJTlRFUlJVUFRFRDogdHJ1ZSB9KS5yZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0TWFwSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1hcC1pdGVyYXRvcicpO1xudmFyIHNhbWVWYWx1ZVplcm8gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2FtZS12YWx1ZS16ZXJvJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBNYXAucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCkge1xuICAgIHJldHVybiBpdGVyYXRlKGdldE1hcEl0ZXJhdG9yKGFuT2JqZWN0KHRoaXMpKSwgZnVuY3Rpb24gKGtleSwgdmFsdWUsIHN0b3ApIHtcbiAgICAgIGlmIChzYW1lVmFsdWVaZXJvKHZhbHVlLCBzZWFyY2hFbGVtZW50KSkgcmV0dXJuIHN0b3AoKTtcbiAgICB9LCB7IEFTX0VOVFJJRVM6IHRydWUsIElTX0lURVJBVE9SOiB0cnVlLCBJTlRFUlJVUFRFRDogdHJ1ZSB9KS5zdG9wcGVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIGtleU9mOiBmdW5jdGlvbiBrZXlPZihzZWFyY2hFbGVtZW50KSB7XG4gICAgcmV0dXJuIGl0ZXJhdGUoZ2V0TWFwSXRlcmF0b3IoYW5PYmplY3QodGhpcykpLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgc3RvcCkge1xuICAgICAgaWYgKHZhbHVlID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gc3RvcChrZXkpO1xuICAgIH0sIHsgQVNfRU5UUklFUzogdHJ1ZSwgSVNfSVRFUkFUT1I6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGdldE1hcEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tYXAtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYE1hcC5wcm90b3R5cGUubWFwS2V5c2AgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgbWFwS2V5czogZnVuY3Rpb24gbWFwS2V5cyhjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBtYXAgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRNYXBJdGVyYXRvcihtYXApO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgdmFyIG5ld01hcCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG1hcCwgZ2V0QnVpbHRJbignTWFwJykpKSgpO1xuICAgIHZhciBzZXR0ZXIgPSBhRnVuY3Rpb24obmV3TWFwLnNldCk7XG4gICAgaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIHNldHRlci5jYWxsKG5ld01hcCwgYm91bmRGdW5jdGlvbih2YWx1ZSwga2V5LCBtYXApLCB2YWx1ZSk7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlLCBJU19JVEVSQVRPUjogdHJ1ZSB9KTtcbiAgICByZXR1cm4gbmV3TWFwO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0TWFwSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1hcC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS5tYXBWYWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIG1hcFZhbHVlczogZnVuY3Rpb24gbWFwVmFsdWVzKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldE1hcEl0ZXJhdG9yKG1hcCk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICB2YXIgbmV3TWFwID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IobWFwLCBnZXRCdWlsdEluKCdNYXAnKSkpKCk7XG4gICAgdmFyIHNldHRlciA9IGFGdW5jdGlvbihuZXdNYXAuc2V0KTtcbiAgICBpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgc2V0dGVyLmNhbGwobmV3TWFwLCBrZXksIGJvdW5kRnVuY3Rpb24odmFsdWUsIGtleSwgbWFwKSk7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlLCBJU19JVEVSQVRPUjogdHJ1ZSB9KTtcbiAgICByZXR1cm4gbmV3TWFwO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBNYXAucHJvdG90eXBlLm1lcmdlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBtZXJnZTogZnVuY3Rpb24gbWVyZ2UoaXRlcmFibGUgLyogLi4uaXRlcmJsZXMgKi8pIHtcbiAgICB2YXIgbWFwID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHNldHRlciA9IGFGdW5jdGlvbihtYXAuc2V0KTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBpdGVyYXRlKGFyZ3VtZW50c1tpKytdLCBzZXR0ZXIsIHsgdGhhdDogbWFwLCBBU19FTlRSSUVTOiB0cnVlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbWFwO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgZ2V0TWFwSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1hcC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgTWFwLnByb3RvdHlwZS5yZWR1Y2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICB2YXIgbWFwID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0TWFwSXRlcmF0b3IobWFwKTtcbiAgICB2YXIgbm9Jbml0aWFsID0gYXJndW1lbnRzLmxlbmd0aCA8IDI7XG4gICAgdmFyIGFjY3VtdWxhdG9yID0gbm9Jbml0aWFsID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKG5vSW5pdGlhbCkge1xuICAgICAgICBub0luaXRpYWwgPSBmYWxzZTtcbiAgICAgICAgYWNjdW11bGF0b3IgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjY3VtdWxhdG9yID0gY2FsbGJhY2tmbihhY2N1bXVsYXRvciwgdmFsdWUsIGtleSwgbWFwKTtcbiAgICAgIH1cbiAgICB9LCB7IEFTX0VOVFJJRVM6IHRydWUsIElTX0lURVJBVE9SOiB0cnVlIH0pO1xuICAgIGlmIChub0luaXRpYWwpIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IG1hcCB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRNYXBJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWFwLWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnTWFwJywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgbWFwID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0TWFwSXRlcmF0b3IobWFwKTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgIHJldHVybiBpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgc3RvcCkge1xuICAgICAgaWYgKGJvdW5kRnVuY3Rpb24odmFsdWUsIGtleSwgbWFwKSkgcmV0dXJuIHN0b3AoKTtcbiAgICB9LCB7IEFTX0VOVFJJRVM6IHRydWUsIElTX0lURVJBVE9SOiB0cnVlLCBJTlRFUlJVUFRFRDogdHJ1ZSB9KS5zdG9wcGVkO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLnVwZGF0ZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoa2V5LCBjYWxsYmFjayAvKiAsIHRodW5rICovKSB7XG4gICAgdmFyIG1hcCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFGdW5jdGlvbihjYWxsYmFjayk7XG4gICAgdmFyIGlzUHJlc2VudEluTWFwID0gbWFwLmhhcyhrZXkpO1xuICAgIGlmICghaXNQcmVzZW50SW5NYXAgJiYgbGVuZ3RoIDwgMykge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdVcGRhdGluZyBhYnNlbnQgdmFsdWUnKTtcbiAgICB9XG4gICAgdmFyIHZhbHVlID0gaXNQcmVzZW50SW5NYXAgPyBtYXAuZ2V0KGtleSkgOiBhRnVuY3Rpb24obGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCkoa2V5LCBtYXApO1xuICAgIG1hcC5zZXQoa2V5LCBjYWxsYmFjayh2YWx1ZSwga2V5LCBtYXApKTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGNvbGxlY3Rpb25BZGRBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1hZGQtYWxsJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmFkZEFsbGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgYWRkQWxsOiBmdW5jdGlvbiBhZGRBbGwoLyogLi4uZWxlbWVudHMgKi8pIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbkFkZEFsbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGNvbGxlY3Rpb25EZWxldGVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1kZWxldGUtYWxsJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmRlbGV0ZUFsbGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgZGVsZXRlQWxsOiBmdW5jdGlvbiBkZWxldGVBbGwoLyogLi4uZWxlbWVudHMgKi8pIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbkRlbGV0ZUFsbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5kaWZmZXJlbmNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXNldC1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIGRpZmZlcmVuY2U6IGZ1bmN0aW9uIGRpZmZlcmVuY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIG5ld1NldCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHNldCwgZ2V0QnVpbHRJbignU2V0JykpKShzZXQpO1xuICAgIHZhciByZW1vdmVyID0gYUZ1bmN0aW9uKG5ld1NldFsnZGVsZXRlJ10pO1xuICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmVtb3Zlci5jYWxsKG5ld1NldCwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdTZXQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRTZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc2V0LWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0U2V0SXRlcmF0b3Ioc2V0KTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgIHJldHVybiAhaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoIWJvdW5kRnVuY3Rpb24odmFsdWUsIHZhbHVlLCBzZXQpKSByZXR1cm4gc3RvcCgpO1xuICAgIH0sIHsgSVNfSVRFUkFUT1I6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnN0b3BwZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBnZXRTZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc2V0LWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0U2V0SXRlcmF0b3Ioc2V0KTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgIHZhciBuZXdTZXQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihzZXQsIGdldEJ1aWx0SW4oJ1NldCcpKSkoKTtcbiAgICB2YXIgYWRkZXIgPSBhRnVuY3Rpb24obmV3U2V0LmFkZCk7XG4gICAgaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoYm91bmRGdW5jdGlvbih2YWx1ZSwgdmFsdWUsIHNldCkpIGFkZGVyLmNhbGwobmV3U2V0LCB2YWx1ZSk7XG4gICAgfSwgeyBJU19JVEVSQVRPUjogdHJ1ZSB9KTtcbiAgICByZXR1cm4gbmV3U2V0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0U2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXNldC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldFNldEl0ZXJhdG9yKHNldCk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICByZXR1cm4gaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoYm91bmRGdW5jdGlvbih2YWx1ZSwgdmFsdWUsIHNldCkpIHJldHVybiBzdG9wKHZhbHVlKTtcbiAgICB9LCB7IElTX0lURVJBVE9SOiB0cnVlLCBJTlRFUlJVUFRFRDogdHJ1ZSB9KS5yZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmludGVyc2VjdGlvbmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBpbnRlcnNlY3Rpb246IGZ1bmN0aW9uIGludGVyc2VjdGlvbihpdGVyYWJsZSkge1xuICAgIHZhciBzZXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgbmV3U2V0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Ioc2V0LCBnZXRCdWlsdEluKCdTZXQnKSkpKCk7XG4gICAgdmFyIGhhc0NoZWNrID0gYUZ1bmN0aW9uKHNldC5oYXMpO1xuICAgIHZhciBhZGRlciA9IGFGdW5jdGlvbihuZXdTZXQuYWRkKTtcbiAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChoYXNDaGVjay5jYWxsKHNldCwgdmFsdWUpKSBhZGRlci5jYWxsKG5ld1NldCwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdTZXQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFNldC5wcm90b3R5cGUuaXNEaXNqb2ludEZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXQtbWV0aG9kcy8jU2V0LnByb3RvdHlwZS5pc0Rpc2pvaW50RnJvbVxuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBpc0Rpc2pvaW50RnJvbTogZnVuY3Rpb24gaXNEaXNqb2ludEZyb20oaXRlcmFibGUpIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGhhc0NoZWNrID0gYUZ1bmN0aW9uKHNldC5oYXMpO1xuICAgIHJldHVybiAhaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoaGFzQ2hlY2suY2FsbChzZXQsIHZhbHVlKSA9PT0gdHJ1ZSkgcmV0dXJuIHN0b3AoKTtcbiAgICB9LCB7IElOVEVSUlVQVEVEOiB0cnVlIH0pLnN0b3BwZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5pc1N1YnNldE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0LW1ldGhvZHMvI1NldC5wcm90b3R5cGUuaXNTdWJzZXRPZlxuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBpc1N1YnNldE9mOiBmdW5jdGlvbiBpc1N1YnNldE9mKGl0ZXJhYmxlKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IodGhpcyk7XG4gICAgdmFyIG90aGVyU2V0ID0gYW5PYmplY3QoaXRlcmFibGUpO1xuICAgIHZhciBoYXNDaGVjayA9IG90aGVyU2V0LmhhcztcbiAgICBpZiAodHlwZW9mIGhhc0NoZWNrICE9ICdmdW5jdGlvbicpIHtcbiAgICAgIG90aGVyU2V0ID0gbmV3IChnZXRCdWlsdEluKCdTZXQnKSkoaXRlcmFibGUpO1xuICAgICAgaGFzQ2hlY2sgPSBhRnVuY3Rpb24ob3RoZXJTZXQuaGFzKTtcbiAgICB9XG4gICAgcmV0dXJuICFpdGVyYXRlKGl0ZXJhdG9yLCBmdW5jdGlvbiAodmFsdWUsIHN0b3ApIHtcbiAgICAgIGlmIChoYXNDaGVjay5jYWxsKG90aGVyU2V0LCB2YWx1ZSkgPT09IGZhbHNlKSByZXR1cm4gc3RvcCgpO1xuICAgIH0sIHsgSVNfSVRFUkFUT1I6IHRydWUsIElOVEVSUlVQVEVEOiB0cnVlIH0pLnN0b3BwZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFNldC5wcm90b3R5cGUuaXNTdXBlcnNldE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0LW1ldGhvZHMvI1NldC5wcm90b3R5cGUuaXNTdXBlcnNldE9mXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIGlzU3VwZXJzZXRPZjogZnVuY3Rpb24gaXNTdXBlcnNldE9mKGl0ZXJhYmxlKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBoYXNDaGVjayA9IGFGdW5jdGlvbihzZXQuaGFzKTtcbiAgICByZXR1cm4gIWl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uICh2YWx1ZSwgc3RvcCkge1xuICAgICAgaWYgKGhhc0NoZWNrLmNhbGwoc2V0LCB2YWx1ZSkgPT09IGZhbHNlKSByZXR1cm4gc3RvcCgpO1xuICAgIH0sIHsgSU5URVJSVVBURUQ6IHRydWUgfSkuc3RvcHBlZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRTZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc2V0LWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldFNldEl0ZXJhdG9yKHNldCk7XG4gICAgdmFyIHNlcCA9IHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIGl0ZXJhdGUoaXRlcmF0b3IsIHJlc3VsdC5wdXNoLCB7IHRoYXQ6IHJlc3VsdCwgSVNfSVRFUkFUT1I6IHRydWUgfSk7XG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKHNlcCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBnZXRTZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtc2V0LWl0ZXJhdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBTZXQucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdTZXQnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIGl0ZXJhdG9yID0gZ2V0U2V0SXRlcmF0b3Ioc2V0KTtcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgIHZhciBuZXdTZXQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihzZXQsIGdldEJ1aWx0SW4oJ1NldCcpKSkoKTtcbiAgICB2YXIgYWRkZXIgPSBhRnVuY3Rpb24obmV3U2V0LmFkZCk7XG4gICAgaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBhZGRlci5jYWxsKG5ld1NldCwgYm91bmRGdW5jdGlvbih2YWx1ZSwgdmFsdWUsIHNldCkpO1xuICAgIH0sIHsgSVNfSVRFUkFUT1I6IHRydWUgfSk7XG4gICAgcmV0dXJuIG5ld1NldDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xudmFyIGdldFNldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zZXQtaXRlcmF0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFNldC5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldFNldEl0ZXJhdG9yKHNldCk7XG4gICAgdmFyIG5vSW5pdGlhbCA9IGFyZ3VtZW50cy5sZW5ndGggPCAyO1xuICAgIHZhciBhY2N1bXVsYXRvciA9IG5vSW5pdGlhbCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAobm9Jbml0aWFsKSB7XG4gICAgICAgIG5vSW5pdGlhbCA9IGZhbHNlO1xuICAgICAgICBhY2N1bXVsYXRvciA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWNjdW11bGF0b3IgPSBjYWxsYmFja2ZuKGFjY3VtdWxhdG9yLCB2YWx1ZSwgdmFsdWUsIHNldCk7XG4gICAgICB9XG4gICAgfSwgeyBJU19JVEVSQVRPUjogdHJ1ZSB9KTtcbiAgICBpZiAobm9Jbml0aWFsKSB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBzZXQgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0U2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXNldC1pdGVyYXRvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS5zb21lYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBpdGVyYXRvciA9IGdldFNldEl0ZXJhdG9yKHNldCk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICByZXR1cm4gaXRlcmF0ZShpdGVyYXRvciwgZnVuY3Rpb24gKHZhbHVlLCBzdG9wKSB7XG4gICAgICBpZiAoYm91bmRGdW5jdGlvbih2YWx1ZSwgdmFsdWUsIHNldCkpIHJldHVybiBzdG9wKCk7XG4gICAgfSwgeyBJU19JVEVSQVRPUjogdHJ1ZSwgSU5URVJSVVBURUQ6IHRydWUgfSkuc3RvcHBlZDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxuLy8gYFNldC5wcm90b3R5cGUuc3ltbWV0cmljRGlmZmVyZW5jZWAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBzeW1tZXRyaWNEaWZmZXJlbmNlOiBmdW5jdGlvbiBzeW1tZXRyaWNEaWZmZXJlbmNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIHNldCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHZhciBuZXdTZXQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihzZXQsIGdldEJ1aWx0SW4oJ1NldCcpKSkoc2V0KTtcbiAgICB2YXIgcmVtb3ZlciA9IGFGdW5jdGlvbihuZXdTZXRbJ2RlbGV0ZSddKTtcbiAgICB2YXIgYWRkZXIgPSBhRnVuY3Rpb24obmV3U2V0LmFkZCk7XG4gICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZW1vdmVyLmNhbGwobmV3U2V0LCB2YWx1ZSkgfHwgYWRkZXIuY2FsbChuZXdTZXQsIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3U2V0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG4vLyBgU2V0LnByb3RvdHlwZS51bmlvbmAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zZXQtbWV0aG9kc1xuJCh7IHRhcmdldDogJ1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICB1bmlvbjogZnVuY3Rpb24gdW5pb24oaXRlcmFibGUpIHtcbiAgICB2YXIgc2V0ID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIG5ld1NldCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHNldCwgZ2V0QnVpbHRJbignU2V0JykpKShzZXQpO1xuICAgIGl0ZXJhdGUoaXRlcmFibGUsIGFGdW5jdGlvbihuZXdTZXQuYWRkKSwgeyB0aGF0OiBuZXdTZXQgfSk7XG4gICAgcmV0dXJuIG5ld1NldDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBjb2xsZWN0aW9uRGVsZXRlQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tZGVsZXRlLWFsbCcpO1xuXG4vLyBgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlQWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWNvbGxlY3Rpb24tbWV0aG9kc1xuJCh7IHRhcmdldDogJ1dlYWtNYXAnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIH0sIHtcbiAgZGVsZXRlQWxsOiBmdW5jdGlvbiBkZWxldGVBbGwoLyogLi4uZWxlbWVudHMgKi8pIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbkRlbGV0ZUFsbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGNvbGxlY3Rpb25BZGRBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1hZGQtYWxsJyk7XG5cbi8vIGBXZWFrU2V0LnByb3RvdHlwZS5hZGRBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnV2Vha1NldCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBhZGRBbGw6IGZ1bmN0aW9uIGFkZEFsbCgvKiAuLi5lbGVtZW50cyAqLykge1xuICAgIHJldHVybiBjb2xsZWN0aW9uQWRkQWxsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgY29sbGVjdGlvbkRlbGV0ZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLWRlbGV0ZS1hbGwnKTtcblxuLy8gYFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZUFsbGAgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1jb2xsZWN0aW9uLW1ldGhvZHNcbiQoeyB0YXJnZXQ6ICdXZWFrU2V0JywgcHJvdG86IHRydWUsIHJlYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB9LCB7XG4gIGRlbGV0ZUFsbDogZnVuY3Rpb24gZGVsZXRlQWxsKC8qIC4uLmVsZW1lbnRzICovKSB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb25EZWxldGVBbGwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSAmJiBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggIT09IGZvckVhY2gpIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsICdmb3JFYWNoJywgZm9yRWFjaCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoID0gZm9yRWFjaDtcbiAgfVxufVxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXTtcbiAgdmFyIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgaWYgKCFDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUddKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgQ09MTEVDVElPTl9OQU1FKTtcbiAgICB9XG4gICAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBBcnJheUl0ZXJhdG9yTWV0aG9kcykge1xuICAgICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSkgdHJ5IHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIE1FVEhPRF9OQU1FLCBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gPSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBpbiBjb3JlLWpzQDQsIG1vdmUgL21vZHVsZXMvIGRlcGVuZGVuY2llcyB0byBwdWJsaWMgZW50cmllcyBmb3IgYmV0dGVyIG9wdGltaXphdGlvbiBieSB0b29scyBsaWtlIGBwcmVzZXQtZW52YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBVU0VfTkFUSVZFX1VSTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtdXJsJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyICRmZXRjaCA9IGdldEJ1aWx0SW4oJ2ZldGNoJyk7XG52YXIgSGVhZGVycyA9IGdldEJ1aWx0SW4oJ0hlYWRlcnMnKTtcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBVUkxfU0VBUkNIX1BBUkFNUyA9ICdVUkxTZWFyY2hQYXJhbXMnO1xudmFyIFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SID0gVVJMX1NFQVJDSF9QQVJBTVMgKyAnSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoVVJMX1NFQVJDSF9QQVJBTVMpO1xudmFyIGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SKTtcblxudmFyIHBsdXMgPSAvXFwrL2c7XG52YXIgc2VxdWVuY2VzID0gQXJyYXkoNCk7XG5cbnZhciBwZXJjZW50U2VxdWVuY2UgPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgcmV0dXJuIHNlcXVlbmNlc1tieXRlcyAtIDFdIHx8IChzZXF1ZW5jZXNbYnl0ZXMgLSAxXSA9IFJlZ0V4cCgnKCg/OiVbXFxcXGRhLWZdezJ9KXsnICsgYnl0ZXMgKyAnfSknLCAnZ2knKSk7XG59O1xuXG52YXIgcGVyY2VudERlY29kZSA9IGZ1bmN0aW9uIChzZXF1ZW5jZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc2VxdWVuY2UpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBzZXF1ZW5jZTtcbiAgfVxufTtcblxudmFyIGRlc2VyaWFsaXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBpdC5yZXBsYWNlKHBsdXMsICcgJyk7XG4gIHZhciBieXRlcyA9IDQ7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdoaWxlIChieXRlcykge1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UocGVyY2VudFNlcXVlbmNlKGJ5dGVzLS0pLCBwZXJjZW50RGVjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxudmFyIGZpbmQgPSAvWyEnKCl+XXwlMjAvZztcblxudmFyIHJlcGxhY2UgPSB7XG4gICchJzogJyUyMScsXG4gIFwiJ1wiOiAnJTI3JyxcbiAgJygnOiAnJTI4JyxcbiAgJyknOiAnJTI5JyxcbiAgJ34nOiAnJTdFJyxcbiAgJyUyMCc6ICcrJ1xufTtcblxudmFyIHJlcGxhY2VyID0gZnVuY3Rpb24gKG1hdGNoKSB7XG4gIHJldHVybiByZXBsYWNlW21hdGNoXTtcbn07XG5cbnZhciBzZXJpYWxpemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChpdCkucmVwbGFjZShmaW5kLCByZXBsYWNlcik7XG59O1xuXG52YXIgcGFyc2VTZWFyY2hQYXJhbXMgPSBmdW5jdGlvbiAocmVzdWx0LCBxdWVyeSkge1xuICBpZiAocXVlcnkpIHtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHF1ZXJ5LnNwbGl0KCcmJyk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYXR0cmlidXRlLCBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBhdHRyaWJ1dGVzLmxlbmd0aCkge1xuICAgICAgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpbmRleCsrXTtcbiAgICAgIGlmIChhdHRyaWJ1dGUubGVuZ3RoKSB7XG4gICAgICAgIGVudHJ5ID0gYXR0cmlidXRlLnNwbGl0KCc9Jyk7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICBrZXk6IGRlc2VyaWFsaXplKGVudHJ5LnNoaWZ0KCkpLFxuICAgICAgICAgIHZhbHVlOiBkZXNlcmlhbGl6ZShlbnRyeS5qb2luKCc9JykpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIHVwZGF0ZVNlYXJjaFBhcmFtcyA9IGZ1bmN0aW9uIChxdWVyeSkge1xuICB0aGlzLmVudHJpZXMubGVuZ3RoID0gMDtcbiAgcGFyc2VTZWFyY2hQYXJhbXModGhpcy5lbnRyaWVzLCBxdWVyeSk7XG59O1xuXG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSBmdW5jdGlvbiAocGFzc2VkLCByZXF1aXJlZCkge1xuICBpZiAocGFzc2VkIDwgcmVxdWlyZWQpIHRocm93IFR5cGVFcnJvcignTm90IGVub3VnaCBhcmd1bWVudHMnKTtcbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gSXRlcmF0b3IocGFyYW1zLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SLFxuICAgIGl0ZXJhdG9yOiBnZXRJdGVyYXRvcihnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHBhcmFtcykuZW50cmllcyksXG4gICAga2luZDoga2luZFxuICB9KTtcbn0sICdJdGVyYXRvcicsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgc3RlcCA9IHN0YXRlLml0ZXJhdG9yLm5leHQoKTtcbiAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgaWYgKCFzdGVwLmRvbmUpIHtcbiAgICBzdGVwLnZhbHVlID0ga2luZCA9PT0gJ2tleXMnID8gZW50cnkua2V5IDoga2luZCA9PT0gJ3ZhbHVlcycgPyBlbnRyeS52YWx1ZSA6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXTtcbiAgfSByZXR1cm4gc3RlcDtcbn0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpbnRlcmZhY2UtdXJsc2VhcmNocGFyYW1zXG52YXIgVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBVUkxTZWFyY2hQYXJhbXMoLyogaW5pdCAqLykge1xuICBhbkluc3RhbmNlKHRoaXMsIFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLCBVUkxfU0VBUkNIX1BBUkFNUyk7XG4gIHZhciBpbml0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGVudHJpZXMgPSBbXTtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kLCBpdGVyYXRvciwgbmV4dCwgc3RlcCwgZW50cnlJdGVyYXRvciwgZW50cnlOZXh0LCBmaXJzdCwgc2Vjb25kLCBrZXk7XG5cbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7XG4gICAgdHlwZTogVVJMX1NFQVJDSF9QQVJBTVMsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICB1cGRhdGVVUkw6IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSxcbiAgICB1cGRhdGVTZWFyY2hQYXJhbXM6IHVwZGF0ZVNlYXJjaFBhcmFtc1xuICB9KTtcblxuICBpZiAoaW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGlzT2JqZWN0KGluaXQpKSB7XG4gICAgICBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKGluaXQpO1xuICAgICAgaWYgKHR5cGVvZiBpdGVyYXRvck1ldGhvZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoaW5pdCk7XG4gICAgICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgICAgICB3aGlsZSAoIShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgICAgICAgIGVudHJ5SXRlcmF0b3IgPSBnZXRJdGVyYXRvcihhbk9iamVjdChzdGVwLnZhbHVlKSk7XG4gICAgICAgICAgZW50cnlOZXh0ID0gZW50cnlJdGVyYXRvci5uZXh0O1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIChmaXJzdCA9IGVudHJ5TmV4dC5jYWxsKGVudHJ5SXRlcmF0b3IpKS5kb25lIHx8XG4gICAgICAgICAgICAoc2Vjb25kID0gZW50cnlOZXh0LmNhbGwoZW50cnlJdGVyYXRvcikpLmRvbmUgfHxcbiAgICAgICAgICAgICFlbnRyeU5leHQuY2FsbChlbnRyeUl0ZXJhdG9yKS5kb25lXG4gICAgICAgICAgKSB0aHJvdyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNlcXVlbmNlIHdpdGggbGVuZ3RoIDInKTtcbiAgICAgICAgICBlbnRyaWVzLnB1c2goeyBrZXk6IGZpcnN0LnZhbHVlICsgJycsIHZhbHVlOiBzZWNvbmQudmFsdWUgKyAnJyB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGZvciAoa2V5IGluIGluaXQpIGlmIChoYXNPd24oaW5pdCwga2V5KSkgZW50cmllcy5wdXNoKHsga2V5OiBrZXksIHZhbHVlOiBpbml0W2tleV0gKyAnJyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VTZWFyY2hQYXJhbXMoZW50cmllcywgdHlwZW9mIGluaXQgPT09ICdzdHJpbmcnID8gaW5pdC5jaGFyQXQoMCkgPT09ICc/JyA/IGluaXQuc2xpY2UoMSkgOiBpbml0IDogaW5pdCArICcnKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUgPSBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbnJlZGVmaW5lQWxsKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwge1xuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5hcHBlbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtYXBwZW5kXG4gIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMik7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICBzdGF0ZS5lbnRyaWVzLnB1c2goeyBrZXk6IG5hbWUgKyAnJywgdmFsdWU6IHZhbHVlICsgJycgfSk7XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmRlbGV0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1kZWxldGVcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgdmFyIGtleSA9IG5hbWUgKyAnJztcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIGVudHJpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGVsc2UgaW5kZXgrKztcbiAgICB9XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmdldGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1nZXRcbiAgZ2V0OiBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSBuYW1lICsgJyc7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSByZXR1cm4gZW50cmllc1tpbmRleF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5nZXRBbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZ2V0YWxsXG4gIGdldEFsbDogZnVuY3Rpb24gZ2V0QWxsKG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gbmFtZSArICcnO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHJlc3VsdC5wdXNoKGVudHJpZXNbaW5kZXhdLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaGFzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWhhc1xuICBoYXM6IGZ1bmN0aW9uIGhhcyhuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9IG5hbWUgKyAnJztcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleCsrXS5rZXkgPT09IGtleSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc2V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLXNldFxuICBzZXQ6IGZ1bmN0aW9uIHNldChuYW1lLCB2YWx1ZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzO1xuICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgIHZhciBrZXkgPSBuYW1lICsgJyc7XG4gICAgdmFyIHZhbCA9IHZhbHVlICsgJyc7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICBpZiAoZW50cnkua2V5ID09PSBrZXkpIHtcbiAgICAgICAgaWYgKGZvdW5kKSBlbnRyaWVzLnNwbGljZShpbmRleC0tLCAxKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIGVudHJ5LnZhbHVlID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZm91bmQpIGVudHJpZXMucHVzaCh7IGtleToga2V5LCB2YWx1ZTogdmFsIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5zb3J0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLXNvcnRcbiAgc29ydDogZnVuY3Rpb24gc29ydCgpIHtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHZhciBlbnRyaWVzID0gc3RhdGUuZW50cmllcztcbiAgICAvLyBBcnJheSNzb3J0IGlzIG5vdCBzdGFibGUgaW4gc29tZSBlbmdpbmVzXG4gICAgdmFyIHNsaWNlID0gZW50cmllcy5zbGljZSgpO1xuICAgIHZhciBlbnRyeSwgZW50cmllc0luZGV4LCBzbGljZUluZGV4O1xuICAgIGVudHJpZXMubGVuZ3RoID0gMDtcbiAgICBmb3IgKHNsaWNlSW5kZXggPSAwOyBzbGljZUluZGV4IDwgc2xpY2UubGVuZ3RoOyBzbGljZUluZGV4KyspIHtcbiAgICAgIGVudHJ5ID0gc2xpY2Vbc2xpY2VJbmRleF07XG4gICAgICBmb3IgKGVudHJpZXNJbmRleCA9IDA7IGVudHJpZXNJbmRleCA8IHNsaWNlSW5kZXg7IGVudHJpZXNJbmRleCsrKSB7XG4gICAgICAgIGlmIChlbnRyaWVzW2VudHJpZXNJbmRleF0ua2V5ID4gZW50cnkua2V5KSB7XG4gICAgICAgICAgZW50cmllcy5zcGxpY2UoZW50cmllc0luZGV4LCAwLCBlbnRyeSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlbnRyaWVzSW5kZXggPT09IHNsaWNlSW5kZXgpIGVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgfVxuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjayAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2ssIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4KytdO1xuICAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTtcbiAgICB9XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2tleXMnKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUudmFsdWVzYCBtZXRob2RcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAndmFsdWVzJyk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2VudHJpZXMnKTtcbiAgfVxufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG5yZWRlZmluZShVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsIElURVJBVE9SLCBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUuZW50cmllcyk7XG5cbi8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsc2VhcmNocGFyYW1zLXN0cmluZ2lmaWNhdGlvbi1iZWhhdmlvclxucmVkZWZpbmUoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGVudHJ5O1xuICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTtcbiAgICByZXN1bHQucHVzaChzZXJpYWxpemUoZW50cnkua2V5KSArICc9JyArIHNlcmlhbGl6ZShlbnRyeS52YWx1ZSkpO1xuICB9IHJldHVybiByZXN1bHQuam9pbignJicpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5zZXRUb1N0cmluZ1RhZyhVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciwgVVJMX1NFQVJDSF9QQVJBTVMpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6ICFVU0VfTkFUSVZFX1VSTCB9LCB7XG4gIFVSTFNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3Jcbn0pO1xuXG4vLyBXcmFwIGBmZXRjaGAgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHBvbHlmaWxsZWQgYFVSTFNlYXJjaFBhcmFtc2Bcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzRcbmlmICghVVNFX05BVElWRV9VUkwgJiYgdHlwZW9mICRmZXRjaCA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBIZWFkZXJzID09ICdmdW5jdGlvbicpIHtcbiAgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQgLyogLCBpbml0ICovKSB7XG4gICAgICB2YXIgYXJncyA9IFtpbnB1dF07XG4gICAgICB2YXIgaW5pdCwgYm9keSwgaGVhZGVycztcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBpbml0ID0gYXJndW1lbnRzWzFdO1xuICAgICAgICBpZiAoaXNPYmplY3QoaW5pdCkpIHtcbiAgICAgICAgICBib2R5ID0gaW5pdC5ib2R5O1xuICAgICAgICAgIGlmIChjbGFzc29mKGJvZHkpID09PSBVUkxfU0VBUkNIX1BBUkFNUykge1xuICAgICAgICAgICAgaGVhZGVycyA9IGluaXQuaGVhZGVycyA/IG5ldyBIZWFkZXJzKGluaXQuaGVhZGVycykgOiBuZXcgSGVhZGVycygpO1xuICAgICAgICAgICAgaWYgKCFoZWFkZXJzLmhhcygnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgICAgICAgaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5pdCA9IGNyZWF0ZShpbml0LCB7XG4gICAgICAgICAgICAgIGJvZHk6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBTdHJpbmcoYm9keSkpLFxuICAgICAgICAgICAgICBoZWFkZXJzOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgaGVhZGVycylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhcmdzLnB1c2goaW5pdCk7XG4gICAgICB9IHJldHVybiAkZmV0Y2guYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFVSTFNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IsXG4gIGdldFN0YXRlOiBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFVTRV9OQVRJVkVfVVJMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS11cmwnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcbnZhciBhcnJheUZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGNvZGVBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY29kZUF0O1xudmFyIHRvQVNDSUkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXB1bnljb2RlLXRvLWFzY2lpJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBVUkxTZWFyY2hQYXJhbXNNb2R1bGUgPSByZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIE5hdGl2ZVVSTCA9IGdsb2JhbC5VUkw7XG52YXIgVVJMU2VhcmNoUGFyYW1zID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLlVSTFNlYXJjaFBhcmFtcztcbnZhciBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLmdldFN0YXRlO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFVSTFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoJ1VSTCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBwb3cgPSBNYXRoLnBvdztcblxudmFyIElOVkFMSURfQVVUSE9SSVRZID0gJ0ludmFsaWQgYXV0aG9yaXR5JztcbnZhciBJTlZBTElEX1NDSEVNRSA9ICdJbnZhbGlkIHNjaGVtZSc7XG52YXIgSU5WQUxJRF9IT1NUID0gJ0ludmFsaWQgaG9zdCc7XG52YXIgSU5WQUxJRF9QT1JUID0gJ0ludmFsaWQgcG9ydCc7XG5cbnZhciBBTFBIQSA9IC9bQS1aYS16XS87XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLW9ic2N1cmUtcmFuZ2UgLS0gc2FmZVxudmFyIEFMUEhBTlVNRVJJQyA9IC9bXFxkKy0uQS1aYS16XS87XG52YXIgRElHSVQgPSAvXFxkLztcbnZhciBIRVhfU1RBUlQgPSAvXigweHwwWCkvO1xudmFyIE9DVCA9IC9eWzAtN10rJC87XG52YXIgREVDID0gL15cXGQrJC87XG52YXIgSEVYID0gL15bXFxkQS1GYS1mXSskLztcbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnRyb2wtcmVnZXggLS0gc2FmZSAqL1xudmFyIEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQgPSAvW1xcMFxcdFxcblxcciAjJS86P0BbXFxcXF1dLztcbnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UID0gL1tcXDBcXHRcXG5cXHIgIy86P0BbXFxcXF1dLztcbnZhciBMRUFESU5HX0FORF9UUkFJTElOR19DMF9DT05UUk9MX09SX1NQQUNFID0gL15bXFx1MDAwMC1cXHUwMDFGIF0rfFtcXHUwMDAwLVxcdTAwMUYgXSskL2c7XG52YXIgVEFCX0FORF9ORVdfTElORSA9IC9bXFx0XFxuXFxyXS9nO1xuLyogZXNsaW50LWVuYWJsZSBuby1jb250cm9sLXJlZ2V4IC0tIHNhZmUgKi9cbnZhciBFT0Y7XG5cbnZhciBwYXJzZUhvc3QgPSBmdW5jdGlvbiAodXJsLCBpbnB1dCkge1xuICB2YXIgcmVzdWx0LCBjb2RlUG9pbnRzLCBpbmRleDtcbiAgaWYgKGlucHV0LmNoYXJBdCgwKSA9PSAnWycpIHtcbiAgICBpZiAoaW5wdXQuY2hhckF0KGlucHV0Lmxlbmd0aCAtIDEpICE9ICddJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICByZXN1bHQgPSBwYXJzZUlQdjYoaW5wdXQuc2xpY2UoMSwgLTEpKTtcbiAgICBpZiAoIXJlc3VsdCkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICB1cmwuaG9zdCA9IHJlc3VsdDtcbiAgLy8gb3BhcXVlIGhvc3RcbiAgfSBlbHNlIGlmICghaXNTcGVjaWFsKHVybCkpIHtcbiAgICBpZiAoRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVF9FWENMVURJTkdfUEVSQ0VOVC50ZXN0KGlucHV0KSkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICByZXN1bHQgPSAnJztcbiAgICBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKGlucHV0KTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb2RlUG9pbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0ICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpbmRleF0sIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgIH1cbiAgICB1cmwuaG9zdCA9IHJlc3VsdDtcbiAgfSBlbHNlIHtcbiAgICBpbnB1dCA9IHRvQVNDSUkoaW5wdXQpO1xuICAgIGlmIChGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5ULnRlc3QoaW5wdXQpKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgIHJlc3VsdCA9IHBhcnNlSVB2NChpbnB1dCk7XG4gICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICB1cmwuaG9zdCA9IHJlc3VsdDtcbiAgfVxufTtcblxudmFyIHBhcnNlSVB2NCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgcGFydHMgPSBpbnB1dC5zcGxpdCgnLicpO1xuICB2YXIgcGFydHNMZW5ndGgsIG51bWJlcnMsIGluZGV4LCBwYXJ0LCByYWRpeCwgbnVtYmVyLCBpcHY0O1xuICBpZiAocGFydHMubGVuZ3RoICYmIHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdID09ICcnKSB7XG4gICAgcGFydHMucG9wKCk7XG4gIH1cbiAgcGFydHNMZW5ndGggPSBwYXJ0cy5sZW5ndGg7XG4gIGlmIChwYXJ0c0xlbmd0aCA+IDQpIHJldHVybiBpbnB1dDtcbiAgbnVtYmVycyA9IFtdO1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0c0xlbmd0aDsgaW5kZXgrKykge1xuICAgIHBhcnQgPSBwYXJ0c1tpbmRleF07XG4gICAgaWYgKHBhcnQgPT0gJycpIHJldHVybiBpbnB1dDtcbiAgICByYWRpeCA9IDEwO1xuICAgIGlmIChwYXJ0Lmxlbmd0aCA+IDEgJiYgcGFydC5jaGFyQXQoMCkgPT0gJzAnKSB7XG4gICAgICByYWRpeCA9IEhFWF9TVEFSVC50ZXN0KHBhcnQpID8gMTYgOiA4O1xuICAgICAgcGFydCA9IHBhcnQuc2xpY2UocmFkaXggPT0gOCA/IDEgOiAyKTtcbiAgICB9XG4gICAgaWYgKHBhcnQgPT09ICcnKSB7XG4gICAgICBudW1iZXIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIShyYWRpeCA9PSAxMCA/IERFQyA6IHJhZGl4ID09IDggPyBPQ1QgOiBIRVgpLnRlc3QocGFydCkpIHJldHVybiBpbnB1dDtcbiAgICAgIG51bWJlciA9IHBhcnNlSW50KHBhcnQsIHJhZGl4KTtcbiAgICB9XG4gICAgbnVtYmVycy5wdXNoKG51bWJlcik7XG4gIH1cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcGFydHNMZW5ndGg7IGluZGV4KyspIHtcbiAgICBudW1iZXIgPSBudW1iZXJzW2luZGV4XTtcbiAgICBpZiAoaW5kZXggPT0gcGFydHNMZW5ndGggLSAxKSB7XG4gICAgICBpZiAobnVtYmVyID49IHBvdygyNTYsIDUgLSBwYXJ0c0xlbmd0aCkpIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyID4gMjU1KSByZXR1cm4gbnVsbDtcbiAgfVxuICBpcHY0ID0gbnVtYmVycy5wb3AoKTtcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbnVtYmVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBpcHY0ICs9IG51bWJlcnNbaW5kZXhdICogcG93KDI1NiwgMyAtIGluZGV4KTtcbiAgfVxuICByZXR1cm4gaXB2NDtcbn07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50cyAtLSBUT0RPXG52YXIgcGFyc2VJUHY2ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBhZGRyZXNzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xuICB2YXIgcGllY2VJbmRleCA9IDA7XG4gIHZhciBjb21wcmVzcyA9IG51bGw7XG4gIHZhciBwb2ludGVyID0gMDtcbiAgdmFyIHZhbHVlLCBsZW5ndGgsIG51bWJlcnNTZWVuLCBpcHY0UGllY2UsIG51bWJlciwgc3dhcHMsIHN3YXA7XG5cbiAgdmFyIGNoYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGlucHV0LmNoYXJBdChwb2ludGVyKTtcbiAgfTtcblxuICBpZiAoY2hhcigpID09ICc6Jykge1xuICAgIGlmIChpbnB1dC5jaGFyQXQoMSkgIT0gJzonKSByZXR1cm47XG4gICAgcG9pbnRlciArPSAyO1xuICAgIHBpZWNlSW5kZXgrKztcbiAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gIH1cbiAgd2hpbGUgKGNoYXIoKSkge1xuICAgIGlmIChwaWVjZUluZGV4ID09IDgpIHJldHVybjtcbiAgICBpZiAoY2hhcigpID09ICc6Jykge1xuICAgICAgaWYgKGNvbXByZXNzICE9PSBudWxsKSByZXR1cm47XG4gICAgICBwb2ludGVyKys7XG4gICAgICBwaWVjZUluZGV4Kys7XG4gICAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgdmFsdWUgPSBsZW5ndGggPSAwO1xuICAgIHdoaWxlIChsZW5ndGggPCA0ICYmIEhFWC50ZXN0KGNoYXIoKSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgKiAxNiArIHBhcnNlSW50KGNoYXIoKSwgMTYpO1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgbGVuZ3RoKys7XG4gICAgfVxuICAgIGlmIChjaGFyKCkgPT0gJy4nKSB7XG4gICAgICBpZiAobGVuZ3RoID09IDApIHJldHVybjtcbiAgICAgIHBvaW50ZXIgLT0gbGVuZ3RoO1xuICAgICAgaWYgKHBpZWNlSW5kZXggPiA2KSByZXR1cm47XG4gICAgICBudW1iZXJzU2VlbiA9IDA7XG4gICAgICB3aGlsZSAoY2hhcigpKSB7XG4gICAgICAgIGlwdjRQaWVjZSA9IG51bGw7XG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA+IDApIHtcbiAgICAgICAgICBpZiAoY2hhcigpID09ICcuJyAmJiBudW1iZXJzU2VlbiA8IDQpIHBvaW50ZXIrKztcbiAgICAgICAgICBlbHNlIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIURJR0lULnRlc3QoY2hhcigpKSkgcmV0dXJuO1xuICAgICAgICB3aGlsZSAoRElHSVQudGVzdChjaGFyKCkpKSB7XG4gICAgICAgICAgbnVtYmVyID0gcGFyc2VJbnQoY2hhcigpLCAxMCk7XG4gICAgICAgICAgaWYgKGlwdjRQaWVjZSA9PT0gbnVsbCkgaXB2NFBpZWNlID0gbnVtYmVyO1xuICAgICAgICAgIGVsc2UgaWYgKGlwdjRQaWVjZSA9PSAwKSByZXR1cm47XG4gICAgICAgICAgZWxzZSBpcHY0UGllY2UgPSBpcHY0UGllY2UgKiAxMCArIG51bWJlcjtcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID4gMjU1KSByZXR1cm47XG4gICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICB9XG4gICAgICAgIGFkZHJlc3NbcGllY2VJbmRleF0gPSBhZGRyZXNzW3BpZWNlSW5kZXhdICogMjU2ICsgaXB2NFBpZWNlO1xuICAgICAgICBudW1iZXJzU2VlbisrO1xuICAgICAgICBpZiAobnVtYmVyc1NlZW4gPT0gMiB8fCBudW1iZXJzU2VlbiA9PSA0KSBwaWVjZUluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAobnVtYmVyc1NlZW4gIT0gNCkgcmV0dXJuO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChjaGFyKCkgPT0gJzonKSB7XG4gICAgICBwb2ludGVyKys7XG4gICAgICBpZiAoIWNoYXIoKSkgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoY2hhcigpKSByZXR1cm47XG4gICAgYWRkcmVzc1twaWVjZUluZGV4KytdID0gdmFsdWU7XG4gIH1cbiAgaWYgKGNvbXByZXNzICE9PSBudWxsKSB7XG4gICAgc3dhcHMgPSBwaWVjZUluZGV4IC0gY29tcHJlc3M7XG4gICAgcGllY2VJbmRleCA9IDc7XG4gICAgd2hpbGUgKHBpZWNlSW5kZXggIT0gMCAmJiBzd2FwcyA+IDApIHtcbiAgICAgIHN3YXAgPSBhZGRyZXNzW3BpZWNlSW5kZXhdO1xuICAgICAgYWRkcmVzc1twaWVjZUluZGV4LS1dID0gYWRkcmVzc1tjb21wcmVzcyArIHN3YXBzIC0gMV07XG4gICAgICBhZGRyZXNzW2NvbXByZXNzICsgLS1zd2Fwc10gPSBzd2FwO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwaWVjZUluZGV4ICE9IDgpIHJldHVybjtcbiAgcmV0dXJuIGFkZHJlc3M7XG59O1xuXG52YXIgZmluZExvbmdlc3RaZXJvU2VxdWVuY2UgPSBmdW5jdGlvbiAoaXB2Nikge1xuICB2YXIgbWF4SW5kZXggPSBudWxsO1xuICB2YXIgbWF4TGVuZ3RoID0gMTtcbiAgdmFyIGN1cnJTdGFydCA9IG51bGw7XG4gIHZhciBjdXJyTGVuZ3RoID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgZm9yICg7IGluZGV4IDwgODsgaW5kZXgrKykge1xuICAgIGlmIChpcHY2W2luZGV4XSAhPT0gMCkge1xuICAgICAgaWYgKGN1cnJMZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgICAgbWF4SW5kZXggPSBjdXJyU3RhcnQ7XG4gICAgICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gICAgICB9XG4gICAgICBjdXJyU3RhcnQgPSBudWxsO1xuICAgICAgY3Vyckxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjdXJyU3RhcnQgPT09IG51bGwpIGN1cnJTdGFydCA9IGluZGV4O1xuICAgICAgKytjdXJyTGVuZ3RoO1xuICAgIH1cbiAgfVxuICBpZiAoY3Vyckxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgIG1heEluZGV4ID0gY3VyclN0YXJ0O1xuICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gIH1cbiAgcmV0dXJuIG1heEluZGV4O1xufTtcblxudmFyIHNlcmlhbGl6ZUhvc3QgPSBmdW5jdGlvbiAoaG9zdCkge1xuICB2YXIgcmVzdWx0LCBpbmRleCwgY29tcHJlc3MsIGlnbm9yZTA7XG4gIC8vIGlwdjRcbiAgaWYgKHR5cGVvZiBob3N0ID09ICdudW1iZXInKSB7XG4gICAgcmVzdWx0ID0gW107XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0LnVuc2hpZnQoaG9zdCAlIDI1Nik7XG4gICAgICBob3N0ID0gZmxvb3IoaG9zdCAvIDI1Nik7XG4gICAgfSByZXR1cm4gcmVzdWx0LmpvaW4oJy4nKTtcbiAgLy8gaXB2NlxuICB9IGVsc2UgaWYgKHR5cGVvZiBob3N0ID09ICdvYmplY3QnKSB7XG4gICAgcmVzdWx0ID0gJyc7XG4gICAgY29tcHJlc3MgPSBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZShob3N0KTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoaWdub3JlMCAmJiBob3N0W2luZGV4XSA9PT0gMCkgY29udGludWU7XG4gICAgICBpZiAoaWdub3JlMCkgaWdub3JlMCA9IGZhbHNlO1xuICAgICAgaWYgKGNvbXByZXNzID09PSBpbmRleCkge1xuICAgICAgICByZXN1bHQgKz0gaW5kZXggPyAnOicgOiAnOjonO1xuICAgICAgICBpZ25vcmUwID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCArPSBob3N0W2luZGV4XS50b1N0cmluZygxNik7XG4gICAgICAgIGlmIChpbmRleCA8IDcpIHJlc3VsdCArPSAnOic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnWycgKyByZXN1bHQgKyAnXSc7XG4gIH0gcmV0dXJuIGhvc3Q7XG59O1xuXG52YXIgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCA9IHt9O1xudmFyIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCwge1xuICAnICc6IDEsICdcIic6IDEsICc8JzogMSwgJz4nOiAxLCAnYCc6IDFcbn0pO1xudmFyIHBhdGhQZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJyMnOiAxLCAnPyc6IDEsICd7JzogMSwgJ30nOiAxXG59KTtcbnZhciB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIHBhdGhQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcvJzogMSwgJzonOiAxLCAnOyc6IDEsICc9JzogMSwgJ0AnOiAxLCAnWyc6IDEsICdcXFxcJzogMSwgJ10nOiAxLCAnXic6IDEsICd8JzogMVxufSk7XG5cbnZhciBwZXJjZW50RW5jb2RlID0gZnVuY3Rpb24gKGNoYXIsIHNldCkge1xuICB2YXIgY29kZSA9IGNvZGVBdChjaGFyLCAwKTtcbiAgcmV0dXJuIGNvZGUgPiAweDIwICYmIGNvZGUgPCAweDdGICYmICFoYXMoc2V0LCBjaGFyKSA/IGNoYXIgOiBlbmNvZGVVUklDb21wb25lbnQoY2hhcik7XG59O1xuXG52YXIgc3BlY2lhbFNjaGVtZXMgPSB7XG4gIGZ0cDogMjEsXG4gIGZpbGU6IG51bGwsXG4gIGh0dHA6IDgwLFxuICBodHRwczogNDQzLFxuICB3czogODAsXG4gIHdzczogNDQzXG59O1xuXG52YXIgaXNTcGVjaWFsID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gaGFzKHNwZWNpYWxTY2hlbWVzLCB1cmwuc2NoZW1lKTtcbn07XG5cbnZhciBpbmNsdWRlc0NyZWRlbnRpYWxzID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gdXJsLnVzZXJuYW1lICE9ICcnIHx8IHVybC5wYXNzd29yZCAhPSAnJztcbn07XG5cbnZhciBjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiAhdXJsLmhvc3QgfHwgdXJsLmNhbm5vdEJlQUJhc2VVUkwgfHwgdXJsLnNjaGVtZSA9PSAnZmlsZSc7XG59O1xuXG52YXIgaXNXaW5kb3dzRHJpdmVMZXR0ZXIgPSBmdW5jdGlvbiAoc3RyaW5nLCBub3JtYWxpemVkKSB7XG4gIHZhciBzZWNvbmQ7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID09IDIgJiYgQUxQSEEudGVzdChzdHJpbmcuY2hhckF0KDApKVxuICAgICYmICgoc2Vjb25kID0gc3RyaW5nLmNoYXJBdCgxKSkgPT0gJzonIHx8ICghbm9ybWFsaXplZCAmJiBzZWNvbmQgPT0gJ3wnKSk7XG59O1xuXG52YXIgc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlciA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIHRoaXJkO1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA+IDEgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoc3RyaW5nLnNsaWNlKDAsIDIpKSAmJiAoXG4gICAgc3RyaW5nLmxlbmd0aCA9PSAyIHx8XG4gICAgKCh0aGlyZCA9IHN0cmluZy5jaGFyQXQoMikpID09PSAnLycgfHwgdGhpcmQgPT09ICdcXFxcJyB8fCB0aGlyZCA9PT0gJz8nIHx8IHRoaXJkID09PSAnIycpXG4gICk7XG59O1xuXG52YXIgc2hvcnRlblVSTHNQYXRoID0gZnVuY3Rpb24gKHVybCkge1xuICB2YXIgcGF0aCA9IHVybC5wYXRoO1xuICB2YXIgcGF0aFNpemUgPSBwYXRoLmxlbmd0aDtcbiAgaWYgKHBhdGhTaXplICYmICh1cmwuc2NoZW1lICE9ICdmaWxlJyB8fCBwYXRoU2l6ZSAhPSAxIHx8ICFpc1dpbmRvd3NEcml2ZUxldHRlcihwYXRoWzBdLCB0cnVlKSkpIHtcbiAgICBwYXRoLnBvcCgpO1xuICB9XG59O1xuXG52YXIgaXNTaW5nbGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4nIHx8IHNlZ21lbnQudG9Mb3dlckNhc2UoKSA9PT0gJyUyZSc7XG59O1xuXG52YXIgaXNEb3VibGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICBzZWdtZW50ID0gc2VnbWVudC50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4uJyB8fCBzZWdtZW50ID09PSAnJTJlLicgfHwgc2VnbWVudCA9PT0gJy4lMmUnIHx8IHNlZ21lbnQgPT09ICclMmUlMmUnO1xufTtcblxuLy8gU3RhdGVzOlxudmFyIFNDSEVNRV9TVEFSVCA9IHt9O1xudmFyIFNDSEVNRSA9IHt9O1xudmFyIE5PX1NDSEVNRSA9IHt9O1xudmFyIFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZID0ge307XG52YXIgUEFUSF9PUl9BVVRIT1JJVFkgPSB7fTtcbnZhciBSRUxBVElWRSA9IHt9O1xudmFyIFJFTEFUSVZFX1NMQVNIID0ge307XG52YXIgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyA9IHt9O1xudmFyIFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTID0ge307XG52YXIgQVVUSE9SSVRZID0ge307XG52YXIgSE9TVCA9IHt9O1xudmFyIEhPU1ROQU1FID0ge307XG52YXIgUE9SVCA9IHt9O1xudmFyIEZJTEUgPSB7fTtcbnZhciBGSUxFX1NMQVNIID0ge307XG52YXIgRklMRV9IT1NUID0ge307XG52YXIgUEFUSF9TVEFSVCA9IHt9O1xudmFyIFBBVEggPSB7fTtcbnZhciBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIID0ge307XG52YXIgUVVFUlkgPSB7fTtcbnZhciBGUkFHTUVOVCA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHMgLS0gVE9ET1xudmFyIHBhcnNlVVJMID0gZnVuY3Rpb24gKHVybCwgaW5wdXQsIHN0YXRlT3ZlcnJpZGUsIGJhc2UpIHtcbiAgdmFyIHN0YXRlID0gc3RhdGVPdmVycmlkZSB8fCBTQ0hFTUVfU1RBUlQ7XG4gIHZhciBwb2ludGVyID0gMDtcbiAgdmFyIGJ1ZmZlciA9ICcnO1xuICB2YXIgc2VlbkF0ID0gZmFsc2U7XG4gIHZhciBzZWVuQnJhY2tldCA9IGZhbHNlO1xuICB2YXIgc2VlblBhc3N3b3JkVG9rZW4gPSBmYWxzZTtcbiAgdmFyIGNvZGVQb2ludHMsIGNoYXIsIGJ1ZmZlckNvZGVQb2ludHMsIGZhaWx1cmU7XG5cbiAgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgdXJsLnNjaGVtZSA9ICcnO1xuICAgIHVybC51c2VybmFtZSA9ICcnO1xuICAgIHVybC5wYXNzd29yZCA9ICcnO1xuICAgIHVybC5ob3N0ID0gbnVsbDtcbiAgICB1cmwucG9ydCA9IG51bGw7XG4gICAgdXJsLnBhdGggPSBbXTtcbiAgICB1cmwucXVlcnkgPSBudWxsO1xuICAgIHVybC5mcmFnbWVudCA9IG51bGw7XG4gICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSBmYWxzZTtcbiAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSwgJycpO1xuICB9XG5cbiAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKFRBQl9BTkRfTkVXX0xJTkUsICcnKTtcblxuICBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKGlucHV0KTtcblxuICB3aGlsZSAocG9pbnRlciA8PSBjb2RlUG9pbnRzLmxlbmd0aCkge1xuICAgIGNoYXIgPSBjb2RlUG9pbnRzW3BvaW50ZXJdO1xuICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgIGNhc2UgU0NIRU1FX1NUQVJUOlxuICAgICAgICBpZiAoY2hhciAmJiBBTFBIQS50ZXN0KGNoYXIpKSB7XG4gICAgICAgICAgYnVmZmVyICs9IGNoYXIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBzdGF0ZSA9IFNDSEVNRTtcbiAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgIHN0YXRlID0gTk9fU0NIRU1FO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTQ0hFTUU6XG4gICAgICAgIGlmIChjaGFyICYmIChBTFBIQU5VTUVSSUMudGVzdChjaGFyKSB8fCBjaGFyID09ICcrJyB8fCBjaGFyID09ICctJyB8fCBjaGFyID09ICcuJykpIHtcbiAgICAgICAgICBidWZmZXIgKz0gY2hhci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJzonKSB7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgKFxuICAgICAgICAgICAgKGlzU3BlY2lhbCh1cmwpICE9IGhhcyhzcGVjaWFsU2NoZW1lcywgYnVmZmVyKSkgfHxcbiAgICAgICAgICAgIChidWZmZXIgPT0gJ2ZpbGUnICYmIChpbmNsdWRlc0NyZWRlbnRpYWxzKHVybCkgfHwgdXJsLnBvcnQgIT09IG51bGwpKSB8fFxuICAgICAgICAgICAgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmICF1cmwuaG9zdClcbiAgICAgICAgICApKSByZXR1cm47XG4gICAgICAgICAgdXJsLnNjaGVtZSA9IGJ1ZmZlcjtcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgICAgaWYgKGlzU3BlY2lhbCh1cmwpICYmIHNwZWNpYWxTY2hlbWVzW3VybC5zY2hlbWVdID09IHVybC5wb3J0KSB1cmwucG9ydCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgICAgc3RhdGUgPSBGSUxFO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNTcGVjaWFsKHVybCkgJiYgYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSB1cmwuc2NoZW1lKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNTcGVjaWFsKHVybCkpIHtcbiAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUztcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvZGVQb2ludHNbcG9pbnRlciArIDFdID09ICcvJykge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIX09SX0FVVEhPUklUWTtcbiAgICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSB0cnVlO1xuICAgICAgICAgICAgdXJsLnBhdGgucHVzaCgnJyk7XG4gICAgICAgICAgICBzdGF0ZSA9IENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEg7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBOT19TQ0hFTUU7XG4gICAgICAgICAgcG9pbnRlciA9IDA7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIE5PX1NDSEVNRTpcbiAgICAgICAgaWYgKCFiYXNlIHx8IChiYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgY2hhciAhPSAnIycpKSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgIGlmIChiYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgY2hhciA9PSAnIycpIHtcbiAgICAgICAgICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7XG4gICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnID8gRklMRSA6IFJFTEFUSVZFO1xuICAgICAgICBjb250aW51ZTtcblxuICAgICAgY2FzZSBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWTpcbiAgICAgICAgaWYgKGNoYXIgPT0gJy8nICYmIGNvZGVQb2ludHNbcG9pbnRlciArIDFdID09ICcvJykge1xuICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7XG4gICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlID0gUkVMQVRJVkU7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUEFUSF9PUl9BVVRIT1JJVFk6XG4gICAgICAgIGlmIChjaGFyID09ICcvJykge1xuICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIFJFTEFUSVZFOlxuICAgICAgICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7XG4gICAgICAgIGlmIChjaGFyID09IEVPRikge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnLycgfHwgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKSkge1xuICAgICAgICAgIHN0YXRlID0gUkVMQVRJVkVfU0xBU0g7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnPycpIHtcbiAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTtcbiAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgIHVybC5wYXRoLnBvcCgpO1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBSRUxBVElWRV9TTEFTSDpcbiAgICAgICAgaWYgKGlzU3BlY2lhbCh1cmwpICYmIChjaGFyID09ICcvJyB8fCBjaGFyID09ICdcXFxcJykpIHtcbiAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJy8nKSB7XG4gICAgICAgICAgc3RhdGUgPSBBVVRIT1JJVFk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTOlxuICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICBpZiAoY2hhciAhPSAnLycgfHwgYnVmZmVyLmNoYXJBdChwb2ludGVyICsgMSkgIT0gJy8nKSBjb250aW51ZTtcbiAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUzpcbiAgICAgICAgaWYgKGNoYXIgIT0gJy8nICYmIGNoYXIgIT0gJ1xcXFwnKSB7XG4gICAgICAgICAgc3RhdGUgPSBBVVRIT1JJVFk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgQVVUSE9SSVRZOlxuICAgICAgICBpZiAoY2hhciA9PSAnQCcpIHtcbiAgICAgICAgICBpZiAoc2VlbkF0KSBidWZmZXIgPSAnJTQwJyArIGJ1ZmZlcjtcbiAgICAgICAgICBzZWVuQXQgPSB0cnVlO1xuICAgICAgICAgIGJ1ZmZlckNvZGVQb2ludHMgPSBhcnJheUZyb20oYnVmZmVyKTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlckNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSBidWZmZXJDb2RlUG9pbnRzW2ldO1xuICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA9PSAnOicgJiYgIXNlZW5QYXNzd29yZFRva2VuKSB7XG4gICAgICAgICAgICAgIHNlZW5QYXNzd29yZFRva2VuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZW5jb2RlZENvZGVQb2ludHMgPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludCwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICAgIGlmIChzZWVuUGFzc3dvcmRUb2tlbikgdXJsLnBhc3N3b3JkICs9IGVuY29kZWRDb2RlUG9pbnRzO1xuICAgICAgICAgICAgZWxzZSB1cmwudXNlcm5hbWUgKz0gZW5jb2RlZENvZGVQb2ludHM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnIHx8XG4gICAgICAgICAgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoc2VlbkF0ICYmIGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfQVVUSE9SSVRZO1xuICAgICAgICAgIHBvaW50ZXIgLT0gYXJyYXlGcm9tKGJ1ZmZlcikubGVuZ3RoICsgMTtcbiAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEhPU1Q7XG4gICAgICAgIH0gZWxzZSBidWZmZXIgKz0gY2hhcjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgSE9TVDpcbiAgICAgIGNhc2UgSE9TVE5BTUU6XG4gICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIHVybC5zY2hlbWUgPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnOicgJiYgIXNlZW5CcmFja2V0KSB7XG4gICAgICAgICAgaWYgKGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgICAgICBmYWlsdXJlID0gcGFyc2VIb3N0KHVybCwgYnVmZmVyKTtcbiAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBQT1JUO1xuICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlID09IEhPU1ROQU1FKSByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnLycgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycgfHxcbiAgICAgICAgICAoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChpc1NwZWNpYWwodXJsKSAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgYnVmZmVyID09ICcnICYmIChpbmNsdWRlc0NyZWRlbnRpYWxzKHVybCkgfHwgdXJsLnBvcnQgIT09IG51bGwpKSByZXR1cm47XG4gICAgICAgICAgZmFpbHVyZSA9IHBhcnNlSG9zdCh1cmwsIGJ1ZmZlcik7XG4gICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjaGFyID09ICdbJykgc2VlbkJyYWNrZXQgPSB0cnVlO1xuICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT0gJ10nKSBzZWVuQnJhY2tldCA9IGZhbHNlO1xuICAgICAgICAgIGJ1ZmZlciArPSBjaGFyO1xuICAgICAgICB9IGJyZWFrO1xuXG4gICAgICBjYXNlIFBPUlQ6XG4gICAgICAgIGlmIChESUdJVC50ZXN0KGNoYXIpKSB7XG4gICAgICAgICAgYnVmZmVyICs9IGNoYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnLycgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycgfHxcbiAgICAgICAgICAoY2hhciA9PSAnXFxcXCcgJiYgaXNTcGVjaWFsKHVybCkpIHx8XG4gICAgICAgICAgc3RhdGVPdmVycmlkZVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoYnVmZmVyICE9ICcnKSB7XG4gICAgICAgICAgICB2YXIgcG9ydCA9IHBhcnNlSW50KGJ1ZmZlciwgMTApO1xuICAgICAgICAgICAgaWYgKHBvcnQgPiAweEZGRkYpIHJldHVybiBJTlZBTElEX1BPUlQ7XG4gICAgICAgICAgICB1cmwucG9ydCA9IChpc1NwZWNpYWwodXJsKSAmJiBwb3J0ID09PSBzcGVjaWFsU2NoZW1lc1t1cmwuc2NoZW1lXSkgPyBudWxsIDogcG9ydDtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1BPUlQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEZJTEU6XG4gICAgICAgIHVybC5zY2hlbWUgPSAnZmlsZSc7XG4gICAgICAgIGlmIChjaGFyID09ICcvJyB8fCBjaGFyID09ICdcXFxcJykgc3RhdGUgPSBGSUxFX1NMQVNIO1xuICAgICAgICBlbHNlIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgIGlmIChjaGFyID09IEVPRikge1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJz8nKSB7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyKGNvZGVQb2ludHMuc2xpY2UocG9pbnRlcikuam9pbignJykpKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpO1xuICAgICAgICAgICAgICBzaG9ydGVuVVJMc1BhdGgodXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgRklMRV9TTEFTSDpcbiAgICAgICAgaWYgKGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJ1xcXFwnKSB7XG4gICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnICYmICFzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyKGNvZGVQb2ludHMuc2xpY2UocG9pbnRlcikuam9pbignJykpKSB7XG4gICAgICAgICAgaWYgKGlzV2luZG93c0RyaXZlTGV0dGVyKGJhc2UucGF0aFswXSwgdHJ1ZSkpIHVybC5wYXRoLnB1c2goYmFzZS5wYXRoWzBdKTtcbiAgICAgICAgICBlbHNlIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGNhc2UgRklMRV9IT1NUOlxuICAgICAgICBpZiAoY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnLycgfHwgY2hhciA9PSAnXFxcXCcgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycpIHtcbiAgICAgICAgICBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoYnVmZmVyKSkge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIH0gZWxzZSBpZiAoYnVmZmVyID09ICcnKSB7XG4gICAgICAgICAgICB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmFpbHVyZSA9IHBhcnNlSG9zdCh1cmwsIGJ1ZmZlcik7XG4gICAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgICBpZiAodXJsLmhvc3QgPT0gJ2xvY2FsaG9zdCcpIHVybC5ob3N0ID0gJyc7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgfSBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGJ1ZmZlciArPSBjaGFyO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBQQVRIX1NUQVJUOlxuICAgICAgICBpZiAoaXNTcGVjaWFsKHVybCkpIHtcbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgaWYgKGNoYXIgIT0gJy8nICYmIGNoYXIgIT0gJ1xcXFwnKSBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaGFyID09ICc/Jykge1xuICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hhciA9PSAnIycpIHtcbiAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgIT0gRU9GKSB7XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGlmIChjaGFyICE9ICcvJykgY29udGludWU7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUEFUSDpcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8XG4gICAgICAgICAgKGNoYXIgPT0gJ1xcXFwnICYmIGlzU3BlY2lhbCh1cmwpKSB8fFxuICAgICAgICAgICghc3RhdGVPdmVycmlkZSAmJiAoY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycpKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoaXNEb3VibGVEb3QoYnVmZmVyKSkge1xuICAgICAgICAgICAgc2hvcnRlblVSTHNQYXRoKHVybCk7XG4gICAgICAgICAgICBpZiAoY2hhciAhPSAnLycgJiYgIShjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkpIHtcbiAgICAgICAgICAgICAgdXJsLnBhdGgucHVzaCgnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChpc1NpbmdsZURvdChidWZmZXIpKSB7XG4gICAgICAgICAgICBpZiAoY2hhciAhPSAnLycgJiYgIShjaGFyID09ICdcXFxcJyAmJiBpc1NwZWNpYWwodXJsKSkpIHtcbiAgICAgICAgICAgICAgdXJsLnBhdGgucHVzaCgnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLnBhdGgubGVuZ3RoICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgaWYgKHVybC5ob3N0KSB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgICBidWZmZXIgPSBidWZmZXIuY2hhckF0KDApICsgJzonOyAvLyBub3JtYWxpemUgd2luZG93cyBkcml2ZSBsZXR0ZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVybC5wYXRoLnB1c2goYnVmZmVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgaWYgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmIChjaGFyID09IEVPRiB8fCBjaGFyID09ICc/JyB8fCBjaGFyID09ICcjJykpIHtcbiAgICAgICAgICAgIHdoaWxlICh1cmwucGF0aC5sZW5ndGggPiAxICYmIHVybC5wYXRoWzBdID09PSAnJykge1xuICAgICAgICAgICAgICB1cmwucGF0aC5zaGlmdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hhciA9PSAnPycpIHtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1ZmZlciArPSBwZXJjZW50RW5jb2RlKGNoYXIsIHBhdGhQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIOlxuICAgICAgICBpZiAoY2hhciA9PSAnPycpIHtcbiAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB7XG4gICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyICE9IEVPRikge1xuICAgICAgICAgIHVybC5wYXRoWzBdICs9IHBlcmNlbnRFbmNvZGUoY2hhciwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgIH0gYnJlYWs7XG5cbiAgICAgIGNhc2UgUVVFUlk6XG4gICAgICAgIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaGFyID09ICcjJykge1xuICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciAhPSBFT0YpIHtcbiAgICAgICAgICBpZiAoY2hhciA9PSBcIidcIiAmJiBpc1NwZWNpYWwodXJsKSkgdXJsLnF1ZXJ5ICs9ICclMjcnO1xuICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB1cmwucXVlcnkgKz0gJyUyMyc7XG4gICAgICAgICAgZWxzZSB1cmwucXVlcnkgKz0gcGVyY2VudEVuY29kZShjaGFyLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgfSBicmVhaztcblxuICAgICAgY2FzZSBGUkFHTUVOVDpcbiAgICAgICAgaWYgKGNoYXIgIT0gRU9GKSB1cmwuZnJhZ21lbnQgKz0gcGVyY2VudEVuY29kZShjaGFyLCBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBwb2ludGVyKys7XG4gIH1cbn07XG5cbi8vIGBVUkxgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybC1jbGFzc1xudmFyIFVSTENvbnN0cnVjdG9yID0gZnVuY3Rpb24gVVJMKHVybCAvKiAsIGJhc2UgKi8pIHtcbiAgdmFyIHRoYXQgPSBhbkluc3RhbmNlKHRoaXMsIFVSTENvbnN0cnVjdG9yLCAnVVJMJyk7XG4gIHZhciBiYXNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciB1cmxTdHJpbmcgPSBTdHJpbmcodXJsKTtcbiAgdmFyIHN0YXRlID0gc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7IHR5cGU6ICdVUkwnIH0pO1xuICB2YXIgYmFzZVN0YXRlLCBmYWlsdXJlO1xuICBpZiAoYmFzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGJhc2UgaW5zdGFuY2VvZiBVUkxDb25zdHJ1Y3RvcikgYmFzZVN0YXRlID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZShiYXNlKTtcbiAgICBlbHNlIHtcbiAgICAgIGZhaWx1cmUgPSBwYXJzZVVSTChiYXNlU3RhdGUgPSB7fSwgU3RyaW5nKGJhc2UpKTtcbiAgICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gICAgfVxuICB9XG4gIGZhaWx1cmUgPSBwYXJzZVVSTChzdGF0ZSwgdXJsU3RyaW5nLCBudWxsLCBiYXNlU3RhdGUpO1xuICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICB2YXIgc2VhcmNoUGFyYW1zID0gc3RhdGUuc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICB2YXIgc2VhcmNoUGFyYW1zU3RhdGUgPSBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlKHNlYXJjaFBhcmFtcyk7XG4gIHNlYXJjaFBhcmFtc1N0YXRlLnVwZGF0ZVNlYXJjaFBhcmFtcyhzdGF0ZS5xdWVyeSk7XG4gIHNlYXJjaFBhcmFtc1N0YXRlLnVwZGF0ZVVSTCA9IGZ1bmN0aW9uICgpIHtcbiAgICBzdGF0ZS5xdWVyeSA9IFN0cmluZyhzZWFyY2hQYXJhbXMpIHx8IG51bGw7XG4gIH07XG4gIGlmICghREVTQ1JJUFRPUlMpIHtcbiAgICB0aGF0LmhyZWYgPSBzZXJpYWxpemVVUkwuY2FsbCh0aGF0KTtcbiAgICB0aGF0Lm9yaWdpbiA9IGdldE9yaWdpbi5jYWxsKHRoYXQpO1xuICAgIHRoYXQucHJvdG9jb2wgPSBnZXRQcm90b2NvbC5jYWxsKHRoYXQpO1xuICAgIHRoYXQudXNlcm5hbWUgPSBnZXRVc2VybmFtZS5jYWxsKHRoYXQpO1xuICAgIHRoYXQucGFzc3dvcmQgPSBnZXRQYXNzd29yZC5jYWxsKHRoYXQpO1xuICAgIHRoYXQuaG9zdCA9IGdldEhvc3QuY2FsbCh0aGF0KTtcbiAgICB0aGF0Lmhvc3RuYW1lID0gZ2V0SG9zdG5hbWUuY2FsbCh0aGF0KTtcbiAgICB0aGF0LnBvcnQgPSBnZXRQb3J0LmNhbGwodGhhdCk7XG4gICAgdGhhdC5wYXRobmFtZSA9IGdldFBhdGhuYW1lLmNhbGwodGhhdCk7XG4gICAgdGhhdC5zZWFyY2ggPSBnZXRTZWFyY2guY2FsbCh0aGF0KTtcbiAgICB0aGF0LnNlYXJjaFBhcmFtcyA9IGdldFNlYXJjaFBhcmFtcy5jYWxsKHRoYXQpO1xuICAgIHRoYXQuaGFzaCA9IGdldEhhc2guY2FsbCh0aGF0KTtcbiAgfVxufTtcblxudmFyIFVSTFByb3RvdHlwZSA9IFVSTENvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxudmFyIHNlcmlhbGl6ZVVSTCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gIHZhciBzY2hlbWUgPSB1cmwuc2NoZW1lO1xuICB2YXIgdXNlcm5hbWUgPSB1cmwudXNlcm5hbWU7XG4gIHZhciBwYXNzd29yZCA9IHVybC5wYXNzd29yZDtcbiAgdmFyIGhvc3QgPSB1cmwuaG9zdDtcbiAgdmFyIHBvcnQgPSB1cmwucG9ydDtcbiAgdmFyIHBhdGggPSB1cmwucGF0aDtcbiAgdmFyIHF1ZXJ5ID0gdXJsLnF1ZXJ5O1xuICB2YXIgZnJhZ21lbnQgPSB1cmwuZnJhZ21lbnQ7XG4gIHZhciBvdXRwdXQgPSBzY2hlbWUgKyAnOic7XG4gIGlmIChob3N0ICE9PSBudWxsKSB7XG4gICAgb3V0cHV0ICs9ICcvLyc7XG4gICAgaWYgKGluY2x1ZGVzQ3JlZGVudGlhbHModXJsKSkge1xuICAgICAgb3V0cHV0ICs9IHVzZXJuYW1lICsgKHBhc3N3b3JkID8gJzonICsgcGFzc3dvcmQgOiAnJykgKyAnQCc7XG4gICAgfVxuICAgIG91dHB1dCArPSBzZXJpYWxpemVIb3N0KGhvc3QpO1xuICAgIGlmIChwb3J0ICE9PSBudWxsKSBvdXRwdXQgKz0gJzonICsgcG9ydDtcbiAgfSBlbHNlIGlmIChzY2hlbWUgPT0gJ2ZpbGUnKSBvdXRwdXQgKz0gJy8vJztcbiAgb3V0cHV0ICs9IHVybC5jYW5ub3RCZUFCYXNlVVJMID8gcGF0aFswXSA6IHBhdGgubGVuZ3RoID8gJy8nICsgcGF0aC5qb2luKCcvJykgOiAnJztcbiAgaWYgKHF1ZXJ5ICE9PSBudWxsKSBvdXRwdXQgKz0gJz8nICsgcXVlcnk7XG4gIGlmIChmcmFnbWVudCAhPT0gbnVsbCkgb3V0cHV0ICs9ICcjJyArIGZyYWdtZW50O1xuICByZXR1cm4gb3V0cHV0O1xufTtcblxudmFyIGdldE9yaWdpbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gIHZhciBzY2hlbWUgPSB1cmwuc2NoZW1lO1xuICB2YXIgcG9ydCA9IHVybC5wb3J0O1xuICBpZiAoc2NoZW1lID09ICdibG9iJykgdHJ5IHtcbiAgICByZXR1cm4gbmV3IFVSTENvbnN0cnVjdG9yKHNjaGVtZS5wYXRoWzBdKS5vcmlnaW47XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICdudWxsJztcbiAgfVxuICBpZiAoc2NoZW1lID09ICdmaWxlJyB8fCAhaXNTcGVjaWFsKHVybCkpIHJldHVybiAnbnVsbCc7XG4gIHJldHVybiBzY2hlbWUgKyAnOi8vJyArIHNlcmlhbGl6ZUhvc3QodXJsLmhvc3QpICsgKHBvcnQgIT09IG51bGwgPyAnOicgKyBwb3J0IDogJycpO1xufTtcblxudmFyIGdldFByb3RvY29sID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5zY2hlbWUgKyAnOic7XG59O1xuXG52YXIgZ2V0VXNlcm5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnVzZXJuYW1lO1xufTtcblxudmFyIGdldFBhc3N3b3JkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5wYXNzd29yZDtcbn07XG5cbnZhciBnZXRIb3N0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgdmFyIGhvc3QgPSB1cmwuaG9zdDtcbiAgdmFyIHBvcnQgPSB1cmwucG9ydDtcbiAgcmV0dXJuIGhvc3QgPT09IG51bGwgPyAnJ1xuICAgIDogcG9ydCA9PT0gbnVsbCA/IHNlcmlhbGl6ZUhvc3QoaG9zdClcbiAgICA6IHNlcmlhbGl6ZUhvc3QoaG9zdCkgKyAnOicgKyBwb3J0O1xufTtcblxudmFyIGdldEhvc3RuYW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaG9zdCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykuaG9zdDtcbiAgcmV0dXJuIGhvc3QgPT09IG51bGwgPyAnJyA6IHNlcmlhbGl6ZUhvc3QoaG9zdCk7XG59O1xuXG52YXIgZ2V0UG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHBvcnQgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnBvcnQ7XG4gIHJldHVybiBwb3J0ID09PSBudWxsID8gJycgOiBTdHJpbmcocG9ydCk7XG59O1xuXG52YXIgZ2V0UGF0aG5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICB2YXIgcGF0aCA9IHVybC5wYXRoO1xuICByZXR1cm4gdXJsLmNhbm5vdEJlQUJhc2VVUkwgPyBwYXRoWzBdIDogcGF0aC5sZW5ndGggPyAnLycgKyBwYXRoLmpvaW4oJy8nKSA6ICcnO1xufTtcblxudmFyIGdldFNlYXJjaCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHF1ZXJ5ID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5xdWVyeTtcbiAgcmV0dXJuIHF1ZXJ5ID8gJz8nICsgcXVlcnkgOiAnJztcbn07XG5cbnZhciBnZXRTZWFyY2hQYXJhbXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnNlYXJjaFBhcmFtcztcbn07XG5cbnZhciBnZXRIYXNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZnJhZ21lbnQgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLmZyYWdtZW50O1xuICByZXR1cm4gZnJhZ21lbnQgPyAnIycgKyBmcmFnbWVudCA6ICcnO1xufTtcblxudmFyIGFjY2Vzc29yRGVzY3JpcHRvciA9IGZ1bmN0aW9uIChnZXR0ZXIsIHNldHRlcikge1xuICByZXR1cm4geyBnZXQ6IGdldHRlciwgc2V0OiBzZXR0ZXIsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSB9O1xufTtcblxuaWYgKERFU0NSSVBUT1JTKSB7XG4gIGRlZmluZVByb3BlcnRpZXMoVVJMUHJvdG90eXBlLCB7XG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaHJlZmAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaHJlZlxuICAgIGhyZWY6IGFjY2Vzc29yRGVzY3JpcHRvcihzZXJpYWxpemVVUkwsIGZ1bmN0aW9uIChocmVmKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciB1cmxTdHJpbmcgPSBTdHJpbmcoaHJlZik7XG4gICAgICB2YXIgZmFpbHVyZSA9IHBhcnNlVVJMKHVybCwgdXJsU3RyaW5nKTtcbiAgICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gICAgICBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlKHVybC5zZWFyY2hQYXJhbXMpLnVwZGF0ZVNlYXJjaFBhcmFtcyh1cmwucXVlcnkpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLm9yaWdpbmAgZ2V0dGVyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLW9yaWdpblxuICAgIG9yaWdpbjogYWNjZXNzb3JEZXNjcmlwdG9yKGdldE9yaWdpbiksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucHJvdG9jb2xgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXByb3RvY29sXG4gICAgcHJvdG9jb2w6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRQcm90b2NvbCwgZnVuY3Rpb24gKHByb3RvY29sKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIHBhcnNlVVJMKHVybCwgU3RyaW5nKHByb3RvY29sKSArICc6JywgU0NIRU1FX1NUQVJUKTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS51c2VybmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdXNlcm5hbWVcbiAgICB1c2VybmFtZTogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFVzZXJuYW1lLCBmdW5jdGlvbiAodXNlcm5hbWUpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGNvZGVQb2ludHMgPSBhcnJheUZyb20oU3RyaW5nKHVzZXJuYW1lKSk7XG4gICAgICBpZiAoY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KHVybCkpIHJldHVybjtcbiAgICAgIHVybC51c2VybmFtZSA9ICcnO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHVybC51c2VybmFtZSArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaV0sIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCk7XG4gICAgICB9XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucGFzc3dvcmRgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhc3N3b3JkXG4gICAgcGFzc3dvcmQ6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRQYXNzd29yZCwgZnVuY3Rpb24gKHBhc3N3b3JkKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKFN0cmluZyhwYXNzd29yZCkpO1xuICAgICAgaWYgKGNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCh1cmwpKSByZXR1cm47XG4gICAgICB1cmwucGFzc3dvcmQgPSAnJztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB1cmwucGFzc3dvcmQgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2ldLCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgfVxuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLmhvc3RgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RcbiAgICBob3N0OiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0SG9zdCwgZnVuY3Rpb24gKGhvc3QpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgaWYgKHVybC5jYW5ub3RCZUFCYXNlVVJMKSByZXR1cm47XG4gICAgICBwYXJzZVVSTCh1cmwsIFN0cmluZyhob3N0KSwgSE9TVCk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuaG9zdG5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RuYW1lXG4gICAgaG9zdG5hbWU6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRIb3N0bmFtZSwgZnVuY3Rpb24gKGhvc3RuYW1lKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIGlmICh1cmwuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgICAgcGFyc2VVUkwodXJsLCBTdHJpbmcoaG9zdG5hbWUpLCBIT1NUTkFNRSk7XG4gICAgfSksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucG9ydGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcG9ydFxuICAgIHBvcnQ6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRQb3J0LCBmdW5jdGlvbiAocG9ydCkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBpZiAoY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KHVybCkpIHJldHVybjtcbiAgICAgIHBvcnQgPSBTdHJpbmcocG9ydCk7XG4gICAgICBpZiAocG9ydCA9PSAnJykgdXJsLnBvcnQgPSBudWxsO1xuICAgICAgZWxzZSBwYXJzZVVSTCh1cmwsIHBvcnQsIFBPUlQpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnBhdGhuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXRobmFtZVxuICAgIHBhdGhuYW1lOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0UGF0aG5hbWUsIGZ1bmN0aW9uIChwYXRobmFtZSkge1xuICAgICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7XG4gICAgICBpZiAodXJsLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjtcbiAgICAgIHVybC5wYXRoID0gW107XG4gICAgICBwYXJzZVVSTCh1cmwsIHBhdGhuYW1lICsgJycsIFBBVEhfU1RBUlQpO1xuICAgIH0pLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnNlYXJjaGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNoXG4gICAgc2VhcmNoOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0U2VhcmNoLCBmdW5jdGlvbiAoc2VhcmNoKSB7XG4gICAgICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTtcbiAgICAgIHNlYXJjaCA9IFN0cmluZyhzZWFyY2gpO1xuICAgICAgaWYgKHNlYXJjaCA9PSAnJykge1xuICAgICAgICB1cmwucXVlcnkgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCc/JyA9PSBzZWFyY2guY2hhckF0KDApKSBzZWFyY2ggPSBzZWFyY2guc2xpY2UoMSk7XG4gICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICBwYXJzZVVSTCh1cmwsIHNlYXJjaCwgUVVFUlkpO1xuICAgICAgfVxuICAgICAgZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZSh1cmwuc2VhcmNoUGFyYW1zKS51cGRhdGVTZWFyY2hQYXJhbXModXJsLnF1ZXJ5KTtcbiAgICB9KSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5zZWFyY2hQYXJhbXNgIGdldHRlclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hwYXJhbXNcbiAgICBzZWFyY2hQYXJhbXM6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRTZWFyY2hQYXJhbXMpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLmhhc2hgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhhc2hcbiAgICBoYXNoOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0SGFzaCwgZnVuY3Rpb24gKGhhc2gpIHtcbiAgICAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpO1xuICAgICAgaGFzaCA9IFN0cmluZyhoYXNoKTtcbiAgICAgIGlmIChoYXNoID09ICcnKSB7XG4gICAgICAgIHVybC5mcmFnbWVudCA9IG51bGw7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICgnIycgPT0gaGFzaC5jaGFyQXQoMCkpIGhhc2ggPSBoYXNoLnNsaWNlKDEpO1xuICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICBwYXJzZVVSTCh1cmwsIGhhc2gsIEZSQUdNRU5UKTtcbiAgICB9KVxuICB9KTtcbn1cblxuLy8gYFVSTC5wcm90b3R5cGUudG9KU09OYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC10b2pzb25cbnJlZGVmaW5lKFVSTFByb3RvdHlwZSwgJ3RvSlNPTicsIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgcmV0dXJuIHNlcmlhbGl6ZVVSTC5jYWxsKHRoaXMpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vLyBgVVJMLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI1VSTC1zdHJpbmdpZmljYXRpb24tYmVoYXZpb3JcbnJlZGVmaW5lKFVSTFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBzZXJpYWxpemVVUkwuY2FsbCh0aGlzKTtcbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuaWYgKE5hdGl2ZVVSTCkge1xuICB2YXIgbmF0aXZlQ3JlYXRlT2JqZWN0VVJMID0gTmF0aXZlVVJMLmNyZWF0ZU9iamVjdFVSTDtcbiAgdmFyIG5hdGl2ZVJldm9rZU9iamVjdFVSTCA9IE5hdGl2ZVVSTC5yZXZva2VPYmplY3RVUkw7XG4gIC8vIGBVUkwuY3JlYXRlT2JqZWN0VVJMYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1VSTC9jcmVhdGVPYmplY3RVUkxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgaWYgKG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCkgcmVkZWZpbmUoVVJMQ29uc3RydWN0b3IsICdjcmVhdGVPYmplY3RVUkwnLCBmdW5jdGlvbiBjcmVhdGVPYmplY3RVUkwoYmxvYikge1xuICAgIHJldHVybiBuYXRpdmVDcmVhdGVPYmplY3RVUkwuYXBwbHkoTmF0aXZlVVJMLCBhcmd1bWVudHMpO1xuICB9KTtcbiAgLy8gYFVSTC5yZXZva2VPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML3Jldm9rZU9iamVjdFVSTFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBpZiAobmF0aXZlUmV2b2tlT2JqZWN0VVJMKSByZWRlZmluZShVUkxDb25zdHJ1Y3RvciwgJ3Jldm9rZU9iamVjdFVSTCcsIGZ1bmN0aW9uIHJldm9rZU9iamVjdFVSTCh1cmwpIHtcbiAgICByZXR1cm4gbmF0aXZlUmV2b2tlT2JqZWN0VVJMLmFwcGx5KE5hdGl2ZVVSTCwgYXJndW1lbnRzKTtcbiAgfSk7XG59XG5cbnNldFRvU3RyaW5nVGFnKFVSTENvbnN0cnVjdG9yLCAnVVJMJyk7XG5cbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogIVVTRV9OQVRJVkVfVVJMLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBVUkw6IFVSTENvbnN0cnVjdG9yXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgVVJMLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXRvanNvblxuJCh7IHRhcmdldDogJ1VSTCcsIHByb3RvOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlIH0sIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIFVSTC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfVxufSk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iaiwgcHJvcCkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7IH0iLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiaW1wb3J0IHJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCByZWFjdERvbSBmcm9tICdyZWFjdC1kb20nO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gZXJyKG1lc3NhZ2UpIHtcbiAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7IC8vIEluIFY4LCBFcnJvciBvYmplY3RzIGtlZXAgdGhlIGNsb3N1cmUgc2NvcGUgY2hhaW4gYWxpdmUgdW50aWwgdGhlXG4gIC8vIGVyci5zdGFjayBwcm9wZXJ0eSBpcyBhY2Nlc3NlZC5cblxuICBpZiAoZXJyb3Iuc3RhY2sgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIElFIHNldHMgdGhlIHN0YWNrIG9ubHkgaWYgZXJyb3IgaXMgdGhyb3duXG4gICAgdHJ5IHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0gY2F0Y2ggKF8pIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZmItd3d3L25vLXVudXNlZC1jYXRjaC1iaW5kaW5ncywgbm8tZW1wdHlcblxuICB9XG5cbiAgcmV0dXJuIGVycm9yO1xufVxuXG52YXIgZXJyXzEgPSBlcnI7XG5cbi8vIEBvc3Mtb25seVxuXG5cbnZhciBSZWNvaWxfZXJyID0gZXJyXzE7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG4vLyBTcGxpdCBkZWNsYXJhdGlvbiBhbmQgaW1wbGVtZW50YXRpb24gdG8gYWxsb3cgdGhpcyBmdW5jdGlvbiB0byBwcmV0ZW5kIHRvXG4vLyBjaGVjayBmb3IgYWN0dWFsIGluc3RhbmNlIG9mIFByb21pc2UgaW5zdGVhZCBvZiBzb21ldGhpbmcgd2l0aCBhIGB0aGVuYFxuLy8gbWV0aG9kLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuZnVuY3Rpb24gaXNQcm9taXNlKHApIHtcbiAgcmV0dXJuICEhcCAmJiB0eXBlb2YgcC50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuXG52YXIgUmVjb2lsX2lzUHJvbWlzZSA9IGlzUHJvbWlzZTtcblxuZnVuY3Rpb24gbnVsbHRocm93cyh4LCBtZXNzYWdlKSB7XG4gIGlmICh4ICE9IG51bGwpIHtcbiAgICByZXR1cm4geDtcbiAgfVxuXG4gIHRocm93IFJlY29pbF9lcnIobWVzc2FnZSAhPT0gbnVsbCAmJiBtZXNzYWdlICE9PSB2b2lkIDAgPyBtZXNzYWdlIDogJ0dvdCB1bmV4cGVjdGVkIG51bGwgb3IgdW5kZWZpbmVkJyk7XG59XG5cbnZhciBSZWNvaWxfbnVsbHRocm93cyA9IG51bGx0aHJvd3M7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5jbGFzcyBCYXNlTG9hZGFibGUge1xuICBnZXRWYWx1ZSgpIHtcbiAgICB0aHJvdyBSZWNvaWxfZXJyKCdCYXNlTG9hZGFibGUnKTtcbiAgfVxuXG4gIHRvUHJvbWlzZSgpIHtcbiAgICB0aHJvdyBSZWNvaWxfZXJyKCdCYXNlTG9hZGFibGUnKTtcbiAgfVxuXG4gIHZhbHVlTWF5YmUoKSB7XG4gICAgdGhyb3cgUmVjb2lsX2VycignQmFzZUxvYWRhYmxlJyk7XG4gIH1cblxuICB2YWx1ZU9yVGhyb3coKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgdGhyb3cgUmVjb2lsX2VycihgTG9hZGFibGUgZXhwZWN0ZWQgdmFsdWUsIGJ1dCBpbiBcIiR7dGhpcy5zdGF0ZX1cIiBzdGF0ZWApO1xuICB9XG5cbiAgcHJvbWlzZU1heWJlKCkge1xuICAgIHRocm93IFJlY29pbF9lcnIoJ0Jhc2VMb2FkYWJsZScpO1xuICB9XG5cbiAgcHJvbWlzZU9yVGhyb3coKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgdGhyb3cgUmVjb2lsX2VycihgTG9hZGFibGUgZXhwZWN0ZWQgcHJvbWlzZSwgYnV0IGluIFwiJHt0aGlzLnN0YXRlfVwiIHN0YXRlYCk7XG4gIH1cblxuICBlcnJvck1heWJlKCkge1xuICAgIHRocm93IFJlY29pbF9lcnIoJ0Jhc2VMb2FkYWJsZScpO1xuICB9XG5cbiAgZXJyb3JPclRocm93KCkge1xuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIHRocm93IFJlY29pbF9lcnIoYExvYWRhYmxlIGV4cGVjdGVkIGVycm9yLCBidXQgaW4gXCIke3RoaXMuc3RhdGV9XCIgc3RhdGVgKTtcbiAgfVxuXG4gIGlzKG90aGVyKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgcmV0dXJuIG90aGVyLnN0YXRlID09PSB0aGlzLnN0YXRlICYmIG90aGVyLmNvbnRlbnRzID09PSB0aGlzLmNvbnRlbnRzO1xuICB9XG5cbiAgbWFwKF9tYXApIHtcbiAgICB0aHJvdyBSZWNvaWxfZXJyKCdCYXNlTG9hZGFibGUnKTtcbiAgfVxuXG59XG5cbmNsYXNzIFZhbHVlTG9hZGFibGUgZXh0ZW5kcyBCYXNlTG9hZGFibGUge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzdGF0ZVwiLCAnaGFzVmFsdWUnKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbnRlbnRzXCIsIHZvaWQgMCk7XG5cbiAgICB0aGlzLmNvbnRlbnRzID0gdmFsdWU7XG4gIH1cblxuICBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50cztcbiAgfVxuXG4gIHRvUHJvbWlzZSgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuY29udGVudHMpO1xuICB9XG5cbiAgdmFsdWVNYXliZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50cztcbiAgfVxuXG4gIHZhbHVlT3JUaHJvdygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50cztcbiAgfVxuXG4gIHByb21pc2VNYXliZSgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZXJyb3JNYXliZSgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgbWFwKG1hcCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBuZXh0ID0gbWFwKHRoaXMuY29udGVudHMpO1xuICAgICAgcmV0dXJuIFJlY29pbF9pc1Byb21pc2UobmV4dCkgPyBsb2FkYWJsZVdpdGhQcm9taXNlKG5leHQpIDogaXNMb2FkYWJsZShuZXh0KSA/IG5leHQgOiBsb2FkYWJsZVdpdGhWYWx1ZShuZXh0KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gUmVjb2lsX2lzUHJvbWlzZShlKSA/IC8vIElmIHdlIFwic3VzcGVuZGVkXCIsIHRoZW4gdHJ5IGFnYWluLlxuICAgICAgLy8gZXJyb3JzIGFuZCBzdWJzZXF1ZW50IHJldHJpZXMgd2lsbCBiZSBoYW5kbGVkIGluICdsb2FkaW5nJyBjYXNlXG4gICAgICBsb2FkYWJsZVdpdGhQcm9taXNlKGUubmV4dCgoKSA9PiB0aGlzLm1hcChtYXApKSkgOiBsb2FkYWJsZVdpdGhFcnJvcihlKTtcbiAgICB9XG4gIH1cblxufVxuXG5jbGFzcyBFcnJvckxvYWRhYmxlIGV4dGVuZHMgQmFzZUxvYWRhYmxlIHtcbiAgY29uc3RydWN0b3IoZXJyb3IpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic3RhdGVcIiwgJ2hhc0Vycm9yJyk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb250ZW50c1wiLCB2b2lkIDApO1xuXG4gICAgdGhpcy5jb250ZW50cyA9IGVycm9yO1xuICB9XG5cbiAgZ2V0VmFsdWUoKSB7XG4gICAgdGhyb3cgdGhpcy5jb250ZW50cztcbiAgfVxuXG4gIHRvUHJvbWlzZSgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodGhpcy5jb250ZW50cyk7XG4gIH1cblxuICB2YWx1ZU1heWJlKCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcm9taXNlTWF5YmUoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGVycm9yTWF5YmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gIH1cblxuICBlcnJvck9yVGhyb3coKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gIH1cblxuICBtYXAoX21hcCkge1xuICAgIC8vICRGbG93SXNzdWVbaW5jb21wYXRpYmxlLXJldHVybl1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG59XG5cbmNsYXNzIExvYWRpbmdMb2FkYWJsZSBleHRlbmRzIEJhc2VMb2FkYWJsZSB7XG4gIGNvbnN0cnVjdG9yKHByb21pc2UpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic3RhdGVcIiwgJ2xvYWRpbmcnKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbnRlbnRzXCIsIHZvaWQgMCk7XG5cbiAgICB0aGlzLmNvbnRlbnRzID0gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFZhbHVlKCkge1xuICAgIHRocm93IHRoaXMuY29udGVudHM7XG4gIH1cblxuICB0b1Byb21pc2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gIH1cblxuICB2YWx1ZU1heWJlKCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcm9taXNlTWF5YmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudHM7XG4gIH1cblxuICBwcm9taXNlT3JUaHJvdygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50cztcbiAgfVxuXG4gIGVycm9yTWF5YmUoKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIG1hcChtYXApIHtcbiAgICByZXR1cm4gbG9hZGFibGVXaXRoUHJvbWlzZSh0aGlzLmNvbnRlbnRzLnRoZW4odmFsdWUgPT4ge1xuICAgICAgY29uc3QgbmV4dCA9IG1hcCh2YWx1ZSk7XG5cbiAgICAgIGlmIChpc0xvYWRhYmxlKG5leHQpKSB7XG4gICAgICAgIGNvbnN0IG5leHRMb2FkYWJsZSA9IG5leHQ7XG5cbiAgICAgICAgc3dpdGNoIChuZXh0TG9hZGFibGUuc3RhdGUpIHtcbiAgICAgICAgICBjYXNlICdoYXNWYWx1ZSc6XG4gICAgICAgICAgICByZXR1cm4gbmV4dExvYWRhYmxlLmNvbnRlbnRzO1xuXG4gICAgICAgICAgY2FzZSAnaGFzRXJyb3InOlxuICAgICAgICAgICAgdGhyb3cgbmV4dExvYWRhYmxlLmNvbnRlbnRzO1xuXG4gICAgICAgICAgY2FzZSAnbG9hZGluZyc6XG4gICAgICAgICAgICByZXR1cm4gbmV4dExvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgICB9XG4gICAgICB9IC8vICRGbG93SXNzdWVbaW5jb21wYXRpYmxlLXJldHVybl1cblxuXG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9KS5jYXRjaChlID0+IHtcbiAgICAgIGlmIChSZWNvaWxfaXNQcm9taXNlKGUpKSB7XG4gICAgICAgIC8vIHdlIHdlcmUgXCJzdXNwZW5kZWQsXCIgdHJ5IGFnYWluXG4gICAgICAgIHJldHVybiBlLnRoZW4oKCkgPT4gdGhpcy5tYXAobWFwKS5jb250ZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IGU7XG4gICAgfSkpO1xuICB9XG5cbn1cblxuZnVuY3Rpb24gbG9hZGFibGVXaXRoVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUobmV3IFZhbHVlTG9hZGFibGUodmFsdWUpKTtcbn1cblxuZnVuY3Rpb24gbG9hZGFibGVXaXRoRXJyb3IoZXJyb3IpIHtcbiAgcmV0dXJuIE9iamVjdC5mcmVlemUobmV3IEVycm9yTG9hZGFibGUoZXJyb3IpKTtcbn1cblxuZnVuY3Rpb24gbG9hZGFibGVXaXRoUHJvbWlzZShwcm9taXNlKSB7XG4gIHJldHVybiBPYmplY3QuZnJlZXplKG5ldyBMb2FkaW5nTG9hZGFibGUocHJvbWlzZSkpO1xufVxuXG5mdW5jdGlvbiBsb2FkYWJsZUxvYWRpbmcoKSB7XG4gIHJldHVybiBPYmplY3QuZnJlZXplKG5ldyBMb2FkaW5nTG9hZGFibGUobmV3IFByb21pc2UoKCkgPT4ge30pKSk7XG59XG5cbmZ1bmN0aW9uIGxvYWRhYmxlQWxsQXJyYXkoaW5wdXRzKSB7XG4gIHJldHVybiBpbnB1dHMuZXZlcnkoaSA9PiBpLnN0YXRlID09PSAnaGFzVmFsdWUnKSA/IGxvYWRhYmxlV2l0aFZhbHVlKGlucHV0cy5tYXAoaSA9PiBpLmNvbnRlbnRzKSkgOiBpbnB1dHMuc29tZShpID0+IGkuc3RhdGUgPT09ICdoYXNFcnJvcicpID8gbG9hZGFibGVXaXRoRXJyb3IoUmVjb2lsX251bGx0aHJvd3MoaW5wdXRzLmZpbmQoaSA9PiBpLnN0YXRlID09PSAnaGFzRXJyb3InKSwgJ0ludmFsaWQgbG9hZGFibGUgcGFzc2VkIHRvIGxvYWRhYmxlQWxsJykuY29udGVudHMpIDogbG9hZGFibGVXaXRoUHJvbWlzZShQcm9taXNlLmFsbChpbnB1dHMubWFwKGkgPT4gaS5jb250ZW50cykpKTtcbn1cblxuZnVuY3Rpb24gbG9hZGFibGVBbGwoaW5wdXRzKSB7XG4gIGNvbnN0IHVud3JhcGVkSW5wdXRzID0gQXJyYXkuaXNBcnJheShpbnB1dHMpID8gaW5wdXRzIDogT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaW5wdXRzKS5tYXAoa2V5ID0+IGlucHV0c1trZXldKTtcbiAgY29uc3Qgb3V0cHV0ID0gbG9hZGFibGVBbGxBcnJheSh1bndyYXBlZElucHV0cyk7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGlucHV0cykgPyAvLyAkRmxvd0lzc3VlW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gIG91dHB1dCA6IC8vIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKCkgaGFzIGNvbnNpc3RlbnQga2V5IG9yZGVyaW5nIHdpdGggRVM2XG4gIC8vICRGbG93SXNzdWVbaW5jb21wYXRpYmxlLWNhbGxdXG4gIG91dHB1dC5tYXAob3V0cHV0cyA9PiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhpbnB1dHMpLnJlZHVjZSgob3V0LCBrZXksIGlkeCkgPT4gKHsgLi4ub3V0LFxuICAgIFtrZXldOiBvdXRwdXRzW2lkeF1cbiAgfSksIHt9KSk7XG59XG5cbmZ1bmN0aW9uIGlzTG9hZGFibGUoeCkge1xuICByZXR1cm4geCBpbnN0YW5jZW9mIEJhc2VMb2FkYWJsZTtcbn1cblxuY29uc3QgTG9hZGFibGVTdGF0aWNJbnRlcmZhY2UgPSB7XG4gIG9mOiB2YWx1ZSA9PiBSZWNvaWxfaXNQcm9taXNlKHZhbHVlKSA/IGxvYWRhYmxlV2l0aFByb21pc2UodmFsdWUpIDogbG9hZGFibGVXaXRoVmFsdWUodmFsdWUpLFxuICBlcnJvcjogZXJyb3IgPT4gbG9hZGFibGVXaXRoRXJyb3IoZXJyb3IpLFxuICAvLyAkRmxvd0lzc3VlW3VuY2xlYXItdHlwZV1cbiAgYWxsOiBsb2FkYWJsZUFsbCxcbiAgaXNMb2FkYWJsZVxufTtcbnZhciBSZWNvaWxfTG9hZGFibGUgPSB7XG4gIGxvYWRhYmxlV2l0aFZhbHVlLFxuICBsb2FkYWJsZVdpdGhFcnJvcixcbiAgbG9hZGFibGVXaXRoUHJvbWlzZSxcbiAgbG9hZGFibGVMb2FkaW5nLFxuICBsb2FkYWJsZUFsbCxcbiAgaXNMb2FkYWJsZSxcbiAgUmVjb2lsTG9hZGFibGU6IExvYWRhYmxlU3RhdGljSW50ZXJmYWNlXG59O1xuXG52YXIgUmVjb2lsX0xvYWRhYmxlXzEgPSBSZWNvaWxfTG9hZGFibGUubG9hZGFibGVXaXRoVmFsdWU7XG52YXIgUmVjb2lsX0xvYWRhYmxlXzIgPSBSZWNvaWxfTG9hZGFibGUubG9hZGFibGVXaXRoRXJyb3I7XG52YXIgUmVjb2lsX0xvYWRhYmxlXzMgPSBSZWNvaWxfTG9hZGFibGUubG9hZGFibGVXaXRoUHJvbWlzZTtcbnZhciBSZWNvaWxfTG9hZGFibGVfNCA9IFJlY29pbF9Mb2FkYWJsZS5sb2FkYWJsZUxvYWRpbmc7XG52YXIgUmVjb2lsX0xvYWRhYmxlXzUgPSBSZWNvaWxfTG9hZGFibGUubG9hZGFibGVBbGw7XG52YXIgUmVjb2lsX0xvYWRhYmxlXzYgPSBSZWNvaWxfTG9hZGFibGUuaXNMb2FkYWJsZTtcbnZhciBSZWNvaWxfTG9hZGFibGVfNyA9IFJlY29pbF9Mb2FkYWJsZS5SZWNvaWxMb2FkYWJsZTtcblxudmFyIFJlY29pbF9Mb2FkYWJsZSQxID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIGxvYWRhYmxlV2l0aFZhbHVlOiBSZWNvaWxfTG9hZGFibGVfMSxcbiAgbG9hZGFibGVXaXRoRXJyb3I6IFJlY29pbF9Mb2FkYWJsZV8yLFxuICBsb2FkYWJsZVdpdGhQcm9taXNlOiBSZWNvaWxfTG9hZGFibGVfMyxcbiAgbG9hZGFibGVMb2FkaW5nOiBSZWNvaWxfTG9hZGFibGVfNCxcbiAgbG9hZGFibGVBbGw6IFJlY29pbF9Mb2FkYWJsZV81LFxuICBpc0xvYWRhYmxlOiBSZWNvaWxfTG9hZGFibGVfNixcbiAgUmVjb2lsTG9hZGFibGU6IFJlY29pbF9Mb2FkYWJsZV83XG59KTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5cbmZ1bmN0aW9uIHNwcmludGYoZm9ybWF0LCAuLi5hcmdzKSB7XG4gIGxldCBpbmRleCA9IDA7XG4gIHJldHVybiBmb3JtYXQucmVwbGFjZSgvJXMvZywgKCkgPT4gU3RyaW5nKGFyZ3NbaW5kZXgrK10pKTtcbn1cblxudmFyIHNwcmludGZfMSA9IHNwcmludGY7XG5cbmZ1bmN0aW9uIGV4cGVjdGF0aW9uVmlvbGF0aW9uKGZvcm1hdCwgLi4uYXJncykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IHNwcmludGZfMS5jYWxsKG51bGwsIGZvcm1hdCwgLi4uYXJncyk7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgZXJyb3IubmFtZSA9ICdFeHBlY3RhdGlvbiBWaW9sYXRpb24nO1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICB9XG59XG5cbnZhciBleHBlY3RhdGlvblZpb2xhdGlvbl8xID0gZXhwZWN0YXRpb25WaW9sYXRpb247XG5cbi8vIEBvc3Mtb25seVxuXG5cbnZhciBSZWNvaWxfZXhwZWN0YXRpb25WaW9sYXRpb24gPSBleHBlY3RhdGlvblZpb2xhdGlvbl8xO1xuXG52YXIgX3VzZU11dGFibGVTb3VyY2U7XG5cbiAvLyBGSVhNRSBUMjcxMDU1OTI4MjU5OTY2MFxuXG5cbmNvbnN0IHVzZU11dGFibGVTb3VyY2UgPSAvLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbihfdXNlTXV0YWJsZVNvdXJjZSA9IHJlYWN0LnVzZU11dGFibGVTb3VyY2UpICE9PSBudWxsICYmIF91c2VNdXRhYmxlU291cmNlICE9PSB2b2lkIDAgPyBfdXNlTXV0YWJsZVNvdXJjZSA6IHJlYWN0LnVuc3RhYmxlX3VzZU11dGFibGVTb3VyY2U7IC8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG5mdW5jdGlvbiBtdXRhYmxlU291cmNlRXhpc3RzKCkge1xuICByZXR1cm4gdXNlTXV0YWJsZVNvdXJjZSAmJiAhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy4kZGlzYWJsZVJlY29pbFZhbHVlTXV0YWJsZVNvdXJjZV9URU1QX0hBQ0tfRE9fTk9UX1VTRSk7XG59XG5cbnZhciBSZWNvaWxfbXV0YWJsZVNvdXJjZSA9IHtcbiAgbXV0YWJsZVNvdXJjZUV4aXN0cyxcbiAgdXNlTXV0YWJsZVNvdXJjZVxufTtcblxuY29uc3Qge1xuICBtdXRhYmxlU291cmNlRXhpc3RzOiBtdXRhYmxlU291cmNlRXhpc3RzJDFcbn0gPSBSZWNvaWxfbXV0YWJsZVNvdXJjZTtcblxuY29uc3QgZ2tzID0gbmV3IE1hcCgpLnNldCgncmVjb2lsX2hhbXRfMjAyMCcsIHRydWUpLnNldCgncmVjb2lsX21lbW9yeV9tYW5hZ2FtZW50XzIwMjAnLCB0cnVlKS5zZXQoJ3JlY29pbF9zdXBwcmVzc19yZXJlbmRlcl9pbl9jYWxsYmFjaycsIHRydWUpO1xuXG5mdW5jdGlvbiBSZWNvaWxfZ2t4KGdrKSB7XG4gIHZhciBfZ2tzJGdldDtcblxuICBpZiAoZ2sgPT09ICdyZWNvaWxfZWFybHlfcmVuZGVyaW5nXzIwMjEnICYmICFtdXRhYmxlU291cmNlRXhpc3RzJDEoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiAoX2drcyRnZXQgPSBna3MuZ2V0KGdrKSkgIT09IG51bGwgJiYgX2drcyRnZXQgIT09IHZvaWQgMCA/IF9na3MkZ2V0IDogZmFsc2U7XG59XG5cblJlY29pbF9na3guc2V0UGFzcyA9IGdrID0+IHtcbiAgZ2tzLnNldChnaywgdHJ1ZSk7XG59O1xuXG5SZWNvaWxfZ2t4LnNldEZhaWwgPSBnayA9PiB7XG4gIGdrcy5zZXQoZ2ssIGZhbHNlKTtcbn07XG5cbnZhciBSZWNvaWxfZ2t4XzEgPSBSZWNvaWxfZ2t4OyAvLyBAb3NzLW9ubHlcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaXRlcmFibGUgd2hvc2Ugb3V0cHV0IGlzIGdlbmVyYXRlZCBieSBwYXNzaW5nIHRoZSBpbnB1dFxuICogaXRlcmFibGUncyB2YWx1ZXMgdGhyb3VnaCB0aGUgbWFwcGVyIGZ1bmN0aW9uLlxuICovXG5cbmZ1bmN0aW9uIG1hcEl0ZXJhYmxlKGl0ZXJhYmxlLCBjYWxsYmFjaykge1xuICAvLyBVc2UgZ2VuZXJhdG9yIHRvIGNyZWF0ZSBpdGVyYWJsZS9pdGVyYXRvclxuICByZXR1cm4gZnVuY3Rpb24qICgpIHtcbiAgICBsZXQgaW5kZXggPSAwO1xuXG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBpdGVyYWJsZSkge1xuICAgICAgeWllbGQgY2FsbGJhY2sodmFsdWUsIGluZGV4KyspO1xuICAgIH1cbiAgfSgpO1xufVxuXG52YXIgUmVjb2lsX21hcEl0ZXJhYmxlID0gbWFwSXRlcmFibGU7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5mdW5jdGlvbiByZWNvdmVyYWJsZVZpb2xhdGlvbihtZXNzYWdlLCBwcm9qZWN0TmFtZSwge1xuICBlcnJvclxufSA9IHt9KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UsIGVycm9yKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgcmVjb3ZlcmFibGVWaW9sYXRpb25fMSA9IHJlY292ZXJhYmxlVmlvbGF0aW9uO1xuXG4vLyBAb3NzLW9ubHlcblxuXG52YXIgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uID0gcmVjb3ZlcmFibGVWaW9sYXRpb25fMTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuY2xhc3MgQWJzdHJhY3RSZWNvaWxWYWx1ZSB7XG4gIGNvbnN0cnVjdG9yKG5ld0tleSkge1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImtleVwiLCB2b2lkIDApO1xuXG4gICAgdGhpcy5rZXkgPSBuZXdLZXk7XG4gIH1cblxufVxuXG5jbGFzcyBSZWNvaWxTdGF0ZSBleHRlbmRzIEFic3RyYWN0UmVjb2lsVmFsdWUge31cblxuY2xhc3MgUmVjb2lsVmFsdWVSZWFkT25seSBleHRlbmRzIEFic3RyYWN0UmVjb2lsVmFsdWUge31cblxuZnVuY3Rpb24gaXNSZWNvaWxWYWx1ZSh4KSB7XG4gIHJldHVybiB4IGluc3RhbmNlb2YgUmVjb2lsU3RhdGUgfHwgeCBpbnN0YW5jZW9mIFJlY29pbFZhbHVlUmVhZE9ubHk7XG59XG5cbnZhciBSZWNvaWxfUmVjb2lsVmFsdWUgPSB7XG4gIEFic3RyYWN0UmVjb2lsVmFsdWUsXG4gIFJlY29pbFN0YXRlLFxuICBSZWNvaWxWYWx1ZVJlYWRPbmx5LFxuICBpc1JlY29pbFZhbHVlXG59O1xuXG52YXIgUmVjb2lsX1JlY29pbFZhbHVlXzEgPSBSZWNvaWxfUmVjb2lsVmFsdWUuQWJzdHJhY3RSZWNvaWxWYWx1ZTtcbnZhciBSZWNvaWxfUmVjb2lsVmFsdWVfMiA9IFJlY29pbF9SZWNvaWxWYWx1ZS5SZWNvaWxTdGF0ZTtcbnZhciBSZWNvaWxfUmVjb2lsVmFsdWVfMyA9IFJlY29pbF9SZWNvaWxWYWx1ZS5SZWNvaWxWYWx1ZVJlYWRPbmx5O1xudmFyIFJlY29pbF9SZWNvaWxWYWx1ZV80ID0gUmVjb2lsX1JlY29pbFZhbHVlLmlzUmVjb2lsVmFsdWU7XG5cbnZhciBSZWNvaWxfUmVjb2lsVmFsdWUkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBBYnN0cmFjdFJlY29pbFZhbHVlOiBSZWNvaWxfUmVjb2lsVmFsdWVfMSxcbiAgUmVjb2lsU3RhdGU6IFJlY29pbF9SZWNvaWxWYWx1ZV8yLFxuICBSZWNvaWxWYWx1ZVJlYWRPbmx5OiBSZWNvaWxfUmVjb2lsVmFsdWVfMyxcbiAgaXNSZWNvaWxWYWx1ZTogUmVjb2lsX1JlY29pbFZhbHVlXzRcbn0pO1xuXG5jbGFzcyBEZWZhdWx0VmFsdWUge31cblxuY29uc3QgREVGQVVMVF9WQUxVRSA9IG5ldyBEZWZhdWx0VmFsdWUoKTtcblxuY2xhc3MgUmVjb2lsVmFsdWVOb3RSZWFkeSBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3Ioa2V5KSB7XG4gICAgc3VwZXIoYFRyaWVkIHRvIHNldCB0aGUgdmFsdWUgb2YgUmVjb2lsIHNlbGVjdG9yICR7a2V5fSB1c2luZyBhbiB1cGRhdGVyIGZ1bmN0aW9uLCBidXQgaXQgaXMgYW4gYXN5bmMgc2VsZWN0b3IgaW4gYSBwZW5kaW5nIG9yIGVycm9yIHN0YXRlOyB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gIH1cblxufVxuXG4vLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuY29uc3Qgbm9kZXMgPSBuZXcgTWFwKCk7IC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG5cbmNvbnN0IHJlY29pbFZhbHVlcyA9IG5ldyBNYXAoKTtcbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlZGVjbGFyZSAqL1xuXG5mdW5jdGlvbiByZWNvaWxWYWx1ZXNGb3JLZXlzKGtleXMpIHtcbiAgcmV0dXJuIFJlY29pbF9tYXBJdGVyYWJsZShrZXlzLCBrZXkgPT4gUmVjb2lsX251bGx0aHJvd3MocmVjb2lsVmFsdWVzLmdldChrZXkpKSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTm9kZShub2RlKSB7XG4gIGlmIChub2Rlcy5oYXMobm9kZS5rZXkpKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGBEdXBsaWNhdGUgYXRvbSBrZXkgXCIke25vZGUua2V5fVwiLiBUaGlzIGlzIGEgRkFUQUwgRVJST1IgaW5cbiAgICAgIHByb2R1Y3Rpb24uIEJ1dCBpdCBpcyBzYWZlIHRvIGlnbm9yZSB0aGlzIHdhcm5pbmcgaWYgaXQgb2NjdXJyZWQgYmVjYXVzZSBvZlxuICAgICAgaG90IG1vZHVsZSByZXBsYWNlbWVudC5gOyAvLyBUT0RPIE5lZWQgdG8gZmlndXJlIG91dCBpZiB0aGVyZSBpcyBhIHN0YW5kYXJkL29wZW4tc291cmNlIGVxdWl2YWxlbnQgdG8gc2VlIGlmIGhvdCBtb2R1bGUgcmVwbGFjZW1lbnQgaXMgaGFwcGVuaW5nOlxuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIC8vIEBmYi1vbmx5OiBpZiAoX19ERVZfXykge1xuICAgIC8vIEBmYi1vbmx5OiBjb25zdCBpc0FjY2VwdGluZ1VwZGF0ZSA9IHJlcXVpcmUoJ19fZGVidWcnKS5pc0FjY2VwdGluZ1VwZGF0ZTtcbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAvLyBAZmItb25seTogaWYgKHR5cGVvZiBpc0FjY2VwdGluZ1VwZGF0ZSAhPT0gJ2Z1bmN0aW9uJyB8fCAhaXNBY2NlcHRpbmdVcGRhdGUoKSkge1xuICAgIC8vIEBmYi1vbmx5OiBleHBlY3RhdGlvblZpb2xhdGlvbihtZXNzYWdlLCAncmVjb2lsJyk7XG4gICAgLy8gQGZiLW9ubHk6IH1cbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAvLyBAZmItb25seTogfSBlbHNlIHtcbiAgICAvLyBAZmItb25seTogcmVjb3ZlcmFibGVWaW9sYXRpb24obWVzc2FnZSwgJ3JlY29pbCcpO1xuICAgIC8vIEBmYi1vbmx5OiB9XG5cbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7IC8vIEBvc3Mtb25seVxuICB9XG5cbiAgbm9kZXMuc2V0KG5vZGUua2V5LCBub2RlKTtcbiAgY29uc3QgcmVjb2lsVmFsdWUgPSBub2RlLnNldCA9PSBudWxsID8gbmV3IFJlY29pbF9SZWNvaWxWYWx1ZSQxLlJlY29pbFZhbHVlUmVhZE9ubHkobm9kZS5rZXkpIDogbmV3IFJlY29pbF9SZWNvaWxWYWx1ZSQxLlJlY29pbFN0YXRlKG5vZGUua2V5KTtcbiAgcmVjb2lsVmFsdWVzLnNldChub2RlLmtleSwgcmVjb2lsVmFsdWUpO1xuICByZXR1cm4gcmVjb2lsVmFsdWU7XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXJlZGVjbGFyZSAqL1xuXG5cbmNsYXNzIE5vZGVNaXNzaW5nRXJyb3IgZXh0ZW5kcyBFcnJvciB7fSAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG5cbmZ1bmN0aW9uIGdldE5vZGUoa2V5KSB7XG4gIGNvbnN0IG5vZGUgPSBub2Rlcy5nZXQoa2V5KTtcblxuICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IE5vZGVNaXNzaW5nRXJyb3IoYE1pc3NpbmcgZGVmaW5pdGlvbiBmb3IgUmVjb2lsVmFsdWU6IFwiJHtrZXl9XCJcImApO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59IC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG5cblxuZnVuY3Rpb24gZ2V0Tm9kZU1heWJlKGtleSkge1xuICByZXR1cm4gbm9kZXMuZ2V0KGtleSk7XG59XG5cbmNvbnN0IGNvbmZpZ0RlbGV0aW9uSGFuZGxlcnMgPSBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIGRlbGV0ZU5vZGVDb25maWdJZlBvc3NpYmxlKGtleSkge1xuICB2YXIgX25vZGUkc2hvdWxkRGVsZXRlQ29uO1xuXG4gIGlmICghUmVjb2lsX2dreF8xKCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgbm9kZSA9IG5vZGVzLmdldChrZXkpO1xuXG4gIGlmIChub2RlID09PSBudWxsIHx8IG5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfbm9kZSRzaG91bGREZWxldGVDb24gPSBub2RlLnNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZSkgPT09IG51bGwgfHwgX25vZGUkc2hvdWxkRGVsZXRlQ29uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbm9kZSRzaG91bGREZWxldGVDb24uY2FsbChub2RlKSkge1xuICAgIHZhciBfZ2V0Q29uZmlnRGVsZXRpb25IYW47XG5cbiAgICBub2Rlcy5kZWxldGUoa2V5KTtcbiAgICAoX2dldENvbmZpZ0RlbGV0aW9uSGFuID0gZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyKGtleSkpID09PSBudWxsIHx8IF9nZXRDb25maWdEZWxldGlvbkhhbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2dldENvbmZpZ0RlbGV0aW9uSGFuKCk7XG4gICAgY29uZmlnRGVsZXRpb25IYW5kbGVycy5kZWxldGUoa2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRDb25maWdEZWxldGlvbkhhbmRsZXIoa2V5LCBmbikge1xuICBpZiAoIVJlY29pbF9na3hfMSgncmVjb2lsX21lbW9yeV9tYW5hZ2FtZW50XzIwMjAnKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChmbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29uZmlnRGVsZXRpb25IYW5kbGVycy5kZWxldGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWdEZWxldGlvbkhhbmRsZXJzLnNldChrZXksIGZuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDb25maWdEZWxldGlvbkhhbmRsZXIoa2V5KSB7XG4gIHJldHVybiBjb25maWdEZWxldGlvbkhhbmRsZXJzLmdldChrZXkpO1xufVxuXG52YXIgUmVjb2lsX05vZGUgPSB7XG4gIG5vZGVzLFxuICByZWNvaWxWYWx1ZXMsXG4gIHJlZ2lzdGVyTm9kZSxcbiAgZ2V0Tm9kZSxcbiAgZ2V0Tm9kZU1heWJlLFxuICBkZWxldGVOb2RlQ29uZmlnSWZQb3NzaWJsZSxcbiAgc2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyLFxuICBnZXRDb25maWdEZWxldGlvbkhhbmRsZXIsXG4gIHJlY29pbFZhbHVlc0ZvcktleXMsXG4gIE5vZGVNaXNzaW5nRXJyb3IsXG4gIERlZmF1bHRWYWx1ZSxcbiAgREVGQVVMVF9WQUxVRSxcbiAgUmVjb2lsVmFsdWVOb3RSZWFkeVxufTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5cbmZ1bmN0aW9uIGVucXVldWVFeGVjdXRpb24ocywgZikge1xuICBmKCk7XG59XG5cbnZhciBSZWNvaWxfUXVldWUgPSB7XG4gIGVucXVldWVFeGVjdXRpb25cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG52YXIgaGFtdF8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iajtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xufTtcbi8qKlxuICAgIEBmaWxlT3ZlcnZpZXcgSGFzaCBBcnJheSBNYXBwZWQgVHJpZS5cblxuICAgIENvZGUgYmFzZWQgb246IGh0dHBzOi8vZ2l0aHViLmNvbS9leGNsaXB5L3BkYXRhXG4qL1xuXG5cbnZhciBoYW10ID0ge307IC8vIGV4cG9ydFxuXG4vKiBDb25maWd1cmF0aW9uXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgU0laRSA9IDU7XG52YXIgQlVDS0VUX1NJWkUgPSBNYXRoLnBvdygyLCBTSVpFKTtcbnZhciBNQVNLID0gQlVDS0VUX1NJWkUgLSAxO1xudmFyIE1BWF9JTkRFWF9OT0RFID0gQlVDS0VUX1NJWkUgLyAyO1xudmFyIE1JTl9BUlJBWV9OT0RFID0gQlVDS0VUX1NJWkUgLyA0O1xuLypcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBub3RoaW5nID0ge307XG5cbnZhciBjb25zdGFudCA9IGZ1bmN0aW9uIGNvbnN0YW50KHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn07XG4vKipcbiAgICBHZXQgMzIgYml0IGhhc2ggb2Ygc3RyaW5nLlxuXG4gICAgQmFzZWQgb246XG4gICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83NjE2NDYxL2dlbmVyYXRlLWEtaGFzaC1mcm9tLXN0cmluZy1pbi1qYXZhc2NyaXB0LWpxdWVyeVxuKi9cblxuXG52YXIgaGFzaCA9IGhhbXQuaGFzaCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2Ygc3RyID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzdHIpO1xuICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHJldHVybiBzdHI7XG4gIGlmICh0eXBlICE9PSAnc3RyaW5nJykgc3RyICs9ICcnO1xuICB2YXIgaGFzaCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHN0ci5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCA9IChoYXNoIDw8IDUpIC0gaGFzaCArIGMgfCAwO1xuICB9XG5cbiAgcmV0dXJuIGhhc2g7XG59O1xuLyogQml0IE9wc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gICAgSGFtbWluZyB3ZWlnaHQuXG5cbiAgICBUYWtlbiBmcm9tOiBodHRwOi8vanNwZXJmLmNvbS9oYW1taW5nLXdlaWdodFxuKi9cblxuXG52YXIgcG9wY291bnQgPSBmdW5jdGlvbiBwb3Bjb3VudCh4KSB7XG4gIHggLT0geCA+PiAxICYgMHg1NTU1NTU1NTtcbiAgeCA9ICh4ICYgMHgzMzMzMzMzMykgKyAoeCA+PiAyICYgMHgzMzMzMzMzMyk7XG4gIHggPSB4ICsgKHggPj4gNCkgJiAweDBmMGYwZjBmO1xuICB4ICs9IHggPj4gODtcbiAgeCArPSB4ID4+IDE2O1xuICByZXR1cm4geCAmIDB4N2Y7XG59O1xuXG52YXIgaGFzaEZyYWdtZW50ID0gZnVuY3Rpb24gaGFzaEZyYWdtZW50KHNoaWZ0LCBoKSB7XG4gIHJldHVybiBoID4+PiBzaGlmdCAmIE1BU0s7XG59O1xuXG52YXIgdG9CaXRtYXAgPSBmdW5jdGlvbiB0b0JpdG1hcCh4KSB7XG4gIHJldHVybiAxIDw8IHg7XG59O1xuXG52YXIgZnJvbUJpdG1hcCA9IGZ1bmN0aW9uIGZyb21CaXRtYXAoYml0bWFwLCBiaXQpIHtcbiAgcmV0dXJuIHBvcGNvdW50KGJpdG1hcCAmIGJpdCAtIDEpO1xufTtcbi8qIEFycmF5IE9wc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gICAgU2V0IGEgdmFsdWUgaW4gYW4gYXJyYXkuXG5cbiAgICBAcGFyYW0gbXV0YXRlIFNob3VsZCB0aGUgaW5wdXQgYXJyYXkgYmUgbXV0YXRlZD9cbiAgICBAcGFyYW0gYXQgSW5kZXggdG8gY2hhbmdlLlxuICAgIEBwYXJhbSB2IE5ldyB2YWx1ZVxuICAgIEBwYXJhbSBhcnIgQXJyYXkuXG4qL1xuXG5cbnZhciBhcnJheVVwZGF0ZSA9IGZ1bmN0aW9uIGFycmF5VXBkYXRlKG11dGF0ZSwgYXQsIHYsIGFycikge1xuICB2YXIgb3V0ID0gYXJyO1xuXG4gIGlmICghbXV0YXRlKSB7XG4gICAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gICAgb3V0ID0gbmV3IEFycmF5KGxlbik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBvdXRbaV0gPSBhcnJbaV07XG4gICAgfVxuICB9XG5cbiAgb3V0W2F0XSA9IHY7XG4gIHJldHVybiBvdXQ7XG59O1xuLyoqXG4gICAgUmVtb3ZlIGEgdmFsdWUgZnJvbSBhbiBhcnJheS5cblxuICAgIEBwYXJhbSBtdXRhdGUgU2hvdWxkIHRoZSBpbnB1dCBhcnJheSBiZSBtdXRhdGVkP1xuICAgIEBwYXJhbSBhdCBJbmRleCB0byByZW1vdmUuXG4gICAgQHBhcmFtIGFyciBBcnJheS5cbiovXG5cblxudmFyIGFycmF5U3BsaWNlT3V0ID0gZnVuY3Rpb24gYXJyYXlTcGxpY2VPdXQobXV0YXRlLCBhdCwgYXJyKSB7XG4gIHZhciBuZXdMZW4gPSBhcnIubGVuZ3RoIC0gMTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgZyA9IDA7XG4gIHZhciBvdXQgPSBhcnI7XG5cbiAgaWYgKG11dGF0ZSkge1xuICAgIGkgPSBnID0gYXQ7XG4gIH0gZWxzZSB7XG4gICAgb3V0ID0gbmV3IEFycmF5KG5ld0xlbik7XG5cbiAgICB3aGlsZSAoaSA8IGF0KSB7XG4gICAgICBvdXRbZysrXSA9IGFycltpKytdO1xuICAgIH1cbiAgfVxuXG4gICsraTtcblxuICB3aGlsZSAoaSA8PSBuZXdMZW4pIHtcbiAgICBvdXRbZysrXSA9IGFycltpKytdO1xuICB9XG5cbiAgaWYgKG11dGF0ZSkge1xuICAgIG91dC5sZW5ndGggPSBuZXdMZW47XG4gIH1cblxuICByZXR1cm4gb3V0O1xufTtcbi8qKlxuICAgIEluc2VydCBhIHZhbHVlIGludG8gYW4gYXJyYXkuXG5cbiAgICBAcGFyYW0gbXV0YXRlIFNob3VsZCB0aGUgaW5wdXQgYXJyYXkgYmUgbXV0YXRlZD9cbiAgICBAcGFyYW0gYXQgSW5kZXggdG8gaW5zZXJ0IGF0LlxuICAgIEBwYXJhbSB2IFZhbHVlIHRvIGluc2VydCxcbiAgICBAcGFyYW0gYXJyIEFycmF5LlxuKi9cblxuXG52YXIgYXJyYXlTcGxpY2VJbiA9IGZ1bmN0aW9uIGFycmF5U3BsaWNlSW4obXV0YXRlLCBhdCwgdiwgYXJyKSB7XG4gIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGlmIChtdXRhdGUpIHtcbiAgICB2YXIgX2kgPSBsZW47XG5cbiAgICB3aGlsZSAoX2kgPj0gYXQpIHtcbiAgICAgIGFycltfaS0tXSA9IGFycltfaV07XG4gICAgfVxuXG4gICAgYXJyW2F0XSA9IHY7XG4gICAgcmV0dXJuIGFycjtcbiAgfVxuXG4gIHZhciBpID0gMCxcbiAgICAgIGcgPSAwO1xuICB2YXIgb3V0ID0gbmV3IEFycmF5KGxlbiArIDEpO1xuXG4gIHdoaWxlIChpIDwgYXQpIHtcbiAgICBvdXRbZysrXSA9IGFycltpKytdO1xuICB9XG5cbiAgb3V0W2F0XSA9IHY7XG5cbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICBvdXRbKytnXSA9IGFycltpKytdO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn07XG4vKiBOb2RlIFN0cnVjdHVyZXNcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblxudmFyIExFQUYgPSAxO1xudmFyIENPTExJU0lPTiA9IDI7XG52YXIgSU5ERVggPSAzO1xudmFyIEFSUkFZID0gNDtcbi8qKlxuICAgIEVtcHR5IG5vZGUuXG4qL1xuXG52YXIgZW1wdHkgPSB7XG4gIF9faGFtdF9pc0VtcHR5OiB0cnVlXG59O1xuXG52YXIgaXNFbXB0eU5vZGUgPSBmdW5jdGlvbiBpc0VtcHR5Tm9kZSh4KSB7XG4gIHJldHVybiB4ID09PSBlbXB0eSB8fCB4ICYmIHguX19oYW10X2lzRW1wdHk7XG59O1xuLyoqXG4gICAgTGVhZiBob2xkaW5nIGEgdmFsdWUuXG5cbiAgICBAbWVtYmVyIGVkaXQgRWRpdCBvZiB0aGUgbm9kZS5cbiAgICBAbWVtYmVyIGhhc2ggSGFzaCBvZiBrZXkuXG4gICAgQG1lbWJlciBrZXkgS2V5LlxuICAgIEBtZW1iZXIgdmFsdWUgVmFsdWUgc3RvcmVkLlxuKi9cblxuXG52YXIgTGVhZiA9IGZ1bmN0aW9uIExlYWYoZWRpdCwgaGFzaCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IExFQUYsXG4gICAgZWRpdDogZWRpdCxcbiAgICBoYXNoOiBoYXNoLFxuICAgIGtleToga2V5LFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBfbW9kaWZ5OiBMZWFmX19tb2RpZnlcbiAgfTtcbn07XG4vKipcbiAgICBMZWFmIGhvbGRpbmcgbXVsdGlwbGUgdmFsdWVzIHdpdGggdGhlIHNhbWUgaGFzaCBidXQgZGlmZmVyZW50IGtleXMuXG5cbiAgICBAbWVtYmVyIGVkaXQgRWRpdCBvZiB0aGUgbm9kZS5cbiAgICBAbWVtYmVyIGhhc2ggSGFzaCBvZiBrZXkuXG4gICAgQG1lbWJlciBjaGlsZHJlbiBBcnJheSBvZiBjb2xsaXNpb24gY2hpbGRyZW4gbm9kZS5cbiovXG5cblxudmFyIENvbGxpc2lvbiA9IGZ1bmN0aW9uIENvbGxpc2lvbihlZGl0LCBoYXNoLCBjaGlsZHJlbikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IENPTExJU0lPTixcbiAgICBlZGl0OiBlZGl0LFxuICAgIGhhc2g6IGhhc2gsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIF9tb2RpZnk6IENvbGxpc2lvbl9fbW9kaWZ5XG4gIH07XG59O1xuLyoqXG4gICAgSW50ZXJuYWwgbm9kZSB3aXRoIGEgc3BhcnNlIHNldCBvZiBjaGlsZHJlbi5cblxuICAgIFVzZXMgYSBiaXRtYXAgYW5kIGFycmF5IHRvIHBhY2sgY2hpbGRyZW4uXG5cbiAgQG1lbWJlciBlZGl0IEVkaXQgb2YgdGhlIG5vZGUuXG4gICAgQG1lbWJlciBtYXNrIEJpdG1hcCB0aGF0IGVuY29kZSB0aGUgcG9zaXRpb25zIG9mIGNoaWxkcmVuIGluIHRoZSBhcnJheS5cbiAgICBAbWVtYmVyIGNoaWxkcmVuIEFycmF5IG9mIGNoaWxkIG5vZGVzLlxuKi9cblxuXG52YXIgSW5kZXhlZE5vZGUgPSBmdW5jdGlvbiBJbmRleGVkTm9kZShlZGl0LCBtYXNrLCBjaGlsZHJlbikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IElOREVYLFxuICAgIGVkaXQ6IGVkaXQsXG4gICAgbWFzazogbWFzayxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgX21vZGlmeTogSW5kZXhlZE5vZGVfX21vZGlmeVxuICB9O1xufTtcbi8qKlxuICAgIEludGVybmFsIG5vZGUgd2l0aCBtYW55IGNoaWxkcmVuLlxuXG4gICAgQG1lbWJlciBlZGl0IEVkaXQgb2YgdGhlIG5vZGUuXG4gICAgQG1lbWJlciBzaXplIE51bWJlciBvZiBjaGlsZHJlbi5cbiAgICBAbWVtYmVyIGNoaWxkcmVuIEFycmF5IG9mIGNoaWxkIG5vZGVzLlxuKi9cblxuXG52YXIgQXJyYXlOb2RlID0gZnVuY3Rpb24gQXJyYXlOb2RlKGVkaXQsIHNpemUsIGNoaWxkcmVuKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogQVJSQVksXG4gICAgZWRpdDogZWRpdCxcbiAgICBzaXplOiBzaXplLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBfbW9kaWZ5OiBBcnJheU5vZGVfX21vZGlmeVxuICB9O1xufTtcbi8qKlxuICAgIElzIGBub2RlYCBhIGxlYWYgbm9kZT9cbiovXG5cblxudmFyIGlzTGVhZiA9IGZ1bmN0aW9uIGlzTGVhZihub2RlKSB7XG4gIHJldHVybiBub2RlID09PSBlbXB0eSB8fCBub2RlLnR5cGUgPT09IExFQUYgfHwgbm9kZS50eXBlID09PSBDT0xMSVNJT047XG59O1xuLyogSW50ZXJuYWwgbm9kZSBvcGVyYXRpb25zLlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gICAgRXhwYW5kIGFuIGluZGV4ZWQgbm9kZSBpbnRvIGFuIGFycmF5IG5vZGUuXG5cbiAgQHBhcmFtIGVkaXQgQ3VycmVudCBlZGl0LlxuICAgIEBwYXJhbSBmcmFnIEluZGV4IG9mIGFkZGVkIGNoaWxkLlxuICAgIEBwYXJhbSBjaGlsZCBBZGRlZCBjaGlsZC5cbiAgICBAcGFyYW0gbWFzayBJbmRleCBub2RlIG1hc2sgYmVmb3JlIGNoaWxkIGFkZGVkLlxuICAgIEBwYXJhbSBzdWJOb2RlcyBJbmRleCBub2RlIGNoaWxkcmVuIGJlZm9yZSBjaGlsZCBhZGRlZC5cbiovXG5cblxudmFyIGV4cGFuZCA9IGZ1bmN0aW9uIGV4cGFuZChlZGl0LCBmcmFnLCBjaGlsZCwgYml0bWFwLCBzdWJOb2Rlcykge1xuICB2YXIgYXJyID0gW107XG4gIHZhciBiaXQgPSBiaXRtYXA7XG4gIHZhciBjb3VudCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGJpdDsgKytpKSB7XG4gICAgaWYgKGJpdCAmIDEpIGFycltpXSA9IHN1Yk5vZGVzW2NvdW50KytdO1xuICAgIGJpdCA+Pj49IDE7XG4gIH1cblxuICBhcnJbZnJhZ10gPSBjaGlsZDtcbiAgcmV0dXJuIEFycmF5Tm9kZShlZGl0LCBjb3VudCArIDEsIGFycik7XG59O1xuLyoqXG4gICAgQ29sbGFwc2UgYW4gYXJyYXkgbm9kZSBpbnRvIGEgaW5kZXhlZCBub2RlLlxuXG4gIEBwYXJhbSBlZGl0IEN1cnJlbnQgZWRpdC5cbiAgICBAcGFyYW0gY291bnQgTnVtYmVyIG9mIGVsZW1lbnRzIGluIG5ldyBhcnJheS5cbiAgICBAcGFyYW0gcmVtb3ZlZCBJbmRleCBvZiByZW1vdmVkIGVsZW1lbnQuXG4gICAgQHBhcmFtIGVsZW1lbnRzIEFycmF5IG5vZGUgY2hpbGRyZW4gYmVmb3JlIHJlbW92ZS5cbiovXG5cblxudmFyIHBhY2sgPSBmdW5jdGlvbiBwYWNrKGVkaXQsIGNvdW50LCByZW1vdmVkLCBlbGVtZW50cykge1xuICB2YXIgY2hpbGRyZW4gPSBuZXcgQXJyYXkoY291bnQgLSAxKTtcbiAgdmFyIGcgPSAwO1xuICB2YXIgYml0bWFwID0gMDtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoaSAhPT0gcmVtb3ZlZCkge1xuICAgICAgdmFyIGVsZW0gPSBlbGVtZW50c1tpXTtcblxuICAgICAgaWYgKGVsZW0gJiYgIWlzRW1wdHlOb2RlKGVsZW0pKSB7XG4gICAgICAgIGNoaWxkcmVuW2crK10gPSBlbGVtO1xuICAgICAgICBiaXRtYXAgfD0gMSA8PCBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBJbmRleGVkTm9kZShlZGl0LCBiaXRtYXAsIGNoaWxkcmVuKTtcbn07XG4vKipcbiAgICBNZXJnZSB0d28gbGVhZiBub2Rlcy5cblxuICAgIEBwYXJhbSBzaGlmdCBDdXJyZW50IHNoaWZ0LlxuICAgIEBwYXJhbSBoMSBOb2RlIDEgaGFzaC5cbiAgICBAcGFyYW0gbjEgTm9kZSAxLlxuICAgIEBwYXJhbSBoMiBOb2RlIDIgaGFzaC5cbiAgICBAcGFyYW0gbjIgTm9kZSAyLlxuKi9cblxuXG52YXIgbWVyZ2VMZWF2ZXMgPSBmdW5jdGlvbiBtZXJnZUxlYXZlcyhlZGl0LCBzaGlmdCwgaDEsIG4xLCBoMiwgbjIpIHtcbiAgaWYgKGgxID09PSBoMikgcmV0dXJuIENvbGxpc2lvbihlZGl0LCBoMSwgW24yLCBuMV0pO1xuICB2YXIgc3ViSDEgPSBoYXNoRnJhZ21lbnQoc2hpZnQsIGgxKTtcbiAgdmFyIHN1YkgyID0gaGFzaEZyYWdtZW50KHNoaWZ0LCBoMik7XG4gIHJldHVybiBJbmRleGVkTm9kZShlZGl0LCB0b0JpdG1hcChzdWJIMSkgfCB0b0JpdG1hcChzdWJIMiksIHN1YkgxID09PSBzdWJIMiA/IFttZXJnZUxlYXZlcyhlZGl0LCBzaGlmdCArIFNJWkUsIGgxLCBuMSwgaDIsIG4yKV0gOiBzdWJIMSA8IHN1YkgyID8gW24xLCBuMl0gOiBbbjIsIG4xXSk7XG59O1xuLyoqXG4gICAgVXBkYXRlIGFuIGVudHJ5IGluIGEgY29sbGlzaW9uIGxpc3QuXG5cbiAgICBAcGFyYW0gbXV0YXRlIFNob3VsZCBtdXRhdGlvbiBiZSB1c2VkP1xuICAgIEBwYXJhbSBlZGl0IEN1cnJlbnQgZWRpdC5cbiAgICBAcGFyYW0ga2V5RXEgS2V5IGNvbXBhcmUgZnVuY3Rpb24uXG4gICAgQHBhcmFtIGhhc2ggSGFzaCBvZiBjb2xsaXNpb24uXG4gICAgQHBhcmFtIGxpc3QgQ29sbGlzaW9uIGxpc3QuXG4gICAgQHBhcmFtIGYgVXBkYXRlIGZ1bmN0aW9uLlxuICAgIEBwYXJhbSBrIEtleSB0byB1cGRhdGUuXG4gICAgQHBhcmFtIHNpemUgU2l6ZSByZWYuXG4qL1xuXG5cbnZhciB1cGRhdGVDb2xsaXNpb25MaXN0ID0gZnVuY3Rpb24gdXBkYXRlQ29sbGlzaW9uTGlzdChtdXRhdGUsIGVkaXQsIGtleUVxLCBoLCBsaXN0LCBmLCBrLCBzaXplKSB7XG4gIHZhciBsZW4gPSBsaXN0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIGNoaWxkID0gbGlzdFtpXTtcblxuICAgIGlmIChrZXlFcShrLCBjaGlsZC5rZXkpKSB7XG4gICAgICB2YXIgdmFsdWUgPSBjaGlsZC52YWx1ZTtcblxuICAgICAgdmFyIF9uZXdWYWx1ZSA9IGYodmFsdWUpO1xuXG4gICAgICBpZiAoX25ld1ZhbHVlID09PSB2YWx1ZSkgcmV0dXJuIGxpc3Q7XG5cbiAgICAgIGlmIChfbmV3VmFsdWUgPT09IG5vdGhpbmcpIHtcbiAgICAgICAgLS1zaXplLnZhbHVlO1xuICAgICAgICByZXR1cm4gYXJyYXlTcGxpY2VPdXQobXV0YXRlLCBpLCBsaXN0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFycmF5VXBkYXRlKG11dGF0ZSwgaSwgTGVhZihlZGl0LCBoLCBrLCBfbmV3VmFsdWUpLCBsaXN0KTtcbiAgICB9XG4gIH1cblxuICB2YXIgbmV3VmFsdWUgPSBmKCk7XG4gIGlmIChuZXdWYWx1ZSA9PT0gbm90aGluZykgcmV0dXJuIGxpc3Q7XG4gICsrc2l6ZS52YWx1ZTtcbiAgcmV0dXJuIGFycmF5VXBkYXRlKG11dGF0ZSwgbGVuLCBMZWFmKGVkaXQsIGgsIGssIG5ld1ZhbHVlKSwgbGlzdCk7XG59O1xuXG52YXIgY2FuRWRpdE5vZGUgPSBmdW5jdGlvbiBjYW5FZGl0Tm9kZShlZGl0LCBub2RlKSB7XG4gIHJldHVybiBlZGl0ID09PSBub2RlLmVkaXQ7XG59O1xuLyogRWRpdGluZ1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuXG52YXIgTGVhZl9fbW9kaWZ5ID0gZnVuY3Rpb24gTGVhZl9fbW9kaWZ5KGVkaXQsIGtleUVxLCBzaGlmdCwgZiwgaCwgaywgc2l6ZSkge1xuICBpZiAoa2V5RXEoaywgdGhpcy5rZXkpKSB7XG4gICAgdmFyIF92ID0gZih0aGlzLnZhbHVlKTtcblxuICAgIGlmIChfdiA9PT0gdGhpcy52YWx1ZSkgcmV0dXJuIHRoaXM7ZWxzZSBpZiAoX3YgPT09IG5vdGhpbmcpIHtcbiAgICAgIC0tc2l6ZS52YWx1ZTtcbiAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9XG5cbiAgICBpZiAoY2FuRWRpdE5vZGUoZWRpdCwgdGhpcykpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBfdjtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiBMZWFmKGVkaXQsIGgsIGssIF92KTtcbiAgfVxuXG4gIHZhciB2ID0gZigpO1xuICBpZiAodiA9PT0gbm90aGluZykgcmV0dXJuIHRoaXM7XG4gICsrc2l6ZS52YWx1ZTtcbiAgcmV0dXJuIG1lcmdlTGVhdmVzKGVkaXQsIHNoaWZ0LCB0aGlzLmhhc2gsIHRoaXMsIGgsIExlYWYoZWRpdCwgaCwgaywgdikpO1xufTtcblxudmFyIENvbGxpc2lvbl9fbW9kaWZ5ID0gZnVuY3Rpb24gQ29sbGlzaW9uX19tb2RpZnkoZWRpdCwga2V5RXEsIHNoaWZ0LCBmLCBoLCBrLCBzaXplKSB7XG4gIGlmIChoID09PSB0aGlzLmhhc2gpIHtcbiAgICB2YXIgY2FuRWRpdCA9IGNhbkVkaXROb2RlKGVkaXQsIHRoaXMpO1xuICAgIHZhciBsaXN0ID0gdXBkYXRlQ29sbGlzaW9uTGlzdChjYW5FZGl0LCBlZGl0LCBrZXlFcSwgdGhpcy5oYXNoLCB0aGlzLmNoaWxkcmVuLCBmLCBrLCBzaXplKTtcbiAgICBpZiAobGlzdCA9PT0gdGhpcy5jaGlsZHJlbikgcmV0dXJuIHRoaXM7XG4gICAgcmV0dXJuIGxpc3QubGVuZ3RoID4gMSA/IENvbGxpc2lvbihlZGl0LCB0aGlzLmhhc2gsIGxpc3QpIDogbGlzdFswXTsgLy8gY29sbGFwc2Ugc2luZ2xlIGVsZW1lbnQgY29sbGlzaW9uIGxpc3RcbiAgfVxuXG4gIHZhciB2ID0gZigpO1xuICBpZiAodiA9PT0gbm90aGluZykgcmV0dXJuIHRoaXM7XG4gICsrc2l6ZS52YWx1ZTtcbiAgcmV0dXJuIG1lcmdlTGVhdmVzKGVkaXQsIHNoaWZ0LCB0aGlzLmhhc2gsIHRoaXMsIGgsIExlYWYoZWRpdCwgaCwgaywgdikpO1xufTtcblxudmFyIEluZGV4ZWROb2RlX19tb2RpZnkgPSBmdW5jdGlvbiBJbmRleGVkTm9kZV9fbW9kaWZ5KGVkaXQsIGtleUVxLCBzaGlmdCwgZiwgaCwgaywgc2l6ZSkge1xuICB2YXIgbWFzayA9IHRoaXMubWFzaztcbiAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgdmFyIGZyYWcgPSBoYXNoRnJhZ21lbnQoc2hpZnQsIGgpO1xuICB2YXIgYml0ID0gdG9CaXRtYXAoZnJhZyk7XG4gIHZhciBpbmR4ID0gZnJvbUJpdG1hcChtYXNrLCBiaXQpO1xuICB2YXIgZXhpc3RzID0gbWFzayAmIGJpdDtcbiAgdmFyIGN1cnJlbnQgPSBleGlzdHMgPyBjaGlsZHJlbltpbmR4XSA6IGVtcHR5O1xuXG4gIHZhciBjaGlsZCA9IGN1cnJlbnQuX21vZGlmeShlZGl0LCBrZXlFcSwgc2hpZnQgKyBTSVpFLCBmLCBoLCBrLCBzaXplKTtcblxuICBpZiAoY3VycmVudCA9PT0gY2hpbGQpIHJldHVybiB0aGlzO1xuICB2YXIgY2FuRWRpdCA9IGNhbkVkaXROb2RlKGVkaXQsIHRoaXMpO1xuICB2YXIgYml0bWFwID0gbWFzaztcbiAgdmFyIG5ld0NoaWxkcmVuID0gdm9pZCAwO1xuXG4gIGlmIChleGlzdHMgJiYgaXNFbXB0eU5vZGUoY2hpbGQpKSB7XG4gICAgLy8gcmVtb3ZlXG4gICAgYml0bWFwICY9IH5iaXQ7XG4gICAgaWYgKCFiaXRtYXApIHJldHVybiBlbXB0eTtcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoIDw9IDIgJiYgaXNMZWFmKGNoaWxkcmVuW2luZHggXiAxXSkpIHJldHVybiBjaGlsZHJlbltpbmR4IF4gMV07IC8vIGNvbGxhcHNlXG5cbiAgICBuZXdDaGlsZHJlbiA9IGFycmF5U3BsaWNlT3V0KGNhbkVkaXQsIGluZHgsIGNoaWxkcmVuKTtcbiAgfSBlbHNlIGlmICghZXhpc3RzICYmICFpc0VtcHR5Tm9kZShjaGlsZCkpIHtcbiAgICAvLyBhZGRcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID49IE1BWF9JTkRFWF9OT0RFKSByZXR1cm4gZXhwYW5kKGVkaXQsIGZyYWcsIGNoaWxkLCBtYXNrLCBjaGlsZHJlbik7XG4gICAgYml0bWFwIHw9IGJpdDtcbiAgICBuZXdDaGlsZHJlbiA9IGFycmF5U3BsaWNlSW4oY2FuRWRpdCwgaW5keCwgY2hpbGQsIGNoaWxkcmVuKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtb2RpZnlcbiAgICBuZXdDaGlsZHJlbiA9IGFycmF5VXBkYXRlKGNhbkVkaXQsIGluZHgsIGNoaWxkLCBjaGlsZHJlbik7XG4gIH1cblxuICBpZiAoY2FuRWRpdCkge1xuICAgIHRoaXMubWFzayA9IGJpdG1hcDtcbiAgICB0aGlzLmNoaWxkcmVuID0gbmV3Q2hpbGRyZW47XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4gSW5kZXhlZE5vZGUoZWRpdCwgYml0bWFwLCBuZXdDaGlsZHJlbik7XG59O1xuXG52YXIgQXJyYXlOb2RlX19tb2RpZnkgPSBmdW5jdGlvbiBBcnJheU5vZGVfX21vZGlmeShlZGl0LCBrZXlFcSwgc2hpZnQsIGYsIGgsIGssIHNpemUpIHtcbiAgdmFyIGNvdW50ID0gdGhpcy5zaXplO1xuICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICB2YXIgZnJhZyA9IGhhc2hGcmFnbWVudChzaGlmdCwgaCk7XG4gIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ZyYWddO1xuXG4gIHZhciBuZXdDaGlsZCA9IChjaGlsZCB8fCBlbXB0eSkuX21vZGlmeShlZGl0LCBrZXlFcSwgc2hpZnQgKyBTSVpFLCBmLCBoLCBrLCBzaXplKTtcblxuICBpZiAoY2hpbGQgPT09IG5ld0NoaWxkKSByZXR1cm4gdGhpcztcbiAgdmFyIGNhbkVkaXQgPSBjYW5FZGl0Tm9kZShlZGl0LCB0aGlzKTtcbiAgdmFyIG5ld0NoaWxkcmVuID0gdm9pZCAwO1xuXG4gIGlmIChpc0VtcHR5Tm9kZShjaGlsZCkgJiYgIWlzRW1wdHlOb2RlKG5ld0NoaWxkKSkge1xuICAgIC8vIGFkZFxuICAgICsrY291bnQ7XG4gICAgbmV3Q2hpbGRyZW4gPSBhcnJheVVwZGF0ZShjYW5FZGl0LCBmcmFnLCBuZXdDaGlsZCwgY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKCFpc0VtcHR5Tm9kZShjaGlsZCkgJiYgaXNFbXB0eU5vZGUobmV3Q2hpbGQpKSB7XG4gICAgLy8gcmVtb3ZlXG4gICAgLS1jb3VudDtcbiAgICBpZiAoY291bnQgPD0gTUlOX0FSUkFZX05PREUpIHJldHVybiBwYWNrKGVkaXQsIGNvdW50LCBmcmFnLCBjaGlsZHJlbik7XG4gICAgbmV3Q2hpbGRyZW4gPSBhcnJheVVwZGF0ZShjYW5FZGl0LCBmcmFnLCBlbXB0eSwgY2hpbGRyZW4pO1xuICB9IGVsc2Uge1xuICAgIC8vIG1vZGlmeVxuICAgIG5ld0NoaWxkcmVuID0gYXJyYXlVcGRhdGUoY2FuRWRpdCwgZnJhZywgbmV3Q2hpbGQsIGNoaWxkcmVuKTtcbiAgfVxuXG4gIGlmIChjYW5FZGl0KSB7XG4gICAgdGhpcy5zaXplID0gY291bnQ7XG4gICAgdGhpcy5jaGlsZHJlbiA9IG5ld0NoaWxkcmVuO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIEFycmF5Tm9kZShlZGl0LCBjb3VudCwgbmV3Q2hpbGRyZW4pO1xufTtcblxuZW1wdHkuX21vZGlmeSA9IGZ1bmN0aW9uIChlZGl0LCBrZXlFcSwgc2hpZnQsIGYsIGgsIGssIHNpemUpIHtcbiAgdmFyIHYgPSBmKCk7XG4gIGlmICh2ID09PSBub3RoaW5nKSByZXR1cm4gZW1wdHk7XG4gICsrc2l6ZS52YWx1ZTtcbiAgcmV0dXJuIExlYWYoZWRpdCwgaCwgaywgdik7XG59O1xuLypcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblxuZnVuY3Rpb24gTWFwKGVkaXRhYmxlLCBlZGl0LCBjb25maWcsIHJvb3QsIHNpemUpIHtcbiAgdGhpcy5fZWRpdGFibGUgPSBlZGl0YWJsZTtcbiAgdGhpcy5fZWRpdCA9IGVkaXQ7XG4gIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgdGhpcy5fcm9vdCA9IHJvb3Q7XG4gIHRoaXMuX3NpemUgPSBzaXplO1xufVxuXG5NYXAucHJvdG90eXBlLnNldFRyZWUgPSBmdW5jdGlvbiAobmV3Um9vdCwgbmV3U2l6ZSkge1xuICBpZiAodGhpcy5fZWRpdGFibGUpIHtcbiAgICB0aGlzLl9yb290ID0gbmV3Um9vdDtcbiAgICB0aGlzLl9zaXplID0gbmV3U2l6ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiBuZXdSb290ID09PSB0aGlzLl9yb290ID8gdGhpcyA6IG5ldyBNYXAodGhpcy5fZWRpdGFibGUsIHRoaXMuX2VkaXQsIHRoaXMuX2NvbmZpZywgbmV3Um9vdCwgbmV3U2l6ZSk7XG59O1xuLyogUXVlcmllc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gICAgTG9va3VwIHRoZSB2YWx1ZSBmb3IgYGtleWAgaW4gYG1hcGAgdXNpbmcgYSBjdXN0b20gYGhhc2hgLlxuXG4gICAgUmV0dXJucyB0aGUgdmFsdWUgb3IgYGFsdGAgaWYgbm9uZS5cbiovXG5cblxudmFyIHRyeUdldEhhc2ggPSBoYW10LnRyeUdldEhhc2ggPSBmdW5jdGlvbiAoYWx0LCBoYXNoLCBrZXksIG1hcCkge1xuICB2YXIgbm9kZSA9IG1hcC5fcm9vdDtcbiAgdmFyIHNoaWZ0ID0gMDtcbiAgdmFyIGtleUVxID0gbWFwLl9jb25maWcua2V5RXE7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgICAgY2FzZSBMRUFGOlxuICAgICAgICB7XG4gICAgICAgICAgcmV0dXJuIGtleUVxKGtleSwgbm9kZS5rZXkpID8gbm9kZS52YWx1ZSA6IGFsdDtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIENPTExJU0lPTjpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChoYXNoID09PSBub2RlLmhhc2gpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgaWYgKGtleUVxKGtleSwgY2hpbGQua2V5KSkgcmV0dXJuIGNoaWxkLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBhbHQ7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBJTkRFWDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBmcmFnID0gaGFzaEZyYWdtZW50KHNoaWZ0LCBoYXNoKTtcbiAgICAgICAgICB2YXIgYml0ID0gdG9CaXRtYXAoZnJhZyk7XG5cbiAgICAgICAgICBpZiAobm9kZS5tYXNrICYgYml0KSB7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5jaGlsZHJlbltmcm9tQml0bWFwKG5vZGUubWFzaywgYml0KV07XG4gICAgICAgICAgICBzaGlmdCArPSBTSVpFO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGFsdDtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEFSUkFZOlxuICAgICAgICB7XG4gICAgICAgICAgbm9kZSA9IG5vZGUuY2hpbGRyZW5baGFzaEZyYWdtZW50KHNoaWZ0LCBoYXNoKV07XG5cbiAgICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgICAgc2hpZnQgKz0gU0laRTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBhbHQ7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGFsdDtcbiAgICB9XG4gIH1cbn07XG5cbk1hcC5wcm90b3R5cGUudHJ5R2V0SGFzaCA9IGZ1bmN0aW9uIChhbHQsIGhhc2gsIGtleSkge1xuICByZXR1cm4gdHJ5R2V0SGFzaChhbHQsIGhhc2gsIGtleSwgdGhpcyk7XG59O1xuLyoqXG4gICAgTG9va3VwIHRoZSB2YWx1ZSBmb3IgYGtleWAgaW4gYG1hcGAgdXNpbmcgaW50ZXJuYWwgaGFzaCBmdW5jdGlvbi5cblxuICAgIEBzZWUgYHRyeUdldEhhc2hgXG4qL1xuXG5cbnZhciB0cnlHZXQgPSBoYW10LnRyeUdldCA9IGZ1bmN0aW9uIChhbHQsIGtleSwgbWFwKSB7XG4gIHJldHVybiB0cnlHZXRIYXNoKGFsdCwgbWFwLl9jb25maWcuaGFzaChrZXkpLCBrZXksIG1hcCk7XG59O1xuXG5NYXAucHJvdG90eXBlLnRyeUdldCA9IGZ1bmN0aW9uIChhbHQsIGtleSkge1xuICByZXR1cm4gdHJ5R2V0KGFsdCwga2V5LCB0aGlzKTtcbn07XG4vKipcbiAgICBMb29rdXAgdGhlIHZhbHVlIGZvciBga2V5YCBpbiBgbWFwYCB1c2luZyBhIGN1c3RvbSBgaGFzaGAuXG5cbiAgICBSZXR1cm5zIHRoZSB2YWx1ZSBvciBgdW5kZWZpbmVkYCBpZiBub25lLlxuKi9cblxuXG52YXIgZ2V0SGFzaCA9IGhhbXQuZ2V0SGFzaCA9IGZ1bmN0aW9uIChoYXNoLCBrZXksIG1hcCkge1xuICByZXR1cm4gdHJ5R2V0SGFzaCh1bmRlZmluZWQsIGhhc2gsIGtleSwgbWFwKTtcbn07XG5cbk1hcC5wcm90b3R5cGUuZ2V0SGFzaCA9IGZ1bmN0aW9uIChoYXNoLCBrZXkpIHtcbiAgcmV0dXJuIGdldEhhc2goaGFzaCwga2V5LCB0aGlzKTtcbn07XG4vKipcbiAgICBMb29rdXAgdGhlIHZhbHVlIGZvciBga2V5YCBpbiBgbWFwYCB1c2luZyBpbnRlcm5hbCBoYXNoIGZ1bmN0aW9uLlxuXG4gICAgQHNlZSBgZ2V0YFxuKi9cblxuXG52YXIgZ2V0ID0gaGFtdC5nZXQgPSBmdW5jdGlvbiAoa2V5LCBtYXApIHtcbiAgcmV0dXJuIHRyeUdldEhhc2godW5kZWZpbmVkLCBtYXAuX2NvbmZpZy5oYXNoKGtleSksIGtleSwgbWFwKTtcbn07XG5cbk1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSwgYWx0KSB7XG4gIHJldHVybiB0cnlHZXQoYWx0LCBrZXksIHRoaXMpO1xufTtcbi8qKlxuICAgIERvZXMgYW4gZW50cnkgZXhpc3QgZm9yIGBrZXlgIGluIGBtYXBgPyBVc2VzIGN1c3RvbSBgaGFzaGAuXG4qL1xuXG5cbnZhciBoYXNIYXNoID0gaGFtdC5oYXMgPSBmdW5jdGlvbiAoaGFzaCwga2V5LCBtYXApIHtcbiAgcmV0dXJuIHRyeUdldEhhc2gobm90aGluZywgaGFzaCwga2V5LCBtYXApICE9PSBub3RoaW5nO1xufTtcblxuTWFwLnByb3RvdHlwZS5oYXNIYXNoID0gZnVuY3Rpb24gKGhhc2gsIGtleSkge1xuICByZXR1cm4gaGFzSGFzaChoYXNoLCBrZXksIHRoaXMpO1xufTtcbi8qKlxuICAgIERvZXMgYW4gZW50cnkgZXhpc3QgZm9yIGBrZXlgIGluIGBtYXBgPyBVc2VzIGludGVybmFsIGhhc2ggZnVuY3Rpb24uXG4qL1xuXG5cbnZhciBoYXMgPSBoYW10LmhhcyA9IGZ1bmN0aW9uIChrZXksIG1hcCkge1xuICByZXR1cm4gaGFzSGFzaChtYXAuX2NvbmZpZy5oYXNoKGtleSksIGtleSwgbWFwKTtcbn07XG5cbk1hcC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gaGFzKGtleSwgdGhpcyk7XG59O1xuXG52YXIgZGVmS2V5Q29tcGFyZSA9IGZ1bmN0aW9uIGRlZktleUNvbXBhcmUoeCwgeSkge1xuICByZXR1cm4geCA9PT0geTtcbn07XG4vKipcbiAgICBDcmVhdGUgYW4gZW1wdHkgbWFwLlxuXG4gICAgQHBhcmFtIGNvbmZpZyBDb25maWd1cmF0aW9uLlxuKi9cblxuXG5oYW10Lm1ha2UgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgTWFwKDAsIDAsIHtcbiAgICBrZXlFcTogY29uZmlnICYmIGNvbmZpZy5rZXlFcSB8fCBkZWZLZXlDb21wYXJlLFxuICAgIGhhc2g6IGNvbmZpZyAmJiBjb25maWcuaGFzaCB8fCBoYXNoXG4gIH0sIGVtcHR5LCAwKTtcbn07XG4vKipcbiAgICBFbXB0eSBtYXAuXG4qL1xuXG5cbmhhbXQuZW1wdHkgPSBoYW10Lm1ha2UoKTtcbi8qKlxuICAgIERvZXMgYG1hcGAgY29udGFpbiBhbnkgZWxlbWVudHM/XG4qL1xuXG52YXIgaXNFbXB0eSA9IGhhbXQuaXNFbXB0eSA9IGZ1bmN0aW9uIChtYXApIHtcbiAgcmV0dXJuIG1hcCAmJiAhIWlzRW1wdHlOb2RlKG1hcC5fcm9vdCk7XG59O1xuXG5NYXAucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0VtcHR5KHRoaXMpO1xufTtcbi8qIFVwZGF0ZXNcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKlxuICAgIEFsdGVyIHRoZSB2YWx1ZSBzdG9yZWQgZm9yIGBrZXlgIGluIGBtYXBgIHVzaW5nIGZ1bmN0aW9uIGBmYCB1c2luZ1xuICAgIGN1c3RvbSBoYXNoLlxuXG4gICAgYGZgIGlzIGludm9rZWQgd2l0aCB0aGUgY3VycmVudCB2YWx1ZSBmb3IgYGtgIGlmIGl0IGV4aXN0cyxcbiAgICBvciBubyBhcmd1bWVudHMgaWYgbm8gc3VjaCB2YWx1ZSBleGlzdHMuIGBtb2RpZnlgIHdpbGwgYWx3YXlzIGVpdGhlclxuICAgIHVwZGF0ZSBvciBpbnNlcnQgYSB2YWx1ZSBpbnRvIHRoZSBtYXAuXG5cbiAgICBSZXR1cm5zIGEgbWFwIHdpdGggdGhlIG1vZGlmaWVkIHZhbHVlLiBEb2VzIG5vdCBhbHRlciBgbWFwYC5cbiovXG5cblxudmFyIG1vZGlmeUhhc2ggPSBoYW10Lm1vZGlmeUhhc2ggPSBmdW5jdGlvbiAoZiwgaGFzaCwga2V5LCBtYXApIHtcbiAgdmFyIHNpemUgPSB7XG4gICAgdmFsdWU6IG1hcC5fc2l6ZVxuICB9O1xuXG4gIHZhciBuZXdSb290ID0gbWFwLl9yb290Ll9tb2RpZnkobWFwLl9lZGl0YWJsZSA/IG1hcC5fZWRpdCA6IE5hTiwgbWFwLl9jb25maWcua2V5RXEsIDAsIGYsIGhhc2gsIGtleSwgc2l6ZSk7XG5cbiAgcmV0dXJuIG1hcC5zZXRUcmVlKG5ld1Jvb3QsIHNpemUudmFsdWUpO1xufTtcblxuTWFwLnByb3RvdHlwZS5tb2RpZnlIYXNoID0gZnVuY3Rpb24gKGhhc2gsIGtleSwgZikge1xuICByZXR1cm4gbW9kaWZ5SGFzaChmLCBoYXNoLCBrZXksIHRoaXMpO1xufTtcbi8qKlxuICAgIEFsdGVyIHRoZSB2YWx1ZSBzdG9yZWQgZm9yIGBrZXlgIGluIGBtYXBgIHVzaW5nIGZ1bmN0aW9uIGBmYCB1c2luZ1xuICAgIGludGVybmFsIGhhc2ggZnVuY3Rpb24uXG5cbiAgICBAc2VlIGBtb2RpZnlIYXNoYFxuKi9cblxuXG52YXIgbW9kaWZ5ID0gaGFtdC5tb2RpZnkgPSBmdW5jdGlvbiAoZiwga2V5LCBtYXApIHtcbiAgcmV0dXJuIG1vZGlmeUhhc2goZiwgbWFwLl9jb25maWcuaGFzaChrZXkpLCBrZXksIG1hcCk7XG59O1xuXG5NYXAucHJvdG90eXBlLm1vZGlmeSA9IGZ1bmN0aW9uIChrZXksIGYpIHtcbiAgcmV0dXJuIG1vZGlmeShmLCBrZXksIHRoaXMpO1xufTtcbi8qKlxuICAgIFN0b3JlIGB2YWx1ZWAgZm9yIGBrZXlgIGluIGBtYXBgIHVzaW5nIGN1c3RvbSBgaGFzaGAuXG5cbiAgICBSZXR1cm5zIGEgbWFwIHdpdGggdGhlIG1vZGlmaWVkIHZhbHVlLiBEb2VzIG5vdCBhbHRlciBgbWFwYC5cbiovXG5cblxudmFyIHNldEhhc2ggPSBoYW10LnNldEhhc2ggPSBmdW5jdGlvbiAoaGFzaCwga2V5LCB2YWx1ZSwgbWFwKSB7XG4gIHJldHVybiBtb2RpZnlIYXNoKGNvbnN0YW50KHZhbHVlKSwgaGFzaCwga2V5LCBtYXApO1xufTtcblxuTWFwLnByb3RvdHlwZS5zZXRIYXNoID0gZnVuY3Rpb24gKGhhc2gsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHNldEhhc2goaGFzaCwga2V5LCB2YWx1ZSwgdGhpcyk7XG59O1xuLyoqXG4gICAgU3RvcmUgYHZhbHVlYCBmb3IgYGtleWAgaW4gYG1hcGAgdXNpbmcgaW50ZXJuYWwgaGFzaCBmdW5jdGlvbi5cblxuICAgIEBzZWUgYHNldEhhc2hgXG4qL1xuXG5cbnZhciBzZXQgPSBoYW10LnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBtYXApIHtcbiAgcmV0dXJuIHNldEhhc2gobWFwLl9jb25maWcuaGFzaChrZXkpLCBrZXksIHZhbHVlLCBtYXApO1xufTtcblxuTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc2V0KGtleSwgdmFsdWUsIHRoaXMpO1xufTtcbi8qKlxuICAgIFJlbW92ZSB0aGUgZW50cnkgZm9yIGBrZXlgIGluIGBtYXBgLlxuXG4gICAgUmV0dXJucyBhIG1hcCB3aXRoIHRoZSB2YWx1ZSByZW1vdmVkLiBEb2VzIG5vdCBhbHRlciBgbWFwYC5cbiovXG5cblxudmFyIGRlbCA9IGNvbnN0YW50KG5vdGhpbmcpO1xuXG52YXIgcmVtb3ZlSGFzaCA9IGhhbXQucmVtb3ZlSGFzaCA9IGZ1bmN0aW9uIChoYXNoLCBrZXksIG1hcCkge1xuICByZXR1cm4gbW9kaWZ5SGFzaChkZWwsIGhhc2gsIGtleSwgbWFwKTtcbn07XG5cbk1hcC5wcm90b3R5cGUucmVtb3ZlSGFzaCA9IE1hcC5wcm90b3R5cGUuZGVsZXRlSGFzaCA9IGZ1bmN0aW9uIChoYXNoLCBrZXkpIHtcbiAgcmV0dXJuIHJlbW92ZUhhc2goaGFzaCwga2V5LCB0aGlzKTtcbn07XG4vKipcbiAgICBSZW1vdmUgdGhlIGVudHJ5IGZvciBga2V5YCBpbiBgbWFwYCB1c2luZyBpbnRlcm5hbCBoYXNoIGZ1bmN0aW9uLlxuXG4gICAgQHNlZSBgcmVtb3ZlSGFzaGBcbiovXG5cblxudmFyIHJlbW92ZSA9IGhhbXQucmVtb3ZlID0gZnVuY3Rpb24gKGtleSwgbWFwKSB7XG4gIHJldHVybiByZW1vdmVIYXNoKG1hcC5fY29uZmlnLmhhc2goa2V5KSwga2V5LCBtYXApO1xufTtcblxuTWFwLnByb3RvdHlwZS5yZW1vdmUgPSBNYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHJlbW92ZShrZXksIHRoaXMpO1xufTtcbi8qIE11dGF0aW9uXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcbiAgICBNYXJrIGBtYXBgIGFzIG11dGFibGUuXG4gKi9cblxuXG52YXIgYmVnaW5NdXRhdGlvbiA9IGhhbXQuYmVnaW5NdXRhdGlvbiA9IGZ1bmN0aW9uIChtYXApIHtcbiAgcmV0dXJuIG5ldyBNYXAobWFwLl9lZGl0YWJsZSArIDEsIG1hcC5fZWRpdCArIDEsIG1hcC5fY29uZmlnLCBtYXAuX3Jvb3QsIG1hcC5fc2l6ZSk7XG59O1xuXG5NYXAucHJvdG90eXBlLmJlZ2luTXV0YXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBiZWdpbk11dGF0aW9uKHRoaXMpO1xufTtcbi8qKlxuICAgIE1hcmsgYG1hcGAgYXMgaW1tdXRhYmxlLlxuICovXG5cblxudmFyIGVuZE11dGF0aW9uID0gaGFtdC5lbmRNdXRhdGlvbiA9IGZ1bmN0aW9uIChtYXApIHtcbiAgbWFwLl9lZGl0YWJsZSA9IG1hcC5fZWRpdGFibGUgJiYgbWFwLl9lZGl0YWJsZSAtIDE7XG4gIHJldHVybiBtYXA7XG59O1xuXG5NYXAucHJvdG90eXBlLmVuZE11dGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZW5kTXV0YXRpb24odGhpcyk7XG59O1xuLyoqXG4gICAgTXV0YXRlIGBtYXBgIHdpdGhpbiB0aGUgY29udGV4dCBvZiBgZmAuXG4gICAgQHBhcmFtIGZcbiAgICBAcGFyYW0gbWFwIEhBTVRcbiovXG5cblxudmFyIG11dGF0ZSA9IGhhbXQubXV0YXRlID0gZnVuY3Rpb24gKGYsIG1hcCkge1xuICB2YXIgdHJhbnNpZW50ID0gYmVnaW5NdXRhdGlvbihtYXApO1xuICBmKHRyYW5zaWVudCk7XG4gIHJldHVybiBlbmRNdXRhdGlvbih0cmFuc2llbnQpO1xufTtcblxuTWFwLnByb3RvdHlwZS5tdXRhdGUgPSBmdW5jdGlvbiAoZikge1xuICByZXR1cm4gbXV0YXRlKGYsIHRoaXMpO1xufTtcbi8qIFRyYXZlcnNhbFxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gICAgQXBwbHkgYSBjb250aW51YXRpb24uXG4qL1xuXG5cbnZhciBhcHBrID0gZnVuY3Rpb24gYXBwayhrKSB7XG4gIHJldHVybiBrICYmIGxhenlWaXNpdENoaWxkcmVuKGtbMF0sIGtbMV0sIGtbMl0sIGtbM10sIGtbNF0pO1xufTtcbi8qKlxuICAgIFJlY3Vyc2l2ZWx5IHZpc2l0IGFsbCB2YWx1ZXMgc3RvcmVkIGluIGFuIGFycmF5IG9mIG5vZGVzIGxhemlseS5cbiovXG5cblxudmFyIGxhenlWaXNpdENoaWxkcmVuID0gZnVuY3Rpb24gbGF6eVZpc2l0Q2hpbGRyZW4obGVuLCBjaGlsZHJlbiwgaSwgZiwgaykge1xuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2krK107XG4gICAgaWYgKGNoaWxkICYmICFpc0VtcHR5Tm9kZShjaGlsZCkpIHJldHVybiBsYXp5VmlzaXQoY2hpbGQsIGYsIFtsZW4sIGNoaWxkcmVuLCBpLCBmLCBrXSk7XG4gIH1cblxuICByZXR1cm4gYXBwayhrKTtcbn07XG4vKipcbiAgICBSZWN1cnNpdmVseSB2aXNpdCBhbGwgdmFsdWVzIHN0b3JlZCBpbiBgbm9kZWAgbGF6aWx5LlxuKi9cblxuXG52YXIgbGF6eVZpc2l0ID0gZnVuY3Rpb24gbGF6eVZpc2l0KG5vZGUsIGYsIGspIHtcbiAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICBjYXNlIExFQUY6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogZihub2RlKSxcbiAgICAgICAgcmVzdDoga1xuICAgICAgfTtcblxuICAgIGNhc2UgQ09MTElTSU9OOlxuICAgIGNhc2UgQVJSQVk6XG4gICAgY2FzZSBJTkRFWDpcbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICByZXR1cm4gbGF6eVZpc2l0Q2hpbGRyZW4oY2hpbGRyZW4ubGVuZ3RoLCBjaGlsZHJlbiwgMCwgZiwgayk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGFwcGsoayk7XG4gIH1cbn07XG5cbnZhciBET05FID0ge1xuICBkb25lOiB0cnVlXG59O1xuLyoqXG4gICAgSmF2YXNjcmlwdCBpdGVyYXRvciBvdmVyIGEgbWFwLlxuKi9cblxuZnVuY3Rpb24gTWFwSXRlcmF0b3Iodikge1xuICB0aGlzLnYgPSB2O1xufVxuXG5NYXBJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLnYpIHJldHVybiBET05FO1xuICB2YXIgdjAgPSB0aGlzLnY7XG4gIHRoaXMudiA9IGFwcGsodjAucmVzdCk7XG4gIHJldHVybiB2MDtcbn07XG5cbk1hcEl0ZXJhdG9yLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG4vKipcbiAgICBMYXppbHkgdmlzaXQgZWFjaCB2YWx1ZSBpbiBtYXAgd2l0aCBmdW5jdGlvbiBgZmAuXG4qL1xuXG5cbnZhciB2aXNpdCA9IGZ1bmN0aW9uIHZpc2l0KG1hcCwgZikge1xuICByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKGxhenlWaXNpdChtYXAuX3Jvb3QsIGYpKTtcbn07XG4vKipcbiAgICBHZXQgYSBKYXZhc2NzcmlwdCBpdGVyYXRvciBvZiBgbWFwYC5cblxuICAgIEl0ZXJhdGVzIG92ZXIgYFtrZXksIHZhbHVlXWAgYXJyYXlzLlxuKi9cblxuXG52YXIgYnVpbGRQYWlycyA9IGZ1bmN0aW9uIGJ1aWxkUGFpcnMoeCkge1xuICByZXR1cm4gW3gua2V5LCB4LnZhbHVlXTtcbn07XG5cbnZhciBlbnRyaWVzID0gaGFtdC5lbnRyaWVzID0gZnVuY3Rpb24gKG1hcCkge1xuICByZXR1cm4gdmlzaXQobWFwLCBidWlsZFBhaXJzKTtcbn07XG5cbk1hcC5wcm90b3R5cGUuZW50cmllcyA9IE1hcC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGVudHJpZXModGhpcyk7XG59O1xuLyoqXG4gICAgR2V0IGFycmF5IG9mIGFsbCBrZXlzIGluIGBtYXBgLlxuXG4gICAgT3JkZXIgaXMgbm90IGd1YXJhbnRlZWQuXG4qL1xuXG5cbnZhciBidWlsZEtleXMgPSBmdW5jdGlvbiBidWlsZEtleXMoeCkge1xuICByZXR1cm4geC5rZXk7XG59O1xuXG52YXIga2V5cyA9IGhhbXQua2V5cyA9IGZ1bmN0aW9uIChtYXApIHtcbiAgcmV0dXJuIHZpc2l0KG1hcCwgYnVpbGRLZXlzKTtcbn07XG5cbk1hcC5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGtleXModGhpcyk7XG59O1xuLyoqXG4gICAgR2V0IGFycmF5IG9mIGFsbCB2YWx1ZXMgaW4gYG1hcGAuXG5cbiAgICBPcmRlciBpcyBub3QgZ3VhcmFudGVlZCwgZHVwbGljYXRlcyBhcmUgcHJlc2VydmVkLlxuKi9cblxuXG52YXIgYnVpbGRWYWx1ZXMgPSBmdW5jdGlvbiBidWlsZFZhbHVlcyh4KSB7XG4gIHJldHVybiB4LnZhbHVlO1xufTtcblxudmFyIHZhbHVlcyA9IGhhbXQudmFsdWVzID0gTWFwLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAobWFwKSB7XG4gIHJldHVybiB2aXNpdChtYXAsIGJ1aWxkVmFsdWVzKTtcbn07XG5cbk1hcC5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdmFsdWVzKHRoaXMpO1xufTtcbi8qIEZvbGRcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbi8qKlxuICAgIFZpc2l0IGV2ZXJ5IGVudHJ5IGluIHRoZSBtYXAsIGFnZ3JlZ2F0aW5nIGRhdGEuXG5cbiAgICBPcmRlciBvZiBub2RlcyBpcyBub3QgZ3VhcmFudGVlZC5cblxuICAgIEBwYXJhbSBmIEZ1bmN0aW9uIG1hcHBpbmcgYWNjdW11bGF0ZWQgdmFsdWUsIHZhbHVlLCBhbmQga2V5IHRvIG5ldyB2YWx1ZS5cbiAgICBAcGFyYW0geiBTdGFydGluZyB2YWx1ZS5cbiAgICBAcGFyYW0gbSBIQU1UXG4qL1xuXG5cbnZhciBmb2xkID0gaGFtdC5mb2xkID0gZnVuY3Rpb24gKGYsIHosIG0pIHtcbiAgdmFyIHJvb3QgPSBtLl9yb290O1xuICBpZiAocm9vdC50eXBlID09PSBMRUFGKSByZXR1cm4gZih6LCByb290LnZhbHVlLCByb290LmtleSk7XG4gIHZhciB0b1Zpc2l0ID0gW3Jvb3QuY2hpbGRyZW5dO1xuICB2YXIgY2hpbGRyZW4gPSB2b2lkIDA7XG5cbiAgd2hpbGUgKGNoaWxkcmVuID0gdG9WaXNpdC5wb3AoKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47KSB7XG4gICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpKytdO1xuXG4gICAgICBpZiAoY2hpbGQgJiYgY2hpbGQudHlwZSkge1xuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gTEVBRikgeiA9IGYoeiwgY2hpbGQudmFsdWUsIGNoaWxkLmtleSk7ZWxzZSB0b1Zpc2l0LnB1c2goY2hpbGQuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB6O1xufTtcblxuTWFwLnByb3RvdHlwZS5mb2xkID0gZnVuY3Rpb24gKGYsIHopIHtcbiAgcmV0dXJuIGZvbGQoZiwgeiwgdGhpcyk7XG59O1xuLyoqXG4gICAgVmlzaXQgZXZlcnkgZW50cnkgaW4gdGhlIG1hcCwgYWdncmVnYXRpbmcgZGF0YS5cblxuICAgIE9yZGVyIG9mIG5vZGVzIGlzIG5vdCBndWFyYW50ZWVkLlxuXG4gICAgQHBhcmFtIGYgRnVuY3Rpb24gaW52b2tlZCB3aXRoIHZhbHVlIGFuZCBrZXlcbiAgICBAcGFyYW0gbWFwIEhBTVRcbiovXG5cblxudmFyIGZvckVhY2ggPSBoYW10LmZvckVhY2ggPSBmdW5jdGlvbiAoZiwgbWFwKSB7XG4gIHJldHVybiBmb2xkKGZ1bmN0aW9uIChfLCB2YWx1ZSwga2V5KSB7XG4gICAgcmV0dXJuIGYodmFsdWUsIGtleSwgbWFwKTtcbiAgfSwgbnVsbCwgbWFwKTtcbn07XG5cbk1hcC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChmKSB7XG4gIHJldHVybiBmb3JFYWNoKGYsIHRoaXMpO1xufTtcbi8qIEFnZ3JlZ2F0ZVxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXG4gICAgR2V0IHRoZSBudW1iZXIgb2YgZW50cmllcyBpbiBgbWFwYC5cbiovXG5cblxudmFyIGNvdW50ID0gaGFtdC5jb3VudCA9IGZ1bmN0aW9uIChtYXApIHtcbiAgcmV0dXJuIG1hcC5fc2l6ZTtcbn07XG5cbk1hcC5wcm90b3R5cGUuY291bnQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjb3VudCh0aGlzKTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXAucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgZ2V0OiBNYXAucHJvdG90eXBlLmNvdW50XG59KTtcbi8qIEV4cG9ydFxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuaWYgKCBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGhhbXQ7XG59IGVsc2Uge1xuICB1bmRlZmluZWQuaGFtdCA9IGhhbXQ7XG59XG59KTtcblxuY2xhc3MgQnVpbHRJbk1hcCB7XG4gIGNvbnN0cnVjdG9yKGV4aXN0aW5nKSB7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX21hcFwiLCB2b2lkIDApO1xuXG4gICAgdGhpcy5fbWFwID0gbmV3IE1hcChleGlzdGluZyA9PT0gbnVsbCB8fCBleGlzdGluZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXhpc3RpbmcuZW50cmllcygpKTtcbiAgfVxuXG4gIGtleXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5rZXlzKCk7XG4gIH1cblxuICBlbnRyaWVzKCkge1xuICAgIHJldHVybiB0aGlzLl9tYXAuZW50cmllcygpO1xuICB9XG5cbiAgZ2V0KGspIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLmdldChrKTtcbiAgfVxuXG4gIGhhcyhrKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5oYXMoayk7XG4gIH1cblxuICBzZXQoaywgdikge1xuICAgIHRoaXMuX21hcC5zZXQoaywgdik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGRlbGV0ZShrKSB7XG4gICAgdGhpcy5fbWFwLmRlbGV0ZShrKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIHBlcnNpc3RlbnRNYXAodGhpcyk7XG4gIH1cblxuICB0b01hcCgpIHtcbiAgICByZXR1cm4gbmV3IE1hcCh0aGlzLl9tYXApO1xuICB9XG5cbn1cblxuY2xhc3MgSGFzaEFycmF5TWFwcGVkVHJpZU1hcCB7XG4gIC8vIEJlY2F1c2UgaGFtdC5lbXB0eSBpcyBub3QgYSBmdW5jdGlvbiB0aGVyZSBpcyBubyB3YXkgdG8gaW50cm9kdWNlIHR5cGVcbiAgLy8gcGFyYW1ldGVycyBvbiBpdCwgc28gZW1wdHkgaXMgdHlwZWQgYXMgSEFNVFBsdXNNYXA8c3RyaW5nLCBtaXhlZD4uXG4gIC8vICRGbG93SXNzdWVcbiAgY29uc3RydWN0b3IoZXhpc3RpbmcpIHtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfaGFtdFwiLCBoYW10XzEuZW1wdHkuYmVnaW5NdXRhdGlvbigpKTtcblxuICAgIGlmIChleGlzdGluZyBpbnN0YW5jZW9mIEhhc2hBcnJheU1hcHBlZFRyaWVNYXApIHtcbiAgICAgIGNvbnN0IGggPSBleGlzdGluZy5faGFtdC5lbmRNdXRhdGlvbigpO1xuXG4gICAgICBleGlzdGluZy5faGFtdCA9IGguYmVnaW5NdXRhdGlvbigpO1xuICAgICAgdGhpcy5faGFtdCA9IGguYmVnaW5NdXRhdGlvbigpO1xuICAgIH0gZWxzZSBpZiAoZXhpc3RpbmcpIHtcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIGV4aXN0aW5nLmVudHJpZXMoKSkge1xuICAgICAgICB0aGlzLl9oYW10LnNldChrLCB2KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBrZXlzKCkge1xuICAgIHJldHVybiB0aGlzLl9oYW10LmtleXMoKTtcbiAgfVxuXG4gIGVudHJpZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hhbXQuZW50cmllcygpO1xuICB9XG5cbiAgZ2V0KGspIHtcbiAgICByZXR1cm4gdGhpcy5faGFtdC5nZXQoayk7XG4gIH1cblxuICBoYXMoaykge1xuICAgIHJldHVybiB0aGlzLl9oYW10LmhhcyhrKTtcbiAgfVxuXG4gIHNldChrLCB2KSB7XG4gICAgdGhpcy5faGFtdC5zZXQoaywgdik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGRlbGV0ZShrKSB7XG4gICAgdGhpcy5faGFtdC5kZWxldGUoayk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBwZXJzaXN0ZW50TWFwKHRoaXMpO1xuICB9XG5cbiAgdG9NYXAoKSB7XG4gICAgcmV0dXJuIG5ldyBNYXAodGhpcy5faGFtdCk7XG4gIH1cblxufVxuXG5mdW5jdGlvbiBwZXJzaXN0ZW50TWFwKGV4aXN0aW5nKSB7XG4gIGlmIChSZWNvaWxfZ2t4XzEoJ3JlY29pbF9oYW10XzIwMjAnKSkge1xuICAgIHJldHVybiBuZXcgSGFzaEFycmF5TWFwcGVkVHJpZU1hcChleGlzdGluZyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBCdWlsdEluTWFwKGV4aXN0aW5nKTtcbiAgfVxufVxuXG52YXIgUmVjb2lsX1BlcnNpc3RlbnRNYXAgPSB7XG4gIHBlcnNpc3RlbnRNYXBcbn07XG5cbnZhciBSZWNvaWxfUGVyc2lzdGVudE1hcF8xID0gUmVjb2lsX1BlcnNpc3RlbnRNYXAucGVyc2lzdGVudE1hcDtcblxudmFyIFJlY29pbF9QZXJzaXN0ZW50TWFwJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgcGVyc2lzdGVudE1hcDogUmVjb2lsX1BlcnNpc3RlbnRNYXBfMVxufSk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgc2V0IGNvbnRhaW5pbmcgYWxsIG9mIHRoZSB2YWx1ZXMgZnJvbSB0aGUgZmlyc3Qgc2V0IHRoYXQgYXJlIG5vdFxuICogcHJlc2VudCBpbiBhbnkgb2YgdGhlIHN1YnNlcXVlbnQgc2V0cy5cbiAqXG4gKiBOb3RlOiB0aGlzIGlzIHdyaXR0ZW4gcHJvY2VkdXJhbGx5IChpLmUuLCB3aXRob3V0IGZpbHRlclNldCkgZm9yIHBlcmZvcm1hbnRcbiAqIHVzZSBpbiB0aWdodCBsb29wcy5cbiAqL1xuXG5mdW5jdGlvbiBkaWZmZXJlbmNlU2V0cyhzZXQsIC4uLnNldHNXaXRoVmFsdWVzVG9SZW1vdmUpIHtcbiAgY29uc3QgcmV0ID0gbmV3IFNldCgpO1xuXG4gIEZJUlNUOiBmb3IgKGNvbnN0IHZhbHVlIG9mIHNldCkge1xuICAgIGZvciAoY29uc3Qgb3RoZXJTZXQgb2Ygc2V0c1dpdGhWYWx1ZXNUb1JlbW92ZSkge1xuICAgICAgaWYgKG90aGVyU2V0Lmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgY29udGludWUgRklSU1Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0LmFkZCh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG52YXIgUmVjb2lsX2RpZmZlcmVuY2VTZXRzID0gZGlmZmVyZW5jZVNldHM7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IE1hcCBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIHRoZSBvcmlnaW5hbCwgYnV0IHdpdGggdGhlXG4gKiB2YWx1ZXMgcmVwbGFjZWQgd2l0aCB0aGUgb3V0cHV0IG9mIHRoZSBnaXZlbiBjYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiBtYXBNYXAobWFwLCBjYWxsYmFjaykge1xuICBjb25zdCByZXN1bHQgPSBuZXcgTWFwKCk7XG4gIG1hcC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgcmVzdWx0LnNldChrZXksIGNhbGxiYWNrKHZhbHVlLCBrZXkpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBSZWNvaWxfbWFwTWFwID0gbWFwTWFwO1xuXG5mdW5jdGlvbiBncmFwaCgpIHtcbiAgcmV0dXJuIHtcbiAgICBub2RlRGVwczogbmV3IE1hcCgpLFxuICAgIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zOiBuZXcgTWFwKClcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xvbmVHcmFwaChncmFwaCkge1xuICByZXR1cm4ge1xuICAgIG5vZGVEZXBzOiBSZWNvaWxfbWFwTWFwKGdyYXBoLm5vZGVEZXBzLCBzID0+IG5ldyBTZXQocykpLFxuICAgIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zOiBSZWNvaWxfbWFwTWFwKGdyYXBoLm5vZGVUb05vZGVTdWJzY3JpcHRpb25zLCBzID0+IG5ldyBTZXQocykpXG4gIH07XG59IC8vIE5vdGUgdGhhdCB0aGlzIG92ZXJ3cml0ZXMgdGhlIGRlcHMgb2YgZXhpc3Rpbmcgbm9kZXMsIHJhdGhlciB0aGFuIHVuaW9uaW5nXG4vLyB0aGUgbmV3IGRlcHMgd2l0aCB0aGUgb2xkIGRlcHMuXG5cblxuZnVuY3Rpb24gbWVyZ2VEZXBlbmRlbmN5TWFwSW50b0dyYXBoKGRlcHMsIGdyYXBoLCAvLyBJZiBvbGRlckdyYXBoIGlzIGdpdmVuIHRoZW4gd2Ugd2lsbCBub3Qgb3ZlcndyaXRlIGNoYW5nZXMgbWFkZSB0byB0aGUgZ2l2ZW5cbi8vIGdyYXBoIGNvbXBhcmVkIHdpdGggb2xkZXJHcmFwaDpcbm9sZGVyR3JhcGgpIHtcbiAgY29uc3Qge1xuICAgIG5vZGVEZXBzLFxuICAgIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zXG4gIH0gPSBncmFwaDtcbiAgZGVwcy5mb3JFYWNoKCh1cHN0cmVhbXMsIGRvd25zdHJlYW0pID0+IHtcbiAgICBjb25zdCBleGlzdGluZ1Vwc3RyZWFtcyA9IG5vZGVEZXBzLmdldChkb3duc3RyZWFtKTtcblxuICAgIGlmIChleGlzdGluZ1Vwc3RyZWFtcyAmJiBvbGRlckdyYXBoICYmIGV4aXN0aW5nVXBzdHJlYW1zICE9PSBvbGRlckdyYXBoLm5vZGVEZXBzLmdldChkb3duc3RyZWFtKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gVXBkYXRlIG5vZGVEZXBzOlxuXG5cbiAgICBub2RlRGVwcy5zZXQoZG93bnN0cmVhbSwgbmV3IFNldCh1cHN0cmVhbXMpKTsgLy8gQWRkIG5ldyBkZXBzIHRvIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zOlxuXG4gICAgY29uc3QgYWRkZWRVcHN0cmVhbXMgPSBleGlzdGluZ1Vwc3RyZWFtcyA9PSBudWxsID8gdXBzdHJlYW1zIDogUmVjb2lsX2RpZmZlcmVuY2VTZXRzKHVwc3RyZWFtcywgZXhpc3RpbmdVcHN0cmVhbXMpO1xuICAgIGFkZGVkVXBzdHJlYW1zLmZvckVhY2godXBzdHJlYW0gPT4ge1xuICAgICAgaWYgKCFub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5oYXModXBzdHJlYW0pKSB7XG4gICAgICAgIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zLnNldCh1cHN0cmVhbSwgbmV3IFNldCgpKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZXhpc3RpbmcgPSBSZWNvaWxfbnVsbHRocm93cyhub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5nZXQodXBzdHJlYW0pKTtcbiAgICAgIGV4aXN0aW5nLmFkZChkb3duc3RyZWFtKTtcbiAgICB9KTsgLy8gUmVtb3ZlIHJlbW92ZWQgZGVwcyBmcm9tIG5vZGVUb05vZGVTdWJzY3JpcHRpb25zOlxuXG4gICAgaWYgKGV4aXN0aW5nVXBzdHJlYW1zKSB7XG4gICAgICBjb25zdCByZW1vdmVkVXBzdHJlYW1zID0gUmVjb2lsX2RpZmZlcmVuY2VTZXRzKGV4aXN0aW5nVXBzdHJlYW1zLCB1cHN0cmVhbXMpO1xuICAgICAgcmVtb3ZlZFVwc3RyZWFtcy5mb3JFYWNoKHVwc3RyZWFtID0+IHtcbiAgICAgICAgaWYgKCFub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5oYXModXBzdHJlYW0pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBSZWNvaWxfbnVsbHRocm93cyhub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5nZXQodXBzdHJlYW0pKTtcbiAgICAgICAgZXhpc3RpbmcuZGVsZXRlKGRvd25zdHJlYW0pO1xuXG4gICAgICAgIGlmIChleGlzdGluZy5zaXplID09PSAwKSB7XG4gICAgICAgICAgbm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuZGVsZXRlKHVwc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2F2ZURlcGVuZGVuY3lNYXBUb1N0b3JlKGRlcGVuZGVuY3lNYXAsIHN0b3JlLCB2ZXJzaW9uKSB7XG4gIHZhciBfc3RvcmVTdGF0ZSRuZXh0VHJlZSwgX3N0b3JlU3RhdGUkcHJldmlvdXNULCBfc3RvcmVTdGF0ZSRwcmV2aW91c1QyLCBfc3RvcmVTdGF0ZSRwcmV2aW91c1QzO1xuXG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gIGlmICghKHZlcnNpb24gPT09IHN0b3JlU3RhdGUuY3VycmVudFRyZWUudmVyc2lvbiB8fCB2ZXJzaW9uID09PSAoKF9zdG9yZVN0YXRlJG5leHRUcmVlID0gc3RvcmVTdGF0ZS5uZXh0VHJlZSkgPT09IG51bGwgfHwgX3N0b3JlU3RhdGUkbmV4dFRyZWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJG5leHRUcmVlLnZlcnNpb24pIHx8IHZlcnNpb24gPT09ICgoX3N0b3JlU3RhdGUkcHJldmlvdXNUID0gc3RvcmVTdGF0ZS5wcmV2aW91c1RyZWUpID09PSBudWxsIHx8IF9zdG9yZVN0YXRlJHByZXZpb3VzVCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlU3RhdGUkcHJldmlvdXNULnZlcnNpb24pKSkge1xuICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbignVHJpZWQgdG8gc2F2ZSBkZXBlbmRlbmNpZXMgdG8gYSBkaXNjYXJkZWQgdHJlZScpO1xuICB9IC8vIE1lcmdlIHRoZSBkZXBlbmRlbmNpZXMgZGlzY292ZXJlZCBpbnRvIHRoZSBzdG9yZSdzIGRlcGVuZGVuY3kgbWFwXG4gIC8vIGZvciB0aGUgdmVyc2lvbiB0aGF0IHdhcyByZWFkOlxuXG5cbiAgY29uc3QgZ3JhcGggPSBzdG9yZS5nZXRHcmFwaCh2ZXJzaW9uKTtcbiAgbWVyZ2VEZXBlbmRlbmN5TWFwSW50b0dyYXBoKGRlcGVuZGVuY3lNYXAsIGdyYXBoKTsgLy8gSWYgdGhpcyB2ZXJzaW9uIGlzIG5vdCB0aGUgbGF0ZXN0IHZlcnNpb24sIGFsc28gd3JpdGUgdGhlc2UgZGVwZW5kZW5jaWVzXG4gIC8vIGludG8gbGF0ZXIgdmVyc2lvbnMgaWYgdGhleSBkb24ndCBhbHJlYWR5IGhhdmUgdGhlaXIgb3duOlxuXG4gIGlmICh2ZXJzaW9uID09PSAoKF9zdG9yZVN0YXRlJHByZXZpb3VzVDIgPSBzdG9yZVN0YXRlLnByZXZpb3VzVHJlZSkgPT09IG51bGwgfHwgX3N0b3JlU3RhdGUkcHJldmlvdXNUMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlU3RhdGUkcHJldmlvdXNUMi52ZXJzaW9uKSkge1xuICAgIGNvbnN0IGN1cnJlbnRHcmFwaCA9IHN0b3JlLmdldEdyYXBoKHN0b3JlU3RhdGUuY3VycmVudFRyZWUudmVyc2lvbik7XG4gICAgbWVyZ2VEZXBlbmRlbmN5TWFwSW50b0dyYXBoKGRlcGVuZGVuY3lNYXAsIGN1cnJlbnRHcmFwaCwgZ3JhcGgpO1xuICB9XG5cbiAgaWYgKHZlcnNpb24gPT09ICgoX3N0b3JlU3RhdGUkcHJldmlvdXNUMyA9IHN0b3JlU3RhdGUucHJldmlvdXNUcmVlKSA9PT0gbnVsbCB8fCBfc3RvcmVTdGF0ZSRwcmV2aW91c1QzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RvcmVTdGF0ZSRwcmV2aW91c1QzLnZlcnNpb24pIHx8IHZlcnNpb24gPT09IHN0b3JlU3RhdGUuY3VycmVudFRyZWUudmVyc2lvbikge1xuICAgIHZhciBfc3RvcmVTdGF0ZSRuZXh0VHJlZTI7XG5cbiAgICBjb25zdCBuZXh0VmVyc2lvbiA9IChfc3RvcmVTdGF0ZSRuZXh0VHJlZTIgPSBzdG9yZVN0YXRlLm5leHRUcmVlKSA9PT0gbnVsbCB8fCBfc3RvcmVTdGF0ZSRuZXh0VHJlZTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJG5leHRUcmVlMi52ZXJzaW9uO1xuXG4gICAgaWYgKG5leHRWZXJzaW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IG5leHRHcmFwaCA9IHN0b3JlLmdldEdyYXBoKG5leHRWZXJzaW9uKTtcbiAgICAgIG1lcmdlRGVwZW5kZW5jeU1hcEludG9HcmFwaChkZXBlbmRlbmN5TWFwLCBuZXh0R3JhcGgsIGdyYXBoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VEZXBzSW50b0RlcGVuZGVuY3lNYXAoZnJvbSwgaW50bykge1xuICBmcm9tLmZvckVhY2goKHVwc3RyZWFtRGVwcywgZG93bnN0cmVhbU5vZGUpID0+IHtcbiAgICBpZiAoIWludG8uaGFzKGRvd25zdHJlYW1Ob2RlKSkge1xuICAgICAgaW50by5zZXQoZG93bnN0cmVhbU5vZGUsIG5ldyBTZXQoKSk7XG4gICAgfVxuXG4gICAgY29uc3QgZGVwcyA9IFJlY29pbF9udWxsdGhyb3dzKGludG8uZ2V0KGRvd25zdHJlYW1Ob2RlKSk7XG4gICAgdXBzdHJlYW1EZXBzLmZvckVhY2goZGVwID0+IGRlcHMuYWRkKGRlcCkpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVG9EZXBlbmRlbmN5TWFwKGRvd25zdHJlYW0sIHVwc3RyZWFtLCBkZXBlbmRlbmN5TWFwKSB7XG4gIGlmICghZGVwZW5kZW5jeU1hcC5oYXMoZG93bnN0cmVhbSkpIHtcbiAgICBkZXBlbmRlbmN5TWFwLnNldChkb3duc3RyZWFtLCBuZXcgU2V0KCkpO1xuICB9XG5cbiAgUmVjb2lsX251bGx0aHJvd3MoZGVwZW5kZW5jeU1hcC5nZXQoZG93bnN0cmVhbSkpLmFkZCh1cHN0cmVhbSk7XG59XG5cbnZhciBSZWNvaWxfR3JhcGggPSB7XG4gIGFkZFRvRGVwZW5kZW5jeU1hcCxcbiAgY2xvbmVHcmFwaCxcbiAgZ3JhcGgsXG4gIG1lcmdlRGVwc0ludG9EZXBlbmRlbmN5TWFwLFxuICBzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmVcbn07XG5cbmNvbnN0IHtcbiAgcGVyc2lzdGVudE1hcDogcGVyc2lzdGVudE1hcCQxXG59ID0gUmVjb2lsX1BlcnNpc3RlbnRNYXAkMTtcblxuY29uc3Qge1xuICBncmFwaDogZ3JhcGgkMVxufSA9IFJlY29pbF9HcmFwaDtcblxubGV0IG5leHRUcmVlU3RhdGVWZXJzaW9uID0gMDtcblxuY29uc3QgZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24gPSAoKSA9PiBuZXh0VHJlZVN0YXRlVmVyc2lvbisrO1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlUcmVlU3RhdGUoKSB7XG4gIGNvbnN0IHZlcnNpb24gPSBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbigpO1xuICByZXR1cm4ge1xuICAgIHZlcnNpb24sXG4gICAgc3RhdGVJRDogdmVyc2lvbixcbiAgICB0cmFuc2FjdGlvbk1ldGFkYXRhOiB7fSxcbiAgICBkaXJ0eUF0b21zOiBuZXcgU2V0KCksXG4gICAgYXRvbVZhbHVlczogcGVyc2lzdGVudE1hcCQxKCksXG4gICAgbm9udmFsaWRhdGVkQXRvbXM6IHBlcnNpc3RlbnRNYXAkMSgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1ha2VFbXB0eVN0b3JlU3RhdGUoKSB7XG4gIGNvbnN0IGN1cnJlbnRUcmVlID0gbWFrZUVtcHR5VHJlZVN0YXRlKCk7XG4gIHJldHVybiB7XG4gICAgY3VycmVudFRyZWUsXG4gICAgbmV4dFRyZWU6IG51bGwsXG4gICAgcHJldmlvdXNUcmVlOiBudWxsLFxuICAgIGNvbW1pdERlcHRoOiAwLFxuICAgIGtub3duQXRvbXM6IG5ldyBTZXQoKSxcbiAgICBrbm93blNlbGVjdG9yczogbmV3IFNldCgpLFxuICAgIHRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uczogbmV3IE1hcCgpLFxuICAgIG5vZGVUcmFuc2FjdGlvblN1YnNjcmlwdGlvbnM6IG5ldyBNYXAoKSxcbiAgICBub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zOiBuZXcgTWFwKCksXG4gICAgcXVldWVkQ29tcG9uZW50Q2FsbGJhY2tzX0RFUFJFQ0FURUQ6IFtdLFxuICAgIHN1c3BlbmRlZENvbXBvbmVudFJlc29sdmVyczogbmV3IFNldCgpLFxuICAgIGdyYXBoc0J5VmVyc2lvbjogbmV3IE1hcCgpLnNldChjdXJyZW50VHJlZS52ZXJzaW9uLCBncmFwaCQxKCkpLFxuICAgIHZlcnNpb25zVXNlZEJ5Q29tcG9uZW50OiBuZXcgTWFwKCksXG4gICAgcmV0ZW50aW9uOiB7XG4gICAgICByZWZlcmVuY2VDb3VudHM6IG5ldyBNYXAoKSxcbiAgICAgIG5vZGVzUmV0YWluZWRCeVpvbmU6IG5ldyBNYXAoKSxcbiAgICAgIHJldGFpbmFibGVzVG9DaGVja0ZvclJlbGVhc2U6IG5ldyBTZXQoKVxuICAgIH0sXG4gICAgbm9kZUNsZWFudXBGdW5jdGlvbnM6IG5ldyBNYXAoKVxuICB9O1xufVxuXG52YXIgUmVjb2lsX1N0YXRlID0ge1xuICBtYWtlRW1wdHlUcmVlU3RhdGUsXG4gIG1ha2VFbXB0eVN0b3JlU3RhdGUsXG4gIGdldE5leHRUcmVlU3RhdGVWZXJzaW9uXG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gdW5pb25TZXRzKC4uLnNldHMpIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IFNldCgpO1xuXG4gIGZvciAoY29uc3Qgc2V0IG9mIHNldHMpIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHNldCkge1xuICAgICAgcmVzdWx0LmFkZCh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIFJlY29pbF91bmlvblNldHMgPSB1bmlvblNldHM7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogVXRpbGl0aWVzIGZvciB3b3JraW5nIHdpdGggYnVpbHQtaW4gTWFwcyBhbmQgU2V0cyB3aXRob3V0IG11dGF0aW5nIHRoZW0uXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5mdW5jdGlvbiBzZXRCeUFkZGluZ1RvU2V0KHNldCwgdikge1xuICBjb25zdCBuZXh0ID0gbmV3IFNldChzZXQpO1xuICBuZXh0LmFkZCh2KTtcbiAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIHNldEJ5RGVsZXRpbmdGcm9tU2V0KHNldCwgdikge1xuICBjb25zdCBuZXh0ID0gbmV3IFNldChzZXQpO1xuICBuZXh0LmRlbGV0ZSh2KTtcbiAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIG1hcEJ5U2V0dGluZ0luTWFwKG1hcCwgaywgdikge1xuICBjb25zdCBuZXh0ID0gbmV3IE1hcChtYXApO1xuICBuZXh0LnNldChrLCB2KTtcbiAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIG1hcEJ5VXBkYXRpbmdJbk1hcChtYXAsIGssIHVwZGF0ZXIpIHtcbiAgY29uc3QgbmV4dCA9IG5ldyBNYXAobWFwKTtcbiAgbmV4dC5zZXQoaywgdXBkYXRlcihuZXh0LmdldChrKSkpO1xuICByZXR1cm4gbmV4dDtcbn1cblxuZnVuY3Rpb24gbWFwQnlEZWxldGluZ0Zyb21NYXAobWFwLCBrKSB7XG4gIGNvbnN0IG5leHQgPSBuZXcgTWFwKG1hcCk7XG4gIG5leHQuZGVsZXRlKGspO1xuICByZXR1cm4gbmV4dDtcbn1cblxuZnVuY3Rpb24gbWFwQnlEZWxldGluZ011bHRpcGxlRnJvbU1hcChtYXAsIGtzKSB7XG4gIGNvbnN0IG5leHQgPSBuZXcgTWFwKG1hcCk7XG4gIGtzLmZvckVhY2goayA9PiBuZXh0LmRlbGV0ZShrKSk7XG4gIHJldHVybiBuZXh0O1xufVxuXG52YXIgUmVjb2lsX0NvcHlPbldyaXRlID0ge1xuICBzZXRCeUFkZGluZ1RvU2V0LFxuICBzZXRCeURlbGV0aW5nRnJvbVNldCxcbiAgbWFwQnlTZXR0aW5nSW5NYXAsXG4gIG1hcEJ5VXBkYXRpbmdJbk1hcCxcbiAgbWFwQnlEZWxldGluZ0Zyb21NYXAsXG4gIG1hcEJ5RGVsZXRpbmdNdWx0aXBsZUZyb21NYXBcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGl0ZXJhYmxlIHdob3NlIG91dHB1dCBpcyBnZW5lcmF0ZWQgYnkgcGFzc2luZyB0aGUgaW5wdXRcbiAqIGl0ZXJhYmxlJ3MgdmFsdWVzIHRocm91Z2ggdGhlIGZpbHRlciBmdW5jdGlvbi5cbiAqL1xuXG5mdW5jdGlvbiogZmlsdGVySXRlcmFibGUoaXRlcmFibGUsIHByZWRpY2F0ZSkge1xuICAvLyBVc2UgZ2VuZXJhdG9yIHRvIGNyZWF0ZSBpdGVyYWJsZS9pdGVyYXRvclxuICBsZXQgaW5kZXggPSAwO1xuXG4gIGZvciAoY29uc3QgdmFsdWUgb2YgaXRlcmFibGUpIHtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCsrKSkge1xuICAgICAgeWllbGQgdmFsdWU7XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWNvaWxfZmlsdGVySXRlcmFibGUgPSBmaWx0ZXJJdGVyYWJsZTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5cbmNsYXNzIFJldGVudGlvblpvbmUge31cblxuZnVuY3Rpb24gcmV0ZW50aW9uWm9uZSgpIHtcbiAgcmV0dXJuIG5ldyBSZXRlbnRpb25ab25lKCk7XG59XG5cbnZhciBSZWNvaWxfUmV0ZW50aW9uWm9uZSA9IHtcbiAgUmV0ZW50aW9uWm9uZSxcbiAgcmV0ZW50aW9uWm9uZVxufTtcblxuY29uc3Qge1xuICBzZXRCeUFkZGluZ1RvU2V0OiBzZXRCeUFkZGluZ1RvU2V0JDFcbn0gPSBSZWNvaWxfQ29weU9uV3JpdGU7XG5cblxuXG5cblxuXG5cbmNvbnN0IHtcbiAgZ2V0Tm9kZTogZ2V0Tm9kZSQxLFxuICBnZXROb2RlTWF5YmU6IGdldE5vZGVNYXliZSQxLFxuICByZWNvaWxWYWx1ZXNGb3JLZXlzOiByZWNvaWxWYWx1ZXNGb3JLZXlzJDFcbn0gPSBSZWNvaWxfTm9kZTtcblxuY29uc3Qge1xuICBSZXRlbnRpb25ab25lOiBSZXRlbnRpb25ab25lJDFcbn0gPSBSZWNvaWxfUmV0ZW50aW9uWm9uZTsgLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuXG5jb25zdCBlbXB0eVNldCA9IE9iamVjdC5mcmVlemUobmV3IFNldCgpKTtcblxuY2xhc3MgUmVhZE9ubHlSZWNvaWxWYWx1ZUVycm9yIGV4dGVuZHMgRXJyb3Ige31cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVJldGVudGlvbkZvck5vZGUoc3RvcmUsIG5vZGVLZXksIHJldGFpbmVkQnkpIHtcbiAgaWYgKCFSZWNvaWxfZ2t4XzEoJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykpIHtcbiAgICByZXR1cm4gKCkgPT4gdW5kZWZpbmVkO1xuICB9XG5cbiAgY29uc3Qge1xuICAgIG5vZGVzUmV0YWluZWRCeVpvbmVcbiAgfSA9IHN0b3JlLmdldFN0YXRlKCkucmV0ZW50aW9uO1xuXG4gIGZ1bmN0aW9uIGFkZFRvWm9uZSh6b25lKSB7XG4gICAgbGV0IHNldCA9IG5vZGVzUmV0YWluZWRCeVpvbmUuZ2V0KHpvbmUpO1xuXG4gICAgaWYgKCFzZXQpIHtcbiAgICAgIG5vZGVzUmV0YWluZWRCeVpvbmUuc2V0KHpvbmUsIHNldCA9IG5ldyBTZXQoKSk7XG4gICAgfVxuXG4gICAgc2V0LmFkZChub2RlS2V5KTtcbiAgfVxuXG4gIGlmIChyZXRhaW5lZEJ5IGluc3RhbmNlb2YgUmV0ZW50aW9uWm9uZSQxKSB7XG4gICAgYWRkVG9ab25lKHJldGFpbmVkQnkpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmV0YWluZWRCeSkpIHtcbiAgICBmb3IgKGNvbnN0IHpvbmUgb2YgcmV0YWluZWRCeSkge1xuICAgICAgYWRkVG9ab25lKHpvbmUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgaWYgKCFSZWNvaWxfZ2t4XzEoJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBub2Rlc1JldGFpbmVkQnlab25lID0gc3RvcmUuZ2V0U3RhdGUoKS5yZXRlbnRpb24ubm9kZXNSZXRhaW5lZEJ5Wm9uZTtcblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUZyb21ab25lKHpvbmUpIHtcbiAgICAgIGNvbnN0IHNldCA9IG5vZGVzUmV0YWluZWRCeVpvbmUuZ2V0KHpvbmUpO1xuXG4gICAgICBpZiAoc2V0KSB7XG4gICAgICAgIHNldC5kZWxldGUobm9kZUtleSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZXQgJiYgc2V0LnNpemUgPT09IDApIHtcbiAgICAgICAgbm9kZXNSZXRhaW5lZEJ5Wm9uZS5kZWxldGUoem9uZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJldGFpbmVkQnkgaW5zdGFuY2VvZiBSZXRlbnRpb25ab25lJDEpIHtcbiAgICAgIGRlbGV0ZUZyb21ab25lKHJldGFpbmVkQnkpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXRhaW5lZEJ5KSkge1xuICAgICAgZm9yIChjb25zdCB6b25lIG9mIHJldGFpbmVkQnkpIHtcbiAgICAgICAgZGVsZXRlRnJvbVpvbmUoem9uZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplTm9kZUlmTmV3VG9TdG9yZShzdG9yZSwgdHJlZVN0YXRlLCBrZXksIHRyaWdnZXIpIHtcbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgaWYgKHN0b3JlU3RhdGUubm9kZUNsZWFudXBGdW5jdGlvbnMuaGFzKGtleSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBjb25maWcgPSBnZXROb2RlJDEoa2V5KTtcbiAgY29uc3QgcmV0ZW50aW9uQ2xlYW51cCA9IGluaXRpYWxpemVSZXRlbnRpb25Gb3JOb2RlKHN0b3JlLCBrZXksIGNvbmZpZy5yZXRhaW5lZEJ5KTtcbiAgY29uc3Qgbm9kZUNsZWFudXAgPSBjb25maWcuaW5pdChzdG9yZSwgdHJlZVN0YXRlLCB0cmlnZ2VyKTtcbiAgc3RvcmVTdGF0ZS5ub2RlQ2xlYW51cEZ1bmN0aW9ucy5zZXQoa2V5LCAoKSA9PiB7XG4gICAgbm9kZUNsZWFudXAoKTtcbiAgICByZXRlbnRpb25DbGVhbnVwKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjbGVhblVwTm9kZShzdG9yZSwga2V5KSB7XG4gIHZhciBfc3RhdGUkbm9kZUNsZWFudXBGdW47XG5cbiAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAoX3N0YXRlJG5vZGVDbGVhbnVwRnVuID0gc3RhdGUubm9kZUNsZWFudXBGdW5jdGlvbnMuZ2V0KGtleSkpID09PSBudWxsIHx8IF9zdGF0ZSRub2RlQ2xlYW51cEZ1biA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0YXRlJG5vZGVDbGVhbnVwRnVuKCk7XG4gIHN0YXRlLm5vZGVDbGVhbnVwRnVuY3Rpb25zLmRlbGV0ZShrZXkpO1xufSAvLyBHZXQgdGhlIGN1cnJlbnQgdmFsdWUgbG9hZGFibGUgb2YgYSBub2RlIGFuZCB1cGRhdGUgdGhlIHN0YXRlLlxuLy8gVXBkYXRlIGRlcGVuZGVuY2llcyBhbmQgc3Vic2NyaXB0aW9ucyBmb3Igc2VsZWN0b3JzLlxuLy8gVXBkYXRlIHNhdmVkIHZhbHVlIHZhbGlkYXRpb24gZm9yIGF0b21zLlxuXG5cbmZ1bmN0aW9uIGdldE5vZGVMb2FkYWJsZShzdG9yZSwgc3RhdGUsIGtleSkge1xuICBpbml0aWFsaXplTm9kZUlmTmV3VG9TdG9yZShzdG9yZSwgc3RhdGUsIGtleSwgJ2dldCcpO1xuICByZXR1cm4gZ2V0Tm9kZSQxKGtleSkuZ2V0KHN0b3JlLCBzdGF0ZSk7XG59IC8vIFBlZWsgYXQgdGhlIGN1cnJlbnQgdmFsdWUgbG9hZGFibGUgZm9yIGEgbm9kZSB3aXRob3V0IGFueSBldmFsdWF0aW9uIG9yIHN0YXRlIGNoYW5nZVxuXG5cbmZ1bmN0aW9uIHBlZWtOb2RlTG9hZGFibGUoc3RvcmUsIHN0YXRlLCBrZXkpIHtcbiAgcmV0dXJuIGdldE5vZGUkMShrZXkpLnBlZWsoc3RvcmUsIHN0YXRlKTtcbn0gLy8gV3JpdGUgdmFsdWUgZGlyZWN0bHkgdG8gc3RhdGUgYnlwYXNzaW5nIHRoZSBOb2RlIGludGVyZmFjZSBhcyB0aGUgbm9kZVxuLy8gZGVmaW5pdGlvbnMgbWF5IG5vdCBoYXZlIGJlZW4gbG9hZGVkIHlldCB3aGVuIHByb2Nlc3NpbmcgdGhlIGluaXRpYWwgc25hcHNob3QuXG5cblxuZnVuY3Rpb24gc2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRChzdGF0ZSwga2V5LCBuZXdWYWx1ZSkge1xuICB2YXIgX25vZGUkaW52YWxpZGF0ZTtcblxuICBjb25zdCBub2RlID0gZ2V0Tm9kZU1heWJlJDEoa2V5KTtcbiAgbm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX25vZGUkaW52YWxpZGF0ZSA9IG5vZGUuaW52YWxpZGF0ZSkgPT09IG51bGwgfHwgX25vZGUkaW52YWxpZGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vZGUkaW52YWxpZGF0ZS5jYWxsKG5vZGUsIHN0YXRlKTtcbiAgcmV0dXJuIHsgLi4uc3RhdGUsXG4gICAgYXRvbVZhbHVlczogc3RhdGUuYXRvbVZhbHVlcy5jbG9uZSgpLmRlbGV0ZShrZXkpLFxuICAgIG5vbnZhbGlkYXRlZEF0b21zOiBzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5jbG9uZSgpLnNldChrZXksIG5ld1ZhbHVlKSxcbiAgICBkaXJ0eUF0b21zOiBzZXRCeUFkZGluZ1RvU2V0JDEoc3RhdGUuZGlydHlBdG9tcywga2V5KVxuICB9O1xufSAvLyBSZXR1cm4gdGhlIGRpc2NvdmVyZWQgZGVwZW5kZW5jaWVzIGFuZCB2YWx1ZXMgdG8gYmUgd3JpdHRlbiBieSBzZXR0aW5nXG4vLyBhIG5vZGUgdmFsdWUuIChNdWx0aXBsZSB2YWx1ZXMgbWF5IGJlIHdyaXR0ZW4gZHVlIHRvIHNlbGVjdG9ycyBnZXR0aW5nIHRvXG4vLyBzZXQgdXBzdHJlYW1zOyBkZXBzIG1heSBiZSBkaXNjb3ZlcmVkIGJlY2F1c2Ugb2YgcmVhZHMgaW4gdXBkYXRlciBmdW5jdGlvbnMuKVxuXG5cbmZ1bmN0aW9uIHNldE5vZGVWYWx1ZShzdG9yZSwgc3RhdGUsIGtleSwgbmV3VmFsdWUpIHtcbiAgY29uc3Qgbm9kZSA9IGdldE5vZGUkMShrZXkpO1xuXG4gIGlmIChub2RlLnNldCA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFJlYWRPbmx5UmVjb2lsVmFsdWVFcnJvcihgQXR0ZW1wdCB0byBzZXQgcmVhZC1vbmx5IFJlY29pbFZhbHVlOiAke2tleX1gKTtcbiAgfVxuXG4gIGNvbnN0IHNldCA9IG5vZGUuc2V0OyAvLyBzbyBmbG93IGRvZXNuJ3QgbG9zZSB0aGUgYWJvdmUgcmVmaW5lbWVudC5cblxuICBpbml0aWFsaXplTm9kZUlmTmV3VG9TdG9yZShzdG9yZSwgc3RhdGUsIGtleSwgJ3NldCcpO1xuICByZXR1cm4gc2V0KHN0b3JlLCBzdGF0ZSwgbmV3VmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwZWVrTm9kZUluZm8oc3RvcmUsIHN0YXRlLCBrZXkpIHtcbiAgdmFyIF9ncmFwaCRub2RlRGVwcyRnZXQsIF9zdG9yZVN0YXRlJG5vZGVUb0NvbSwgX3N0b3JlU3RhdGUkbm9kZVRvQ29tMjtcblxuICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgY29uc3QgZ3JhcGggPSBzdG9yZS5nZXRHcmFwaChzdGF0ZS52ZXJzaW9uKTtcbiAgY29uc3QgdHlwZSA9IHN0b3JlU3RhdGUua25vd25BdG9tcy5oYXMoa2V5KSA/ICdhdG9tJyA6IHN0b3JlU3RhdGUua25vd25TZWxlY3RvcnMuaGFzKGtleSkgPyAnc2VsZWN0b3InIDogdW5kZWZpbmVkO1xuICBjb25zdCBkb3duc3RyZWFtTm9kZXMgPSBSZWNvaWxfZmlsdGVySXRlcmFibGUoZ2V0RG93bnN0cmVhbU5vZGVzKHN0b3JlLCBzdGF0ZSwgbmV3IFNldChba2V5XSkpLCBub2RlS2V5ID0+IG5vZGVLZXkgIT09IGtleSk7XG4gIHJldHVybiB7XG4gICAgbG9hZGFibGU6IHBlZWtOb2RlTG9hZGFibGUoc3RvcmUsIHN0YXRlLCBrZXkpLFxuICAgIGlzQWN0aXZlOiBzdG9yZVN0YXRlLmtub3duQXRvbXMuaGFzKGtleSkgfHwgc3RvcmVTdGF0ZS5rbm93blNlbGVjdG9ycy5oYXMoa2V5KSxcbiAgICBpc1NldDogdHlwZSA9PT0gJ3NlbGVjdG9yJyA/IGZhbHNlIDogc3RhdGUuYXRvbVZhbHVlcy5oYXMoa2V5KSxcbiAgICBpc01vZGlmaWVkOiBzdGF0ZS5kaXJ0eUF0b21zLmhhcyhrZXkpLFxuICAgIHR5cGUsXG4gICAgLy8gUmVwb3J0IGN1cnJlbnQgZGVwZW5kZW5jaWVzLiAgSWYgdGhlIG5vZGUgaGFzbid0IGJlZW4gZXZhbHVhdGVkLCB0aGVuXG4gICAgLy8gZGVwZW5kZW5jaWVzIG1heSBiZSBtaXNzaW5nIGJhc2VkIG9uIHRoZSBjdXJyZW50IHN0YXRlLlxuICAgIGRlcHM6IHJlY29pbFZhbHVlc0ZvcktleXMkMSgoX2dyYXBoJG5vZGVEZXBzJGdldCA9IGdyYXBoLm5vZGVEZXBzLmdldChrZXkpKSAhPT0gbnVsbCAmJiBfZ3JhcGgkbm9kZURlcHMkZ2V0ICE9PSB2b2lkIDAgPyBfZ3JhcGgkbm9kZURlcHMkZ2V0IDogW10pLFxuICAgIC8vIFJlcG9ydHNhbGwgXCJjdXJyZW50XCIgc3Vic2NyaWJlcnMuICBFdmFsdWF0aW5nIG90aGVyIG5vZGVzIG9yXG4gICAgLy8gcHJldmlvdXMgaW4tcHJvZ3Jlc3MgYXN5bmMgZXZhbHVhdGlvbnMgbWF5IGludHJvZHVjZSBuZXcgc3Vic2NyaWJlcnMuXG4gICAgc3Vic2NyaWJlcnM6IHtcbiAgICAgIG5vZGVzOiByZWNvaWxWYWx1ZXNGb3JLZXlzJDEoZG93bnN0cmVhbU5vZGVzKSxcbiAgICAgIGNvbXBvbmVudHM6IFJlY29pbF9tYXBJdGVyYWJsZSgoX3N0b3JlU3RhdGUkbm9kZVRvQ29tID0gKF9zdG9yZVN0YXRlJG5vZGVUb0NvbTIgPSBzdG9yZVN0YXRlLm5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnMuZ2V0KGtleSkpID09PSBudWxsIHx8IF9zdG9yZVN0YXRlJG5vZGVUb0NvbTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZVN0YXRlJG5vZGVUb0NvbTIudmFsdWVzKCkpICE9PSBudWxsICYmIF9zdG9yZVN0YXRlJG5vZGVUb0NvbSAhPT0gdm9pZCAwID8gX3N0b3JlU3RhdGUkbm9kZVRvQ29tIDogW10sIChbbmFtZV0pID0+ICh7XG4gICAgICAgIG5hbWVcbiAgICAgIH0pKVxuICAgIH1cbiAgfTtcbn0gLy8gRmluZCBhbGwgb2YgdGhlIHJlY3Vyc2l2ZWx5IGRlcGVuZGVudCBub2Rlc1xuXG5cbmZ1bmN0aW9uIGdldERvd25zdHJlYW1Ob2RlcyhzdG9yZSwgc3RhdGUsIGtleXMpIHtcbiAgY29uc3QgdmlzaXRlZE5vZGVzID0gbmV3IFNldCgpO1xuICBjb25zdCB2aXNpdGluZ05vZGVzID0gQXJyYXkuZnJvbShrZXlzKTtcbiAgY29uc3QgZ3JhcGggPSBzdG9yZS5nZXRHcmFwaChzdGF0ZS52ZXJzaW9uKTtcblxuICBmb3IgKGxldCBrZXkgPSB2aXNpdGluZ05vZGVzLnBvcCgpOyBrZXk7IGtleSA9IHZpc2l0aW5nTm9kZXMucG9wKCkpIHtcbiAgICB2YXIgX2dyYXBoJG5vZGVUb05vZGVTdWJzO1xuXG4gICAgdmlzaXRlZE5vZGVzLmFkZChrZXkpO1xuICAgIGNvbnN0IHN1YnNjcmliZWROb2RlcyA9IChfZ3JhcGgkbm9kZVRvTm9kZVN1YnMgPSBncmFwaC5ub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5nZXQoa2V5KSkgIT09IG51bGwgJiYgX2dyYXBoJG5vZGVUb05vZGVTdWJzICE9PSB2b2lkIDAgPyBfZ3JhcGgkbm9kZVRvTm9kZVN1YnMgOiBlbXB0eVNldDtcblxuICAgIGZvciAoY29uc3QgZG93bnN0cmVhbU5vZGUgb2Ygc3Vic2NyaWJlZE5vZGVzKSB7XG4gICAgICBpZiAoIXZpc2l0ZWROb2Rlcy5oYXMoZG93bnN0cmVhbU5vZGUpKSB7XG4gICAgICAgIHZpc2l0aW5nTm9kZXMucHVzaChkb3duc3RyZWFtTm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZpc2l0ZWROb2Rlcztcbn1cblxudmFyIFJlY29pbF9GdW5jdGlvbmFsQ29yZSA9IHtcbiAgZ2V0Tm9kZUxvYWRhYmxlLFxuICBwZWVrTm9kZUxvYWRhYmxlLFxuICBzZXROb2RlVmFsdWUsXG4gIGNsZWFuVXBOb2RlLFxuICBzZXRVbnZhbGlkYXRlZEF0b21WYWx1ZV9ERVBSRUNBVEVELFxuICBwZWVrTm9kZUluZm8sXG4gIGdldERvd25zdHJlYW1Ob2RlcyxcbiAgaW5pdGlhbGl6ZU5vZGVJZk5ld1RvU3RvcmVcbn07XG5cbmNvbnN0IHtcbiAgZ2V0RG93bnN0cmVhbU5vZGVzOiBnZXREb3duc3RyZWFtTm9kZXMkMSxcbiAgZ2V0Tm9kZUxvYWRhYmxlOiBnZXROb2RlTG9hZGFibGUkMSxcbiAgc2V0Tm9kZVZhbHVlOiBzZXROb2RlVmFsdWUkMVxufSA9IFJlY29pbF9GdW5jdGlvbmFsQ29yZTtcblxuY29uc3Qge1xuICBnZXROb2RlTWF5YmU6IGdldE5vZGVNYXliZSQyXG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgRGVmYXVsdFZhbHVlOiBEZWZhdWx0VmFsdWUkMSxcbiAgUmVjb2lsVmFsdWVOb3RSZWFkeTogUmVjb2lsVmFsdWVOb3RSZWFkeSQxXG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgQWJzdHJhY3RSZWNvaWxWYWx1ZTogQWJzdHJhY3RSZWNvaWxWYWx1ZSQxLFxuICBSZWNvaWxTdGF0ZTogUmVjb2lsU3RhdGUkMSxcbiAgUmVjb2lsVmFsdWVSZWFkT25seTogUmVjb2lsVmFsdWVSZWFkT25seSQxLFxuICBpc1JlY29pbFZhbHVlOiBpc1JlY29pbFZhbHVlJDFcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWUkMTtcblxuZnVuY3Rpb24gZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlKHN0b3JlLCB7XG4gIGtleVxufSwgdHJlZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZSkge1xuICB2YXIgX3N0b3JlU3RhdGUkbmV4dFRyZWUsIF9zdG9yZVN0YXRlJHByZXZpb3VzVDtcblxuICAvLyBSZWFkaW5nIGZyb20gYW4gb2xkZXIgdHJlZSBjYW4gY2F1c2UgYnVncyBiZWNhdXNlIHRoZSBkZXBlbmRlbmNpZXMgdGhhdCB3ZVxuICAvLyBkaXNjb3ZlciBkdXJpbmcgdGhlIHJlYWQgYXJlIGxvc3QuXG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gIGlmICghKHRyZWVTdGF0ZS52ZXJzaW9uID09PSBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlLnZlcnNpb24gfHwgdHJlZVN0YXRlLnZlcnNpb24gPT09ICgoX3N0b3JlU3RhdGUkbmV4dFRyZWUgPSBzdG9yZVN0YXRlLm5leHRUcmVlKSA9PT0gbnVsbCB8fCBfc3RvcmVTdGF0ZSRuZXh0VHJlZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlU3RhdGUkbmV4dFRyZWUudmVyc2lvbikgfHwgdHJlZVN0YXRlLnZlcnNpb24gPT09ICgoX3N0b3JlU3RhdGUkcHJldmlvdXNUID0gc3RvcmVTdGF0ZS5wcmV2aW91c1RyZWUpID09PSBudWxsIHx8IF9zdG9yZVN0YXRlJHByZXZpb3VzVCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlU3RhdGUkcHJldmlvdXNULnZlcnNpb24pKSkge1xuICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbignVHJpZWQgdG8gcmVhZCBmcm9tIGEgZGlzY2FyZGVkIHRyZWUnKTtcbiAgfVxuXG4gIGNvbnN0IGxvYWRhYmxlID0gZ2V0Tm9kZUxvYWRhYmxlJDEoc3RvcmUsIHRyZWVTdGF0ZSwga2V5KTtcblxuICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgIGxvYWRhYmxlLmNvbnRlbnRzLmNhdGNoKCgpID0+IHtcbiAgICAgIC8qKlxuICAgICAgICogSEFDSzogaW50ZXJjZXB0IHRocm93biBlcnJvciBoZXJlIHRvIHByZXZlbnQgYW4gdW5jYXVnaHQgcHJvbWlzZSBleGNlcHRpb24uIElkZWFsbHkgdGhpcyB3b3VsZCBoYXBwZW4gY2xvc2VyIHRvIHNlbGVjdG9yXG4gICAgICAgKiBleGVjdXRpb24gKHBlcmhhcHMgaW50cm9kdWNpbmcgYSBuZXcgRVJST1IgY2xhc3MgdG8gYmUgcmVzb2x2ZWQgYnkgYXN5bmMgc2VsZWN0b3JzIHRoYXQgYXJlIGluIGFuIGVycm9yIHN0YXRlKVxuICAgICAgICovXG4gICAgICByZXR1cm47XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbG9hZGFibGU7XG59XG5cbmZ1bmN0aW9uIGFwcGx5QXRvbVZhbHVlV3JpdGVzKGF0b21WYWx1ZXMsIHdyaXRlcykge1xuICBjb25zdCByZXN1bHQgPSBhdG9tVmFsdWVzLmNsb25lKCk7XG4gIHdyaXRlcy5mb3JFYWNoKCh2LCBrKSA9PiB7XG4gICAgaWYgKHYuc3RhdGUgPT09ICdoYXNWYWx1ZScgJiYgdi5jb250ZW50cyBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQxKSB7XG4gICAgICByZXN1bHQuZGVsZXRlKGspO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQuc2V0KGssIHYpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHZhbHVlRnJvbVZhbHVlT3JVcGRhdGVyKHN0b3JlLCBzdGF0ZSwge1xuICBrZXlcbn0sIHZhbHVlT3JVcGRhdGVyKSB7XG4gIGlmICh0eXBlb2YgdmFsdWVPclVwZGF0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBVcGRhdGVyIGZvcm06IHBhc3MgaW4gdGhlIGN1cnJlbnQgdmFsdWUuIFRocm93IGlmIHRoZSBjdXJyZW50IHZhbHVlXG4gICAgLy8gaXMgdW5hdmFpbGFibGUgKG5hbWVseSB3aGVuIHVwZGF0aW5nIGFuIGFzeW5jIHNlbGVjdG9yIHRoYXQnc1xuICAgIC8vIHBlbmRpbmcgb3IgZXJyb3JlZCk6XG4gICAgY29uc3QgY3VycmVudCA9IGdldE5vZGVMb2FkYWJsZSQxKHN0b3JlLCBzdGF0ZSwga2V5KTtcblxuICAgIGlmIChjdXJyZW50LnN0YXRlID09PSAnbG9hZGluZycpIHtcbiAgICAgIHRocm93IG5ldyBSZWNvaWxWYWx1ZU5vdFJlYWR5JDEoa2V5KTtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnQuc3RhdGUgPT09ICdoYXNFcnJvcicpIHtcbiAgICAgIHRocm93IGN1cnJlbnQuY29udGVudHM7XG4gICAgfSAvLyBUIGl0c2VsZiBtYXkgYmUgYSBmdW5jdGlvbiwgc28gb3VyIHJlZmluZW1lbnQgaXMgbm90IHN1ZmZpY2llbnQ6XG5cblxuICAgIHJldHVybiB2YWx1ZU9yVXBkYXRlcihjdXJyZW50LmNvbnRlbnRzKTsgLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlT3JVcGRhdGVyO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5QWN0aW9uKHN0b3JlLCBzdGF0ZSwgYWN0aW9uKSB7XG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ3NldCcpIHtcbiAgICBjb25zdCB7XG4gICAgICByZWNvaWxWYWx1ZSxcbiAgICAgIHZhbHVlT3JVcGRhdGVyXG4gICAgfSA9IGFjdGlvbjtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlRnJvbVZhbHVlT3JVcGRhdGVyKHN0b3JlLCBzdGF0ZSwgcmVjb2lsVmFsdWUsIHZhbHVlT3JVcGRhdGVyKTtcbiAgICBjb25zdCB3cml0ZXMgPSBzZXROb2RlVmFsdWUkMShzdG9yZSwgc3RhdGUsIHJlY29pbFZhbHVlLmtleSwgbmV3VmFsdWUpO1xuXG4gICAgZm9yIChjb25zdCBba2V5LCBsb2FkYWJsZV0gb2Ygd3JpdGVzLmVudHJpZXMoKSkge1xuICAgICAgd3JpdGVMb2FkYWJsZVRvVHJlZVN0YXRlKHN0YXRlLCBrZXksIGxvYWRhYmxlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09ICdzZXRMb2FkYWJsZScpIHtcbiAgICBjb25zdCB7XG4gICAgICByZWNvaWxWYWx1ZToge1xuICAgICAgICBrZXlcbiAgICAgIH0sXG4gICAgICBsb2FkYWJsZVxuICAgIH0gPSBhY3Rpb247XG4gICAgd3JpdGVMb2FkYWJsZVRvVHJlZVN0YXRlKHN0YXRlLCBrZXksIGxvYWRhYmxlKTtcbiAgfSBlbHNlIGlmIChhY3Rpb24udHlwZSA9PT0gJ21hcmtNb2RpZmllZCcpIHtcbiAgICBjb25zdCB7XG4gICAgICByZWNvaWxWYWx1ZToge1xuICAgICAgICBrZXlcbiAgICAgIH1cbiAgICB9ID0gYWN0aW9uO1xuICAgIHN0YXRlLmRpcnR5QXRvbXMuYWRkKGtleSk7XG4gIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09ICdzZXRVbnZhbGlkYXRlZCcpIHtcbiAgICB2YXIgX25vZGUkaW52YWxpZGF0ZTtcblxuICAgIC8vIFdyaXRlIHZhbHVlIGRpcmVjdGx5IHRvIHN0YXRlIGJ5cGFzc2luZyB0aGUgTm9kZSBpbnRlcmZhY2UgYXMgdGhlIG5vZGVcbiAgICAvLyBkZWZpbml0aW9ucyBtYXkgbm90IGhhdmUgYmVlbiBsb2FkZWQgeWV0IHdoZW4gcHJvY2Vzc2luZyB0aGUgaW5pdGlhbCBzbmFwc2hvdC5cbiAgICBjb25zdCB7XG4gICAgICByZWNvaWxWYWx1ZToge1xuICAgICAgICBrZXlcbiAgICAgIH0sXG4gICAgICB1bnZhbGlkYXRlZFZhbHVlXG4gICAgfSA9IGFjdGlvbjtcbiAgICBjb25zdCBub2RlID0gZ2V0Tm9kZU1heWJlJDIoa2V5KTtcbiAgICBub2RlID09PSBudWxsIHx8IG5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfbm9kZSRpbnZhbGlkYXRlID0gbm9kZS5pbnZhbGlkYXRlKSA9PT0gbnVsbCB8fCBfbm9kZSRpbnZhbGlkYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbm9kZSRpbnZhbGlkYXRlLmNhbGwobm9kZSwgc3RhdGUpO1xuICAgIHN0YXRlLmF0b21WYWx1ZXMuZGVsZXRlKGtleSk7XG4gICAgc3RhdGUubm9udmFsaWRhdGVkQXRvbXMuc2V0KGtleSwgdW52YWxpZGF0ZWRWYWx1ZSk7XG4gICAgc3RhdGUuZGlydHlBdG9tcy5hZGQoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24oYFVua25vd24gYWN0aW9uICR7YWN0aW9uLnR5cGV9YCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JpdGVMb2FkYWJsZVRvVHJlZVN0YXRlKHN0YXRlLCBrZXksIGxvYWRhYmxlKSB7XG4gIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2hhc1ZhbHVlJyAmJiBsb2FkYWJsZS5jb250ZW50cyBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQxKSB7XG4gICAgc3RhdGUuYXRvbVZhbHVlcy5kZWxldGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5hdG9tVmFsdWVzLnNldChrZXksIGxvYWRhYmxlKTtcbiAgfVxuXG4gIHN0YXRlLmRpcnR5QXRvbXMuYWRkKGtleSk7XG4gIHN0YXRlLm5vbnZhbGlkYXRlZEF0b21zLmRlbGV0ZShrZXkpO1xufVxuXG5mdW5jdGlvbiBhcHBseUFjdGlvbnNUb1N0b3JlKHN0b3JlLCBhY3Rpb25zKSB7XG4gIHN0b3JlLnJlcGxhY2VTdGF0ZShzdGF0ZSA9PiB7XG4gICAgY29uc3QgbmV3U3RhdGUgPSBjb3B5VHJlZVN0YXRlKHN0YXRlKTtcblxuICAgIGZvciAoY29uc3QgYWN0aW9uIG9mIGFjdGlvbnMpIHtcbiAgICAgIGFwcGx5QWN0aW9uKHN0b3JlLCBuZXdTdGF0ZSwgYWN0aW9uKTtcbiAgICB9XG5cbiAgICBpbnZhbGlkYXRlRG93bnN0cmVhbXMoc3RvcmUsIG5ld1N0YXRlKTtcbiAgICByZXR1cm4gbmV3U3RhdGU7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBxdWV1ZU9yUGVyZm9ybVN0YXRlVXBkYXRlKHN0b3JlLCBhY3Rpb24pIHtcbiAgaWYgKGJhdGNoU3RhY2subGVuZ3RoKSB7XG4gICAgY29uc3QgYWN0aW9uc0J5U3RvcmUgPSBiYXRjaFN0YWNrW2JhdGNoU3RhY2subGVuZ3RoIC0gMV07XG4gICAgbGV0IGFjdGlvbnMgPSBhY3Rpb25zQnlTdG9yZS5nZXQoc3RvcmUpO1xuXG4gICAgaWYgKCFhY3Rpb25zKSB7XG4gICAgICBhY3Rpb25zQnlTdG9yZS5zZXQoc3RvcmUsIGFjdGlvbnMgPSBbXSk7XG4gICAgfVxuXG4gICAgYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgYXBwbHlBY3Rpb25zVG9TdG9yZShzdG9yZSwgW2FjdGlvbl0pO1xuICB9XG59XG5cbmNvbnN0IGJhdGNoU3RhY2sgPSBbXTtcblxuZnVuY3Rpb24gYmF0Y2hTdGFydCgpIHtcbiAgY29uc3QgYWN0aW9uc0J5U3RvcmUgPSBuZXcgTWFwKCk7XG4gIGJhdGNoU3RhY2sucHVzaChhY3Rpb25zQnlTdG9yZSk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgZm9yIChjb25zdCBbc3RvcmUsIGFjdGlvbnNdIG9mIGFjdGlvbnNCeVN0b3JlKSB7XG4gICAgICBhcHBseUFjdGlvbnNUb1N0b3JlKHN0b3JlLCBhY3Rpb25zKTtcbiAgICB9XG5cbiAgICBjb25zdCBwb3BwZWQgPSBiYXRjaFN0YWNrLnBvcCgpO1xuXG4gICAgaWYgKHBvcHBlZCAhPT0gYWN0aW9uc0J5U3RvcmUpIHtcbiAgICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbignSW5jb3JyZWN0IG9yZGVyIG9mIGJhdGNoIHBvcHBpbmcnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvcHlUcmVlU3RhdGUoc3RhdGUpIHtcbiAgcmV0dXJuIHsgLi4uc3RhdGUsXG4gICAgYXRvbVZhbHVlczogc3RhdGUuYXRvbVZhbHVlcy5jbG9uZSgpLFxuICAgIG5vbnZhbGlkYXRlZEF0b21zOiBzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5jbG9uZSgpLFxuICAgIGRpcnR5QXRvbXM6IG5ldyBTZXQoc3RhdGUuZGlydHlBdG9tcylcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW52YWxpZGF0ZURvd25zdHJlYW1zKHN0b3JlLCBzdGF0ZSkge1xuICAvLyBJbmZvcm0gYW55IG5vZGVzIHRoYXQgd2VyZSBjaGFuZ2VkIG9yIGRvd25zdHJlYW0gb2YgY2hhbmdlcyBzbyB0aGF0IHRoZXlcbiAgLy8gY2FuIGNsZWFyIG91dCBhbnkgY2FjaGVzIGFzIG5lZWRlZCBkdWUgdG8gdGhlIHVwZGF0ZTpcbiAgY29uc3QgZG93bnN0cmVhbXMgPSBnZXREb3duc3RyZWFtTm9kZXMkMShzdG9yZSwgc3RhdGUsIHN0YXRlLmRpcnR5QXRvbXMpO1xuXG4gIGZvciAoY29uc3Qga2V5IG9mIGRvd25zdHJlYW1zKSB7XG4gICAgdmFyIF9nZXROb2RlTWF5YmUsIF9nZXROb2RlTWF5YmUkaW52YWxpZDtcblxuICAgIChfZ2V0Tm9kZU1heWJlID0gZ2V0Tm9kZU1heWJlJDIoa2V5KSkgPT09IG51bGwgfHwgX2dldE5vZGVNYXliZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9nZXROb2RlTWF5YmUkaW52YWxpZCA9IF9nZXROb2RlTWF5YmUuaW52YWxpZGF0ZSkgPT09IG51bGwgfHwgX2dldE5vZGVNYXliZSRpbnZhbGlkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ2V0Tm9kZU1heWJlJGludmFsaWQuY2FsbChfZ2V0Tm9kZU1heWJlLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0UmVjb2lsVmFsdWUoc3RvcmUsIHJlY29pbFZhbHVlLCB2YWx1ZU9yVXBkYXRlcikge1xuICBxdWV1ZU9yUGVyZm9ybVN0YXRlVXBkYXRlKHN0b3JlLCB7XG4gICAgdHlwZTogJ3NldCcsXG4gICAgcmVjb2lsVmFsdWUsXG4gICAgdmFsdWVPclVwZGF0ZXJcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldFJlY29pbFZhbHVlTG9hZGFibGUoc3RvcmUsIHJlY29pbFZhbHVlLCBsb2FkYWJsZSkge1xuICBpZiAobG9hZGFibGUgaW5zdGFuY2VvZiBEZWZhdWx0VmFsdWUkMSkge1xuICAgIHJldHVybiBzZXRSZWNvaWxWYWx1ZShzdG9yZSwgcmVjb2lsVmFsdWUsIGxvYWRhYmxlKTtcbiAgfVxuXG4gIHF1ZXVlT3JQZXJmb3JtU3RhdGVVcGRhdGUoc3RvcmUsIHtcbiAgICB0eXBlOiAnc2V0TG9hZGFibGUnLFxuICAgIHJlY29pbFZhbHVlLFxuICAgIGxvYWRhYmxlOiBsb2FkYWJsZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFya1JlY29pbFZhbHVlTW9kaWZpZWQoc3RvcmUsIHJlY29pbFZhbHVlKSB7XG4gIHF1ZXVlT3JQZXJmb3JtU3RhdGVVcGRhdGUoc3RvcmUsIHtcbiAgICB0eXBlOiAnbWFya01vZGlmaWVkJyxcbiAgICByZWNvaWxWYWx1ZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZShzdG9yZSwgcmVjb2lsVmFsdWUsIHVudmFsaWRhdGVkVmFsdWUpIHtcbiAgcXVldWVPclBlcmZvcm1TdGF0ZVVwZGF0ZShzdG9yZSwge1xuICAgIHR5cGU6ICdzZXRVbnZhbGlkYXRlZCcsXG4gICAgcmVjb2lsVmFsdWUsXG4gICAgdW52YWxpZGF0ZWRWYWx1ZVxuICB9KTtcbn1cblxubGV0IHN1YnNjcmlwdGlvbklEID0gMDtcblxuZnVuY3Rpb24gc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZShzdG9yZSwge1xuICBrZXlcbn0sIGNhbGxiYWNrLCBjb21wb25lbnREZWJ1Z05hbWUgPSBudWxsKSB7XG4gIGNvbnN0IHN1YklEID0gc3Vic2NyaXB0aW9uSUQrKztcbiAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgaWYgKCFzdG9yZVN0YXRlLm5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnMuaGFzKGtleSkpIHtcbiAgICBzdG9yZVN0YXRlLm5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnMuc2V0KGtleSwgbmV3IE1hcCgpKTtcbiAgfVxuXG4gIFJlY29pbF9udWxsdGhyb3dzKHN0b3JlU3RhdGUubm9kZVRvQ29tcG9uZW50U3Vic2NyaXB0aW9ucy5nZXQoa2V5KSkuc2V0KHN1YklELCBbY29tcG9uZW50RGVidWdOYW1lICE9PSBudWxsICYmIGNvbXBvbmVudERlYnVnTmFtZSAhPT0gdm9pZCAwID8gY29tcG9uZW50RGVidWdOYW1lIDogJzxub3QgY2FwdHVyZWQ+JywgY2FsbGJhY2tdKTsgLy8gSGFuZGxlIHRoZSBjYXNlIHRoYXQsIGR1cmluZyB0aGUgc2FtZSB0aWNrIHRoYXQgd2UgYXJlIHN1YnNjcmliaW5nLCBhbiBhdG9tXG4gIC8vIGhhcyBiZWVuIHVwZGF0ZWQgYnkgc29tZSBlZmZlY3QgaGFuZGxlci4gT3RoZXJ3aXNlIHdlIHdpbGwgbWlzcyB0aGUgdXBkYXRlLlxuXG4gIGlmIChSZWNvaWxfZ2t4XzEoJ3JlY29pbF9lYXJseV9yZW5kZXJpbmdfMjAyMScpKSB7XG4gICAgY29uc3QgbmV4dFRyZWUgPSBzdG9yZS5nZXRTdGF0ZSgpLm5leHRUcmVlO1xuXG4gICAgaWYgKG5leHRUcmVlICYmIG5leHRUcmVlLmRpcnR5QXRvbXMuaGFzKGtleSkpIHtcbiAgICAgIGNhbGxiYWNrKG5leHRUcmVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlbGVhc2U6ICgpID0+IHtcbiAgICAgIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgY29uc3Qgc3VicyA9IHN0b3JlU3RhdGUubm9kZVRvQ29tcG9uZW50U3Vic2NyaXB0aW9ucy5nZXQoa2V5KTtcblxuICAgICAgaWYgKHN1YnMgPT09IHVuZGVmaW5lZCB8fCAhc3Vicy5oYXMoc3ViSUQpKSB7XG4gICAgICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbihgU3Vic2NyaXB0aW9uIG1pc3NpbmcgYXQgcmVsZWFzZSB0aW1lIGZvciBhdG9tICR7a2V5fS4gVGhpcyBpcyBhIGJ1ZyBpbiBSZWNvaWwuYCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3Vicy5kZWxldGUoc3ViSUQpO1xuXG4gICAgICBpZiAoc3Vicy5zaXplID09PSAwKSB7XG4gICAgICAgIHN0b3JlU3RhdGUubm9kZVRvQ29tcG9uZW50U3Vic2NyaXB0aW9ucy5kZWxldGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbnZhciBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2UgPSB7XG4gIFJlY29pbFZhbHVlUmVhZE9ubHk6IFJlY29pbFZhbHVlUmVhZE9ubHkkMSxcbiAgQWJzdHJhY3RSZWNvaWxWYWx1ZTogQWJzdHJhY3RSZWNvaWxWYWx1ZSQxLFxuICBSZWNvaWxTdGF0ZTogUmVjb2lsU3RhdGUkMSxcbiAgZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlLFxuICBzZXRSZWNvaWxWYWx1ZSxcbiAgc2V0UmVjb2lsVmFsdWVMb2FkYWJsZSxcbiAgbWFya1JlY29pbFZhbHVlTW9kaWZpZWQsXG4gIHNldFVudmFsaWRhdGVkUmVjb2lsVmFsdWUsXG4gIHN1YnNjcmliZVRvUmVjb2lsVmFsdWUsXG4gIGlzUmVjb2lsVmFsdWU6IGlzUmVjb2lsVmFsdWUkMSxcbiAgYXBwbHlBdG9tVmFsdWVXcml0ZXMsXG4gIC8vIFRPRE8gUmVtb3ZlIGV4cG9ydCB3aGVuIGRlcHJlY2F0aW5nIGluaXRpYWxTdG9yZVN0YXRlX0RFUFJFQ0FURUQgaW4gUmVjb2lsUm9vdFxuICBiYXRjaFN0YXJ0LFxuICB3cml0ZUxvYWRhYmxlVG9UcmVlU3RhdGUsXG4gIGludmFsaWRhdGVEb3duc3RyZWFtcyxcbiAgY29weVRyZWVTdGF0ZSxcbiAgaW52YWxpZGF0ZURvd25zdHJlYW1zX0ZPUl9URVNUSU5HOiBpbnZhbGlkYXRlRG93bnN0cmVhbXNcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLyoqXG4gKiBUaGUgc29tZVNldCgpIG1ldGhvZCB0ZXN0cyB3aGV0aGVyIHNvbWUgZWxlbWVudHMgaW4gdGhlIGdpdmVuIFNldCBwYXNzIHRoZVxuICogdGVzdCBpbXBsZW1lbnRlZCBieSB0aGUgcHJvdmlkZWQgZnVuY3Rpb24uXG4gKi9cblxuZnVuY3Rpb24gc29tZVNldChzZXQsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gIGNvbnN0IGl0ZXJhdG9yID0gc2V0LmVudHJpZXMoKTtcbiAgbGV0IGN1cnJlbnQgPSBpdGVyYXRvci5uZXh0KCk7XG5cbiAgd2hpbGUgKCFjdXJyZW50LmRvbmUpIHtcbiAgICBjb25zdCBlbnRyeSA9IGN1cnJlbnQudmFsdWU7XG5cbiAgICBpZiAoY2FsbGJhY2suY2FsbChjb250ZXh0LCBlbnRyeVsxXSwgZW50cnlbMF0sIHNldCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGN1cnJlbnQgPSBpdGVyYXRvci5uZXh0KCk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBSZWNvaWxfc29tZVNldCA9IHNvbWVTZXQ7XG5cbmNvbnN0IHtcbiAgY2xlYW5VcE5vZGU6IGNsZWFuVXBOb2RlJDFcbn0gPSBSZWNvaWxfRnVuY3Rpb25hbENvcmU7XG5cbmNvbnN0IHtcbiAgZGVsZXRlTm9kZUNvbmZpZ0lmUG9zc2libGU6IGRlbGV0ZU5vZGVDb25maWdJZlBvc3NpYmxlJDEsXG4gIGdldE5vZGU6IGdldE5vZGUkMlxufSA9IFJlY29pbF9Ob2RlO1xuXG5jb25zdCB7XG4gIFJldGVudGlvblpvbmU6IFJldGVudGlvblpvbmUkMlxufSA9IFJlY29pbF9SZXRlbnRpb25ab25lOyAvLyBDb21wb25lbnRzIHRoYXQgYXJlbid0IG1vdW50ZWQgYWZ0ZXIgc3VzcGVuZGluZyBmb3IgdGhpcyBsb25nIHdpbGwgYmUgYXNzdW1lZFxuLy8gdG8gYmUgZGlzY2FyZGVkIGFuZCB0aGVpciByZXNvdXJjZXMgcmVsZWFzZWQuXG5cblxuY29uc3QgU1VTUEVOU0VfVElNRU9VVF9NUyA9IDEyMDAwMDtcbmNvbnN0IGVtcHR5U2V0JDEgPSBuZXcgU2V0KCk7XG5cbmZ1bmN0aW9uIHJlbGVhc2VSZXRhaW5hYmxlc05vd09uQ3VycmVudFRyZWUoc3RvcmUsIHJldGFpbmFibGVzKSB7XG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICBjb25zdCB0cmVlU3RhdGUgPSBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlO1xuXG4gIGlmIChzdG9yZVN0YXRlLm5leHRUcmVlKSB7XG4gICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKCdyZWxlYXNlTm9kZXNOb3dPbkN1cnJlbnRUcmVlIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBhdCB0aGUgZW5kIG9mIGEgYmF0Y2gnKTtcbiAgICByZXR1cm47IC8vIGxlYWsgbWVtb3J5IHJhdGhlciB0aGFuIGVyYXNlIHNvbWV0aGluZyB0aGF0J3MgYWJvdXQgdG8gYmUgdXNlZC5cbiAgfVxuXG4gIGNvbnN0IG5vZGVzID0gbmV3IFNldCgpO1xuXG4gIGZvciAoY29uc3QgciBvZiByZXRhaW5hYmxlcykge1xuICAgIGlmIChyIGluc3RhbmNlb2YgUmV0ZW50aW9uWm9uZSQyKSB7XG4gICAgICBmb3IgKGNvbnN0IG4gb2Ygbm9kZXNSZXRhaW5lZEJ5Wm9uZShzdG9yZVN0YXRlLCByKSkge1xuICAgICAgICBub2Rlcy5hZGQobik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGVzLmFkZChyKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCByZWxlYXNhYmxlTm9kZXMgPSBmaW5kUmVsZWFzYWJsZU5vZGVzKHN0b3JlLCBub2Rlcyk7XG5cbiAgZm9yIChjb25zdCBub2RlIG9mIHJlbGVhc2FibGVOb2Rlcykge1xuICAgIHJlbGVhc2VOb2RlKHN0b3JlLCB0cmVlU3RhdGUsIG5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRSZWxlYXNhYmxlTm9kZXMoc3RvcmUsIHNlYXJjaEZyb21Ob2Rlcykge1xuICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgY29uc3QgdHJlZVN0YXRlID0gc3RvcmVTdGF0ZS5jdXJyZW50VHJlZTtcbiAgY29uc3QgZ3JhcGggPSBzdG9yZS5nZXRHcmFwaCh0cmVlU3RhdGUudmVyc2lvbik7XG4gIGNvbnN0IHJlbGVhc2FibGVOb2RlcyA9IG5ldyBTZXQoKTsgLy8gbXV0YXRlZCB0byBjb2xsZWN0IGFuc3dlclxuXG4gIGNvbnN0IG5vblJlbGVhc2FibGVOb2RlcyA9IG5ldyBTZXQoKTtcbiAgZmluZFJlbGVhc2FibGVOb2Rlc0lubmVyKHNlYXJjaEZyb21Ob2Rlcyk7XG4gIHJldHVybiByZWxlYXNhYmxlTm9kZXM7XG5cbiAgZnVuY3Rpb24gZmluZFJlbGVhc2FibGVOb2Rlc0lubmVyKHNlYXJjaEZyb21Ob2Rlcykge1xuICAgIGNvbnN0IHJlbGVhc2FibGVOb2Rlc0ZvdW5kVGhpc0l0ZXJhdGlvbiA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCBkb3duc3RyZWFtcyA9IGdldERvd25zdHJlYW1Ob2Rlc0luVG9wb2xvZ2ljYWxPcmRlcihzdG9yZSwgdHJlZVN0YXRlLCBzZWFyY2hGcm9tTm9kZXMsIHJlbGVhc2FibGVOb2RlcywgLy8gZG9uJ3QgZGVzY2VuZCBpbnRvIHRoZXNlXG4gICAgbm9uUmVsZWFzYWJsZU5vZGVzIC8vIGRvbid0IGRlc2NlbmQgaW50byB0aGVzZVxuICAgICk7IC8vIEZpbmQgd2hpY2ggb2YgdGhlIGRvd25zdHJlYW0gbm9kZXMgYXJlIHJlbGVhc2FibGUgYW5kIHdoaWNoIGFyZSBub3Q6XG5cbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgZG93bnN0cmVhbXMpIHtcbiAgICAgIHZhciBfc3RvcmVTdGF0ZSRyZXRlbnRpb247XG5cbiAgICAgIC8vIE5vdCByZWxlYXNhYmxlIGlmIGNvbmZpZ3VyZWQgdG8gYmUgcmV0YWluZWQgZm9yZXZlcjpcbiAgICAgIGlmIChnZXROb2RlJDIobm9kZSkucmV0YWluZWRCeSA9PT0gJ3JlY29pbFJvb3QnKSB7XG4gICAgICAgIG5vblJlbGVhc2FibGVOb2Rlcy5hZGQobm9kZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyBOb3QgcmVsZWFzYWJsZSBpZiByZXRhaW5lZCBkaXJlY3RseSBieSBhIGNvbXBvbmVudDpcblxuXG4gICAgICBpZiAoKChfc3RvcmVTdGF0ZSRyZXRlbnRpb24gPSBzdG9yZVN0YXRlLnJldGVudGlvbi5yZWZlcmVuY2VDb3VudHMuZ2V0KG5vZGUpKSAhPT0gbnVsbCAmJiBfc3RvcmVTdGF0ZSRyZXRlbnRpb24gIT09IHZvaWQgMCA/IF9zdG9yZVN0YXRlJHJldGVudGlvbiA6IDApID4gMCkge1xuICAgICAgICBub25SZWxlYXNhYmxlTm9kZXMuYWRkKG5vZGUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gLy8gTm90IHJlbGVhc2FibGUgaWYgcmV0YWluZWQgYnkgYSB6b25lOlxuXG5cbiAgICAgIGlmICh6b25lc1RoYXRDb3VsZFJldGFpbk5vZGUobm9kZSkuc29tZSh6ID0+IHN0b3JlU3RhdGUucmV0ZW50aW9uLnJlZmVyZW5jZUNvdW50cy5nZXQoeikpKSB7XG4gICAgICAgIG5vblJlbGVhc2FibGVOb2Rlcy5hZGQobm9kZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyBOb3QgcmVsZWFzYWJsZSBpZiBpdCBoYXMgYSBub24tcmVsZWFzYWJsZSBjaGlsZCAod2hpY2ggd2lsbCBhbHJlYWR5IGJlIGluXG4gICAgICAvLyBub25SZWxlYXNhYmxlTm9kZXMgYmVjYXVzZSB3ZSBhcmUgZ29pbmcgaW4gdG9wb2xvZ2ljYWwgb3JkZXIpOlxuXG5cbiAgICAgIGNvbnN0IG5vZGVDaGlsZHJlbiA9IGdyYXBoLm5vZGVUb05vZGVTdWJzY3JpcHRpb25zLmdldChub2RlKTtcblxuICAgICAgaWYgKG5vZGVDaGlsZHJlbiAmJiBSZWNvaWxfc29tZVNldChub2RlQ2hpbGRyZW4sIGNoaWxkID0+IG5vblJlbGVhc2FibGVOb2Rlcy5oYXMoY2hpbGQpKSkge1xuICAgICAgICBub25SZWxlYXNhYmxlTm9kZXMuYWRkKG5vZGUpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgcmVsZWFzYWJsZU5vZGVzLmFkZChub2RlKTtcbiAgICAgIHJlbGVhc2FibGVOb2Rlc0ZvdW5kVGhpc0l0ZXJhdGlvbi5hZGQobm9kZSk7XG4gICAgfSAvLyBJZiB3ZSBmb3VuZCBhbnkgcmVsZWFzYWJsZSBub2Rlcywgd2UgbmVlZCB0byB3YWxrIFVQIGZyb20gdGhvc2Ugbm9kZXMgdG9cbiAgICAvLyBmaW5kIHdoZXRoZXIgdGhlaXIgcGFyZW50cyBjYW4gbm93IGJlIHJlbGVhc2VkIGFzIHdlbGw6XG5cblxuICAgIGNvbnN0IHBhcmVudHMgPSBuZXcgU2V0KCk7XG5cbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgcmVsZWFzYWJsZU5vZGVzRm91bmRUaGlzSXRlcmF0aW9uKSB7XG4gICAgICBmb3IgKGNvbnN0IHBhcmVudCBvZiAoX2dyYXBoJG5vZGVEZXBzJGdldCA9IGdyYXBoLm5vZGVEZXBzLmdldChub2RlKSkgIT09IG51bGwgJiYgX2dyYXBoJG5vZGVEZXBzJGdldCAhPT0gdm9pZCAwID8gX2dyYXBoJG5vZGVEZXBzJGdldCA6IGVtcHR5U2V0JDEpIHtcbiAgICAgICAgdmFyIF9ncmFwaCRub2RlRGVwcyRnZXQ7XG5cbiAgICAgICAgaWYgKCFyZWxlYXNhYmxlTm9kZXMuaGFzKHBhcmVudCkpIHtcbiAgICAgICAgICBwYXJlbnRzLmFkZChwYXJlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmVudHMuc2l6ZSkge1xuICAgICAgZmluZFJlbGVhc2FibGVOb2Rlc0lubmVyKHBhcmVudHMpO1xuICAgIH1cbiAgfVxufSAvLyBDaGlsZHJlbiBiZWZvcmUgcGFyZW50c1xuXG5cbmZ1bmN0aW9uIGdldERvd25zdHJlYW1Ob2Rlc0luVG9wb2xvZ2ljYWxPcmRlcihzdG9yZSwgdHJlZVN0YXRlLCBub2RlcywgLy8gTXV0YWJsZSBzZXQgaXMgZGVzdHJveWVkIGluIHBsYWNlXG5kb05vdERlc2NlbmRJbnRvMSwgZG9Ob3REZXNjZW5kSW50bzIpIHtcbiAgY29uc3QgZ3JhcGggPSBzdG9yZS5nZXRHcmFwaCh0cmVlU3RhdGUudmVyc2lvbik7XG4gIGNvbnN0IGFuc3dlciA9IFtdO1xuICBjb25zdCB2aXNpdGVkID0gbmV3IFNldCgpO1xuXG4gIHdoaWxlIChub2Rlcy5zaXplID4gMCkge1xuICAgIHZpc2l0KFJlY29pbF9udWxsdGhyb3dzKG5vZGVzLnZhbHVlcygpLm5leHQoKS52YWx1ZSkpO1xuICB9XG5cbiAgcmV0dXJuIGFuc3dlcjtcblxuICBmdW5jdGlvbiB2aXNpdChub2RlKSB7XG4gICAgaWYgKGRvTm90RGVzY2VuZEludG8xLmhhcyhub2RlKSB8fCBkb05vdERlc2NlbmRJbnRvMi5oYXMobm9kZSkpIHtcbiAgICAgIG5vZGVzLmRlbGV0ZShub2RlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodmlzaXRlZC5oYXMobm9kZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjaGlsZHJlbiA9IGdyYXBoLm5vZGVUb05vZGVTdWJzY3JpcHRpb25zLmdldChub2RlKTtcblxuICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgICAgICB2aXNpdChjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmlzaXRlZC5hZGQobm9kZSk7XG4gICAgbm9kZXMuZGVsZXRlKG5vZGUpO1xuICAgIGFuc3dlci5wdXNoKG5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbGVhc2VOb2RlKHN0b3JlLCB0cmVlU3RhdGUsIG5vZGUpIHtcbiAgaWYgKCFSZWNvaWxfZ2t4XzEoJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQXRvbSBlZmZlY3RzLCBpbi1jbG9zdXJlIGNhY2hlcywgZXRjLjpcblxuXG4gIGNsZWFuVXBOb2RlJDEoc3RvcmUsIG5vZGUpOyAvLyBEZWxldGUgZnJvbSBzdG9yZSBzdGF0ZTpcblxuICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgc3RvcmVTdGF0ZS5rbm93bkF0b21zLmRlbGV0ZShub2RlKTtcbiAgc3RvcmVTdGF0ZS5rbm93blNlbGVjdG9ycy5kZWxldGUobm9kZSk7XG4gIHN0b3JlU3RhdGUubm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucy5kZWxldGUobm9kZSk7XG4gIHN0b3JlU3RhdGUucmV0ZW50aW9uLnJlZmVyZW5jZUNvdW50cy5kZWxldGUobm9kZSk7XG4gIGNvbnN0IHpvbmVzID0gem9uZXNUaGF0Q291bGRSZXRhaW5Ob2RlKG5vZGUpO1xuXG4gIGZvciAoY29uc3Qgem9uZSBvZiB6b25lcykge1xuICAgIHZhciBfc3RvcmVTdGF0ZSRyZXRlbnRpb24yO1xuXG4gICAgKF9zdG9yZVN0YXRlJHJldGVudGlvbjIgPSBzdG9yZVN0YXRlLnJldGVudGlvbi5ub2Rlc1JldGFpbmVkQnlab25lLmdldCh6b25lKSkgPT09IG51bGwgfHwgX3N0b3JlU3RhdGUkcmV0ZW50aW9uMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlU3RhdGUkcmV0ZW50aW9uMi5kZWxldGUobm9kZSk7XG4gIH0gLy8gTm90ZSB0aGF0IHdlIERPIE5PVCBkZWxldGUgZnJvbSBub2RlVG9Db21wb25lbnRTdWJzY3JpcHRpb25zIGJlY2F1c2UgdGhpc1xuICAvLyBhbHJlYWR5IGhhcHBlbnMgd2hlbiB0aGUgbGFzdCBjb21wb25lbnQgdGhhdCB3YXMgcmV0YWluaW5nIHRoZSBub2RlIHVubW91bnRzLFxuICAvLyBhbmQgdGhpcyBjb3VsZCBoYXBwZW4gZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGF0LlxuICAvLyBEZWxldGUgZnJvbSBUcmVlU3RhdGUgYW5kIGRlcCBncmFwaDpcblxuXG4gIHRyZWVTdGF0ZS5hdG9tVmFsdWVzLmRlbGV0ZShub2RlKTtcbiAgdHJlZVN0YXRlLmRpcnR5QXRvbXMuZGVsZXRlKG5vZGUpO1xuICB0cmVlU3RhdGUubm9udmFsaWRhdGVkQXRvbXMuZGVsZXRlKG5vZGUpO1xuICBjb25zdCBncmFwaCA9IHN0b3JlU3RhdGUuZ3JhcGhzQnlWZXJzaW9uLmdldCh0cmVlU3RhdGUudmVyc2lvbik7XG5cbiAgaWYgKGdyYXBoKSB7XG4gICAgY29uc3QgZGVwcyA9IGdyYXBoLm5vZGVEZXBzLmdldChub2RlKTtcblxuICAgIGlmIChkZXBzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGdyYXBoLm5vZGVEZXBzLmRlbGV0ZShub2RlKTtcblxuICAgICAgZm9yIChjb25zdCBkZXAgb2YgZGVwcykge1xuICAgICAgICB2YXIgX2dyYXBoJG5vZGVUb05vZGVTdWJzO1xuXG4gICAgICAgIChfZ3JhcGgkbm9kZVRvTm9kZVN1YnMgPSBncmFwaC5ub2RlVG9Ob2RlU3Vic2NyaXB0aW9ucy5nZXQoZGVwKSkgPT09IG51bGwgfHwgX2dyYXBoJG5vZGVUb05vZGVTdWJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ3JhcGgkbm9kZVRvTm9kZVN1YnMuZGVsZXRlKG5vZGUpO1xuICAgICAgfVxuICAgIH0gLy8gTm8gbmVlZCB0byBkZWxldGUgc3ViJ3MgZGVwcyBhcyB0aGVyZSBzaG91bGQgYmUgbm8gc3VicyBhdCB0aGlzIHBvaW50LlxuICAgIC8vIEJ1dCBhbiBpbnZhcmlhbnQgd291bGQgcmVxdWlyZSBkZWxldGluZyBub2RlcyBpbiB0b3BvbG9naWNhbCBvcmRlci5cblxuXG4gICAgZ3JhcGgubm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMuZGVsZXRlKG5vZGUpO1xuICB9IC8vIE5vZGUgY29uZmlnIChmb3IgZmFtaWx5IG1lbWJlcnMgb25seSBhcyB0aGVpciBjb25maWdzIGNhbiBiZSByZWNyZWF0ZWQsIGFuZFxuICAvLyBvbmx5IGlmIHRoZXkgYXJlIG5vdCByZXRhaW5lZCB3aXRoaW4gYW55IG90aGVyIFN0b3Jlcyk6XG5cblxuICBkZWxldGVOb2RlQ29uZmlnSWZQb3NzaWJsZSQxKG5vZGUpO1xufVxuXG5mdW5jdGlvbiBub2Rlc1JldGFpbmVkQnlab25lKHN0b3JlU3RhdGUsIHpvbmUpIHtcbiAgdmFyIF9zdG9yZVN0YXRlJHJldGVudGlvbjM7XG5cbiAgcmV0dXJuIChfc3RvcmVTdGF0ZSRyZXRlbnRpb24zID0gc3RvcmVTdGF0ZS5yZXRlbnRpb24ubm9kZXNSZXRhaW5lZEJ5Wm9uZS5nZXQoem9uZSkpICE9PSBudWxsICYmIF9zdG9yZVN0YXRlJHJldGVudGlvbjMgIT09IHZvaWQgMCA/IF9zdG9yZVN0YXRlJHJldGVudGlvbjMgOiBlbXB0eVNldCQxO1xufVxuXG5mdW5jdGlvbiB6b25lc1RoYXRDb3VsZFJldGFpbk5vZGUobm9kZSkge1xuICBjb25zdCByZXRhaW5lZEJ5ID0gZ2V0Tm9kZSQyKG5vZGUpLnJldGFpbmVkQnk7XG5cbiAgaWYgKHJldGFpbmVkQnkgPT09IHVuZGVmaW5lZCB8fCByZXRhaW5lZEJ5ID09PSAnY29tcG9uZW50cycgfHwgcmV0YWluZWRCeSA9PT0gJ3JlY29pbFJvb3QnKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IGVsc2UgaWYgKHJldGFpbmVkQnkgaW5zdGFuY2VvZiBSZXRlbnRpb25ab25lJDIpIHtcbiAgICByZXR1cm4gW3JldGFpbmVkQnldO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXRhaW5lZEJ5OyAvLyBpdCdzIGFuIGFycmF5IG9mIHpvbmVzXG4gIH1cbn1cblxuZnVuY3Rpb24gc2NoZWR1bGVPclBlcmZvcm1Qb3NzaWJsZVJlbGVhc2VPZlJldGFpbmFibGUoc3RvcmUsIHJldGFpbmFibGUpIHtcbiAgY29uc3Qgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gIGlmIChzdGF0ZS5uZXh0VHJlZSkge1xuICAgIHN0YXRlLnJldGVudGlvbi5yZXRhaW5hYmxlc1RvQ2hlY2tGb3JSZWxlYXNlLmFkZChyZXRhaW5hYmxlKTtcbiAgfSBlbHNlIHtcbiAgICByZWxlYXNlUmV0YWluYWJsZXNOb3dPbkN1cnJlbnRUcmVlKHN0b3JlLCBuZXcgU2V0KFtyZXRhaW5hYmxlXSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVJldGFpbkNvdW50KHN0b3JlLCByZXRhaW5hYmxlLCBkZWx0YSkge1xuICB2YXIgX21hcCRnZXQ7XG5cbiAgaWYgKCFSZWNvaWxfZ2t4XzEoJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBtYXAgPSBzdG9yZS5nZXRTdGF0ZSgpLnJldGVudGlvbi5yZWZlcmVuY2VDb3VudHM7XG4gIGNvbnN0IG5ld0NvdW50ID0gKChfbWFwJGdldCA9IG1hcC5nZXQocmV0YWluYWJsZSkpICE9PSBudWxsICYmIF9tYXAkZ2V0ICE9PSB2b2lkIDAgPyBfbWFwJGdldCA6IDApICsgZGVsdGE7XG5cbiAgaWYgKG5ld0NvdW50ID09PSAwKSB7XG4gICAgdXBkYXRlUmV0YWluQ291bnRUb1plcm8oc3RvcmUsIHJldGFpbmFibGUpO1xuICB9IGVsc2Uge1xuICAgIG1hcC5zZXQocmV0YWluYWJsZSwgbmV3Q291bnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVJldGFpbkNvdW50VG9aZXJvKHN0b3JlLCByZXRhaW5hYmxlKSB7XG4gIGlmICghUmVjb2lsX2dreF8xKCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbWFwID0gc3RvcmUuZ2V0U3RhdGUoKS5yZXRlbnRpb24ucmVmZXJlbmNlQ291bnRzO1xuICBtYXAuZGVsZXRlKHJldGFpbmFibGUpO1xuICBzY2hlZHVsZU9yUGVyZm9ybVBvc3NpYmxlUmVsZWFzZU9mUmV0YWluYWJsZShzdG9yZSwgcmV0YWluYWJsZSk7XG59XG5cbmZ1bmN0aW9uIHJlbGVhc2VTY2hlZHVsZWRSZXRhaW5hYmxlc05vdyhzdG9yZSkge1xuICBpZiAoIVJlY29pbF9na3hfMSgncmVjb2lsX21lbW9yeV9tYW5hZ2FtZW50XzIwMjAnKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgcmVsZWFzZVJldGFpbmFibGVzTm93T25DdXJyZW50VHJlZShzdG9yZSwgc3RhdGUucmV0ZW50aW9uLnJldGFpbmFibGVzVG9DaGVja0ZvclJlbGVhc2UpO1xuICBzdGF0ZS5yZXRlbnRpb24ucmV0YWluYWJsZXNUb0NoZWNrRm9yUmVsZWFzZS5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiByZXRhaW5lZEJ5T3B0aW9uV2l0aERlZmF1bHQocikge1xuICAvLyBUaGUgZGVmYXVsdCB3aWxsIGNoYW5nZSBmcm9tICdyZWNvaWxSb290JyB0byAnY29tcG9uZW50cycgaW4gdGhlIGZ1dHVyZS5cbiAgcmV0dXJuIHIgPT09IHVuZGVmaW5lZCA/ICdyZWNvaWxSb290JyA6IHI7XG59XG5cbnZhciBSZWNvaWxfUmV0ZW50aW9uID0ge1xuICBTVVNQRU5TRV9USU1FT1VUX01TLFxuICB1cGRhdGVSZXRhaW5Db3VudCxcbiAgdXBkYXRlUmV0YWluQ291bnRUb1plcm8sXG4gIHJlbGVhc2VTY2hlZHVsZWRSZXRhaW5hYmxlc05vdyxcbiAgcmV0YWluZWRCeU9wdGlvbldpdGhEZWZhdWx0XG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cbi8qKlxuICogQ29tYmluZXMgbXVsdGlwbGUgSXRlcmFibGVzIGludG8gYSBzaW5nbGUgSXRlcmFibGUuXG4gKiBUcmF2ZXJzZXMgdGhlIGlucHV0IEl0ZXJhYmxlcyBpbiB0aGUgb3JkZXIgcHJvdmlkZWQgYW5kIG1haW50YWlucyB0aGUgb3JkZXJcbiAqIG9mIHRoZWlyIGVsZW1lbnRzLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGBcbiAqIGNvbnN0IHIgPSBBcnJheS5mcm9tKGNvbmNhdEl0ZXJhYmxlcyhbJ2EnLCAnYiddLCBbJ2MnXSwgWydkJywgJ2UnLCAnZiddKSk7XG4gKiByID09IFsnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnXTtcbiAqIGBgYFxuICovXG5cbmZ1bmN0aW9uKiBjb25jYXRJdGVyYWJsZXMoaXRlcnMpIHtcbiAgZm9yIChjb25zdCBpdGVyIG9mIGl0ZXJzKSB7XG4gICAgZm9yIChjb25zdCB2YWwgb2YgaXRlcikge1xuICAgICAgeWllbGQgdmFsO1xuICAgIH1cbiAgfVxufVxuXG52YXIgUmVjb2lsX2NvbmNhdEl0ZXJhYmxlcyA9IGNvbmNhdEl0ZXJhYmxlcztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5cbmNvbnN0IGlzU1NSID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCc7XG5jb25zdCBpc1JlYWN0TmF0aXZlID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZSc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZmItd3d3L3R5cGVvZi11bmRlZmluZWRcblxudmFyIFJlY29pbF9FbnZpcm9ubWVudCA9IHtcbiAgaXNTU1IsXG4gIGlzUmVhY3ROYXRpdmVcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqXG4gKiBUaGlzIGlzIHRvIGV4cG9ydCBlc3N0aWVudGlhbCBmdW5jdGlvbnMgZnJvbSByZWFjdC1kb21cbiAqIGZvciBvdXIgd2ViIGJ1aWxkXG4gKi9cbmNvbnN0IHtcbiAgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXNcbn0gPSByZWFjdERvbTtcblxudmFyIFJlYWN0QmF0Y2hlZFVwZGF0ZXMgPSB7XG4gIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzXG59O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKlxuICogVGhpcyBpcyB0byBleHBvcnQgZXNzdGllbnRpYWwgZnVuY3Rpb25zIGZyb20gcmVhY3QtZG9tXG4gKiBmb3Igb3VyIHdlYiBidWlsZFxuICovXG4vLyBAZmItb25seTogY29uc3Qge3Vuc3RhYmxlX2JhdGNoZWRVcGRhdGVzfSA9IHJlcXVpcmUoJ1JlYWN0RE9NQ29tZXQnKTtcbi8vIHByZXR0aWVyLWlnbm9yZVxuY29uc3Qge1xuICB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczogdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMkMVxufSA9IFJlYWN0QmF0Y2hlZFVwZGF0ZXM7IC8vIEBvc3Mtb25seVxuXG5cbnZhciBSZWNvaWxfUmVhY3RCYXRjaGVkVXBkYXRlcyA9IHtcbiAgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzJDFcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuY29uc3Qge1xuICBiYXRjaFN0YXJ0OiBiYXRjaFN0YXJ0JDFcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2U7XG5cbmNvbnN0IHtcbiAgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzJDJcbn0gPSBSZWNvaWxfUmVhY3RCYXRjaGVkVXBkYXRlcztcblxubGV0IGJhdGNoZXIgPSB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyQyOyAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG4vKipcbiAqIFNldHMgdGhlIHByb3ZpZGVkIGJhdGNoZXIgZnVuY3Rpb24gYXMgdGhlIGJhdGNoZXIgZnVuY3Rpb24gdXNlZCBieSBSZWNvaWwuXG4gKlxuICogU2V0IHRoZSBiYXRjaGVyIHRvIGEgY3VzdG9tIGJhdGNoZXIgZm9yIHlvdXIgcmVuZGVyZXIsXG4gKiBpZiB5b3UgdXNlIGEgcmVuZGVyZXIgb3RoZXIgdGhhbiBSZWFjdCBET00gb3IgUmVhY3QgTmF0aXZlLlxuICovXG5jb25zdCBzZXRCYXRjaGVyID0gbmV3QmF0Y2hlciA9PiB7XG4gIGJhdGNoZXIgPSBuZXdCYXRjaGVyO1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBiYXRjaGVyIGZ1bmN0aW9uLlxuICovXG5cblxuY29uc3QgZ2V0QmF0Y2hlciA9ICgpID0+IGJhdGNoZXI7XG4vKipcbiAqIENhbGxzIHRoZSBjdXJyZW50IGJhdGNoZXIgZnVuY3Rpb24gYW5kIHBhc3NlcyB0aGVcbiAqIHByb3ZpZGVkIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICovXG5cblxuY29uc3QgYmF0Y2hVcGRhdGVzID0gY2FsbGJhY2sgPT4ge1xuICBiYXRjaGVyKCgpID0+IHtcbiAgICBsZXQgYmF0Y2hFbmQgPSAoKSA9PiB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgYmF0Y2hFbmQgPSBiYXRjaFN0YXJ0JDEoKTtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGJhdGNoRW5kKCk7XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBSZWNvaWxfQmF0Y2hpbmcgPSB7XG4gIGdldEJhdGNoZXIsXG4gIHNldEJhdGNoZXIsXG4gIGJhdGNoVXBkYXRlc1xufTtcblxuY29uc3Qge1xuICBpc1NTUjogaXNTU1IkMVxufSA9IFJlY29pbF9FbnZpcm9ubWVudDtcblxuXG5cblxuXG5cblxuXG5cblxuXG5jb25zdCB7XG4gIGJhdGNoVXBkYXRlczogYmF0Y2hVcGRhdGVzJDFcbn0gPSBSZWNvaWxfQmF0Y2hpbmc7XG5cbmNvbnN0IHtcbiAgaW5pdGlhbGl6ZU5vZGVJZk5ld1RvU3RvcmU6IGluaXRpYWxpemVOb2RlSWZOZXdUb1N0b3JlJDEsXG4gIHBlZWtOb2RlSW5mbzogcGVla05vZGVJbmZvJDFcbn0gPSBSZWNvaWxfRnVuY3Rpb25hbENvcmU7XG5cbmNvbnN0IHtcbiAgZ3JhcGg6IGdyYXBoJDJcbn0gPSBSZWNvaWxfR3JhcGg7XG5cbmNvbnN0IHtcbiAgREVGQVVMVF9WQUxVRTogREVGQVVMVF9WQUxVRSQxLFxuICByZWNvaWxWYWx1ZXM6IHJlY29pbFZhbHVlcyQxLFxuICByZWNvaWxWYWx1ZXNGb3JLZXlzOiByZWNvaWxWYWx1ZXNGb3JLZXlzJDJcbn0gPSBSZWNvaWxfTm9kZTtcblxuY29uc3Qge1xuICBBYnN0cmFjdFJlY29pbFZhbHVlOiBBYnN0cmFjdFJlY29pbFZhbHVlJDIsXG4gIGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZTogZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDEsXG4gIHNldFJlY29pbFZhbHVlOiBzZXRSZWNvaWxWYWx1ZSQxLFxuICBzZXRVbnZhbGlkYXRlZFJlY29pbFZhbHVlOiBzZXRVbnZhbGlkYXRlZFJlY29pbFZhbHVlJDFcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2U7XG5cbmNvbnN0IHtcbiAgdXBkYXRlUmV0YWluQ291bnQ6IHVwZGF0ZVJldGFpbkNvdW50JDFcbn0gPSBSZWNvaWxfUmV0ZW50aW9uO1xuXG5jb25zdCB7XG4gIGdldE5leHRUcmVlU3RhdGVWZXJzaW9uOiBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiQxLFxuICBtYWtlRW1wdHlTdG9yZVN0YXRlOiBtYWtlRW1wdHlTdG9yZVN0YXRlJDFcbn0gPSBSZWNvaWxfU3RhdGU7IC8vIE9wYXF1ZSBhdCB0aGlzIHN1cmZhY2UgYmVjYXVzZSBpdCdzIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgZnJvbSBoZXJlLlxuXG5cbmNvbnN0IHJldGFpbldhcm5pbmcgPSBgXG5SZWNvaWwgU25hcHNob3RzIG9ubHkgbGFzdCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBjYWxsYmFjayB0aGV5IGFyZSBwcm92aWRlZCB0by4gVG8ga2VlcCBhIFNuYXBzaG90IGxvbmdlciwgZG8gdGhpczpcblxuICBjb25zdCByZWxlYXNlID0gc25hcHNob3QucmV0YWluKCk7XG4gIHRyeSB7XG4gICAgYXdhaXQgdXNlVGhlU25hcHNob3RBc3luY2hyb25vdXNseShzbmFwc2hvdCk7XG4gIH0gZmluYWxseSB7XG4gICAgcmVsZWFzZSgpO1xuICB9XG5cblRoaXMgaXMgY3VycmVudGx5IGEgREVWLW9ubHkgd2FybmluZyBidXQgd2lsbCBiZWNvbWUgYSB0aHJvd24gZXhjZXB0aW9uIGluIHRoZSBuZXh0IHJlbGVhc2Ugb2YgUmVjb2lsLlxuYDsgLy8gQSBcIlNuYXBzaG90XCIgaXMgXCJyZWFkLW9ubHlcIiBhbmQgY2FwdHVyZXMgYSBzcGVjaWZpYyBzZXQgb2YgdmFsdWVzIG9mIGF0b21zLlxuLy8gSG93ZXZlciwgdGhlIGRhdGEtZmxvdy1ncmFwaCBhbmQgc2VsZWN0b3IgdmFsdWVzIG1heSBldm9sdmUgYXMgc2VsZWN0b3Jcbi8vIGV2YWx1YXRpb24gZnVuY3Rpb25zIGFyZSBleGVjdXRlZCBhbmQgYXN5bmMgc2VsZWN0b3JzIHJlc29sdmUuXG5cbmNsYXNzIFNuYXBzaG90IHtcbiAgY29uc3RydWN0b3Ioc3RvcmVTdGF0ZSkge1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9zdG9yZVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3JlZkNvdW50XCIsIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2V0TG9hZGFibGVcIiwgcmVjb2lsVmFsdWUgPT4ge1xuICAgICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7XG4gICAgICByZXR1cm4gZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDEodGhpcy5fc3RvcmUsIHJlY29pbFZhbHVlKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdldFByb21pc2VcIiwgcmVjb2lsVmFsdWUgPT4ge1xuICAgICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7XG4gICAgICByZXR1cm4gdGhpcy5nZXRMb2FkYWJsZShyZWNvaWxWYWx1ZSkudG9Qcm9taXNlKCk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJnZXROb2Rlc19VTlNUQUJMRVwiLCBvcHQgPT4ge1xuICAgICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7IC8vIFRPRE8gRGVhbCB3aXRoIG1vZGlmaWVkIHNlbGVjdG9yc1xuXG4gICAgICBpZiAoKG9wdCA9PT0gbnVsbCB8fCBvcHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdC5pc01vZGlmaWVkKSA9PT0gdHJ1ZSkge1xuICAgICAgICBpZiAoKG9wdCA9PT0gbnVsbCB8fCBvcHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdC5pc0luaXRpYWxpemVkKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX3N0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWU7XG5cbiAgICAgICAgcmV0dXJuIHJlY29pbFZhbHVlc0ZvcktleXMkMihzdGF0ZS5kaXJ0eUF0b21zKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga25vd25BdG9tcyA9IHRoaXMuX3N0b3JlLmdldFN0YXRlKCkua25vd25BdG9tcztcblxuICAgICAgY29uc3Qga25vd25TZWxlY3RvcnMgPSB0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpLmtub3duU2VsZWN0b3JzO1xuXG4gICAgICByZXR1cm4gKG9wdCA9PT0gbnVsbCB8fCBvcHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdC5pc0luaXRpYWxpemVkKSA9PSBudWxsID8gcmVjb2lsVmFsdWVzJDEudmFsdWVzKCkgOiBvcHQuaXNJbml0aWFsaXplZCA9PT0gdHJ1ZSA/IHJlY29pbFZhbHVlc0ZvcktleXMkMihSZWNvaWxfY29uY2F0SXRlcmFibGVzKFt0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpLmtub3duQXRvbXMsIHRoaXMuX3N0b3JlLmdldFN0YXRlKCkua25vd25TZWxlY3RvcnNdKSkgOiBSZWNvaWxfZmlsdGVySXRlcmFibGUocmVjb2lsVmFsdWVzJDEudmFsdWVzKCksICh7XG4gICAgICAgIGtleVxuICAgICAgfSkgPT4gIWtub3duQXRvbXMuaGFzKGtleSkgJiYgIWtub3duU2VsZWN0b3JzLmhhcyhrZXkpKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdldEluZm9fVU5TVEFCTEVcIiwgKHtcbiAgICAgIGtleVxuICAgIH0pID0+IHtcbiAgICAgIHRoaXMuY2hlY2tSZWZDb3VudF9JTlRFUk5BTCgpO1xuICAgICAgcmV0dXJuIHBlZWtOb2RlSW5mbyQxKHRoaXMuX3N0b3JlLCB0aGlzLl9zdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlLCBrZXkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwibWFwXCIsIG1hcHBlciA9PiB7XG4gICAgICB0aGlzLmNoZWNrUmVmQ291bnRfSU5URVJOQUwoKTtcbiAgICAgIGNvbnN0IG11dGFibGVTbmFwc2hvdCA9IG5ldyBNdXRhYmxlU25hcHNob3QodGhpcywgYmF0Y2hVcGRhdGVzJDEpO1xuICAgICAgbWFwcGVyKG11dGFibGVTbmFwc2hvdCk7IC8vIGlmIHJlbW92aW5nIGJhdGNoVXBkYXRlcyBmcm9tIGBzZXRgIGFkZCBpdCBoZXJlXG5cbiAgICAgIHJldHVybiBjbG9uZVNuYXBzaG90KG11dGFibGVTbmFwc2hvdC5nZXRTdG9yZV9JTlRFUk5BTCgpKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFzeW5jTWFwXCIsIGFzeW5jIG1hcHBlciA9PiB7XG4gICAgICB0aGlzLmNoZWNrUmVmQ291bnRfSU5URVJOQUwoKTtcbiAgICAgIGNvbnN0IG11dGFibGVTbmFwc2hvdCA9IG5ldyBNdXRhYmxlU25hcHNob3QodGhpcywgYmF0Y2hVcGRhdGVzJDEpO1xuICAgICAgYXdhaXQgbWFwcGVyKG11dGFibGVTbmFwc2hvdCk7XG4gICAgICByZXR1cm4gY2xvbmVTbmFwc2hvdChtdXRhYmxlU25hcHNob3QuZ2V0U3RvcmVfSU5URVJOQUwoKSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9zdG9yZSA9IHtcbiAgICAgIGdldFN0YXRlOiAoKSA9PiBzdG9yZVN0YXRlLFxuICAgICAgcmVwbGFjZVN0YXRlOiByZXBsYWNlciA9PiB7XG4gICAgICAgIHN0b3JlU3RhdGUuY3VycmVudFRyZWUgPSByZXBsYWNlcihzdG9yZVN0YXRlLmN1cnJlbnRUcmVlKTsgLy8gbm8gYmF0Y2hpbmcgc28gbmV4dFRyZWUgaXMgbmV2ZXIgYWN0aXZlXG4gICAgICB9LFxuICAgICAgZ2V0R3JhcGg6IHZlcnNpb24gPT4ge1xuICAgICAgICBjb25zdCBncmFwaHMgPSBzdG9yZVN0YXRlLmdyYXBoc0J5VmVyc2lvbjtcblxuICAgICAgICBpZiAoZ3JhcGhzLmhhcyh2ZXJzaW9uKSkge1xuICAgICAgICAgIHJldHVybiBSZWNvaWxfbnVsbHRocm93cyhncmFwaHMuZ2V0KHZlcnNpb24pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld0dyYXBoID0gZ3JhcGgkMigpO1xuICAgICAgICBncmFwaHMuc2V0KHZlcnNpb24sIG5ld0dyYXBoKTtcbiAgICAgICAgcmV0dXJuIG5ld0dyYXBoO1xuICAgICAgfSxcbiAgICAgIHN1YnNjcmliZVRvVHJhbnNhY3Rpb25zOiAoKSA9PiAoe1xuICAgICAgICByZWxlYXNlOiAoKSA9PiB7fVxuICAgICAgfSksXG4gICAgICBhZGRUcmFuc2FjdGlvbk1ldGFkYXRhOiAoKSA9PiB7XG4gICAgICAgIHRocm93IFJlY29pbF9lcnIoJ0Nhbm5vdCBzdWJzY3JpYmUgdG8gU25hcHNob3RzJyk7XG4gICAgICB9XG4gICAgfTsgLy8gSW5pdGlhbGl6ZSBhbnkgbm9kZXMgdGhhdCBhcmUgbGl2ZSBpbiB0aGUgcGFyZW50IHN0b3JlIChwcmltYXJpbHkgc28gdGhhdCB0aGlzXG4gICAgLy8gc25hcHNob3QgZ2V0cyBjb3VudGVkIHRvd2FyZHMgdGhlIG5vZGUncyBsaXZlIHN0b3JlcyBjb3VudCkuXG5cbiAgICBmb3IgKGNvbnN0IG5vZGVLZXkgb2YgdGhpcy5fc3RvcmUuZ2V0U3RhdGUoKS5ub2RlQ2xlYW51cEZ1bmN0aW9ucy5rZXlzKCkpIHtcbiAgICAgIGluaXRpYWxpemVOb2RlSWZOZXdUb1N0b3JlJDEodGhpcy5fc3RvcmUsIHN0b3JlU3RhdGUuY3VycmVudFRyZWUsIG5vZGVLZXksICdnZXQnKTtcbiAgICAgIHVwZGF0ZVJldGFpbkNvdW50JDEodGhpcy5fc3RvcmUsIG5vZGVLZXksIDEpO1xuICAgIH1cblxuICAgIHRoaXMucmV0YWluKCk7XG4gICAgdGhpcy5hdXRvcmVsZWFzZV9JTlRFUk5BTCgpO1xuICB9XG5cbiAgcmV0YWluKCkge1xuICAgIGlmICghUmVjb2lsX2dreF8xKCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgICByZXR1cm4gKCkgPT4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHRoaXMuX3JlZkNvdW50Kys7XG4gICAgbGV0IHJlbGVhc2VkID0gZmFsc2U7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICghcmVsZWFzZWQpIHtcbiAgICAgICAgcmVsZWFzZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlbGVhc2VfSU5URVJOQUwoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgYXV0b3JlbGVhc2VfSU5URVJOQUwoKSB7XG4gICAgaWYgKCFSZWNvaWxfZ2t4XzEoJ3JlY29pbF9tZW1vcnlfbWFuYWdhbWVudF8yMDIwJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSJDEpIHtcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHRoaXMucmVsZWFzZV9JTlRFUk5BTCgpLCAwKTtcbiAgICB9XG4gIH1cblxuICByZWxlYXNlX0lOVEVSTkFMKCkge1xuICAgIGlmICghUmVjb2lsX2dreF8xKCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fcmVmQ291bnQtLTtcblxuICAgIGlmICh0aGlzLl9yZWZDb3VudCA9PT0gMCkgO1xuICB9XG5cbiAgY2hlY2tSZWZDb3VudF9JTlRFUk5BTCgpIHtcbiAgICBpZiAoUmVjb2lsX2dreF8xKCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpICYmIHRoaXMuX3JlZkNvdW50IDw9IDApIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKHJldGFpbldhcm5pbmcpO1xuICAgICAgfSAvLyBXaGF0IHdlIHdpbGwgc2hpcCBsYXRlcjpcbiAgICAgIC8vIHRocm93IGVycihyZXRhaW5XYXJuaW5nKTtcblxuICAgIH1cbiAgfVxuXG4gIGdldFN0b3JlX0lOVEVSTkFMKCkge1xuICAgIHRoaXMuY2hlY2tSZWZDb3VudF9JTlRFUk5BTCgpO1xuICAgIHJldHVybiB0aGlzLl9zdG9yZTtcbiAgfVxuXG4gIGdldElEKCkge1xuICAgIHRoaXMuY2hlY2tSZWZDb3VudF9JTlRFUk5BTCgpO1xuICAgIHJldHVybiB0aGlzLmdldElEX0lOVEVSTkFMKCk7XG4gIH1cblxuICBnZXRJRF9JTlRFUk5BTCgpIHtcbiAgICB0aGlzLmNoZWNrUmVmQ291bnRfSU5URVJOQUwoKTtcbiAgICByZXR1cm4gdGhpcy5fc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZS5zdGF0ZUlEO1xuICB9IC8vIFdlIHdhbnQgdG8gYWxsb3cgdGhlIG1ldGhvZHMgdG8gYmUgZGVzdHJ1Y3R1cmVkIGFuZCB1c2VkIGFzIGFjY2Vzc29yc1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZmItd3d3L2V4dHJhLWFycm93LWluaXRpYWxpemVyXG5cblxufVxuXG5mdW5jdGlvbiBjbG9uZVN0b3JlU3RhdGUoc3RvcmUsIHRyZWVTdGF0ZSwgYnVtcFZlcnNpb24gPSBmYWxzZSkge1xuICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgY29uc3QgdmVyc2lvbiA9IGJ1bXBWZXJzaW9uID8gZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24kMSgpIDogdHJlZVN0YXRlLnZlcnNpb247XG4gIHJldHVybiB7XG4gICAgY3VycmVudFRyZWU6IGJ1bXBWZXJzaW9uID8ge1xuICAgICAgLy8gVE9ETyBzbmFwc2hvdHMgc2hvdWxkbid0IHJlYWxseSBoYXZlIHZlcnNpb25zIGJlY2F1c2UgYSBuZXcgdmVyc2lvbiBudW1iZXJcbiAgICAgIC8vIGlzIGFsd2F5cyBhc3NpZ25lZCB3aGVuIHRoZSBzbmFwc2hvdCBpcyBnb25lIHRvLlxuICAgICAgdmVyc2lvbixcbiAgICAgIHN0YXRlSUQ6IHZlcnNpb24sXG4gICAgICB0cmFuc2FjdGlvbk1ldGFkYXRhOiB7IC4uLnRyZWVTdGF0ZS50cmFuc2FjdGlvbk1ldGFkYXRhXG4gICAgICB9LFxuICAgICAgZGlydHlBdG9tczogbmV3IFNldCh0cmVlU3RhdGUuZGlydHlBdG9tcyksXG4gICAgICBhdG9tVmFsdWVzOiB0cmVlU3RhdGUuYXRvbVZhbHVlcy5jbG9uZSgpLFxuICAgICAgbm9udmFsaWRhdGVkQXRvbXM6IHRyZWVTdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5jbG9uZSgpXG4gICAgfSA6IHRyZWVTdGF0ZSxcbiAgICBjb21taXREZXB0aDogMCxcbiAgICBuZXh0VHJlZTogbnVsbCxcbiAgICBwcmV2aW91c1RyZWU6IG51bGwsXG4gICAga25vd25BdG9tczogbmV3IFNldChzdG9yZVN0YXRlLmtub3duQXRvbXMpLFxuICAgIC8vIEZJWE1FIGhlcmUncyBhIGNvcHlcbiAgICBrbm93blNlbGVjdG9yczogbmV3IFNldChzdG9yZVN0YXRlLmtub3duU2VsZWN0b3JzKSxcbiAgICAvLyBGSVhNRSBoZXJlJ3MgYSBjb3B5XG4gICAgdHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zOiBuZXcgTWFwKCksXG4gICAgbm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uczogbmV3IE1hcCgpLFxuICAgIG5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnM6IG5ldyBNYXAoKSxcbiAgICBxdWV1ZWRDb21wb25lbnRDYWxsYmFja3NfREVQUkVDQVRFRDogW10sXG4gICAgc3VzcGVuZGVkQ29tcG9uZW50UmVzb2x2ZXJzOiBuZXcgU2V0KCksXG4gICAgZ3JhcGhzQnlWZXJzaW9uOiBuZXcgTWFwKCkuc2V0KHZlcnNpb24sIHN0b3JlLmdldEdyYXBoKHRyZWVTdGF0ZS52ZXJzaW9uKSksXG4gICAgdmVyc2lvbnNVc2VkQnlDb21wb25lbnQ6IG5ldyBNYXAoKSxcbiAgICByZXRlbnRpb246IHtcbiAgICAgIHJlZmVyZW5jZUNvdW50czogbmV3IE1hcCgpLFxuICAgICAgbm9kZXNSZXRhaW5lZEJ5Wm9uZTogbmV3IE1hcCgpLFxuICAgICAgcmV0YWluYWJsZXNUb0NoZWNrRm9yUmVsZWFzZTogbmV3IFNldCgpXG4gICAgfSxcbiAgICBub2RlQ2xlYW51cEZ1bmN0aW9uczogbmV3IE1hcCgpXG4gIH07XG59IC8vIEZhY3RvcnkgdG8gYnVpbGQgYSBmcmVzaCBzbmFwc2hvdFxuXG5cbmZ1bmN0aW9uIGZyZXNoU25hcHNob3QoaW5pdGlhbGl6ZVN0YXRlKSB7XG4gIGNvbnN0IHNuYXBzaG90ID0gbmV3IFNuYXBzaG90KG1ha2VFbXB0eVN0b3JlU3RhdGUkMSgpKTtcbiAgcmV0dXJuIGluaXRpYWxpemVTdGF0ZSAhPSBudWxsID8gc25hcHNob3QubWFwKGluaXRpYWxpemVTdGF0ZSkgOiBzbmFwc2hvdDtcbn0gLy8gRmFjdG9yeSB0byBjbG9uZSBhIHNuYXBhaG90IHN0YXRlXG5cblxuZnVuY3Rpb24gY2xvbmVTbmFwc2hvdChzdG9yZSwgdmVyc2lvbiA9ICdjdXJyZW50Jykge1xuICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgY29uc3QgdHJlZVN0YXRlID0gdmVyc2lvbiA9PT0gJ2N1cnJlbnQnID8gc3RvcmVTdGF0ZS5jdXJyZW50VHJlZSA6IFJlY29pbF9udWxsdGhyb3dzKHN0b3JlU3RhdGUucHJldmlvdXNUcmVlKTtcbiAgcmV0dXJuIG5ldyBTbmFwc2hvdChjbG9uZVN0b3JlU3RhdGUoc3RvcmUsIHRyZWVTdGF0ZSkpO1xufVxuXG5jbGFzcyBNdXRhYmxlU25hcHNob3QgZXh0ZW5kcyBTbmFwc2hvdCB7XG4gIGNvbnN0cnVjdG9yKHNuYXBzaG90LCBiYXRjaCkge1xuICAgIHN1cGVyKGNsb25lU3RvcmVTdGF0ZShzbmFwc2hvdC5nZXRTdG9yZV9JTlRFUk5BTCgpLCBzbmFwc2hvdC5nZXRTdG9yZV9JTlRFUk5BTCgpLmdldFN0YXRlKCkuY3VycmVudFRyZWUsIHRydWUpKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9iYXRjaFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic2V0XCIsIChyZWNvaWxTdGF0ZSwgbmV3VmFsdWVPclVwZGF0ZXIpID0+IHtcbiAgICAgIHRoaXMuY2hlY2tSZWZDb3VudF9JTlRFUk5BTCgpO1xuICAgICAgY29uc3Qgc3RvcmUgPSB0aGlzLmdldFN0b3JlX0lOVEVSTkFMKCk7IC8vIFRoaXMgYmF0Y2hVcGRhdGVzIGVuc3VyZXMgdGhpcyBgc2V0YCBpcyBhcHBsaWVkIGltbWVkaWF0ZWx5IGFuZCB5b3UgY2FuXG4gICAgICAvLyByZWFkIHRoZSB3cml0dGVuIHZhbHVlIGFmdGVyIGNhbGxpbmcgYHNldGAuIEkgd291bGQgbGlrZSB0byByZW1vdmUgdGhpc1xuICAgICAgLy8gYmVoYXZpb3IgYW5kIG9ubHkgYmF0Y2ggaW4gYFNuYXBzaG90Lm1hcGAsIGJ1dCB0aGlzIHdvdWxkIGJlIGEgYnJlYWtpbmdcbiAgICAgIC8vIGNoYW5nZSBwb3RlbnRpYWxseS5cblxuICAgICAgdGhpcy5fYmF0Y2goKCkgPT4ge1xuICAgICAgICB1cGRhdGVSZXRhaW5Db3VudCQxKHN0b3JlLCByZWNvaWxTdGF0ZS5rZXksIDEpO1xuICAgICAgICBzZXRSZWNvaWxWYWx1ZSQxKHRoaXMuZ2V0U3RvcmVfSU5URVJOQUwoKSwgcmVjb2lsU3RhdGUsIG5ld1ZhbHVlT3JVcGRhdGVyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicmVzZXRcIiwgcmVjb2lsU3RhdGUgPT4ge1xuICAgICAgdGhpcy5jaGVja1JlZkNvdW50X0lOVEVSTkFMKCk7XG4gICAgICBjb25zdCBzdG9yZSA9IHRoaXMuZ2V0U3RvcmVfSU5URVJOQUwoKTsgLy8gU2VlIG5vdGUgYXQgYHNldGAgYWJvdXQgYmF0Y2hlZCB1cGRhdGVzLlxuXG4gICAgICB0aGlzLl9iYXRjaCgoKSA9PiB7XG4gICAgICAgIHVwZGF0ZVJldGFpbkNvdW50JDEoc3RvcmUsIHJlY29pbFN0YXRlLmtleSwgMSk7XG4gICAgICAgIHNldFJlY29pbFZhbHVlJDEodGhpcy5nZXRTdG9yZV9JTlRFUk5BTCgpLCByZWNvaWxTdGF0ZSwgREVGQVVMVF9WQUxVRSQxKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzX0RFUFJFQ0FURURcIiwgdmFsdWVzID0+IHtcbiAgICAgIHRoaXMuY2hlY2tSZWZDb3VudF9JTlRFUk5BTCgpO1xuICAgICAgY29uc3Qgc3RvcmUgPSB0aGlzLmdldFN0b3JlX0lOVEVSTkFMKCk7IC8vIFNlZSBub3RlIGF0IGBzZXRgIGFib3V0IGJhdGNoZWQgdXBkYXRlcy5cblxuICAgICAgYmF0Y2hVcGRhdGVzJDEoKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IFtrLCB2XSBvZiB2YWx1ZXMuZW50cmllcygpKSB7XG4gICAgICAgICAgdXBkYXRlUmV0YWluQ291bnQkMShzdG9yZSwgaywgMSk7XG4gICAgICAgICAgc2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZSQxKHN0b3JlLCBuZXcgQWJzdHJhY3RSZWNvaWxWYWx1ZSQyKGspLCB2KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9iYXRjaCA9IGJhdGNoO1xuICB9IC8vIFdlIHdhbnQgdG8gYWxsb3cgdGhlIG1ldGhvZHMgdG8gYmUgZGVzdHJ1Y3R1cmVkIGFuZCB1c2VkIGFzIGFjY2Vzc29yc1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZmItd3d3L2V4dHJhLWFycm93LWluaXRpYWxpemVyXG5cblxufVxuXG52YXIgUmVjb2lsX1NuYXBzaG90ID0ge1xuICBTbmFwc2hvdCxcbiAgTXV0YWJsZVNuYXBzaG90LFxuICBmcmVzaFNuYXBzaG90LFxuICBjbG9uZVNuYXBzaG90XG59O1xuXG52YXIgUmVjb2lsX1NuYXBzaG90XzEgPSBSZWNvaWxfU25hcHNob3QuU25hcHNob3Q7XG52YXIgUmVjb2lsX1NuYXBzaG90XzIgPSBSZWNvaWxfU25hcHNob3QuTXV0YWJsZVNuYXBzaG90O1xudmFyIFJlY29pbF9TbmFwc2hvdF8zID0gUmVjb2lsX1NuYXBzaG90LmZyZXNoU25hcHNob3Q7XG52YXIgUmVjb2lsX1NuYXBzaG90XzQgPSBSZWNvaWxfU25hcHNob3QuY2xvbmVTbmFwc2hvdDtcblxudmFyIFJlY29pbF9TbmFwc2hvdCQxID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIFNuYXBzaG90OiBSZWNvaWxfU25hcHNob3RfMSxcbiAgTXV0YWJsZVNuYXBzaG90OiBSZWNvaWxfU25hcHNob3RfMixcbiAgZnJlc2hTbmFwc2hvdDogUmVjb2lsX1NuYXBzaG90XzMsXG4gIGNsb25lU25hcHNob3Q6IFJlY29pbF9TbmFwc2hvdF80XG59KTtcblxuLy8gQGZiLW9ubHk6IGNvbnN0IFJlY29pbHVzYWdlbG9nRXZlbnQgPSByZXF1aXJlKCdSZWNvaWx1c2FnZWxvZ0V2ZW50Jyk7XG4vLyBAZmItb25seTogY29uc3QgUmVjb2lsVXNhZ2VMb2dGYWxjb0V2ZW50ID0gcmVxdWlyZSgnUmVjb2lsVXNhZ2VMb2dGYWxjb0V2ZW50Jyk7XG4vLyBAZmItb25seTogY29uc3QgVVJJID0gcmVxdWlyZSgnVVJJJyk7XG5cblxuY29uc3Qge1xuICBnZXROZXh0VHJlZVN0YXRlVmVyc2lvbjogZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24kMixcbiAgbWFrZUVtcHR5U3RvcmVTdGF0ZTogbWFrZUVtcHR5U3RvcmVTdGF0ZSQyXG59ID0gUmVjb2lsX1N0YXRlO1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5jb25zdCB7XG4gIGNsZWFuVXBOb2RlOiBjbGVhblVwTm9kZSQyLFxuICBnZXREb3duc3RyZWFtTm9kZXM6IGdldERvd25zdHJlYW1Ob2RlcyQyLFxuICBzZXROb2RlVmFsdWU6IHNldE5vZGVWYWx1ZSQyLFxuICBzZXRVbnZhbGlkYXRlZEF0b21WYWx1ZV9ERVBSRUNBVEVEOiBzZXRVbnZhbGlkYXRlZEF0b21WYWx1ZV9ERVBSRUNBVEVEJDFcbn0gPSBSZWNvaWxfRnVuY3Rpb25hbENvcmU7XG5cbmNvbnN0IHtcbiAgZ3JhcGg6IGdyYXBoJDNcbn0gPSBSZWNvaWxfR3JhcGg7XG5cbmNvbnN0IHtcbiAgY2xvbmVHcmFwaDogY2xvbmVHcmFwaCQxXG59ID0gUmVjb2lsX0dyYXBoO1xuXG5jb25zdCB7XG4gIGFwcGx5QXRvbVZhbHVlV3JpdGVzOiBhcHBseUF0b21WYWx1ZVdyaXRlcyQxXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlSW50ZXJmYWNlO1xuXG5jb25zdCB7XG4gIHJlbGVhc2VTY2hlZHVsZWRSZXRhaW5hYmxlc05vdzogcmVsZWFzZVNjaGVkdWxlZFJldGFpbmFibGVzTm93JDFcbn0gPSBSZWNvaWxfUmV0ZW50aW9uO1xuXG5jb25zdCB7XG4gIGZyZXNoU25hcHNob3Q6IGZyZXNoU25hcHNob3QkMVxufSA9IFJlY29pbF9TbmFwc2hvdCQxO1xuXG5cblxuY29uc3Qge1xuICB1c2VDYWxsYmFjayxcbiAgdXNlQ29udGV4dCxcbiAgdXNlRWZmZWN0LFxuICB1c2VNZW1vLFxuICB1c2VSZWYsXG4gIHVzZVN0YXRlXG59ID0gcmVhY3Q7XG5cbmZ1bmN0aW9uIG5vdEluQUNvbnRleHQoKSB7XG4gIHRocm93IFJlY29pbF9lcnIoJ1RoaXMgY29tcG9uZW50IG11c3QgYmUgdXNlZCBpbnNpZGUgYSA8UmVjb2lsUm9vdD4gY29tcG9uZW50LicpO1xufVxuXG5jb25zdCBkZWZhdWx0U3RvcmUgPSBPYmplY3QuZnJlZXplKHtcbiAgZ2V0U3RhdGU6IG5vdEluQUNvbnRleHQsXG4gIHJlcGxhY2VTdGF0ZTogbm90SW5BQ29udGV4dCxcbiAgZ2V0R3JhcGg6IG5vdEluQUNvbnRleHQsXG4gIHN1YnNjcmliZVRvVHJhbnNhY3Rpb25zOiBub3RJbkFDb250ZXh0LFxuICBhZGRUcmFuc2FjdGlvbk1ldGFkYXRhOiBub3RJbkFDb250ZXh0XG59KTtcbmxldCBzdGF0ZVJlcGxhY2VySXNCZWluZ0V4ZWN1dGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHN0YXJ0TmV4dFRyZWVJZk5lZWRlZChzdG9yZSkge1xuICBpZiAoc3RhdGVSZXBsYWNlcklzQmVpbmdFeGVjdXRlZCkge1xuICAgIHRocm93IFJlY29pbF9lcnIoJ0FuIGF0b20gdXBkYXRlIHdhcyB0cmlnZ2VyZWQgd2l0aGluIHRoZSBleGVjdXRpb24gb2YgYSBzdGF0ZSB1cGRhdGVyIGZ1bmN0aW9uLiBTdGF0ZSB1cGRhdGVyIGZ1bmN0aW9ucyBwcm92aWRlZCB0byBSZWNvaWwgbXVzdCBiZSBwdXJlIGZ1bmN0aW9ucy4nKTtcbiAgfVxuXG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gIGlmIChzdG9yZVN0YXRlLm5leHRUcmVlID09PSBudWxsKSB7XG4gICAgaWYgKFJlY29pbF9na3hfMSgncmVjb2lsX21lbW9yeV9tYW5hZ2FtZW50XzIwMjAnKSAmJiBSZWNvaWxfZ2t4XzEoJ3JlY29pbF9yZWxlYXNlX29uX2Nhc2NhZGluZ191cGRhdGVfa2lsbHN3aXRjaF8yMDIxJykpIHtcbiAgICAgIC8vIElmIHRoaXMgaXMgYSBjYXNjYWRpbmcgdXBkYXRlICh0aGF0IGlzLCByZW5kZXJpbmcgZHVlIHRvIG9uZSBzdGF0ZSBjaGFuZ2VcbiAgICAgIC8vIGludm9rZXMgYSBzZWNvbmQgc3RhdGUgY2hhbmdlKSwgd2Ugd29uJ3QgaGF2ZSBjbGVhbmVkIHVwIHJldGFpbmFibGVzIHlldFxuICAgICAgLy8gYmVjYXVzZSB0aGlzIG5vcm1hbGx5IGhhcHBlbnMgYWZ0ZXIgbm90aWZ5aW5nIGNvbXBvbmVudHMuIERvIGl0IGJlZm9yZVxuICAgICAgLy8gcHJvY2VlZGluZyB3aXRoIHRoZSBjYXNjYWRpbmcgdXBkYXRlIHNvIHRoYXQgaXQgcmVtYWlucyBwcmVkaWN0YWJsZTpcbiAgICAgIGlmIChzdG9yZVN0YXRlLmNvbW1pdERlcHRoID4gMCkge1xuICAgICAgICByZWxlYXNlU2NoZWR1bGVkUmV0YWluYWJsZXNOb3ckMShzdG9yZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgdmVyc2lvbiA9IHN0b3JlU3RhdGUuY3VycmVudFRyZWUudmVyc2lvbjtcbiAgICBjb25zdCBuZXh0VmVyc2lvbiA9IGdldE5leHRUcmVlU3RhdGVWZXJzaW9uJDIoKTtcbiAgICBzdG9yZVN0YXRlLm5leHRUcmVlID0geyAuLi5zdG9yZVN0YXRlLmN1cnJlbnRUcmVlLFxuICAgICAgdmVyc2lvbjogbmV4dFZlcnNpb24sXG4gICAgICBzdGF0ZUlEOiBuZXh0VmVyc2lvbixcbiAgICAgIGRpcnR5QXRvbXM6IG5ldyBTZXQoKSxcbiAgICAgIHRyYW5zYWN0aW9uTWV0YWRhdGE6IHt9XG4gICAgfTtcbiAgICBzdG9yZVN0YXRlLmdyYXBoc0J5VmVyc2lvbi5zZXQobmV4dFZlcnNpb24sIGNsb25lR3JhcGgkMShSZWNvaWxfbnVsbHRocm93cyhzdG9yZVN0YXRlLmdyYXBoc0J5VmVyc2lvbi5nZXQodmVyc2lvbikpKSk7XG4gIH1cbn1cblxuY29uc3QgQXBwQ29udGV4dCA9IHJlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBjdXJyZW50OiBkZWZhdWx0U3RvcmVcbn0pO1xuXG5jb25zdCB1c2VTdG9yZVJlZiA9ICgpID0+IHVzZUNvbnRleHQoQXBwQ29udGV4dCk7XG5cbmNvbnN0IE11dGFibGVTb3VyY2VDb250ZXh0ID0gcmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTsgLy8gVE9ETyBUMjcxMDU1OTI4MjU5OTY2MFxuXG5mdW5jdGlvbiB1c2VSZWNvaWxNdXRhYmxlU291cmNlKCkge1xuICBjb25zdCBtdXRhYmxlU291cmNlID0gdXNlQ29udGV4dChNdXRhYmxlU291cmNlQ29udGV4dCk7XG5cbiAgaWYgKG11dGFibGVTb3VyY2UgPT0gbnVsbCkge1xuICAgIFJlY29pbF9leHBlY3RhdGlvblZpb2xhdGlvbignQXR0ZW1wdGVkIHRvIHVzZSBhIFJlY29pbCBob29rIG91dHNpZGUgb2YgYSA8UmVjb2lsUm9vdD4uICcgKyAnPFJlY29pbFJvb3Q+IG11c3QgYmUgYW4gYW5jZXN0b3Igb2YgYW55IGNvbXBvbmVudCB0aGF0IHVzZXMgJyArICdSZWNvaWwgaG9va3MuJyk7XG4gIH1cblxuICByZXR1cm4gbXV0YWJsZVNvdXJjZTtcbn1cblxuZnVuY3Rpb24gbm90aWZ5Q29tcG9uZW50cyhzdG9yZSwgc3RvcmVTdGF0ZSwgdHJlZVN0YXRlKSB7XG4gIGNvbnN0IGRlcGVuZGVudE5vZGVzID0gZ2V0RG93bnN0cmVhbU5vZGVzJDIoc3RvcmUsIHRyZWVTdGF0ZSwgdHJlZVN0YXRlLmRpcnR5QXRvbXMpO1xuXG4gIGZvciAoY29uc3Qga2V5IG9mIGRlcGVuZGVudE5vZGVzKSB7XG4gICAgY29uc3QgY29tcHMgPSBzdG9yZVN0YXRlLm5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnMuZ2V0KGtleSk7XG5cbiAgICBpZiAoY29tcHMpIHtcbiAgICAgIGZvciAoY29uc3QgW19zdWJJRCwgW19kZWJ1Z05hbWUsIGNhbGxiYWNrXV0gb2YgY29tcHMpIHtcbiAgICAgICAgY2FsbGJhY2sodHJlZVN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2VuZEVuZE9mQmF0Y2hOb3RpZmljYXRpb25zKHN0b3JlKSB7XG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICBjb25zdCB0cmVlU3RhdGUgPSBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlOyAvLyBJbmZvcm0gdHJhbnNhY3Rpb24gc3Vic2NyaWJlcnMgb2YgdGhlIHRyYW5zYWN0aW9uOlxuXG4gIGNvbnN0IGRpcnR5QXRvbXMgPSB0cmVlU3RhdGUuZGlydHlBdG9tcztcblxuICBpZiAoZGlydHlBdG9tcy5zaXplKSB7XG4gICAgLy8gRXhlY3V0ZSBOb2RlLXNwZWNpZmljIHN1YnNjcmliZXJzIGJlZm9yZSBnbG9iYWwgc3Vic2NyaWJlcnNcbiAgICBmb3IgKGNvbnN0IFtrZXksIHN1YnNjcmlwdGlvbnNdIG9mIHN0b3JlU3RhdGUubm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucykge1xuICAgICAgaWYgKGRpcnR5QXRvbXMuaGFzKGtleSkpIHtcbiAgICAgICAgZm9yIChjb25zdCBbXywgc3Vic2NyaXB0aW9uXSBvZiBzdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgW18sIHN1YnNjcmlwdGlvbl0gb2Ygc3RvcmVTdGF0ZS50cmFuc2FjdGlvblN1YnNjcmlwdGlvbnMpIHtcbiAgICAgIHN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgfVxuXG4gICAgaWYgKCFSZWNvaWxfZ2t4XzEoJ3JlY29pbF9lYXJseV9yZW5kZXJpbmdfMjAyMScpIHx8IHN0b3JlU3RhdGUuc3VzcGVuZGVkQ29tcG9uZW50UmVzb2x2ZXJzLnNpemUpIHtcbiAgICAgIC8vIE5vdGlmeWluZyBjb21wb25lbnRzIGlzIG5lZWRlZCB0byB3YWtlIGZyb20gc3VzcGVuc2UsIGV2ZW4gd2hlbiB1c2luZ1xuICAgICAgLy8gZWFybHkgcmVuZGVyaW5nLlxuICAgICAgbm90aWZ5Q29tcG9uZW50cyhzdG9yZSwgc3RvcmVTdGF0ZSwgdHJlZVN0YXRlKTsgLy8gV2FrZSBhbGwgc3VzcGVuZGVkIGNvbXBvbmVudHMgc28gdGhlIHJpZ2h0IG9uZShzKSBjYW4gdHJ5IHRvIHJlLXJlbmRlci5cbiAgICAgIC8vIFdlIG5lZWQgdG8gd2FrZSB1cCBjb21wb25lbnRzIG5vdCBqdXN0IHdoZW4gc29tZSBhc3luY2hyb25vdXMgc2VsZWN0b3JcbiAgICAgIC8vIHJlc29sdmVkLCBidXQgYWxzbyB3aGVuIGNoYW5naW5nIHN5bmNocm9ub3VzIHZhbHVlcyBiZWNhdXNlIHRoaXMgbWF5IGNhdXNlXG4gICAgICAvLyBhIHNlbGVjdG9yIHRvIGNoYW5nZSBmcm9tIGFzeW5jaHJvbm91cyB0byBzeW5jaHJvbm91cywgaW4gd2hpY2ggY2FzZSB0aGVyZVxuICAgICAgLy8gd291bGQgYmUgbm8gZm9sbG93LXVwIGFzeW5jaHJvbm91cyByZXNvbHV0aW9uIHRvIHdha2UgdXMgdXAuXG4gICAgICAvLyBUT0RPIE9QVElNSVpBVElPTiBPbmx5IHdha2UgdXAgcmVsYXRlZCBkb3duc3RyZWFtIGNvbXBvbmVudHNcblxuICAgICAgc3RvcmVTdGF0ZS5zdXNwZW5kZWRDb21wb25lbnRSZXNvbHZlcnMuZm9yRWFjaChjYiA9PiBjYigpKTtcbiAgICAgIHN0b3JlU3RhdGUuc3VzcGVuZGVkQ29tcG9uZW50UmVzb2x2ZXJzLmNsZWFyKCk7XG4gICAgfVxuICB9IC8vIFNwZWNpYWwgYmVoYXZpb3IgT05MWSBpbnZva2VkIGJ5IHVzZUludGVyZmFjZS5cbiAgLy8gRklYTUUgZGVsZXRlIHF1ZXVlZENvbXBvbmVudENhbGxiYWNrc19ERVBSRUNBVEVEIHdoZW4gZGVsZXRpbmcgdXNlSW50ZXJmYWNlLlxuXG5cbiAgc3RvcmVTdGF0ZS5xdWV1ZWRDb21wb25lbnRDYWxsYmFja3NfREVQUkVDQVRFRC5mb3JFYWNoKGNiID0+IGNiKHRyZWVTdGF0ZSkpO1xuICBzdG9yZVN0YXRlLnF1ZXVlZENvbXBvbmVudENhbGxiYWNrc19ERVBSRUNBVEVELnNwbGljZSgwLCBzdG9yZVN0YXRlLnF1ZXVlZENvbXBvbmVudENhbGxiYWNrc19ERVBSRUNBVEVELmxlbmd0aCk7XG59XG5cbmZ1bmN0aW9uIGVuZEJhdGNoKHN0b3JlUmVmKSB7XG4gIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZVJlZi5jdXJyZW50LmdldFN0YXRlKCk7XG4gIHN0b3JlU3RhdGUuY29tbWl0RGVwdGgrKztcblxuICB0cnkge1xuICAgIGNvbnN0IHtcbiAgICAgIG5leHRUcmVlXG4gICAgfSA9IHN0b3JlU3RhdGU7IC8vIElnbm9yZSBjb21taXRzIHRoYXQgYXJlIG5vdCBiZWNhdXNlIG9mIFJlY29pbCB0cmFuc2FjdGlvbnMgLS0gbmFtZWx5LFxuICAgIC8vIGJlY2F1c2Ugc29tZXRoaW5nIGFib3ZlIFJlY29pbFJvb3QgcmUtcmVuZGVyZWQ6XG5cbiAgICBpZiAobmV4dFRyZWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIG5leHRUcmVlIGlzIG5vdyBjb21taXR0ZWQgLS0gbm90ZSB0aGF0IGNvcHlpbmcgYW5kIHJlc2V0IG9jY3VycyB3aGVuXG4gICAgLy8gYSB0cmFuc2FjdGlvbiBiZWdpbnMsIGluIHN0YXJ0TmV4dFRyZWVJZk5lZWRlZDpcblxuXG4gICAgc3RvcmVTdGF0ZS5wcmV2aW91c1RyZWUgPSBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlO1xuICAgIHN0b3JlU3RhdGUuY3VycmVudFRyZWUgPSBuZXh0VHJlZTtcbiAgICBzdG9yZVN0YXRlLm5leHRUcmVlID0gbnVsbDtcbiAgICBzZW5kRW5kT2ZCYXRjaE5vdGlmaWNhdGlvbnMoc3RvcmVSZWYuY3VycmVudCk7XG5cbiAgICBpZiAoc3RvcmVTdGF0ZS5wcmV2aW91c1RyZWUgIT0gbnVsbCkge1xuICAgICAgc3RvcmVTdGF0ZS5ncmFwaHNCeVZlcnNpb24uZGVsZXRlKHN0b3JlU3RhdGUucHJldmlvdXNUcmVlLnZlcnNpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBSZWNvaWxfcmVjb3ZlcmFibGVWaW9sYXRpb24oJ0VuZGVkIGJhdGNoIHdpdGggbm8gcHJldmlvdXMgc3RhdGUsIHdoaWNoIGlzIHVuZXhwZWN0ZWQnLCAncmVjb2lsJyk7XG4gICAgfVxuXG4gICAgc3RvcmVTdGF0ZS5wcmV2aW91c1RyZWUgPSBudWxsO1xuXG4gICAgaWYgKFJlY29pbF9na3hfMSgncmVjb2lsX21lbW9yeV9tYW5hZ2FtZW50XzIwMjAnKSkge1xuICAgICAgcmVsZWFzZVNjaGVkdWxlZFJldGFpbmFibGVzTm93JDEoc3RvcmVSZWYuY3VycmVudCk7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIHN0b3JlU3RhdGUuY29tbWl0RGVwdGgtLTtcbiAgfVxufVxuLypcbiAqIFRoZSBwdXJwb3NlIG9mIHRoZSBCYXRjaGVyIGlzIHRvIG9ic2VydmUgd2hlbiBSZWFjdCBiYXRjaGVzIGVuZCBzbyB0aGF0XG4gKiBSZWNvaWwgc3RhdGUgY2hhbmdlcyBjYW4gYmUgYmF0Y2hlZC4gV2hlbmV2ZXIgUmVjb2lsIHN0YXRlIGNoYW5nZXMsIHdlIGNhbGxcbiAqIHNldFN0YXRlIG9uIHRoZSBiYXRjaGVyLiBUaGVuIHdlIHdhaXQgZm9yIHRoYXQgY2hhbmdlIHRvIGJlIGNvbW1pdHRlZCwgd2hpY2hcbiAqIHNpZ25pZmllcyB0aGUgZW5kIG9mIHRoZSBiYXRjaC4gVGhhdCdzIHdoZW4gd2UgcmVzcG9uZCB0byB0aGUgUmVjb2lsIGNoYW5nZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIEJhdGNoZXIoe1xuICBzZXROb3RpZnlCYXRjaGVyT2ZDaGFuZ2Vcbn0pIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZigpO1xuICBjb25zdCBbXywgc2V0U3RhdGVdID0gdXNlU3RhdGUoW10pO1xuICBzZXROb3RpZnlCYXRjaGVyT2ZDaGFuZ2UoKCkgPT4gc2V0U3RhdGUoe30pKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBlbnF1ZXVlRXhlY3V0aW9uIHJ1bnMgdGhpcyBmdW5jdGlvbiBpbW1lZGlhdGVseTsgaXQgaXMgb25seSB1c2VkIHRvXG4gICAgLy8gbWFuaXB1bGF0ZSB0aGUgb3JkZXIgb2YgdXNlRWZmZWN0cyBkdXJpbmcgdGVzdHMsIHNpbmNlIFJlYWN0IHNlZW1zIHRvXG4gICAgLy8gY2FsbCB1c2VFZmZlY3QgaW4gYW4gdW5wcmVkaWN0YWJsZSBvcmRlciBzb21ldGltZXMuXG4gICAgUmVjb2lsX1F1ZXVlLmVucXVldWVFeGVjdXRpb24oJ0JhdGNoZXInLCAoKSA9PiB7XG4gICAgICBlbmRCYXRjaChzdG9yZVJlZik7XG4gICAgfSk7XG4gIH0pOyAvLyBJZiBhbiBhc3luY2hyb25vdXMgc2VsZWN0b3IgcmVzb2x2ZXMgYWZ0ZXIgdGhlIEJhdGNoZXIgaXMgdW5tb3VudGVkLFxuICAvLyBub3RpZnlCYXRjaGVyT2ZDaGFuZ2Ugd2lsbCBzdGlsbCBiZSBjYWxsZWQuIEFuIGVycm9yIGdldHMgdGhyb3duIHdoZW5ldmVyXG4gIC8vIHNldFN0YXRlIGlzIGNhbGxlZCBhZnRlciBhIGNvbXBvbmVudCBpcyBhbHJlYWR5IHVubW91bnRlZCwgc28gdGhpcyBzZXRzXG4gIC8vIG5vdGlmeUJhdGNoZXJPZkNoYW5nZSB0byBiZSBhIG5vLW9wLlxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNldE5vdGlmeUJhdGNoZXJPZkNoYW5nZSgoKSA9PiB7fSk7XG4gICAgfTtcbiAgfSwgW3NldE5vdGlmeUJhdGNoZXJPZkNoYW5nZV0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgIXdpbmRvdy4kcmVjb2lsRGVidWdTdGF0ZXMpIHtcbiAgICB3aW5kb3cuJHJlY29pbERlYnVnU3RhdGVzID0gW107XG4gIH1cbn0gLy8gV2hlbiByZW1vdmluZyB0aGlzIGRlcHJlY2F0ZWQgZnVuY3Rpb24sIHJlbW92ZSBzdGF0ZUJ5U2V0dGluZ1JlY29pbFZhbHVlXG4vLyB3aGljaCB3aWxsIG5vIGxvbmdlciBiZSBuZWVkZWQuXG5cblxuZnVuY3Rpb24gaW5pdGlhbFN0b3JlU3RhdGVfREVQUkVDQVRFRChzdG9yZSwgaW5pdGlhbGl6ZVN0YXRlKSB7XG4gIGNvbnN0IGluaXRpYWwgPSBtYWtlRW1wdHlTdG9yZVN0YXRlJDIoKTtcbiAgaW5pdGlhbGl6ZVN0YXRlKHtcbiAgICAvLyAkRmxvd0ZpeE1lW2VzY2FwZWQtZ2VuZXJpY11cbiAgICBzZXQ6IChhdG9tLCB2YWx1ZSkgPT4ge1xuICAgICAgY29uc3Qgc3RhdGUgPSBpbml0aWFsLmN1cnJlbnRUcmVlO1xuICAgICAgY29uc3Qgd3JpdGVzID0gc2V0Tm9kZVZhbHVlJDIoc3RvcmUsIHN0YXRlLCBhdG9tLmtleSwgdmFsdWUpO1xuICAgICAgY29uc3Qgd3JpdHRlbk5vZGVzID0gbmV3IFNldCh3cml0ZXMua2V5cygpKTtcbiAgICAgIGNvbnN0IG5vbnZhbGlkYXRlZEF0b21zID0gc3RhdGUubm9udmFsaWRhdGVkQXRvbXMuY2xvbmUoKTtcblxuICAgICAgZm9yIChjb25zdCBuIG9mIHdyaXR0ZW5Ob2Rlcykge1xuICAgICAgICBub252YWxpZGF0ZWRBdG9tcy5kZWxldGUobik7XG4gICAgICB9XG5cbiAgICAgIGluaXRpYWwuY3VycmVudFRyZWUgPSB7IC4uLnN0YXRlLFxuICAgICAgICBkaXJ0eUF0b21zOiBSZWNvaWxfdW5pb25TZXRzKHN0YXRlLmRpcnR5QXRvbXMsIHdyaXR0ZW5Ob2RlcyksXG4gICAgICAgIGF0b21WYWx1ZXM6IGFwcGx5QXRvbVZhbHVlV3JpdGVzJDEoc3RhdGUuYXRvbVZhbHVlcywgd3JpdGVzKSxcbiAgICAgICAgLy8gTkI6IFBMRUFTRSB1bi1leHBvcnQgYXBwbHlBdG9tVmFsdWVXcml0ZXMgd2hlbiBkZWxldGluZyB0aGlzIGNvZGVcbiAgICAgICAgbm9udmFsaWRhdGVkQXRvbXNcbiAgICAgIH07XG4gICAgfSxcbiAgICBzZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXM6IGF0b21WYWx1ZXMgPT4ge1xuICAgICAgLy8gRklYTUUgcmVwbGFjZSB0aGlzIHdpdGggYSBtdXRhdGl2ZSBsb29wXG4gICAgICBhdG9tVmFsdWVzLmZvckVhY2goKHYsIGspID0+IHtcbiAgICAgICAgaW5pdGlhbC5jdXJyZW50VHJlZSA9IHNldFVudmFsaWRhdGVkQXRvbVZhbHVlX0RFUFJFQ0FURUQkMShpbml0aWFsLmN1cnJlbnRUcmVlLCBrLCB2KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpbml0aWFsO1xufVxuXG5mdW5jdGlvbiBpbml0aWFsU3RvcmVTdGF0ZShpbml0aWFsaXplU3RhdGUpIHtcbiAgY29uc3Qgc25hcHNob3QgPSBmcmVzaFNuYXBzaG90JDEoKS5tYXAoaW5pdGlhbGl6ZVN0YXRlKTtcbiAgcmV0dXJuIHNuYXBzaG90LmdldFN0b3JlX0lOVEVSTkFMKCkuZ2V0U3RhdGUoKTtcbn1cblxubGV0IG5leHRJRCA9IDA7XG5cbmZ1bmN0aW9uIFJlY29pbFJvb3RfSU5URVJOQUwoe1xuICBpbml0aWFsaXplU3RhdGVfREVQUkVDQVRFRCxcbiAgaW5pdGlhbGl6ZVN0YXRlLFxuICBzdG9yZV9JTlRFUk5BTDogc3RvcmVQcm9wLFxuICAvLyBGb3IgdXNlIHdpdGggUmVhY3QgXCJjb250ZXh0IGJyaWRnaW5nXCJcbiAgY2hpbGRyZW5cbn0pIHtcbiAgdmFyIF9jcmVhdGVNdXRhYmxlU291cmNlO1xuXG4gIC8vIHByZXR0aWVyLWlnbm9yZVxuICAvLyBAZmItb25seTogdXNlRWZmZWN0KCgpID0+IHtcbiAgLy8gQGZiLW9ubHk6IGlmIChna3goJ3JlY29pbF91c2FnZV9sb2dnaW5nJykpIHtcbiAgLy8gQGZiLW9ubHk6IHRyeSB7XG4gIC8vIEBmYi1vbmx5OiBSZWNvaWxVc2FnZUxvZ0ZhbGNvRXZlbnQubG9nKCgpID0+ICh7XG4gIC8vIEBmYi1vbmx5OiB0eXBlOiBSZWNvaWx1c2FnZWxvZ0V2ZW50LlJFQ09JTF9ST09UX01PVU5URUQsXG4gIC8vIEBmYi1vbmx5OiBwYXRoOiBVUkkuZ2V0UmVxdWVzdFVSSSgpLmdldFBhdGgoKSxcbiAgLy8gQGZiLW9ubHk6IH0pKTtcbiAgLy8gQGZiLW9ubHk6IH0gY2F0Y2gge1xuICAvLyBAZmItb25seTogcmVjb3ZlcmFibGVWaW9sYXRpb24oXG4gIC8vIEBmYi1vbmx5OiAnRXJyb3Igd2hlbiBsb2dnaW5nIFJlY29pbCBVc2FnZSBldmVudCcsXG4gIC8vIEBmYi1vbmx5OiAncmVjb2lsJyxcbiAgLy8gQGZiLW9ubHk6ICk7XG4gIC8vIEBmYi1vbmx5OiB9XG4gIC8vIEBmYi1vbmx5OiB9XG4gIC8vIEBmYi1vbmx5OiB9LCBbXSk7XG4gIGxldCBzdG9yZVN0YXRlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByZWZlci1jb25zdFxuXG4gIGNvbnN0IGdldEdyYXBoID0gdmVyc2lvbiA9PiB7XG4gICAgY29uc3QgZ3JhcGhzID0gc3RvcmVTdGF0ZS5jdXJyZW50LmdyYXBoc0J5VmVyc2lvbjtcblxuICAgIGlmIChncmFwaHMuaGFzKHZlcnNpb24pKSB7XG4gICAgICByZXR1cm4gUmVjb2lsX251bGx0aHJvd3MoZ3JhcGhzLmdldCh2ZXJzaW9uKSk7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3R3JhcGggPSBncmFwaCQzKCk7XG4gICAgZ3JhcGhzLnNldCh2ZXJzaW9uLCBuZXdHcmFwaCk7XG4gICAgcmV0dXJuIG5ld0dyYXBoO1xuICB9O1xuXG4gIGNvbnN0IHN1YnNjcmliZVRvVHJhbnNhY3Rpb25zID0gKGNhbGxiYWNrLCBrZXkpID0+IHtcbiAgICBpZiAoa2V5ID09IG51bGwpIHtcbiAgICAgIC8vIEdsb2JhbCB0cmFuc2FjdGlvbiBzdWJzY3JpcHRpb25zXG4gICAgICBjb25zdCB7XG4gICAgICAgIHRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uc1xuICAgICAgfSA9IHN0b3JlUmVmLmN1cnJlbnQuZ2V0U3RhdGUoKTtcbiAgICAgIGNvbnN0IGlkID0gbmV4dElEKys7XG4gICAgICB0cmFuc2FjdGlvblN1YnNjcmlwdGlvbnMuc2V0KGlkLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZWxlYXNlOiAoKSA9PiB7XG4gICAgICAgICAgdHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zLmRlbGV0ZShpZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5vZGUtc3BlY2lmaWMgdHJhbnNhY3Rpb24gc3Vic2NyaXB0aW9uczpcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uc1xuICAgICAgfSA9IHN0b3JlUmVmLmN1cnJlbnQuZ2V0U3RhdGUoKTtcblxuICAgICAgaWYgKCFub2RlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zLmhhcyhrZXkpKSB7XG4gICAgICAgIG5vZGVUcmFuc2FjdGlvblN1YnNjcmlwdGlvbnMuc2V0KGtleSwgbmV3IE1hcCgpKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaWQgPSBuZXh0SUQrKztcbiAgICAgIFJlY29pbF9udWxsdGhyb3dzKG5vZGVUcmFuc2FjdGlvblN1YnNjcmlwdGlvbnMuZ2V0KGtleSkpLnNldChpZCwgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVsZWFzZTogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN1YnMgPSBub2RlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zLmdldChrZXkpO1xuXG4gICAgICAgICAgaWYgKHN1YnMpIHtcbiAgICAgICAgICAgIHN1YnMuZGVsZXRlKGlkKTtcblxuICAgICAgICAgICAgaWYgKHN1YnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICBub2RlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgYWRkVHJhbnNhY3Rpb25NZXRhZGF0YSA9IG1ldGFkYXRhID0+IHtcbiAgICBzdGFydE5leHRUcmVlSWZOZWVkZWQoc3RvcmVSZWYuY3VycmVudCk7XG5cbiAgICBmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXMobWV0YWRhdGEpKSB7XG4gICAgICBSZWNvaWxfbnVsbHRocm93cyhzdG9yZVJlZi5jdXJyZW50LmdldFN0YXRlKCkubmV4dFRyZWUpLnRyYW5zYWN0aW9uTWV0YWRhdGFba10gPSBtZXRhZGF0YVtrXTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcmVwbGFjZVN0YXRlID0gcmVwbGFjZXIgPT4ge1xuICAgIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZVJlZi5jdXJyZW50LmdldFN0YXRlKCk7XG4gICAgc3RhcnROZXh0VHJlZUlmTmVlZGVkKHN0b3JlUmVmLmN1cnJlbnQpOyAvLyBVc2UgcmVwbGFjZXIgdG8gZ2V0IHRoZSBuZXh0IHN0YXRlOlxuXG4gICAgY29uc3QgbmV4dFRyZWUgPSBSZWNvaWxfbnVsbHRocm93cyhzdG9yZVN0YXRlLm5leHRUcmVlKTtcbiAgICBsZXQgcmVwbGFjZWQ7XG5cbiAgICB0cnkge1xuICAgICAgc3RhdGVSZXBsYWNlcklzQmVpbmdFeGVjdXRlZCA9IHRydWU7XG4gICAgICByZXBsYWNlZCA9IHJlcGxhY2VyKG5leHRUcmVlKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc3RhdGVSZXBsYWNlcklzQmVpbmdFeGVjdXRlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChyZXBsYWNlZCA9PT0gbmV4dFRyZWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2luZG93LiRyZWNvaWxEZWJ1Z1N0YXRlcy5wdXNoKHJlcGxhY2VkKTsgLy8gVE9ETyB0aGlzIHNob3VsZG4ndCBoYXBwZW4gaGVyZSBiZWNhdXNlIGl0J3Mgbm90IGJhdGNoZWRcbiAgICAgIH1cbiAgICB9IC8vIFNhdmUgY2hhbmdlcyB0byBuZXh0VHJlZSBhbmQgc2NoZWR1bGUgYSBSZWFjdCB1cGRhdGU6XG5cblxuICAgIHN0b3JlU3RhdGUubmV4dFRyZWUgPSByZXBsYWNlZDtcblxuICAgIGlmIChSZWNvaWxfZ2t4XzEoJ3JlY29pbF9lYXJseV9yZW5kZXJpbmdfMjAyMScpKSB7XG4gICAgICBub3RpZnlDb21wb25lbnRzKHN0b3JlLCBzdG9yZVN0YXRlLCByZXBsYWNlZCk7XG4gICAgfVxuXG4gICAgUmVjb2lsX251bGx0aHJvd3Mobm90aWZ5QmF0Y2hlck9mQ2hhbmdlLmN1cnJlbnQpKCk7XG4gIH07XG5cbiAgY29uc3Qgbm90aWZ5QmF0Y2hlck9mQ2hhbmdlID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBzZXROb3RpZnlCYXRjaGVyT2ZDaGFuZ2UgPSB1c2VDYWxsYmFjayh4ID0+IHtcbiAgICBub3RpZnlCYXRjaGVyT2ZDaGFuZ2UuY3VycmVudCA9IHg7XG4gIH0sIFtub3RpZnlCYXRjaGVyT2ZDaGFuZ2VdKTsgLy8gRklYTUUgVDI3MTA1NTkyODI1OTk2NjBcblxuICBjb25zdCBjcmVhdGVNdXRhYmxlU291cmNlID0gKF9jcmVhdGVNdXRhYmxlU291cmNlID0gcmVhY3QuY3JlYXRlTXV0YWJsZVNvdXJjZSkgIT09IG51bGwgJiYgX2NyZWF0ZU11dGFibGVTb3VyY2UgIT09IHZvaWQgMCA/IF9jcmVhdGVNdXRhYmxlU291cmNlIDogLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG4gIHJlYWN0LnVuc3RhYmxlX2NyZWF0ZU11dGFibGVTb3VyY2U7IC8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG4gIGNvbnN0IHN0b3JlID0gc3RvcmVQcm9wICE9PSBudWxsICYmIHN0b3JlUHJvcCAhPT0gdm9pZCAwID8gc3RvcmVQcm9wIDoge1xuICAgIGdldFN0YXRlOiAoKSA9PiBzdG9yZVN0YXRlLmN1cnJlbnQsXG4gICAgcmVwbGFjZVN0YXRlLFxuICAgIGdldEdyYXBoLFxuICAgIHN1YnNjcmliZVRvVHJhbnNhY3Rpb25zLFxuICAgIGFkZFRyYW5zYWN0aW9uTWV0YWRhdGFcbiAgfTtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VSZWYoc3RvcmUpO1xuICBzdG9yZVN0YXRlID0gdXNlUmVmKGluaXRpYWxpemVTdGF0ZV9ERVBSRUNBVEVEICE9IG51bGwgPyBpbml0aWFsU3RvcmVTdGF0ZV9ERVBSRUNBVEVEKHN0b3JlLCBpbml0aWFsaXplU3RhdGVfREVQUkVDQVRFRCkgOiBpbml0aWFsaXplU3RhdGUgIT0gbnVsbCA/IGluaXRpYWxTdG9yZVN0YXRlKGluaXRpYWxpemVTdGF0ZSkgOiBtYWtlRW1wdHlTdG9yZVN0YXRlJDIoKSk7XG4gIGNvbnN0IG11dGFibGVTb3VyY2UgPSB1c2VNZW1vKCgpID0+IGNyZWF0ZU11dGFibGVTb3VyY2UgPyBjcmVhdGVNdXRhYmxlU291cmNlKHN0b3JlU3RhdGUsICgpID0+IHN0b3JlU3RhdGUuY3VycmVudC5jdXJyZW50VHJlZS52ZXJzaW9uKSA6IG51bGwsIFtjcmVhdGVNdXRhYmxlU291cmNlLCBzdG9yZVN0YXRlXSk7IC8vIENsZWFudXAgd2hlbiB0aGUgPFJlY29pbFJvb3Q+IGlzIHVubW91bnRlZFxuXG4gIHVzZUVmZmVjdCgoKSA9PiAoKSA9PiB7XG4gICAgZm9yIChjb25zdCBhdG9tS2V5IG9mIHN0b3JlUmVmLmN1cnJlbnQuZ2V0U3RhdGUoKS5rbm93bkF0b21zKSB7XG4gICAgICBjbGVhblVwTm9kZSQyKHN0b3JlUmVmLmN1cnJlbnQsIGF0b21LZXkpO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL3JlYWN0LmNyZWF0ZUVsZW1lbnQoQXBwQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdG9yZVJlZlxuICB9LCAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudChNdXRhYmxlU291cmNlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBtdXRhYmxlU291cmNlXG4gIH0sIC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVFbGVtZW50KEJhdGNoZXIsIHtcbiAgICBzZXROb3RpZnlCYXRjaGVyT2ZDaGFuZ2U6IHNldE5vdGlmeUJhdGNoZXJPZkNoYW5nZVxuICB9KSwgY2hpbGRyZW4pKTtcbn1cblxuZnVuY3Rpb24gUmVjb2lsUm9vdChwcm9wcykge1xuICBjb25zdCB7XG4gICAgb3ZlcnJpZGUsXG4gICAgLi4ucHJvcHNFeGNlcHRPdmVycmlkZVxuICB9ID0gcHJvcHM7XG4gIGNvbnN0IGFuY2VzdG9yU3RvcmVSZWYgPSB1c2VTdG9yZVJlZigpO1xuXG4gIGlmIChvdmVycmlkZSA9PT0gZmFsc2UgJiYgYW5jZXN0b3JTdG9yZVJlZi5jdXJyZW50ICE9PSBkZWZhdWx0U3RvcmUpIHtcbiAgICAvLyBJZiBhbmNlc3RvclN0b3JlUmVmLmN1cnJlbnQgIT09IGRlZmF1bHRTdG9yZSwgaXQgbWVhbnMgdGhhdCB0aGlzXG4gICAgLy8gUmVjb2lsUm9vdCBpcyBub3QgbmVzdGVkIHdpdGhpbiBhbm90aGVyLlxuICAgIHJldHVybiBwcm9wcy5jaGlsZHJlbjtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudChSZWNvaWxSb290X0lOVEVSTkFMLCBwcm9wc0V4Y2VwdE92ZXJyaWRlKTtcbn1cblxudmFyIFJlY29pbF9SZWNvaWxSb290X3JlYWN0ID0ge1xuICB1c2VTdG9yZVJlZixcbiAgdXNlUmVjb2lsTXV0YWJsZVNvdXJjZSxcbiAgUmVjb2lsUm9vdCxcbiAgbm90aWZ5Q29tcG9uZW50c19GT1JfVEVTVElORzogbm90aWZ5Q29tcG9uZW50cyxcbiAgc2VuZEVuZE9mQmF0Y2hOb3RpZmljYXRpb25zX0ZPUl9URVNUSU5HOiBzZW5kRW5kT2ZCYXRjaE5vdGlmaWNhdGlvbnNcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogTUlUIExpY2Vuc2VcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxOSBHZW9yZyBUYXZvbml1c1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbiAqIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5jb25zdCBVTktOT1dOX0ZVTkNUSU9OID0gJzx1bmtub3duPic7XG4vKipcbiAqIFRoaXMgcGFyc2VzIHRoZSBkaWZmZXJlbnQgc3RhY2sgdHJhY2VzIGFuZCBwdXRzIHRoZW0gaW50byBvbmUgZm9ybWF0XG4gKiBUaGlzIGJvcnJvd3MgaGVhdmlseSBmcm9tIFRyYWNlS2l0IChodHRwczovL2dpdGh1Yi5jb20vY3Nub3Zlci9UcmFjZUtpdClcbiAqL1xuXG5mdW5jdGlvbiBzdGFja1RyYWNlUGFyc2VyKHN0YWNrU3RyaW5nKSB7XG4gIGNvbnN0IGxpbmVzID0gc3RhY2tTdHJpbmcuc3BsaXQoJ1xcbicpO1xuICByZXR1cm4gbGluZXMucmVkdWNlKChzdGFjaywgbGluZSkgPT4ge1xuICAgIGNvbnN0IHBhcnNlUmVzdWx0ID0gcGFyc2VDaHJvbWUobGluZSkgfHwgcGFyc2VXaW5qcyhsaW5lKSB8fCBwYXJzZUdlY2tvKGxpbmUpIHx8IHBhcnNlTm9kZShsaW5lKSB8fCBwYXJzZUpTQyhsaW5lKTtcblxuICAgIGlmIChwYXJzZVJlc3VsdCkge1xuICAgICAgc3RhY2sucHVzaChwYXJzZVJlc3VsdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YWNrO1xuICB9LCBbXSk7XG59XG5cbmNvbnN0IGNocm9tZVJlID0gL15cXHMqYXQgKC4qPykgP1xcKCgoPzpmaWxlfGh0dHBzP3xibG9ifGNocm9tZS1leHRlbnNpb258bmF0aXZlfGV2YWx8d2VicGFja3w8YW5vbnltb3VzPnxcXC98W2Etel06XFxcXHxcXFxcXFxcXCkuKj8pKD86OihcXGQrKSk/KD86OihcXGQrKSk/XFwpP1xccyokL2k7XG5jb25zdCBjaHJvbWVFdmFsUmUgPSAvXFwoKFxcUyopKD86OihcXGQrKSkoPzo6KFxcZCspKVxcKS87XG5cbmZ1bmN0aW9uIHBhcnNlQ2hyb21lKGxpbmUpIHtcbiAgY29uc3QgcGFydHMgPSBjaHJvbWVSZS5leGVjKGxpbmUpO1xuXG4gIGlmICghcGFydHMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGlzTmF0aXZlID0gcGFydHNbMl0gJiYgcGFydHNbMl0uaW5kZXhPZignbmF0aXZlJykgPT09IDA7IC8vIHN0YXJ0IG9mIGxpbmVcblxuICBjb25zdCBpc0V2YWwgPSBwYXJ0c1syXSAmJiBwYXJ0c1syXS5pbmRleE9mKCdldmFsJykgPT09IDA7IC8vIHN0YXJ0IG9mIGxpbmVcblxuICBjb25zdCBzdWJtYXRjaCA9IGNocm9tZUV2YWxSZS5leGVjKHBhcnRzWzJdKTtcblxuICBpZiAoaXNFdmFsICYmIHN1Ym1hdGNoICE9IG51bGwpIHtcbiAgICAvLyB0aHJvdyBvdXQgZXZhbCBsaW5lL2NvbHVtbiBhbmQgdXNlIHRvcC1tb3N0IGxpbmUvY29sdW1uIG51bWJlclxuICAgIHBhcnRzWzJdID0gc3VibWF0Y2hbMV07IC8vIHVybFxuXG4gICAgcGFydHNbM10gPSBzdWJtYXRjaFsyXTsgLy8gbGluZVxuXG4gICAgcGFydHNbNF0gPSBzdWJtYXRjaFszXTsgLy8gY29sdW1uXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZpbGU6ICFpc05hdGl2ZSA/IHBhcnRzWzJdIDogbnVsbCxcbiAgICBtZXRob2ROYW1lOiBwYXJ0c1sxXSB8fCBVTktOT1dOX0ZVTkNUSU9OLFxuICAgIGFyZ3VtZW50czogaXNOYXRpdmUgPyBbcGFydHNbMl1dIDogW10sXG4gICAgbGluZU51bWJlcjogcGFydHNbM10gPyArcGFydHNbM10gOiBudWxsLFxuICAgIGNvbHVtbjogcGFydHNbNF0gPyArcGFydHNbNF0gOiBudWxsXG4gIH07XG59XG5cbmNvbnN0IHdpbmpzUmUgPSAvXlxccyphdCAoPzooKD86XFxbb2JqZWN0IG9iamVjdFxcXSk/LispICk/XFwoPygoPzpmaWxlfG1zLWFwcHh8aHR0cHM/fHdlYnBhY2t8YmxvYik6Lio/KTooXFxkKykoPzo6KFxcZCspKT9cXCk/XFxzKiQvaTtcblxuZnVuY3Rpb24gcGFyc2VXaW5qcyhsaW5lKSB7XG4gIGNvbnN0IHBhcnRzID0gd2luanNSZS5leGVjKGxpbmUpO1xuXG4gIGlmICghcGFydHMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZmlsZTogcGFydHNbMl0sXG4gICAgbWV0aG9kTmFtZTogcGFydHNbMV0gfHwgVU5LTk9XTl9GVU5DVElPTixcbiAgICBhcmd1bWVudHM6IFtdLFxuICAgIGxpbmVOdW1iZXI6ICtwYXJ0c1szXSxcbiAgICBjb2x1bW46IHBhcnRzWzRdID8gK3BhcnRzWzRdIDogbnVsbFxuICB9O1xufVxuXG5jb25zdCBnZWNrb1JlID0gL15cXHMqKC4qPykoPzpcXCgoLio/KVxcKSk/KD86XnxAKSgoPzpmaWxlfGh0dHBzP3xibG9ifGNocm9tZXx3ZWJwYWNrfHJlc291cmNlfFxcW25hdGl2ZSkuKj98W15AXSpidW5kbGUpKD86OihcXGQrKSk/KD86OihcXGQrKSk/XFxzKiQvaTtcbmNvbnN0IGdlY2tvRXZhbFJlID0gLyhcXFMrKSBsaW5lIChcXGQrKSg/OiA+IGV2YWwgbGluZSBcXGQrKSogPiBldmFsL2k7XG5cbmZ1bmN0aW9uIHBhcnNlR2Vja28obGluZSkge1xuICBjb25zdCBwYXJ0cyA9IGdlY2tvUmUuZXhlYyhsaW5lKTtcblxuICBpZiAoIXBhcnRzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBpc0V2YWwgPSBwYXJ0c1szXSAmJiBwYXJ0c1szXS5pbmRleE9mKCcgPiBldmFsJykgPiAtMTtcbiAgY29uc3Qgc3VibWF0Y2ggPSBnZWNrb0V2YWxSZS5leGVjKHBhcnRzWzNdKTtcblxuICBpZiAoaXNFdmFsICYmIHN1Ym1hdGNoICE9IG51bGwpIHtcbiAgICAvLyB0aHJvdyBvdXQgZXZhbCBsaW5lL2NvbHVtbiBhbmQgdXNlIHRvcC1tb3N0IGxpbmUgbnVtYmVyXG4gICAgcGFydHNbM10gPSBzdWJtYXRjaFsxXTtcbiAgICBwYXJ0c1s0XSA9IHN1Ym1hdGNoWzJdO1xuICAgIHBhcnRzWzVdID0gbnVsbDsgLy8gbm8gY29sdW1uIHdoZW4gZXZhbFxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmaWxlOiBwYXJ0c1szXSxcbiAgICBtZXRob2ROYW1lOiBwYXJ0c1sxXSB8fCBVTktOT1dOX0ZVTkNUSU9OLFxuICAgIGFyZ3VtZW50czogcGFydHNbMl0gPyBwYXJ0c1syXS5zcGxpdCgnLCcpIDogW10sXG4gICAgbGluZU51bWJlcjogcGFydHNbNF0gPyArcGFydHNbNF0gOiBudWxsLFxuICAgIGNvbHVtbjogcGFydHNbNV0gPyArcGFydHNbNV0gOiBudWxsXG4gIH07XG59XG5cbmNvbnN0IGphdmFTY3JpcHRDb3JlUmUgPSAvXlxccyooPzooW15AXSopKD86XFwoKC4qPylcXCkpP0ApPyhcXFMuKj8pOihcXGQrKSg/OjooXFxkKykpP1xccyokL2k7XG5cbmZ1bmN0aW9uIHBhcnNlSlNDKGxpbmUpIHtcbiAgY29uc3QgcGFydHMgPSBqYXZhU2NyaXB0Q29yZVJlLmV4ZWMobGluZSk7XG5cbiAgaWYgKCFwYXJ0cykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmaWxlOiBwYXJ0c1szXSxcbiAgICBtZXRob2ROYW1lOiBwYXJ0c1sxXSB8fCBVTktOT1dOX0ZVTkNUSU9OLFxuICAgIGFyZ3VtZW50czogW10sXG4gICAgbGluZU51bWJlcjogK3BhcnRzWzRdLFxuICAgIGNvbHVtbjogcGFydHNbNV0gPyArcGFydHNbNV0gOiBudWxsXG4gIH07XG59XG5cbmNvbnN0IG5vZGVSZSA9IC9eXFxzKmF0ICg/OigoPzpcXFtvYmplY3Qgb2JqZWN0XFxdKT9bXlxcXFwvXSsoPzogXFxbYXMgXFxTK1xcXSk/KSApP1xcKD8oLio/KTooXFxkKykoPzo6KFxcZCspKT9cXCk/XFxzKiQvaTtcblxuZnVuY3Rpb24gcGFyc2VOb2RlKGxpbmUpIHtcbiAgY29uc3QgcGFydHMgPSBub2RlUmUuZXhlYyhsaW5lKTtcblxuICBpZiAoIXBhcnRzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZpbGU6IHBhcnRzWzJdLFxuICAgIG1ldGhvZE5hbWU6IHBhcnRzWzFdIHx8IFVOS05PV05fRlVOQ1RJT04sXG4gICAgYXJndW1lbnRzOiBbXSxcbiAgICBsaW5lTnVtYmVyOiArcGFydHNbM10sXG4gICAgY29sdW1uOiBwYXJ0c1s0XSA/ICtwYXJ0c1s0XSA6IG51bGxcbiAgfTtcbn1cblxudmFyIFJlY29pbF9zdGFja1RyYWNlUGFyc2VyID0gc3RhY2tUcmFjZVBhcnNlcjtcblxuY29uc3Qge1xuICB1c2VSZWY6IHVzZVJlZiQxXG59ID0gcmVhY3Q7XG5cbmZ1bmN0aW9uIHVzZUNvbXBvbmVudE5hbWUoKSB7XG4gIGNvbnN0IG5hbWVSZWYgPSB1c2VSZWYkMSgpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoUmVjb2lsX2dreF8xKCdyZWNvaWxfaW5mZXJfY29tcG9uZW50X25hbWVzJykpIHtcbiAgICAgIHZhciBfbmFtZVJlZiRjdXJyZW50O1xuXG4gICAgICBpZiAobmFtZVJlZi5jdXJyZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gVGhlcmUgaXMgbm8gYmxlc3NlZCB3YXkgdG8gZGV0ZXJtaW5lIHRoZSBjYWxsaW5nIFJlYWN0IGNvbXBvbmVudCBmcm9tXG4gICAgICAgIC8vIHdpdGhpbiBhIGhvb2suIFRoaXMgaGFjayB1c2VzIHRoZSBmYWN0IHRoYXQgaG9va3MgbXVzdCBzdGFydCB3aXRoICd1c2UnXG4gICAgICAgIC8vIGFuZCB0aGF0IGhvb2tzIGFyZSBlaXRoZXIgY2FsbGVkIGJ5IFJlYWN0IENvbXBvbmVudHMgb3Igb3RoZXIgaG9va3MuIEl0XG4gICAgICAgIC8vIGZvbGxvd3MgdGhlcmVmb3JlLCB0aGF0IHRvIGZpbmQgdGhlIGNhbGxpbmcgY29tcG9uZW50LCB5b3Ugc2ltcGx5IG5lZWRcbiAgICAgICAgLy8gdG8gbG9vayBkb3duIHRoZSBzdGFjayBhbmQgZmluZCB0aGUgZmlyc3QgZnVuY3Rpb24gd2hpY2ggZG9lc24ndCBzdGFydFxuICAgICAgICAvLyB3aXRoICd1c2UnLiBXZSBhcmUgb25seSBlbmFibGluZyB0aGlzIGluIGRldiBmb3Igbm93LCBzaW5jZSBvbmNlIHRoZVxuICAgICAgICAvLyBjb2RlYmFzZSBpcyBtaW5pZmllZCwgdGhlIG5hbWluZyBhc3N1bXB0aW9ucyBubyBsb25nZXIgaG9sZCB0cnVlLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZmItd3d3L25vLW5ldy1lcnJvclxuICAgICAgICBjb25zdCBmcmFtZXMgPSBSZWNvaWxfc3RhY2tUcmFjZVBhcnNlcihuZXcgRXJyb3IoKS5zdGFjayk7XG5cbiAgICAgICAgZm9yIChjb25zdCB7XG4gICAgICAgICAgbWV0aG9kTmFtZVxuICAgICAgICB9IG9mIGZyYW1lcykge1xuICAgICAgICAgIC8vIEkgb2JzZXJ2ZWQgY2FzZXMgd2hlcmUgdGhlIGZyYW1lIHdhcyBvZiB0aGUgZm9ybSAnT2JqZWN0LnVzZVhYWCdcbiAgICAgICAgICAvLyBoZW5jZSB3aHkgSSdtIHNlYXJjaGluZyBmb3IgaG9va3MgZm9sbG93aW5nIGEgd29yZCBib3VuZGFyeVxuICAgICAgICAgIGlmICghbWV0aG9kTmFtZS5tYXRjaCgvXFxidXNlW15cXGJdKyQvKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5hbWVSZWYuY3VycmVudCA9IG1ldGhvZE5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbmFtZVJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChfbmFtZVJlZiRjdXJyZW50ID0gbmFtZVJlZi5jdXJyZW50KSAhPT0gbnVsbCAmJiBfbmFtZVJlZiRjdXJyZW50ICE9PSB2b2lkIDAgPyBfbmFtZVJlZiRjdXJyZW50IDogJzx1bmFibGUgdG8gZGV0ZXJtaW5lIGNvbXBvbmVudCBuYW1lPic7XG4gICAgfVxuICB9IC8vIEBmYi1vbmx5OiByZXR1cm4gXCI8Y29tcG9uZW50IG5hbWUgb25seSBhdmFpbGFibGUgd2hlbiBib3RoIGluIGRldiBtb2RlIGFuZCB3aGVuIHBhc3NpbmcgR0sgJ3JlY29pbF9pbmZlcl9jb21wb25lbnRfbmFtZXMnPlwiO1xuXG5cbiAgcmV0dXJuICc8Y29tcG9uZW50IG5hbWUgbm90IGF2YWlsYWJsZT4nOyAvLyBAb3NzLW9ubHlcbn1cblxudmFyIFJlY29pbF91c2VDb21wb25lbnROYW1lID0gdXNlQ29tcG9uZW50TmFtZTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5cbmZ1bmN0aW9uIHNoYWxsb3dBcnJheUVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxudmFyIFJlY29pbF9zaGFsbG93QXJyYXlFcXVhbCA9IHNoYWxsb3dBcnJheUVxdWFsO1xuXG5jb25zdCB7XG4gIHVzZUVmZmVjdDogdXNlRWZmZWN0JDEsXG4gIHVzZVJlZjogdXNlUmVmJDJcbn0gPSByZWFjdDtcblxuZnVuY3Rpb24gdXNlUHJldmlvdXModmFsdWUpIHtcbiAgY29uc3QgcmVmID0gdXNlUmVmJDIoKTtcbiAgdXNlRWZmZWN0JDEoKCkgPT4ge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVmLmN1cnJlbnQ7XG59XG5cbnZhciBSZWNvaWxfdXNlUHJldmlvdXMgPSB1c2VQcmV2aW91cztcblxuY29uc3Qge1xuICB1c2VTdG9yZVJlZjogdXNlU3RvcmVSZWYkMVxufSA9IFJlY29pbF9SZWNvaWxSb290X3JlYWN0O1xuXG5jb25zdCB7XG4gIFNVU1BFTlNFX1RJTUVPVVRfTVM6IFNVU1BFTlNFX1RJTUVPVVRfTVMkMVxufSA9IFJlY29pbF9SZXRlbnRpb247XG5cbmNvbnN0IHtcbiAgdXBkYXRlUmV0YWluQ291bnQ6IHVwZGF0ZVJldGFpbkNvdW50JDJcbn0gPSBSZWNvaWxfUmV0ZW50aW9uO1xuXG5jb25zdCB7XG4gIFJldGVudGlvblpvbmU6IFJldGVudGlvblpvbmUkM1xufSA9IFJlY29pbF9SZXRlbnRpb25ab25lO1xuXG5jb25zdCB7XG4gIGlzU1NSOiBpc1NTUiQyXG59ID0gUmVjb2lsX0Vudmlyb25tZW50O1xuXG5cblxuXG5cblxuXG5jb25zdCB7XG4gIHVzZUVmZmVjdDogdXNlRWZmZWN0JDIsXG4gIHVzZVJlZjogdXNlUmVmJDNcbn0gPSByZWFjdDsgLy8gSSBkb24ndCBzZWUgYSB3YXkgdG8gYXZvaWQgdGhlIGFueSB0eXBlIGhlcmUgYmVjYXVzZSB3ZSB3YW50IHRvIGFjY2VwdCByZWFkYWJsZVxuLy8gYW5kIHdyaXRhYmxlIHZhbHVlcyB3aXRoIGFueSB0eXBlIHBhcmFtZXRlciwgYnV0IG5vcm1hbGx5IHdpdGggd3JpdGFibGUgb25lc1xuLy8gUmVjb2lsU3RhdGU8U29tZVQ+IGlzIG5vdCBhIHN1YnR5cGUgb2YgUmVjb2lsU3RhdGU8bWl4ZWQ+LlxuXG5cbi8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuZnVuY3Rpb24gdXNlUmV0YWluKHRvUmV0YWluKSB7XG4gIGlmICghUmVjb2lsX2dreF8xKCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmYi13d3cvcmVhY3QtaG9va3NcblxuXG4gIHJldHVybiB1c2VSZXRhaW5fQUNUVUFMKHRvUmV0YWluKTtcbn1cblxuZnVuY3Rpb24gdXNlUmV0YWluX0FDVFVBTCh0b1JldGFpbikge1xuICBjb25zdCBhcnJheSA9IEFycmF5LmlzQXJyYXkodG9SZXRhaW4pID8gdG9SZXRhaW4gOiBbdG9SZXRhaW5dO1xuICBjb25zdCByZXRhaW5hYmxlcyA9IGFycmF5Lm1hcChhID0+IGEgaW5zdGFuY2VvZiBSZXRlbnRpb25ab25lJDMgPyBhIDogYS5rZXkpO1xuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDEoKTtcbiAgdXNlRWZmZWN0JDIoKCkgPT4ge1xuICAgIGlmICghUmVjb2lsX2dreF8xKCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmUgPSBzdG9yZVJlZi5jdXJyZW50O1xuXG4gICAgaWYgKHRpbWVvdXRJRC5jdXJyZW50ICYmICFpc1NTUiQyKSB7XG4gICAgICAvLyBBbHJlYWR5IHBlcmZvcm1lZCBhIHRlbXBvcmFyeSByZXRhaW4gb24gcmVuZGVyLCBzaW1wbHkgY2FuY2VsIHRoZSByZWxlYXNlXG4gICAgICAvLyBvZiB0aGF0IHRlbXBvcmFyeSByZXRhaW4uXG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRJRC5jdXJyZW50KTtcbiAgICAgIHRpbWVvdXRJRC5jdXJyZW50ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChjb25zdCByIG9mIHJldGFpbmFibGVzKSB7XG4gICAgICAgIHVwZGF0ZVJldGFpbkNvdW50JDIoc3RvcmUsIHIsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IHIgb2YgcmV0YWluYWJsZXMpIHtcbiAgICAgICAgdXBkYXRlUmV0YWluQ291bnQkMihzdG9yZSwgciwgLTEpO1xuICAgICAgfVxuICAgIH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmYi13d3cvcmVhY3QtaG9va3MtZGVwc1xuICB9LCBbc3RvcmVSZWYsIC4uLnJldGFpbmFibGVzXSk7IC8vIFdlIHdhbnQgdG8gcmV0YWluIGlmIHRoZSBjb21wb25lbnQgc3VzcGVuZHMuIFRoaXMgaXMgdGVycmlibGUgYnV0IHRoZSBTdXNwZW5zZVxuICAvLyBBUEkgYWZmb3JkcyB1cyBubyBiZXR0ZXIgb3B0aW9uLiBJZiB3ZSBzdXNwZW5kIGFuZCBuZXZlciBjb21taXQgYWZ0ZXIgc29tZVxuICAvLyBzZWNvbmRzLCB0aGVuIHJlbGVhc2UuIFRoZSAnYWN0dWFsJyByZXRhaW4vcmVsZWFzZSBpbiB0aGUgZWZmZWN0IGFib3ZlXG4gIC8vIGNhbmNlbHMgdGhpcy5cblxuICBjb25zdCB0aW1lb3V0SUQgPSB1c2VSZWYkMygpO1xuICBjb25zdCBwcmV2aW91c1JldGFpbmFibGVzID0gUmVjb2lsX3VzZVByZXZpb3VzKHJldGFpbmFibGVzKTtcblxuICBpZiAoIWlzU1NSJDIgJiYgKHByZXZpb3VzUmV0YWluYWJsZXMgPT09IHVuZGVmaW5lZCB8fCAhUmVjb2lsX3NoYWxsb3dBcnJheUVxdWFsKHByZXZpb3VzUmV0YWluYWJsZXMsIHJldGFpbmFibGVzKSkpIHtcbiAgICBjb25zdCBzdG9yZSA9IHN0b3JlUmVmLmN1cnJlbnQ7XG5cbiAgICBmb3IgKGNvbnN0IHIgb2YgcmV0YWluYWJsZXMpIHtcbiAgICAgIHVwZGF0ZVJldGFpbkNvdW50JDIoc3RvcmUsIHIsIDEpO1xuICAgIH1cblxuICAgIGlmIChwcmV2aW91c1JldGFpbmFibGVzKSB7XG4gICAgICBmb3IgKGNvbnN0IHIgb2YgcHJldmlvdXNSZXRhaW5hYmxlcykge1xuICAgICAgICB1cGRhdGVSZXRhaW5Db3VudCQyKHN0b3JlLCByLCAtMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXRJRC5jdXJyZW50KSB7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRJRC5jdXJyZW50KTtcbiAgICB9XG5cbiAgICB0aW1lb3V0SUQuY3VycmVudCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRpbWVvdXRJRC5jdXJyZW50ID0gbnVsbDtcblxuICAgICAgZm9yIChjb25zdCByIG9mIHJldGFpbmFibGVzKSB7XG4gICAgICAgIHVwZGF0ZVJldGFpbkNvdW50JDIoc3RvcmUsIHIsIC0xKTtcbiAgICAgIH1cbiAgICB9LCBTVVNQRU5TRV9USU1FT1VUX01TJDEpO1xuICB9XG59XG5cbnZhciBSZWNvaWxfdXNlUmV0YWluID0gdXNlUmV0YWluO1xuXG5jb25zdCB7XG4gIGJhdGNoVXBkYXRlczogYmF0Y2hVcGRhdGVzJDJcbn0gPSBSZWNvaWxfQmF0Y2hpbmc7XG5cbmNvbnN0IHtcbiAgREVGQVVMVF9WQUxVRTogREVGQVVMVF9WQUxVRSQyXG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgdXNlUmVjb2lsTXV0YWJsZVNvdXJjZTogdXNlUmVjb2lsTXV0YWJsZVNvdXJjZSQxLFxuICB1c2VTdG9yZVJlZjogdXNlU3RvcmVSZWYkMlxufSA9IFJlY29pbF9SZWNvaWxSb290X3JlYWN0O1xuXG5jb25zdCB7XG4gIGlzUmVjb2lsVmFsdWU6IGlzUmVjb2lsVmFsdWUkMlxufSA9IFJlY29pbF9SZWNvaWxWYWx1ZSQxO1xuXG5jb25zdCB7XG4gIEFic3RyYWN0UmVjb2lsVmFsdWU6IEFic3RyYWN0UmVjb2lsVmFsdWUkMyxcbiAgZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlOiBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMixcbiAgc2V0UmVjb2lsVmFsdWU6IHNldFJlY29pbFZhbHVlJDIsXG4gIHNldFVudmFsaWRhdGVkUmVjb2lsVmFsdWU6IHNldFVudmFsaWRhdGVkUmVjb2lsVmFsdWUkMixcbiAgc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZTogc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSQxXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlSW50ZXJmYWNlO1xuXG5jb25zdCB7XG4gIHNldEJ5QWRkaW5nVG9TZXQ6IHNldEJ5QWRkaW5nVG9TZXQkMlxufSA9IFJlY29pbF9Db3B5T25Xcml0ZTtcblxuXG5cblxuXG5cblxuXG5cbmNvbnN0IHtcbiAgbXV0YWJsZVNvdXJjZUV4aXN0czogbXV0YWJsZVNvdXJjZUV4aXN0cyQyLFxuICB1c2VNdXRhYmxlU291cmNlOiB1c2VNdXRhYmxlU291cmNlJDFcbn0gPSBSZWNvaWxfbXV0YWJsZVNvdXJjZTtcblxuXG5cblxuXG5jb25zdCB7XG4gIHVzZUNhbGxiYWNrOiB1c2VDYWxsYmFjayQxLFxuICB1c2VFZmZlY3Q6IHVzZUVmZmVjdCQzLFxuICB1c2VNZW1vOiB1c2VNZW1vJDEsXG4gIHVzZVJlZjogdXNlUmVmJDQsXG4gIHVzZVN0YXRlOiB1c2VTdGF0ZSQxXG59ID0gcmVhY3Q7XG5cbmZ1bmN0aW9uIGhhbmRsZUxvYWRhYmxlKGxvYWRhYmxlLCByZWNvaWxWYWx1ZSwgc3RvcmVSZWYpIHtcbiAgLy8gV2UgY2FuJ3QganVzdCB0aHJvdyB0aGUgcHJvbWlzZSB3ZSBhcmUgd2FpdGluZyBvbiB0byBTdXNwZW5zZS4gIElmIHRoZVxuICAvLyB1cHN0cmVhbSBkZXBlbmRlbmNpZXMgY2hhbmdlIGl0IG1heSBwcm9kdWNlIGEgc3RhdGUgaW4gd2hpY2ggdGhlIGNvbXBvbmVudFxuICAvLyBjYW4gcmVuZGVyLCBidXQgaXQgd291bGQgc3RpbGwgYmUgc3VzcGVuZGVkIG9uIGEgUHJvbWlzZSB0aGF0IG1heSBuZXZlciByZXNvbHZlLlxuICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScpIHtcbiAgICByZXR1cm4gbG9hZGFibGUuY29udGVudHM7XG4gIH0gZWxzZSBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIHN0b3JlUmVmLmN1cnJlbnQuZ2V0U3RhdGUoKS5zdXNwZW5kZWRDb21wb25lbnRSZXNvbHZlcnMuYWRkKHJlc29sdmUpO1xuICAgIH0pOyAvLyAkRmxvd0ZpeE1lIEZsb3cocHJvcC1taXNzaW5nKSBmb3IgaW50ZWdyYXRpbmcgd2l0aCB0b29scyB0aGF0IGluc3BlY3QgdGhyb3duIHByb21pc2VzIEBmYi1vbmx5XG4gICAgLy8gQGZiLW9ubHk6IHByb21pc2UuZGlzcGxheU5hbWUgPSBgUmVjb2lsIFN0YXRlOiAke3JlY29pbFZhbHVlLmtleX1gO1xuXG4gICAgdGhyb3cgcHJvbWlzZTtcbiAgfSBlbHNlIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2hhc0Vycm9yJykge1xuICAgIHRocm93IGxvYWRhYmxlLmNvbnRlbnRzO1xuICB9IGVsc2Uge1xuICAgIHRocm93IFJlY29pbF9lcnIoYEludmFsaWQgdmFsdWUgb2YgbG9hZGFibGUgYXRvbSBcIiR7cmVjb2lsVmFsdWUua2V5fVwiYCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVSZWNvaWxWYWx1ZShyZWNvaWxWYWx1ZSwgaG9va05hbWUpIHtcbiAgaWYgKCFpc1JlY29pbFZhbHVlJDIocmVjb2lsVmFsdWUpKSB7XG4gICAgdGhyb3cgUmVjb2lsX2VycihgSW52YWxpZCBhcmd1bWVudCB0byAke2hvb2tOYW1lfTogZXhwZWN0ZWQgYW4gYXRvbSBvciBzZWxlY3RvciBidXQgZ290ICR7U3RyaW5nKHJlY29pbFZhbHVlKX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIFZhcmlvdXMgdGhpbmdzIGFyZSBicm9rZW4gd2l0aCB1c2VSZWNvaWxJbnRlcmZhY2UsIHBhcnRpY3VsYXJseSBjb25jdXJyZW50IG1vZGVcbiAqIGFuZCBtZW1vcnkgbWFuYWdlbWVudC4gVGhleSB3aWxsIG5vdCBiZSBmaXhlZC5cbiAqICovXG5mdW5jdGlvbiB1c2VSZWNvaWxJbnRlcmZhY2VfREVQUkVDQVRFRCgpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQyKCk7XG4gIGNvbnN0IFssIGZvcmNlVXBkYXRlXSA9IHVzZVN0YXRlJDEoW10pO1xuICBjb25zdCByZWNvaWxWYWx1ZXNVc2VkID0gdXNlUmVmJDQobmV3IFNldCgpKTtcbiAgcmVjb2lsVmFsdWVzVXNlZC5jdXJyZW50ID0gbmV3IFNldCgpOyAvLyBUcmFjayB0aGUgUmVjb2lsVmFsdWVzIHVzZWQganVzdCBkdXJpbmcgdGhpcyByZW5kZXJcblxuICBjb25zdCBwcmV2aW91c1N1YnNjcmlwdGlvbnMgPSB1c2VSZWYkNChuZXcgU2V0KCkpO1xuICBjb25zdCBzdWJzY3JpcHRpb25zID0gdXNlUmVmJDQobmV3IE1hcCgpKTtcbiAgY29uc3QgdW5zdWJzY3JpYmVGcm9tID0gdXNlQ2FsbGJhY2skMShrZXkgPT4ge1xuICAgIGNvbnN0IHN1YiA9IHN1YnNjcmlwdGlvbnMuY3VycmVudC5nZXQoa2V5KTtcblxuICAgIGlmIChzdWIpIHtcbiAgICAgIHN1Yi5yZWxlYXNlKCk7XG4gICAgICBzdWJzY3JpcHRpb25zLmN1cnJlbnQuZGVsZXRlKGtleSk7XG4gICAgfVxuICB9LCBbc3Vic2NyaXB0aW9uc10pO1xuICBjb25zdCBjb21wb25lbnROYW1lID0gUmVjb2lsX3VzZUNvbXBvbmVudE5hbWUoKTtcbiAgdXNlRWZmZWN0JDMoKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gc3RvcmVSZWYuY3VycmVudDtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZVN0YXRlKF9zdGF0ZSwga2V5KSB7XG4gICAgICBpZiAoIXN1YnNjcmlwdGlvbnMuY3VycmVudC5oYXMoa2V5KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvcmNlVXBkYXRlKFtdKTtcbiAgICB9XG5cbiAgICBSZWNvaWxfZGlmZmVyZW5jZVNldHMocmVjb2lsVmFsdWVzVXNlZC5jdXJyZW50LCBwcmV2aW91c1N1YnNjcmlwdGlvbnMuY3VycmVudCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgaWYgKHN1YnNjcmlwdGlvbnMuY3VycmVudC5oYXMoa2V5KSkge1xuICAgICAgICBSZWNvaWxfZXhwZWN0YXRpb25WaW9sYXRpb24oYERvdWJsZSBzdWJzY3JpcHRpb24gdG8gUmVjb2lsVmFsdWUgXCIke2tleX1cImApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHN1YiA9IHN1YnNjcmliZVRvUmVjb2lsVmFsdWUkMShzdG9yZSwgbmV3IEFic3RyYWN0UmVjb2lsVmFsdWUkMyhrZXkpLCBzdGF0ZSA9PiB7XG4gICAgICAgIHVwZGF0ZVN0YXRlKHN0YXRlLCBrZXkpO1xuICAgICAgfSwgY29tcG9uZW50TmFtZSk7XG4gICAgICBzdWJzY3JpcHRpb25zLmN1cnJlbnQuc2V0KGtleSwgc3ViKTtcbiAgICAgIC8qKlxuICAgICAgICogU2luY2Ugd2UncmUgc3Vic2NyaWJpbmcgaW4gYW4gZWZmZWN0IHdlIG5lZWQgdG8gdXBkYXRlIHRvIHRoZSBsYXRlc3RcbiAgICAgICAqIHZhbHVlIG9mIHRoZSBhdG9tIHNpbmNlIGl0IG1heSBoYXZlIGNoYW5nZWQgc2luY2Ugd2UgcmVuZGVyZWQuIFdlIGNhblxuICAgICAgICogZ28gYWhlYWQgYW5kIGRvIHRoYXQgbm93LCB1bmxlc3Mgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIGJhdGNoIC0tXG4gICAgICAgKiBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBkbyBpdCBhdCB0aGUgZW5kIG9mIHRoZSBiYXRjaCwgZHVlIHRvIHRoZVxuICAgICAgICogZm9sbG93aW5nIGVkZ2UgY2FzZTogU3VwcG9zZSBhbiBhdG9tIGlzIHVwZGF0ZWQgaW4gYW5vdGhlciB1c2VFZmZlY3RcbiAgICAgICAqIG9mIHRoaXMgc2FtZSBjb21wb25lbnQuIFRoZW4gdGhlIGZvbGxvd2luZyBzZXF1ZW5jZSBvZiBldmVudHMgb2NjdXI6XG4gICAgICAgKiAxLiBBdG9tIGlzIHVwZGF0ZWQgYW5kIHN1YnMgZmlyZWQgKGJ1dCB3ZSBtYXkgbm90IGJlIHN1YnNjcmliZWRcbiAgICAgICAqICAgIHlldCBkZXBlbmRpbmcgb24gb3JkZXIgb2YgZWZmZWN0cywgc28gd2UgbWlzcyB0aGlzKSBVcGRhdGVkIHZhbHVlXG4gICAgICAgKiAgICBpcyBub3cgaW4gbmV4dFRyZWUsIGJ1dCBub3QgY3VycmVudFRyZWUuXG4gICAgICAgKiAyLiBUaGlzIGVmZmVjdCBoYXBwZW5zLiBXZSBzdWJzY3JpYmUgYW5kIHVwZGF0ZS5cbiAgICAgICAqIDMuIEZyb20gdGhlIHVwZGF0ZSB3ZSByZS1yZW5kZXIgYW5kIHJlYWQgY3VycmVudFRyZWUsIHdpdGggb2xkIHZhbHVlLlxuICAgICAgICogNC4gQmF0Y2hlcidzIGVmZmVjdCBzZXRzIGN1cnJlbnRUcmVlIHRvIG5leHRUcmVlLlxuICAgICAgICogSW4gdGhpcyBzZXF1ZW5jZSB3ZSBtaXNzIHRoZSB1cGRhdGUuIFRvIGF2b2lkIHRoYXQsIGFkZCB0aGUgdXBkYXRlXG4gICAgICAgKiB0byBxdWV1ZWRDb21wb25lbnRDYWxsYmFjayBpZiBhIGJhdGNoIGlzIGluIHByb2dyZXNzLlxuICAgICAgICovXG4gICAgICAvLyBGSVhNRSBkZWxldGUgcXVldWVkQ29tcG9uZW50Q2FsbGJhY2tzX0RFUFJFQ0FURUQgd2hlbiBkZWxldGluZyB1c2VJbnRlcmZhY2UuXG5cbiAgICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgICAgaWYgKHN0YXRlLm5leHRUcmVlKSB7XG4gICAgICAgIHN0b3JlLmdldFN0YXRlKCkucXVldWVkQ29tcG9uZW50Q2FsbGJhY2tzX0RFUFJFQ0FURUQucHVzaCgoKSA9PiB7XG4gICAgICAgICAgdXBkYXRlU3RhdGUoc3RvcmUuZ2V0U3RhdGUoKSwga2V5KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGVTdGF0ZShzdG9yZS5nZXRTdGF0ZSgpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFJlY29pbF9kaWZmZXJlbmNlU2V0cyhwcmV2aW91c1N1YnNjcmlwdGlvbnMuY3VycmVudCwgcmVjb2lsVmFsdWVzVXNlZC5jdXJyZW50KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICB1bnN1YnNjcmliZUZyb20oa2V5KTtcbiAgICB9KTtcbiAgICBwcmV2aW91c1N1YnNjcmlwdGlvbnMuY3VycmVudCA9IHJlY29pbFZhbHVlc1VzZWQuY3VycmVudDtcbiAgfSk7XG4gIHVzZUVmZmVjdCQzKCgpID0+IHtcbiAgICBjb25zdCBzdWJzID0gc3Vic2NyaXB0aW9ucy5jdXJyZW50O1xuICAgIHJldHVybiAoKSA9PiBzdWJzLmZvckVhY2goKF8sIGtleSkgPT4gdW5zdWJzY3JpYmVGcm9tKGtleSkpO1xuICB9LCBbdW5zdWJzY3JpYmVGcm9tXSk7XG4gIHJldHVybiB1c2VNZW1vJDEoKCkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgICBmdW5jdGlvbiB1c2VTZXRSZWNvaWxTdGF0ZShyZWNvaWxTdGF0ZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW2VzY2FwZWQtZ2VuZXJpY11cbiAgICAgICAgdmFsaWRhdGVSZWNvaWxWYWx1ZShyZWNvaWxTdGF0ZSwgJ3VzZVNldFJlY29pbFN0YXRlJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdWYWx1ZU9yVXBkYXRlciA9PiB7XG4gICAgICAgIHNldFJlY29pbFZhbHVlJDIoc3RvcmVSZWYuY3VycmVudCwgcmVjb2lsU3RhdGUsIG5ld1ZhbHVlT3JVcGRhdGVyKTtcbiAgICAgIH07XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG5cblxuICAgIGZ1bmN0aW9uIHVzZVJlc2V0UmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtlc2NhcGVkLWdlbmVyaWNdXG4gICAgICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUsICd1c2VSZXNldFJlY29pbFN0YXRlJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoKSA9PiBzZXRSZWNvaWxWYWx1ZSQyKHN0b3JlUmVmLmN1cnJlbnQsIHJlY29pbFN0YXRlLCBERUZBVUxUX1ZBTFVFJDIpO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuXG5cbiAgICBmdW5jdGlvbiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlKHJlY29pbFZhbHVlKSB7XG4gICAgICB2YXIgX3N0b3JlU3RhdGUkbmV4dFRyZWU7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtlc2NhcGVkLWdlbmVyaWNdXG4gICAgICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsVmFsdWUsICd1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVjb2lsVmFsdWVzVXNlZC5jdXJyZW50LmhhcyhyZWNvaWxWYWx1ZS5rZXkpKSB7XG4gICAgICAgIHJlY29pbFZhbHVlc1VzZWQuY3VycmVudCA9IHNldEJ5QWRkaW5nVG9TZXQkMihyZWNvaWxWYWx1ZXNVc2VkLmN1cnJlbnQsIHJlY29pbFZhbHVlLmtleSk7XG4gICAgICB9IC8vIFRPRE8gUmVzdG9yZSBvcHRpbWl6YXRpb24gdG8gbWVtb2l6ZSBsb29rdXBcblxuXG4gICAgICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmVSZWYuY3VycmVudC5nZXRTdGF0ZSgpO1xuICAgICAgcmV0dXJuIGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQyKHN0b3JlUmVmLmN1cnJlbnQsIHJlY29pbFZhbHVlLCBSZWNvaWxfZ2t4XzEoJ3JlY29pbF9lYXJseV9yZW5kZXJpbmdfMjAyMScpID8gKF9zdG9yZVN0YXRlJG5leHRUcmVlID0gc3RvcmVTdGF0ZS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlU3RhdGUkbmV4dFRyZWUgIT09IHZvaWQgMCA/IF9zdG9yZVN0YXRlJG5leHRUcmVlIDogc3RvcmVTdGF0ZS5jdXJyZW50VHJlZSA6IHN0b3JlU3RhdGUuY3VycmVudFRyZWUpO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuXG5cbiAgICBmdW5jdGlvbiB1c2VSZWNvaWxWYWx1ZShyZWNvaWxWYWx1ZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW2VzY2FwZWQtZ2VuZXJpY11cbiAgICAgICAgdmFsaWRhdGVSZWNvaWxWYWx1ZShyZWNvaWxWYWx1ZSwgJ3VzZVJlY29pbFZhbHVlJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxvYWRhYmxlID0gdXNlUmVjb2lsVmFsdWVMb2FkYWJsZShyZWNvaWxWYWx1ZSk7XG4gICAgICByZXR1cm4gaGFuZGxlTG9hZGFibGUobG9hZGFibGUsIHJlY29pbFZhbHVlLCBzdG9yZVJlZik7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG5cblxuICAgIGZ1bmN0aW9uIHVzZVJlY29pbFN0YXRlKHJlY29pbFN0YXRlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIC8vICRGbG93Rml4TWVbZXNjYXBlZC1nZW5lcmljXVxuICAgICAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlUmVjb2lsU3RhdGUnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFt1c2VSZWNvaWxWYWx1ZShyZWNvaWxTdGF0ZSksIHVzZVNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKV07XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG5cblxuICAgIGZ1bmN0aW9uIHVzZVJlY29pbFN0YXRlTG9hZGFibGUocmVjb2lsU3RhdGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtlc2NhcGVkLWdlbmVyaWNdXG4gICAgICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUsICd1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbdXNlUmVjb2lsVmFsdWVMb2FkYWJsZShyZWNvaWxTdGF0ZSksIHVzZVNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFJlY29pbFZhbHVlOiB1c2VSZWNvaWxWYWx1ZSxcbiAgICAgIGdldFJlY29pbFZhbHVlTG9hZGFibGU6IHVzZVJlY29pbFZhbHVlTG9hZGFibGUsXG4gICAgICBnZXRSZWNvaWxTdGF0ZTogdXNlUmVjb2lsU3RhdGUsXG4gICAgICBnZXRSZWNvaWxTdGF0ZUxvYWRhYmxlOiB1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlLFxuICAgICAgZ2V0U2V0UmVjb2lsU3RhdGU6IHVzZVNldFJlY29pbFN0YXRlLFxuICAgICAgZ2V0UmVzZXRSZWNvaWxTdGF0ZTogdXNlUmVzZXRSZWNvaWxTdGF0ZVxuICAgIH07XG4gIH0sIFtyZWNvaWxWYWx1ZXNVc2VkLCBzdG9yZVJlZl0pO1xufVxuXG5jb25zdCByZWNvaWxDb21wb25lbnRHZXRSZWNvaWxWYWx1ZUNvdW50X0ZPUl9URVNUSU5HID0ge1xuICBjdXJyZW50OiAwXG59O1xuXG5mdW5jdGlvbiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX01VVEFCTEVTT1VSQ0UocmVjb2lsVmFsdWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vICRGbG93Rml4TWVbZXNjYXBlZC1nZW5lcmljXVxuICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsVmFsdWUsICd1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlJyk7XG4gIH1cblxuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDIoKTtcbiAgY29uc3QgZ2V0TG9hZGFibGUgPSB1c2VDYWxsYmFjayQxKCgpID0+IHtcbiAgICB2YXIgX3N0b3JlU3RhdGUkbmV4dFRyZWUyO1xuXG4gICAgY29uc3Qgc3RvcmUgPSBzdG9yZVJlZi5jdXJyZW50O1xuICAgIGNvbnN0IHN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IHRyZWVTdGF0ZSA9IFJlY29pbF9na3hfMSgncmVjb2lsX2Vhcmx5X3JlbmRlcmluZ18yMDIxJykgPyAoX3N0b3JlU3RhdGUkbmV4dFRyZWUyID0gc3RvcmVTdGF0ZS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlU3RhdGUkbmV4dFRyZWUyICE9PSB2b2lkIDAgPyBfc3RvcmVTdGF0ZSRuZXh0VHJlZTIgOiBzdG9yZVN0YXRlLmN1cnJlbnRUcmVlIDogc3RvcmVTdGF0ZS5jdXJyZW50VHJlZTtcbiAgICByZXR1cm4gZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDIoc3RvcmUsIHJlY29pbFZhbHVlLCB0cmVlU3RhdGUpO1xuICB9LCBbc3RvcmVSZWYsIHJlY29pbFZhbHVlXSk7XG4gIGNvbnN0IGdldExvYWRhYmxlV2l0aFRlc3RpbmcgPSB1c2VDYWxsYmFjayQxKCgpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICByZWNvaWxDb21wb25lbnRHZXRSZWNvaWxWYWx1ZUNvdW50X0ZPUl9URVNUSU5HLmN1cnJlbnQrKztcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0TG9hZGFibGUoKTtcbiAgfSwgW2dldExvYWRhYmxlXSk7XG4gIGNvbnN0IGNvbXBvbmVudE5hbWUgPSBSZWNvaWxfdXNlQ29tcG9uZW50TmFtZSgpO1xuICBjb25zdCBzdWJzY3JpYmUgPSB1c2VDYWxsYmFjayQxKChfc3RvcmVTdGF0ZSwgY2FsbGJhY2spID0+IHtcbiAgICBjb25zdCBzdG9yZSA9IHN0b3JlUmVmLmN1cnJlbnQ7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gc3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSQxKHN0b3JlLCByZWNvaWxWYWx1ZSwgKCkgPT4ge1xuICAgICAgaWYgKCFSZWNvaWxfZ2t4XzEoJ3JlY29pbF9zdXBwcmVzc19yZXJlbmRlcl9pbl9jYWxsYmFjaycpKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgfSAvLyBPbmx5IHJlLXJlbmRlciBpZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWQuXG4gICAgICAvLyBUaGlzIHdpbGwgZXZhbHVhdGUgdGhlIGF0b20vc2VsZWN0b3Igbm93IGFzIHdlbGwgYXMgd2hlbiB0aGVcbiAgICAgIC8vIGNvbXBvbmVudCByZW5kZXJzLCBidXQgdGhhdCBtYXkgaGVscCB3aXRoIHByZWZldGNoaW5nLlxuXG5cbiAgICAgIGNvbnN0IG5ld0xvYWRhYmxlID0gZ2V0TG9hZGFibGUoKTtcblxuICAgICAgaWYgKCFwcmV2TG9hZGFibGVSZWYuY3VycmVudC5pcyhuZXdMb2FkYWJsZSkpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH0gLy8gSWYgdGhlIGNvbXBvbmVudCBpcyBzdXNwZW5kZWQgdGhlbiB0aGUgZWZmZWN0IHNldHRpbmcgcHJldkxvYWRhYmxlUmVmXG4gICAgICAvLyB3aWxsIG5vdCBydW4uICBTbywgc2V0IHRoZSBwcmV2aW91cyB2YWx1ZSBoZXJlIHdoZW4gaXRzIHN1YnNjcmlwdGlvblxuICAgICAgLy8gaXMgZmlyZWQgdG8gd2FrZSBpdCB1cC4gIFdlIGNhbid0IGp1c3QgcmVseSBvbiB0aGlzLCB0aG91Z2gsIGJlY2F1c2VcbiAgICAgIC8vIHRoaXMgb25seSBleGVjdXRlcyB3aGVuIGFuIGF0b20vc2VsZWN0b3IgaXMgZGlydHkgYW5kIHRoZSBhdG9tL3NlbGVjdG9yXG4gICAgICAvLyBwYXNzZWQgdG8gdGhlIGhvb2sgY2FuIGR5bmFtaWNhbGx5IGNoYW5nZS5cblxuXG4gICAgICBwcmV2TG9hZGFibGVSZWYuY3VycmVudCA9IG5ld0xvYWRhYmxlO1xuICAgIH0sIGNvbXBvbmVudE5hbWUpO1xuICAgIHJldHVybiBzdWJzY3JpcHRpb24ucmVsZWFzZTtcbiAgfSwgW3N0b3JlUmVmLCByZWNvaWxWYWx1ZSwgY29tcG9uZW50TmFtZSwgZ2V0TG9hZGFibGVdKTtcbiAgY29uc3Qgc291cmNlID0gdXNlUmVjb2lsTXV0YWJsZVNvdXJjZSQxKCk7XG4gIGNvbnN0IGxvYWRhYmxlID0gdXNlTXV0YWJsZVNvdXJjZSQxKHNvdXJjZSwgZ2V0TG9hZGFibGVXaXRoVGVzdGluZywgc3Vic2NyaWJlKTtcbiAgY29uc3QgcHJldkxvYWRhYmxlUmVmID0gdXNlUmVmJDQobG9hZGFibGUpO1xuICB1c2VFZmZlY3QkMygoKSA9PiB7XG4gICAgcHJldkxvYWRhYmxlUmVmLmN1cnJlbnQgPSBsb2FkYWJsZTtcbiAgfSk7XG4gIHJldHVybiBsb2FkYWJsZTtcbn1cblxuZnVuY3Rpb24gdXNlUmVjb2lsVmFsdWVMb2FkYWJsZV9MRUdBQ1kocmVjb2lsVmFsdWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vICRGbG93Rml4TWVbZXNjYXBlZC1nZW5lcmljXVxuICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsVmFsdWUsICd1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlJyk7XG4gIH1cblxuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDIoKTtcbiAgY29uc3QgW18sIGZvcmNlVXBkYXRlXSA9IHVzZVN0YXRlJDEoW10pO1xuICBjb25zdCBjb21wb25lbnROYW1lID0gUmVjb2lsX3VzZUNvbXBvbmVudE5hbWUoKTtcbiAgdXNlRWZmZWN0JDMoKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gc3RvcmVSZWYuY3VycmVudDtcbiAgICBjb25zdCBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVUb1JlY29pbFZhbHVlJDEoc3RvcmUsIHJlY29pbFZhbHVlLCBfc3RhdGUgPT4ge1xuICAgICAgdmFyIF9wcmV2TG9hZGFibGVSZWYkY3VycjtcblxuICAgICAgaWYgKCFSZWNvaWxfZ2t4XzEoJ3JlY29pbF9zdXBwcmVzc19yZXJlbmRlcl9pbl9jYWxsYmFjaycpKSB7XG4gICAgICAgIHJldHVybiBmb3JjZVVwZGF0ZShbXSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5ld0xvYWRhYmxlID0gZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDIoc3RvcmUsIHJlY29pbFZhbHVlLCBzdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlKTtcblxuICAgICAgaWYgKCEoKF9wcmV2TG9hZGFibGVSZWYkY3VyciA9IHByZXZMb2FkYWJsZVJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfcHJldkxvYWRhYmxlUmVmJGN1cnIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wcmV2TG9hZGFibGVSZWYkY3Vyci5pcyhuZXdMb2FkYWJsZSkpKSB7XG4gICAgICAgIGZvcmNlVXBkYXRlKG5ld0xvYWRhYmxlKTtcbiAgICAgIH1cblxuICAgICAgcHJldkxvYWRhYmxlUmVmLmN1cnJlbnQgPSBuZXdMb2FkYWJsZTtcbiAgICB9LCBjb21wb25lbnROYW1lKTtcbiAgICAvKipcbiAgICAgKiBTaW5jZSB3ZSdyZSBzdWJzY3JpYmluZyBpbiBhbiBlZmZlY3Qgd2UgbmVlZCB0byB1cGRhdGUgdG8gdGhlIGxhdGVzdFxuICAgICAqIHZhbHVlIG9mIHRoZSBhdG9tIHNpbmNlIGl0IG1heSBoYXZlIGNoYW5nZWQgc2luY2Ugd2UgcmVuZGVyZWQuIFdlIGNhblxuICAgICAqIGdvIGFoZWFkIGFuZCBkbyB0aGF0IG5vdywgdW5sZXNzIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSBiYXRjaCAtLVxuICAgICAqIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGRvIGl0IGF0IHRoZSBlbmQgb2YgdGhlIGJhdGNoLCBkdWUgdG8gdGhlXG4gICAgICogZm9sbG93aW5nIGVkZ2UgY2FzZTogU3VwcG9zZSBhbiBhdG9tIGlzIHVwZGF0ZWQgaW4gYW5vdGhlciB1c2VFZmZlY3RcbiAgICAgKiBvZiB0aGlzIHNhbWUgY29tcG9uZW50LiBUaGVuIHRoZSBmb2xsb3dpbmcgc2VxdWVuY2Ugb2YgZXZlbnRzIG9jY3VyOlxuICAgICAqIDEuIEF0b20gaXMgdXBkYXRlZCBhbmQgc3VicyBmaXJlZCAoYnV0IHdlIG1heSBub3QgYmUgc3Vic2NyaWJlZFxuICAgICAqICAgIHlldCBkZXBlbmRpbmcgb24gb3JkZXIgb2YgZWZmZWN0cywgc28gd2UgbWlzcyB0aGlzKSBVcGRhdGVkIHZhbHVlXG4gICAgICogICAgaXMgbm93IGluIG5leHRUcmVlLCBidXQgbm90IGN1cnJlbnRUcmVlLlxuICAgICAqIDIuIFRoaXMgZWZmZWN0IGhhcHBlbnMuIFdlIHN1YnNjcmliZSBhbmQgdXBkYXRlLlxuICAgICAqIDMuIEZyb20gdGhlIHVwZGF0ZSB3ZSByZS1yZW5kZXIgYW5kIHJlYWQgY3VycmVudFRyZWUsIHdpdGggb2xkIHZhbHVlLlxuICAgICAqIDQuIEJhdGNoZXIncyBlZmZlY3Qgc2V0cyBjdXJyZW50VHJlZSB0byBuZXh0VHJlZS5cbiAgICAgKiBJbiB0aGlzIHNlcXVlbmNlIHdlIG1pc3MgdGhlIHVwZGF0ZS4gVG8gYXZvaWQgdGhhdCwgYWRkIHRoZSB1cGRhdGVcbiAgICAgKiB0byBxdWV1ZWRDb21wb25lbnRDYWxsYmFjayBpZiBhIGJhdGNoIGlzIGluIHByb2dyZXNzLlxuICAgICAqL1xuXG4gICAgaWYgKHN0b3JlU3RhdGUubmV4dFRyZWUpIHtcbiAgICAgIHN0b3JlLmdldFN0YXRlKCkucXVldWVkQ29tcG9uZW50Q2FsbGJhY2tzX0RFUFJFQ0FURUQucHVzaCgoKSA9PiB7XG4gICAgICAgIHByZXZMb2FkYWJsZVJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgZm9yY2VVcGRhdGUoW10pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfcHJldkxvYWRhYmxlUmVmJGN1cnIyO1xuXG4gICAgICBpZiAoIVJlY29pbF9na3hfMSgncmVjb2lsX3N1cHByZXNzX3JlcmVuZGVyX2luX2NhbGxiYWNrJykpIHtcbiAgICAgICAgcmV0dXJuIGZvcmNlVXBkYXRlKFtdKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbmV3TG9hZGFibGUgPSBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMihzdG9yZSwgcmVjb2lsVmFsdWUsIHN0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWUpO1xuXG4gICAgICBpZiAoISgoX3ByZXZMb2FkYWJsZVJlZiRjdXJyMiA9IHByZXZMb2FkYWJsZVJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfcHJldkxvYWRhYmxlUmVmJGN1cnIyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcHJldkxvYWRhYmxlUmVmJGN1cnIyLmlzKG5ld0xvYWRhYmxlKSkpIHtcbiAgICAgICAgZm9yY2VVcGRhdGUobmV3TG9hZGFibGUpO1xuICAgICAgfVxuXG4gICAgICBwcmV2TG9hZGFibGVSZWYuY3VycmVudCA9IG5ld0xvYWRhYmxlO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzY3JpcHRpb24ucmVsZWFzZTtcbiAgfSwgW2NvbXBvbmVudE5hbWUsIHJlY29pbFZhbHVlLCBzdG9yZVJlZl0pO1xuICBjb25zdCBsb2FkYWJsZSA9IGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQyKHN0b3JlUmVmLmN1cnJlbnQsIHJlY29pbFZhbHVlKTtcbiAgY29uc3QgcHJldkxvYWRhYmxlUmVmID0gdXNlUmVmJDQobG9hZGFibGUpO1xuICB1c2VFZmZlY3QkMygoKSA9PiB7XG4gICAgcHJldkxvYWRhYmxlUmVmLmN1cnJlbnQgPSBsb2FkYWJsZTtcbiAgfSk7XG4gIHJldHVybiBsb2FkYWJsZTtcbn1cbi8qKlxuICBMaWtlIHVzZVJlY29pbFZhbHVlKCksIGJ1dCBlaXRoZXIgcmV0dXJucyB0aGUgdmFsdWUgaWYgYXZhaWxhYmxlIG9yXG4gIGp1c3QgdW5kZWZpbmVkIGlmIG5vdCBhdmFpbGFibGUgZm9yIGFueSByZWFzb24sIHN1Y2ggYXMgcGVuZGluZyBvciBlcnJvci5cbiovXG5cblxuZnVuY3Rpb24gdXNlUmVjb2lsVmFsdWVMb2FkYWJsZShyZWNvaWxWYWx1ZSkge1xuICBpZiAoUmVjb2lsX2dreF8xKCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZiLXd3dy9yZWFjdC1ob29rc1xuICAgIFJlY29pbF91c2VSZXRhaW4ocmVjb2lsVmFsdWUpO1xuICB9XG5cbiAgaWYgKG11dGFibGVTb3VyY2VFeGlzdHMkMigpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZiLXd3dy9yZWFjdC1ob29rc1xuICAgIHJldHVybiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX01VVEFCTEVTT1VSQ0UocmVjb2lsVmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmYi13d3cvcmVhY3QtaG9va3NcbiAgICByZXR1cm4gdXNlUmVjb2lsVmFsdWVMb2FkYWJsZV9MRUdBQ1kocmVjb2lsVmFsdWUpO1xuICB9XG59XG4vKipcbiAgUmV0dXJucyB0aGUgdmFsdWUgcmVwcmVzZW50ZWQgYnkgdGhlIFJlY29pbFZhbHVlLlxuICBJZiB0aGUgdmFsdWUgaXMgcGVuZGluZywgaXQgd2lsbCB0aHJvdyBhIFByb21pc2UgdG8gc3VzcGVuZCB0aGUgY29tcG9uZW50LFxuICBpZiB0aGUgdmFsdWUgaXMgYW4gZXJyb3IgaXQgd2lsbCB0aHJvdyBpdCBmb3IgdGhlIG5lYXJlc3QgUmVhY3QgZXJyb3IgYm91bmRhcnkuXG4gIFRoaXMgd2lsbCBhbHNvIHN1YnNjcmliZSB0aGUgY29tcG9uZW50IGZvciBhbnkgdXBkYXRlcyBpbiB0aGUgdmFsdWUuXG4gICovXG5cblxuZnVuY3Rpb24gdXNlUmVjb2lsVmFsdWUocmVjb2lsVmFsdWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vICRGbG93Rml4TWVbZXNjYXBlZC1nZW5lcmljXVxuICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsVmFsdWUsICd1c2VSZWNvaWxWYWx1ZScpO1xuICB9XG5cbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQyKCk7XG4gIGNvbnN0IGxvYWRhYmxlID0gdXNlUmVjb2lsVmFsdWVMb2FkYWJsZShyZWNvaWxWYWx1ZSk7XG4gIHJldHVybiBoYW5kbGVMb2FkYWJsZShsb2FkYWJsZSwgcmVjb2lsVmFsdWUsIHN0b3JlUmVmKTtcbn1cbi8qKlxuICBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhbGxvd3MgdGhlIHZhbHVlIG9mIGEgUmVjb2lsU3RhdGUgdG8gYmUgdXBkYXRlZCwgYnV0IGRvZXNcbiAgbm90IHN1YnNjcmliZSB0aGUgY29tcG9uZW50IHRvIGNoYW5nZXMgdG8gdGhhdCBSZWNvaWxTdGF0ZS5cbiovXG5cblxuZnVuY3Rpb24gdXNlU2V0UmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vICRGbG93Rml4TWVbZXNjYXBlZC1nZW5lcmljXVxuICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUsICd1c2VTZXRSZWNvaWxTdGF0ZScpO1xuICB9XG5cbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQyKCk7XG4gIHJldHVybiB1c2VDYWxsYmFjayQxKG5ld1ZhbHVlT3JVcGRhdGVyID0+IHtcbiAgICBzZXRSZWNvaWxWYWx1ZSQyKHN0b3JlUmVmLmN1cnJlbnQsIHJlY29pbFN0YXRlLCBuZXdWYWx1ZU9yVXBkYXRlcik7XG4gIH0sIFtzdG9yZVJlZiwgcmVjb2lsU3RhdGVdKTtcbn1cbi8qKlxuICBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIHJlc2V0IHRoZSB2YWx1ZSBvZiBhIFJlY29pbFN0YXRlIHRvIGl0cyBkZWZhdWx0XG4qL1xuXG5cbmZ1bmN0aW9uIHVzZVJlc2V0UmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vICRGbG93Rml4TWVbZXNjYXBlZC1nZW5lcmljXVxuICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUsICd1c2VSZXNldFJlY29pbFN0YXRlJyk7XG4gIH1cblxuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDIoKTtcbiAgcmV0dXJuIHVzZUNhbGxiYWNrJDEoKCkgPT4ge1xuICAgIHNldFJlY29pbFZhbHVlJDIoc3RvcmVSZWYuY3VycmVudCwgcmVjb2lsU3RhdGUsIERFRkFVTFRfVkFMVUUkMik7XG4gIH0sIFtzdG9yZVJlZiwgcmVjb2lsU3RhdGVdKTtcbn1cbi8qKlxuICBFcXVpdmFsZW50IHRvIHVzZVN0YXRlKCkuIEFsbG93cyB0aGUgdmFsdWUgb2YgdGhlIFJlY29pbFN0YXRlIHRvIGJlIHJlYWQgYW5kIHdyaXR0ZW4uXG4gIFN1YnNlcXVlbnQgdXBkYXRlcyB0byB0aGUgUmVjb2lsU3RhdGUgd2lsbCBjYXVzZSB0aGUgY29tcG9uZW50IHRvIHJlLXJlbmRlci4gSWYgdGhlXG4gIFJlY29pbFN0YXRlIGlzIHBlbmRpbmcsIHRoaXMgd2lsbCBzdXNwZW5kIHRoZSBjb21wb25lbnQgYW5kIGluaXRpYXRlIHRoZVxuICByZXRyaWV2YWwgb2YgdGhlIHZhbHVlLiBJZiBldmFsdWF0aW5nIHRoZSBSZWNvaWxTdGF0ZSByZXN1bHRlZCBpbiBhbiBlcnJvciwgdGhpcyB3aWxsXG4gIHRocm93IHRoZSBlcnJvciBzbyB0aGF0IHRoZSBuZWFyZXN0IFJlYWN0IGVycm9yIGJvdW5kYXJ5IGNhbiBjYXRjaCBpdC5cbiovXG5cblxuZnVuY3Rpb24gdXNlUmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vICRGbG93Rml4TWVbZXNjYXBlZC1nZW5lcmljXVxuICAgIHZhbGlkYXRlUmVjb2lsVmFsdWUocmVjb2lsU3RhdGUsICd1c2VSZWNvaWxTdGF0ZScpO1xuICB9XG5cbiAgcmV0dXJuIFt1c2VSZWNvaWxWYWx1ZShyZWNvaWxTdGF0ZSksIHVzZVNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKV07XG59XG4vKipcbiAgTGlrZSB1c2VSZWNvaWxTdGF0ZSgpLCBidXQgZG9lcyBub3QgY2F1c2UgU3VzcGVuc2Ugb3IgUmVhY3QgZXJyb3IgaGFuZGxpbmcuIFJldHVybnNcbiAgYW4gb2JqZWN0IHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIFJlY29pbFN0YXRlIGlzIGF2YWlsYWJsZSwgcGVuZGluZywgb3JcbiAgdW5hdmFpbGFibGUgZHVlIHRvIGFuIGVycm9yLlxuKi9cblxuXG5mdW5jdGlvbiB1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlKHJlY29pbFN0YXRlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2VzY2FwZWQtZ2VuZXJpY11cbiAgICB2YWxpZGF0ZVJlY29pbFZhbHVlKHJlY29pbFN0YXRlLCAndXNlUmVjb2lsU3RhdGVMb2FkYWJsZScpO1xuICB9XG5cbiAgcmV0dXJuIFt1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlKHJlY29pbFN0YXRlKSwgdXNlU2V0UmVjb2lsU3RhdGUocmVjb2lsU3RhdGUpXTtcbn1cblxuZnVuY3Rpb24gdXNlU2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzKCkge1xuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDIoKTtcbiAgcmV0dXJuICh2YWx1ZXMsIHRyYW5zYWN0aW9uTWV0YWRhdGEgPSB7fSkgPT4ge1xuICAgIGJhdGNoVXBkYXRlcyQyKCgpID0+IHtcbiAgICAgIHN0b3JlUmVmLmN1cnJlbnQuYWRkVHJhbnNhY3Rpb25NZXRhZGF0YSh0cmFuc2FjdGlvbk1ldGFkYXRhKTtcbiAgICAgIHZhbHVlcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiBzZXRVbnZhbGlkYXRlZFJlY29pbFZhbHVlJDIoc3RvcmVSZWYuY3VycmVudCwgbmV3IEFic3RyYWN0UmVjb2lsVmFsdWUkMyhrZXkpLCB2YWx1ZSkpO1xuICAgIH0pO1xuICB9O1xufVxuXG52YXIgUmVjb2lsX0hvb2tzID0ge1xuICByZWNvaWxDb21wb25lbnRHZXRSZWNvaWxWYWx1ZUNvdW50X0ZPUl9URVNUSU5HLFxuICB1c2VSZWNvaWxJbnRlcmZhY2U6IHVzZVJlY29pbEludGVyZmFjZV9ERVBSRUNBVEVELFxuICB1c2VSZWNvaWxTdGF0ZSxcbiAgdXNlUmVjb2lsU3RhdGVMb2FkYWJsZSxcbiAgdXNlUmVjb2lsVmFsdWUsXG4gIHVzZVJlY29pbFZhbHVlTG9hZGFibGUsXG4gIHVzZVJlc2V0UmVjb2lsU3RhdGUsXG4gIHVzZVNldFJlY29pbFN0YXRlLFxuICB1c2VTZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXNcbn07XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGEgbWFwIGNvbnRhaW5pbmcgYWxsIG9mIHRoZSBrZXlzICsgdmFsdWVzIGZyb20gdGhlIG9yaWdpbmFsIG1hcCB3aGVyZVxuICogdGhlIGdpdmVuIGNhbGxiYWNrIHJldHVybmVkIHRydWUuXG4gKi9cblxuZnVuY3Rpb24gZmlsdGVyTWFwKG1hcCwgY2FsbGJhY2spIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcCgpO1xuXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG1hcCkge1xuICAgIGlmIChjYWxsYmFjayh2YWx1ZSwga2V5KSkge1xuICAgICAgcmVzdWx0LnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgUmVjb2lsX2ZpbHRlck1hcCA9IGZpbHRlck1hcDtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG4vKipcbiAqIFJldHVybnMgYSBzZXQgY29udGFpbmluZyBhbGwgb2YgdGhlIHZhbHVlcyBmcm9tIHRoZSBvcmlnaW5hbCBzZXQgd2hlcmVcbiAqIHRoZSBnaXZlbiBjYWxsYmFjayByZXR1cm5lZCB0cnVlLlxuICovXG5cbmZ1bmN0aW9uIGZpbHRlclNldChzZXQsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBTZXQoKTtcblxuICBmb3IgKGNvbnN0IHZhbHVlIG9mIHNldCkge1xuICAgIGlmIChjYWxsYmFjayh2YWx1ZSkpIHtcbiAgICAgIHJlc3VsdC5hZGQodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBSZWNvaWxfZmlsdGVyU2V0ID0gZmlsdGVyU2V0O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gbWVyZ2VNYXBzKC4uLm1hcHMpIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcCgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWFwcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGl0ZXJhdG9yID0gbWFwc1tpXS5rZXlzKCk7XG4gICAgbGV0IG5leHRLZXk7XG5cbiAgICB3aGlsZSAoIShuZXh0S2V5ID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXSAtIG1hcC9pdGVyYXRvciBrbm93cyBub3RoaW5nIGFib3V0IGZsb3cgdHlwZXNcbiAgICAgIHJlc3VsdC5zZXQobmV4dEtleS52YWx1ZSwgbWFwc1tpXS5nZXQobmV4dEtleS52YWx1ZSkpO1xuICAgIH1cbiAgfVxuICAvKiAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dICg+PTAuNjYuMCBzaXRlPXd3dyxtb2JpbGUpIFRoaXMgY29tbWVudFxuICAgKiBzdXBwcmVzc2VzIGFuIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC42NiB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGUgZXJyb3JcbiAgICogZGVsZXRlIHRoaXMgY29tbWVudCBhbmQgcnVuIEZsb3cuICovXG5cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgUmVjb2lsX21lcmdlTWFwcyA9IG1lcmdlTWFwcztcblxuY29uc3Qge1xuICBiYXRjaFVwZGF0ZXM6IGJhdGNoVXBkYXRlcyQzXG59ID0gUmVjb2lsX0JhdGNoaW5nO1xuXG5jb25zdCB7XG4gIERFRkFVTFRfVkFMVUU6IERFRkFVTFRfVkFMVUUkMyxcbiAgZ2V0Tm9kZTogZ2V0Tm9kZSQzLFxuICBub2Rlczogbm9kZXMkMVxufSA9IFJlY29pbF9Ob2RlO1xuXG5jb25zdCB7XG4gIHVzZVN0b3JlUmVmOiB1c2VTdG9yZVJlZiQzXG59ID0gUmVjb2lsX1JlY29pbFJvb3RfcmVhY3Q7XG5cbmNvbnN0IHtcbiAgQWJzdHJhY3RSZWNvaWxWYWx1ZTogQWJzdHJhY3RSZWNvaWxWYWx1ZSQ0LFxuICBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlOiBzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDFcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWVJbnRlcmZhY2U7XG5cbmNvbnN0IHtcbiAgU1VTUEVOU0VfVElNRU9VVF9NUzogU1VTUEVOU0VfVElNRU9VVF9NUyQyXG59ID0gUmVjb2lsX1JldGVudGlvbjtcblxuY29uc3Qge1xuICBTbmFwc2hvdDogU25hcHNob3QkMSxcbiAgY2xvbmVTbmFwc2hvdDogY2xvbmVTbmFwc2hvdCQxXG59ID0gUmVjb2lsX1NuYXBzaG90JDE7XG5cbmNvbnN0IHtcbiAgaXNTU1I6IGlzU1NSJDNcbn0gPSBSZWNvaWxfRW52aXJvbm1lbnQ7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5jb25zdCB7XG4gIHVzZUNhbGxiYWNrOiB1c2VDYWxsYmFjayQyLFxuICB1c2VFZmZlY3Q6IHVzZUVmZmVjdCQ0LFxuICB1c2VSZWY6IHVzZVJlZiQ1LFxuICB1c2VTdGF0ZTogdXNlU3RhdGUkMlxufSA9IHJlYWN0O1xuXG5mdW5jdGlvbiB1c2VUcmFuc2FjdGlvblN1YnNjcmlwdGlvbihjYWxsYmFjaykge1xuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDMoKTtcbiAgdXNlRWZmZWN0JDQoKCkgPT4ge1xuICAgIGNvbnN0IHN1YiA9IHN0b3JlUmVmLmN1cnJlbnQuc3Vic2NyaWJlVG9UcmFuc2FjdGlvbnMoY2FsbGJhY2spO1xuICAgIHJldHVybiBzdWIucmVsZWFzZTtcbiAgfSwgW2NhbGxiYWNrLCBzdG9yZVJlZl0pO1xufVxuXG5mdW5jdGlvbiBleHRlcm5hbGx5VmlzaWJsZUF0b21WYWx1ZXNJblN0YXRlKHN0YXRlKSB7XG4gIGNvbnN0IGF0b21WYWx1ZXMgPSBzdGF0ZS5hdG9tVmFsdWVzLnRvTWFwKCk7XG4gIGNvbnN0IHBlcnNpc3RlZEF0b21Db250ZW50c1ZhbHVlcyA9IFJlY29pbF9tYXBNYXAoUmVjb2lsX2ZpbHRlck1hcChhdG9tVmFsdWVzLCAodiwgaykgPT4ge1xuICAgIGNvbnN0IG5vZGUgPSBnZXROb2RlJDMoayk7XG4gICAgY29uc3QgcGVyc2lzdGVuY2UgPSBub2RlLnBlcnNpc3RlbmNlX1VOU1RBQkxFO1xuICAgIHJldHVybiBwZXJzaXN0ZW5jZSAhPSBudWxsICYmIHBlcnNpc3RlbmNlLnR5cGUgIT09ICdub25lJyAmJiB2LnN0YXRlID09PSAnaGFzVmFsdWUnO1xuICB9KSwgdiA9PiB2LmNvbnRlbnRzKTsgLy8gTWVyZ2UgaW4gbm9udmFsaWRhdGVkIGF0b21zOyB3ZSBtYXkgbm90IGhhdmUgZGVmcyBmb3IgdGhlbSBidXQgdGhleSB3aWxsXG4gIC8vIGFsbCBoYXZlIHBlcnNpc3RlbmNlIG9uIG9yIHRoZXkgd291bGRuJ3QgYmUgdGhlcmUgaW4gdGhlIGZpcnN0IHBsYWNlLlxuXG4gIHJldHVybiBSZWNvaWxfbWVyZ2VNYXBzKHN0YXRlLm5vbnZhbGlkYXRlZEF0b21zLnRvTWFwKCksIHBlcnNpc3RlZEF0b21Db250ZW50c1ZhbHVlcyk7XG59XG5cbi8qKlxuICBDYWxscyB0aGUgZ2l2ZW4gY2FsbGJhY2sgYWZ0ZXIgYW55IGF0b21zIGhhdmUgYmVlbiBtb2RpZmllZCBhbmQgdGhlIGNvbnNlcXVlbnRcbiAgY29tcG9uZW50IHJlLXJlbmRlcnMgaGF2ZSBiZWVuIGNvbW1pdHRlZC4gVGhpcyBpcyBpbnRlbmRlZCBmb3IgcGVyc2lzdGluZ1xuICB0aGUgdmFsdWVzIG9mIHRoZSBhdG9tcyB0byBzdG9yYWdlLiBUaGUgc3RvcmVkIHZhbHVlcyBjYW4gdGhlbiBiZSByZXN0b3JlZFxuICB1c2luZyB0aGUgdXNlU2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzIGhvb2suXG5cbiAgVGhlIGNhbGxiYWNrIHJlY2VpdmVzIHRoZSBmb2xsb3dpbmcgaW5mbzpcblxuICBhdG9tVmFsdWVzOiBUaGUgY3VycmVudCB2YWx1ZSBvZiBldmVyeSBhdG9tIHRoYXQgaXMgYm90aCBwZXJzaXN0YWJsZSAocGVyc2lzdGVuY2VcbiAgICAgICAgICAgICAgdHlwZSBub3Qgc2V0IHRvICdub25lJykgYW5kIHdob3NlIHZhbHVlIGlzIGF2YWlsYWJsZSAobm90IGluIGFuXG4gICAgICAgICAgICAgIGVycm9yIG9yIGxvYWRpbmcgc3RhdGUpLlxuXG4gIHByZXZpb3VzQXRvbVZhbHVlczogVGhlIHZhbHVlIG9mIGV2ZXJ5IHBlcnNpc3RhYmxlIGFuZCBhdmFpbGFibGUgYXRvbSBiZWZvcmVcbiAgICAgICAgICAgICAgIHRoZSB0cmFuc2FjdGlvbiBiZWdhbi5cblxuICBhdG9tSW5mbzogQSBtYXAgY29udGFpbmluZyB0aGUgcGVyc2lzdGVuY2Ugc2V0dGluZ3MgZm9yIGVhY2ggYXRvbS4gRXZlcnkga2V5XG4gICAgICAgICAgICB0aGF0IGV4aXN0cyBpbiBhdG9tVmFsdWVzIHdpbGwgYWxzbyBleGlzdCBpbiBhdG9tSW5mby5cblxuICBtb2RpZmllZEF0b21zOiBUaGUgc2V0IG9mIGF0b21zIHRoYXQgd2VyZSB3cml0dGVuIHRvIGR1cmluZyB0aGUgdHJhbnNhY3Rpb24uXG5cbiAgdHJhbnNhY3Rpb25NZXRhZGF0YTogQXJiaXRyYXJ5IGluZm9ybWF0aW9uIHRoYXQgd2FzIGFkZGVkIHZpYSB0aGVcbiAgICAgICAgICB1c2VTZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXMgaG9vay4gVXNlZnVsIGZvciBpZ25vcmluZyB0aGUgdXNlU2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzXG4gICAgICAgICAgdHJhbnNhY3Rpb24sIHRvIGF2b2lkIGxvb3BzLlxuKi9cbmZ1bmN0aW9uIHVzZVRyYW5zYWN0aW9uT2JzZXJ2YXRpb25fREVQUkVDQVRFRChjYWxsYmFjaykge1xuICB1c2VUcmFuc2FjdGlvblN1YnNjcmlwdGlvbih1c2VDYWxsYmFjayQyKHN0b3JlID0+IHtcbiAgICBsZXQgcHJldmlvdXNUcmVlID0gc3RvcmUuZ2V0U3RhdGUoKS5wcmV2aW91c1RyZWU7XG4gICAgY29uc3QgY3VycmVudFRyZWUgPSBzdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlO1xuXG4gICAgaWYgKCFwcmV2aW91c1RyZWUpIHtcbiAgICAgIFJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbignVHJhbnNhY3Rpb24gc3Vic2NyaWJlcnMgbm90aWZpZWQgd2l0aG91dCBhIHByZXZpb3VzIHRyZWUgYmVpbmcgcHJlc2VudCAtLSB0aGlzIGlzIGEgYnVnIGluIFJlY29pbCcpO1xuICAgICAgcHJldmlvdXNUcmVlID0gc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZTsgLy8gYXR0ZW1wdCB0byB0cnVuZGxlIG9uXG4gICAgfVxuXG4gICAgY29uc3QgYXRvbVZhbHVlcyA9IGV4dGVybmFsbHlWaXNpYmxlQXRvbVZhbHVlc0luU3RhdGUoY3VycmVudFRyZWUpO1xuICAgIGNvbnN0IHByZXZpb3VzQXRvbVZhbHVlcyA9IGV4dGVybmFsbHlWaXNpYmxlQXRvbVZhbHVlc0luU3RhdGUocHJldmlvdXNUcmVlKTtcbiAgICBjb25zdCBhdG9tSW5mbyA9IFJlY29pbF9tYXBNYXAobm9kZXMkMSwgbm9kZSA9PiB7XG4gICAgICB2YXIgX25vZGUkcGVyc2lzdGVuY2VfVU5TLCBfbm9kZSRwZXJzaXN0ZW5jZV9VTlMyLCBfbm9kZSRwZXJzaXN0ZW5jZV9VTlMzLCBfbm9kZSRwZXJzaXN0ZW5jZV9VTlM0O1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwZXJzaXN0ZW5jZV9VTlNUQUJMRToge1xuICAgICAgICAgIHR5cGU6IChfbm9kZSRwZXJzaXN0ZW5jZV9VTlMgPSAoX25vZGUkcGVyc2lzdGVuY2VfVU5TMiA9IG5vZGUucGVyc2lzdGVuY2VfVU5TVEFCTEUpID09PSBudWxsIHx8IF9ub2RlJHBlcnNpc3RlbmNlX1VOUzIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub2RlJHBlcnNpc3RlbmNlX1VOUzIudHlwZSkgIT09IG51bGwgJiYgX25vZGUkcGVyc2lzdGVuY2VfVU5TICE9PSB2b2lkIDAgPyBfbm9kZSRwZXJzaXN0ZW5jZV9VTlMgOiAnbm9uZScsXG4gICAgICAgICAgYmFja0J1dHRvbjogKF9ub2RlJHBlcnNpc3RlbmNlX1VOUzMgPSAoX25vZGUkcGVyc2lzdGVuY2VfVU5TNCA9IG5vZGUucGVyc2lzdGVuY2VfVU5TVEFCTEUpID09PSBudWxsIHx8IF9ub2RlJHBlcnNpc3RlbmNlX1VOUzQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub2RlJHBlcnNpc3RlbmNlX1VOUzQuYmFja0J1dHRvbikgIT09IG51bGwgJiYgX25vZGUkcGVyc2lzdGVuY2VfVU5TMyAhPT0gdm9pZCAwID8gX25vZGUkcGVyc2lzdGVuY2VfVU5TMyA6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7IC8vIEZpbHRlciBvbiBleGlzdGFuY2UgaW4gYXRvbVZhbHVlcyBzbyB0aGF0IGV4dGVybmFsbHktdmlzaWJsZSBydWxlc1xuICAgIC8vIGFyZSBhbHNvIGFwcGxpZWQgdG8gbW9kaWZpZWQgYXRvbXMgKHNwZWNpZmljYWxseSBleGNsdWRlIHNlbGVjdG9ycyk6XG5cbiAgICBjb25zdCBtb2RpZmllZEF0b21zID0gUmVjb2lsX2ZpbHRlclNldChjdXJyZW50VHJlZS5kaXJ0eUF0b21zLCBrID0+IGF0b21WYWx1ZXMuaGFzKGspIHx8IHByZXZpb3VzQXRvbVZhbHVlcy5oYXMoaykpO1xuICAgIGNhbGxiYWNrKHtcbiAgICAgIGF0b21WYWx1ZXMsXG4gICAgICBwcmV2aW91c0F0b21WYWx1ZXMsXG4gICAgICBhdG9tSW5mbyxcbiAgICAgIG1vZGlmaWVkQXRvbXMsXG4gICAgICB0cmFuc2FjdGlvbk1ldGFkYXRhOiB7IC4uLmN1cnJlbnRUcmVlLnRyYW5zYWN0aW9uTWV0YWRhdGFcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgW2NhbGxiYWNrXSkpO1xufVxuXG5mdW5jdGlvbiB1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyKGNhbGxiYWNrKSB7XG4gIHVzZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uKHVzZUNhbGxiYWNrJDIoc3RvcmUgPT4ge1xuICAgIGNvbnN0IHNuYXBzaG90ID0gY2xvbmVTbmFwc2hvdCQxKHN0b3JlLCAnY3VycmVudCcpO1xuICAgIGNvbnN0IHByZXZpb3VzU25hcHNob3QgPSBjbG9uZVNuYXBzaG90JDEoc3RvcmUsICdwcmV2aW91cycpO1xuICAgIGNhbGxiYWNrKHtcbiAgICAgIHNuYXBzaG90LFxuICAgICAgcHJldmlvdXNTbmFwc2hvdFxuICAgIH0pO1xuICB9LCBbY2FsbGJhY2tdKSk7XG59IC8vIFJldHVybiBhIHNuYXBzaG90IG9mIHRoZSBjdXJyZW50IHN0YXRlIGFuZCBzdWJzY3JpYmUgdG8gYWxsIHN0YXRlIGNoYW5nZXNcblxuXG5mdW5jdGlvbiB1c2VSZWNvaWxTbmFwc2hvdCgpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQzKCk7XG4gIGNvbnN0IFtzbmFwc2hvdCwgc2V0U25hcHNob3RdID0gdXNlU3RhdGUkMigoKSA9PiBjbG9uZVNuYXBzaG90JDEoc3RvcmVSZWYuY3VycmVudCkpO1xuICBjb25zdCBwcmV2aW91c1NuYXBzaG90ID0gUmVjb2lsX3VzZVByZXZpb3VzKHNuYXBzaG90KTtcbiAgY29uc3QgdGltZW91dElEID0gdXNlUmVmJDUoKTtcbiAgdXNlRWZmZWN0JDQoKCkgPT4ge1xuICAgIGlmICh0aW1lb3V0SUQuY3VycmVudCAmJiAhaXNTU1IkMykge1xuICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0SUQuY3VycmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNuYXBzaG90LnJldGFpbigpO1xuICB9LCBbc25hcHNob3RdKTtcbiAgdXNlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb24odXNlQ2FsbGJhY2skMihzdG9yZSA9PiBzZXRTbmFwc2hvdChjbG9uZVNuYXBzaG90JDEoc3RvcmUpKSwgW10pKTtcblxuICBpZiAocHJldmlvdXNTbmFwc2hvdCAhPT0gc25hcHNob3QgJiYgIWlzU1NSJDMpIHtcbiAgICBpZiAodGltZW91dElELmN1cnJlbnQpIHtcbiAgICAgIHByZXZpb3VzU25hcHNob3QgPT09IG51bGwgfHwgcHJldmlvdXNTbmFwc2hvdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJldmlvdXNTbmFwc2hvdC5yZWxlYXNlX0lOVEVSTkFMKCk7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXRJRC5jdXJyZW50KTtcbiAgICB9XG5cbiAgICBzbmFwc2hvdC5yZXRhaW4oKTtcbiAgICB0aW1lb3V0SUQuY3VycmVudCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHNuYXBzaG90LnJlbGVhc2VfSU5URVJOQUwoKTtcbiAgICAgIHRpbWVvdXRJRC5jdXJyZW50ID0gbnVsbDtcbiAgICB9LCBTVVNQRU5TRV9USU1FT1VUX01TJDIpO1xuICB9XG5cbiAgcmV0dXJuIHNuYXBzaG90O1xufVxuXG5mdW5jdGlvbiB1c2VHb3RvUmVjb2lsU25hcHNob3QoKSB7XG4gIGNvbnN0IHN0b3JlUmVmID0gdXNlU3RvcmVSZWYkMygpO1xuICByZXR1cm4gdXNlQ2FsbGJhY2skMihzbmFwc2hvdCA9PiB7XG4gICAgdmFyIF9zdG9yZVN0YXRlJG5leHRUcmVlO1xuXG4gICAgY29uc3Qgc3RvcmVTdGF0ZSA9IHN0b3JlUmVmLmN1cnJlbnQuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBwcmV2ID0gKF9zdG9yZVN0YXRlJG5leHRUcmVlID0gc3RvcmVTdGF0ZS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlU3RhdGUkbmV4dFRyZWUgIT09IHZvaWQgMCA/IF9zdG9yZVN0YXRlJG5leHRUcmVlIDogc3RvcmVTdGF0ZS5jdXJyZW50VHJlZTtcbiAgICBjb25zdCBuZXh0ID0gc25hcHNob3QuZ2V0U3RvcmVfSU5URVJOQUwoKS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlO1xuICAgIGJhdGNoVXBkYXRlcyQzKCgpID0+IHtcbiAgICAgIGNvbnN0IGtleXNUb1VwZGF0ZSA9IG5ldyBTZXQoKTtcblxuICAgICAgZm9yIChjb25zdCBrZXlzIG9mIFtwcmV2LmF0b21WYWx1ZXMua2V5cygpLCBuZXh0LmF0b21WYWx1ZXMua2V5cygpXSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgICAgdmFyIF9wcmV2JGF0b21WYWx1ZXMkZ2V0LCBfbmV4dCRhdG9tVmFsdWVzJGdldDtcblxuICAgICAgICAgIGlmICgoKF9wcmV2JGF0b21WYWx1ZXMkZ2V0ID0gcHJldi5hdG9tVmFsdWVzLmdldChrZXkpKSA9PT0gbnVsbCB8fCBfcHJldiRhdG9tVmFsdWVzJGdldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3ByZXYkYXRvbVZhbHVlcyRnZXQuY29udGVudHMpICE9PSAoKF9uZXh0JGF0b21WYWx1ZXMkZ2V0ID0gbmV4dC5hdG9tVmFsdWVzLmdldChrZXkpKSA9PT0gbnVsbCB8fCBfbmV4dCRhdG9tVmFsdWVzJGdldCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25leHQkYXRvbVZhbHVlcyRnZXQuY29udGVudHMpICYmIGdldE5vZGUkMyhrZXkpLnNob3VsZFJlc3RvcmVGcm9tU25hcHNob3RzKSB7XG4gICAgICAgICAgICBrZXlzVG9VcGRhdGUuYWRkKGtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGtleXNUb1VwZGF0ZS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIHNldFJlY29pbFZhbHVlTG9hZGFibGUkMShzdG9yZVJlZi5jdXJyZW50LCBuZXcgQWJzdHJhY3RSZWNvaWxWYWx1ZSQ0KGtleSksIG5leHQuYXRvbVZhbHVlcy5oYXMoa2V5KSA/IFJlY29pbF9udWxsdGhyb3dzKG5leHQuYXRvbVZhbHVlcy5nZXQoa2V5KSkgOiBERUZBVUxUX1ZBTFVFJDMpO1xuICAgICAgfSk7XG4gICAgICBzdG9yZVJlZi5jdXJyZW50LnJlcGxhY2VTdGF0ZShzdGF0ZSA9PiB7XG4gICAgICAgIHJldHVybiB7IC4uLnN0YXRlLFxuICAgICAgICAgIHN0YXRlSUQ6IHNuYXBzaG90LmdldElEX0lOVEVSTkFMKClcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LCBbc3RvcmVSZWZdKTtcbn1cblxudmFyIFJlY29pbF9TbmFwc2hvdEhvb2tzID0ge1xuICB1c2VSZWNvaWxTbmFwc2hvdCxcbiAgdXNlR290b1JlY29pbFNuYXBzaG90LFxuICB1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyLFxuICB1c2VUcmFuc2FjdGlvbk9ic2VydmF0aW9uX0RFUFJFQ0FURUQsXG4gIHVzZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uX0RFUFJFQ0FURUQ6IHVzZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9uXG59O1xuXG5jb25zdCB7XG4gIHBlZWtOb2RlSW5mbzogcGVla05vZGVJbmZvJDJcbn0gPSBSZWNvaWxfRnVuY3Rpb25hbENvcmU7XG5cbmNvbnN0IHtcbiAgdXNlU3RvcmVSZWY6IHVzZVN0b3JlUmVmJDRcbn0gPSBSZWNvaWxfUmVjb2lsUm9vdF9yZWFjdDtcblxuZnVuY3Rpb24gdXNlR2V0UmVjb2lsVmFsdWVJbmZvKCkge1xuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDQoKTtcbiAgcmV0dXJuICh7XG4gICAga2V5XG4gIH0pID0+IHBlZWtOb2RlSW5mbyQyKHN0b3JlUmVmLmN1cnJlbnQsIHN0b3JlUmVmLmN1cnJlbnQuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZSwga2V5KTtcbn1cblxudmFyIFJlY29pbF91c2VHZXRSZWNvaWxWYWx1ZUluZm8gPSB1c2VHZXRSZWNvaWxWYWx1ZUluZm87XG5cbmNvbnN0IHtcbiAgUmVjb2lsUm9vdDogUmVjb2lsUm9vdCQxLFxuICB1c2VTdG9yZVJlZjogdXNlU3RvcmVSZWYkNVxufSA9IFJlY29pbF9SZWNvaWxSb290X3JlYWN0O1xuXG5cblxuY29uc3Qge1xuICB1c2VNZW1vOiB1c2VNZW1vJDJcbn0gPSByZWFjdDtcblxuZnVuY3Rpb24gdXNlUmVjb2lsQnJpZGdlQWNyb3NzUmVhY3RSb290cygpIHtcbiAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZVJlZiQ1KCkuY3VycmVudDtcbiAgcmV0dXJuIHVzZU1lbW8kMigoKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuICAgIGZ1bmN0aW9uIFJlY29pbEJyaWRnZSh7XG4gICAgICBjaGlsZHJlblxuICAgIH0pIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlRWxlbWVudChSZWNvaWxSb290JDEsIHtcbiAgICAgICAgc3RvcmVfSU5URVJOQUw6IHN0b3JlXG4gICAgICB9LCBjaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlY29pbEJyaWRnZTtcbiAgfSwgW3N0b3JlXSk7XG59XG5cbnZhciBSZWNvaWxfdXNlUmVjb2lsQnJpZGdlQWNyb3NzUmVhY3RSb290cyA9IHVzZVJlY29pbEJyaWRnZUFjcm9zc1JlYWN0Um9vdHM7XG5cbmNvbnN0IHtcbiAgbG9hZGFibGVXaXRoVmFsdWU6IGxvYWRhYmxlV2l0aFZhbHVlJDFcbn0gPSBSZWNvaWxfTG9hZGFibGUkMTtcblxuY29uc3Qge1xuICBERUZBVUxUX1ZBTFVFOiBERUZBVUxUX1ZBTFVFJDQsXG4gIGdldE5vZGU6IGdldE5vZGUkNFxufSA9IFJlY29pbF9Ob2RlO1xuXG5jb25zdCB7XG4gIGNvcHlUcmVlU3RhdGU6IGNvcHlUcmVlU3RhdGUkMSxcbiAgZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlOiBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMyxcbiAgaW52YWxpZGF0ZURvd25zdHJlYW1zOiBpbnZhbGlkYXRlRG93bnN0cmVhbXMkMSxcbiAgd3JpdGVMb2FkYWJsZVRvVHJlZVN0YXRlOiB3cml0ZUxvYWRhYmxlVG9UcmVlU3RhdGUkMVxufSA9IFJlY29pbF9SZWNvaWxWYWx1ZUludGVyZmFjZTtcblxuXG5cbmZ1bmN0aW9uIGlzQXRvbShyZWNvaWxWYWx1ZSkge1xuICByZXR1cm4gZ2V0Tm9kZSQ0KHJlY29pbFZhbHVlLmtleSkubm9kZVR5cGUgPT09ICdhdG9tJztcbn1cblxuY2xhc3MgVHJhbnNhY3Rpb25JbnRlcmZhY2VJbXBsIHtcbiAgY29uc3RydWN0b3Ioc3RvcmUsIHRyZWVTdGF0ZSkge1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9zdG9yZVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3RyZWVTdGF0ZVwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX2NoYW5nZXNcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdldFwiLCByZWNvaWxWYWx1ZSA9PiB7XG4gICAgICBpZiAodGhpcy5fY2hhbmdlcy5oYXMocmVjb2lsVmFsdWUua2V5KSkge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gICAgICAgIHJldHVybiB0aGlzLl9jaGFuZ2VzLmdldChyZWNvaWxWYWx1ZS5rZXkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzQXRvbShyZWNvaWxWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgUmVjb2lsX2VycignUmVhZGluZyBzZWxlY3RvcnMgd2l0aGluIGF0b21pY1VwZGF0ZSBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxvYWRhYmxlID0gZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDModGhpcy5fc3RvcmUsIHJlY29pbFZhbHVlLCB0aGlzLl90cmVlU3RhdGUpO1xuXG4gICAgICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScpIHtcbiAgICAgICAgcmV0dXJuIGxvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgfSBlbHNlIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2hhc0Vycm9yJykge1xuICAgICAgICB0aHJvdyBsb2FkYWJsZS5jb250ZW50cztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IFJlY29pbF9lcnIoYEV4cGVjdGVkIFJlY29pbCBhdG9tICR7cmVjb2lsVmFsdWUua2V5fSB0byBoYXZlIGEgdmFsdWUsIGJ1dCBpdCBpcyBpbiBhIGxvYWRpbmcgc3RhdGUuYCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJzZXRcIiwgKHJlY29pbFN0YXRlLCB2YWx1ZU9yVXBkYXRlcikgPT4ge1xuICAgICAgaWYgKCFpc0F0b20ocmVjb2lsU3RhdGUpKSB7XG4gICAgICAgIHRocm93IFJlY29pbF9lcnIoJ1NldHRpbmcgc2VsZWN0b3JzIHdpdGhpbiBhdG9taWNVcGRhdGUgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlT3JVcGRhdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmdldChyZWNvaWxTdGF0ZSk7XG5cbiAgICAgICAgdGhpcy5fY2hhbmdlcy5zZXQocmVjb2lsU3RhdGUua2V5LCB2YWx1ZU9yVXBkYXRlcihjdXJyZW50KSk7IC8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jaGFuZ2VzLnNldChyZWNvaWxTdGF0ZS5rZXksIHZhbHVlT3JVcGRhdGVyKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJlc2V0XCIsIHJlY29pbFN0YXRlID0+IHtcbiAgICAgIHRoaXMuc2V0KHJlY29pbFN0YXRlLCBERUZBVUxUX1ZBTFVFJDQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fc3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLl90cmVlU3RhdGUgPSB0cmVlU3RhdGU7XG4gICAgdGhpcy5fY2hhbmdlcyA9IG5ldyBNYXAoKTtcbiAgfSAvLyBBbGxvdyBkZXN0cnVjdGluZ1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZmItd3d3L2V4dHJhLWFycm93LWluaXRpYWxpemVyXG5cblxuICBuZXdUcmVlU3RhdGVfSU5URVJOQUwoKSB7XG4gICAgaWYgKHRoaXMuX2NoYW5nZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3RyZWVTdGF0ZTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdTdGF0ZSA9IGNvcHlUcmVlU3RhdGUkMSh0aGlzLl90cmVlU3RhdGUpO1xuXG4gICAgZm9yIChjb25zdCBbaywgdl0gb2YgdGhpcy5fY2hhbmdlcykge1xuICAgICAgd3JpdGVMb2FkYWJsZVRvVHJlZVN0YXRlJDEobmV3U3RhdGUsIGssIGxvYWRhYmxlV2l0aFZhbHVlJDEodikpO1xuICAgIH1cblxuICAgIGludmFsaWRhdGVEb3duc3RyZWFtcyQxKHRoaXMuX3N0b3JlLCBuZXdTdGF0ZSk7XG4gICAgcmV0dXJuIG5ld1N0YXRlO1xuICB9XG5cbn1cblxuZnVuY3Rpb24gYXRvbWljVXBkYXRlcihzdG9yZSkge1xuICByZXR1cm4gZm4gPT4ge1xuICAgIHN0b3JlLnJlcGxhY2VTdGF0ZSh0cmVlU3RhdGUgPT4ge1xuICAgICAgY29uc3QgY2hhbmdlc2V0ID0gbmV3IFRyYW5zYWN0aW9uSW50ZXJmYWNlSW1wbChzdG9yZSwgdHJlZVN0YXRlKTtcbiAgICAgIGZuKGNoYW5nZXNldCk7XG4gICAgICByZXR1cm4gY2hhbmdlc2V0Lm5ld1RyZWVTdGF0ZV9JTlRFUk5BTCgpO1xuICAgIH0pO1xuICB9O1xufVxuXG52YXIgUmVjb2lsX0F0b21pY1VwZGF0ZXMgPSB7XG4gIGF0b21pY1VwZGF0ZXJcbn07XG5cbnZhciBSZWNvaWxfQXRvbWljVXBkYXRlc18xID0gUmVjb2lsX0F0b21pY1VwZGF0ZXMuYXRvbWljVXBkYXRlcjtcblxudmFyIFJlY29pbF9BdG9taWNVcGRhdGVzJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgYXRvbWljVXBkYXRlcjogUmVjb2lsX0F0b21pY1VwZGF0ZXNfMVxufSk7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG5cbnZhciBpbnZhcmlhbnRfMSA9IGludmFyaWFudDtcblxuLy8gQG9zcy1vbmx5XG5cblxudmFyIFJlY29pbF9pbnZhcmlhbnQgPSBpbnZhcmlhbnRfMTtcblxuY29uc3Qge1xuICBhdG9taWNVcGRhdGVyOiBhdG9taWNVcGRhdGVyJDFcbn0gPSBSZWNvaWxfQXRvbWljVXBkYXRlcyQxO1xuXG5jb25zdCB7XG4gIGJhdGNoVXBkYXRlczogYmF0Y2hVcGRhdGVzJDRcbn0gPSBSZWNvaWxfQmF0Y2hpbmc7XG5cbmNvbnN0IHtcbiAgREVGQVVMVF9WQUxVRTogREVGQVVMVF9WQUxVRSQ1XG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgdXNlU3RvcmVSZWY6IHVzZVN0b3JlUmVmJDZcbn0gPSBSZWNvaWxfUmVjb2lsUm9vdF9yZWFjdDtcblxuY29uc3Qge1xuICBzZXRSZWNvaWxWYWx1ZTogc2V0UmVjb2lsVmFsdWUkM1xufSA9IFJlY29pbF9SZWNvaWxWYWx1ZUludGVyZmFjZTtcblxuY29uc3Qge1xuICBTbmFwc2hvdDogU25hcHNob3QkMixcbiAgY2xvbmVTbmFwc2hvdDogY2xvbmVTbmFwc2hvdCQyXG59ID0gUmVjb2lsX1NuYXBzaG90JDE7XG5cblxuXG5cblxuY29uc3Qge1xuICB1c2VHb3RvUmVjb2lsU25hcHNob3Q6IHVzZUdvdG9SZWNvaWxTbmFwc2hvdCQxXG59ID0gUmVjb2lsX1NuYXBzaG90SG9va3M7XG5cbmNvbnN0IHtcbiAgdXNlQ2FsbGJhY2s6IHVzZUNhbGxiYWNrJDNcbn0gPSByZWFjdDtcblxuY2xhc3MgU2VudGluZWwge31cblxuY29uc3QgU0VOVElORUwgPSBuZXcgU2VudGluZWwoKTtcblxuZnVuY3Rpb24gdXNlUmVjb2lsQ2FsbGJhY2soZm4sIGRlcHMpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQ2KCk7XG4gIGNvbnN0IGdvdG9TbmFwc2hvdCA9IHVzZUdvdG9SZWNvaWxTbmFwc2hvdCQxKCk7XG4gIHJldHVybiB1c2VDYWxsYmFjayQzKCguLi5hcmdzKSA9PiB7XG4gICAgZnVuY3Rpb24gc2V0KHJlY29pbFN0YXRlLCBuZXdWYWx1ZU9yVXBkYXRlcikge1xuICAgICAgc2V0UmVjb2lsVmFsdWUkMyhzdG9yZVJlZi5jdXJyZW50LCByZWNvaWxTdGF0ZSwgbmV3VmFsdWVPclVwZGF0ZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2V0KHJlY29pbFN0YXRlKSB7XG4gICAgICBzZXRSZWNvaWxWYWx1ZSQzKHN0b3JlUmVmLmN1cnJlbnQsIHJlY29pbFN0YXRlLCBERUZBVUxUX1ZBTFVFJDUpO1xuICAgIH0gLy8gVXNlIGN1cnJlbnRUcmVlIGZvciB0aGUgc25hcHNob3QgdG8gc2hvdyB0aGUgY3VycmVudGx5IGNvbW1pdHRlZCBzdGF0ZVxuXG5cbiAgICBjb25zdCBzbmFwc2hvdCA9IGNsb25lU25hcHNob3QkMihzdG9yZVJlZi5jdXJyZW50KTsgLy8gRklYTUUgbWFzc2l2ZSBnYWlucyBmcm9tIGRvaW5nIHRoaXMgbGF6aWx5XG5cbiAgICBjb25zdCBhdG9taWNVcGRhdGUgPSBhdG9taWNVcGRhdGVyJDEoc3RvcmVSZWYuY3VycmVudCk7XG4gICAgbGV0IHJldCA9IFNFTlRJTkVMO1xuICAgIGJhdGNoVXBkYXRlcyQ0KCgpID0+IHtcbiAgICAgIGNvbnN0IGVyck1zZyA9ICd1c2VSZWNvaWxDYWxsYmFjayBleHBlY3RzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb246ICcgKyAnaXQgYWNjZXB0cyBhIGZ1bmN0aW9uIG9mIHRoZSB0eXBlIChSZWNvaWxJbnRlcmZhY2UpID0+IFQgPSBSICcgKyAnYW5kIHJldHVybnMgYSBjYWxsYmFjayBmdW5jdGlvbiBUID0+IFIsIHdoZXJlIFJlY29pbEludGVyZmFjZSBpcyBhbiAnICsgJ29iamVjdCB7c25hcHNob3QsIHNldCwgLi4ufSBhbmQgVCBhbmQgUiBhcmUgdGhlIGFyZ3VtZW50IGFuZCByZXR1cm4gJyArICd0eXBlcyBvZiB0aGUgY2FsbGJhY2sgeW91IHdhbnQgdG8gY3JlYXRlLiAgUGxlYXNlIHNlZSB0aGUgZG9jcyAnICsgJ2F0IHJlY29pbGpzLm9yZyBmb3IgZGV0YWlscy4nO1xuXG4gICAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IFJlY29pbF9lcnIoZXJyTXNnKTtcbiAgICAgIH0gLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuXG4gICAgICBjb25zdCBjYiA9IGZuKHtcbiAgICAgICAgc2V0LFxuICAgICAgICByZXNldCxcbiAgICAgICAgc25hcHNob3QsXG4gICAgICAgIGdvdG9TbmFwc2hvdCxcbiAgICAgICAgdHJhbnNhY3RfVU5TVEFCTEU6IGF0b21pY1VwZGF0ZVxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgUmVjb2lsX2VycihlcnJNc2cpO1xuICAgICAgfVxuXG4gICAgICByZXQgPSBjYiguLi5hcmdzKTtcbiAgICB9KTtcbiAgICAhIShyZXQgaW5zdGFuY2VvZiBTZW50aW5lbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSZWNvaWxfaW52YXJpYW50KGZhbHNlLCAnYmF0Y2hVcGRhdGVzIHNob3VsZCByZXR1cm4gaW1tZWRpYXRlbHknKSA6IFJlY29pbF9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiByZXQ7XG4gIH0sIGRlcHMgIT0gbnVsbCA/IFsuLi5kZXBzLCBzdG9yZVJlZl0gOiB1bmRlZmluZWQgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmYi13d3cvcmVhY3QtaG9va3MtZGVwc1xuICApO1xufVxuXG52YXIgUmVjb2lsX3VzZVJlY29pbENhbGxiYWNrID0gdXNlUmVjb2lsQ2FsbGJhY2s7XG5cbmNvbnN0IHtcbiAgZ2V0Tm9kZTogZ2V0Tm9kZSQ1XG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgdXNlU3RvcmVSZWY6IHVzZVN0b3JlUmVmJDdcbn0gPSBSZWNvaWxfUmVjb2lsUm9vdF9yZWFjdDtcblxuY29uc3Qge1xuICB1c2VDYWxsYmFjazogdXNlQ2FsbGJhY2skNFxufSA9IHJlYWN0O1xuXG5mdW5jdGlvbiB1c2VSZWNvaWxSZWZyZXNoZXIocmVjb2lsVmFsdWUpIHtcbiAgY29uc3Qgc3RvcmVSZWYgPSB1c2VTdG9yZVJlZiQ3KCk7XG4gIHJldHVybiB1c2VDYWxsYmFjayQ0KCgpID0+IHtcbiAgICB2YXIgX25vZGUkY2xlYXJDYWNoZTtcblxuICAgIGNvbnN0IHN0b3JlID0gc3RvcmVSZWYuY3VycmVudDtcbiAgICBjb25zdCB7XG4gICAgICBjdXJyZW50VHJlZVxuICAgIH0gPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGNvbnN0IG5vZGUgPSBnZXROb2RlJDUocmVjb2lsVmFsdWUua2V5KTtcbiAgICAoX25vZGUkY2xlYXJDYWNoZSA9IG5vZGUuY2xlYXJDYWNoZSkgPT09IG51bGwgfHwgX25vZGUkY2xlYXJDYWNoZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vZGUkY2xlYXJDYWNoZS5jYWxsKG5vZGUsIHN0b3JlLCBjdXJyZW50VHJlZSk7XG4gIH0sIFtyZWNvaWxWYWx1ZSwgc3RvcmVSZWZdKTtcbn1cblxudmFyIFJlY29pbF91c2VSZWNvaWxSZWZyZXNoZXIgPSB1c2VSZWNvaWxSZWZyZXNoZXI7XG5cbmNvbnN0IHtcbiAgYXRvbWljVXBkYXRlcjogYXRvbWljVXBkYXRlciQyXG59ID0gUmVjb2lsX0F0b21pY1VwZGF0ZXMkMTtcblxuY29uc3Qge1xuICB1c2VTdG9yZVJlZjogdXNlU3RvcmVSZWYkOFxufSA9IFJlY29pbF9SZWNvaWxSb290X3JlYWN0O1xuXG5jb25zdCB7XG4gIHVzZU1lbW86IHVzZU1lbW8kM1xufSA9IHJlYWN0O1xuXG5mdW5jdGlvbiB1c2VSZWNvaWxUcmFuc2FjdGlvbihmbiwgZGVwcykge1xuICBjb25zdCBzdG9yZVJlZiA9IHVzZVN0b3JlUmVmJDgoKTtcbiAgcmV0dXJuIHVzZU1lbW8kMygoKSA9PiAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IGF0b21pY1VwZGF0ZSA9IGF0b21pY1VwZGF0ZXIkMihzdG9yZVJlZi5jdXJyZW50KTtcbiAgICBhdG9taWNVcGRhdGUodHJhbnNhY3Rpb25JbnRlcmZhY2UgPT4ge1xuICAgICAgZm4odHJhbnNhY3Rpb25JbnRlcmZhY2UpKC4uLmFyZ3MpO1xuICAgIH0pO1xuICB9LCBkZXBzICE9IG51bGwgPyBbLi4uZGVwcywgc3RvcmVSZWZdIDogdW5kZWZpbmVkIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZmItd3d3L3JlYWN0LWhvb2tzLWRlcHNcbiAgKTtcbn1cblxudmFyIFJlY29pbF91c2VSZWNvaWxUcmFuc2FjdGlvbiA9IHVzZVJlY29pbFRyYW5zYWN0aW9uO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKi9cblxuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICB2YXIgX293bmVyRG9jdW1lbnQsIF9kb2MkZGVmYXVsdFZpZXc7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgZG9jID0gb2JqZWN0ICE9IG51bGwgPyAoX293bmVyRG9jdW1lbnQgPSBvYmplY3Qub3duZXJEb2N1bWVudCkgIT09IG51bGwgJiYgX293bmVyRG9jdW1lbnQgIT09IHZvaWQgMCA/IF9vd25lckRvY3VtZW50IDogb2JqZWN0IDogZG9jdW1lbnQ7XG4gIGNvbnN0IGRlZmF1bHRWaWV3ID0gKF9kb2MkZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcpICE9PSBudWxsICYmIF9kb2MkZGVmYXVsdFZpZXcgIT09IHZvaWQgMCA/IF9kb2MkZGVmYXVsdFZpZXcgOiB3aW5kb3c7XG4gIHJldHVybiAhIShvYmplY3QgIT0gbnVsbCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxudmFyIFJlY29pbF9pc05vZGUgPSBpc05vZGU7XG5cbmNvbnN0IHtcbiAgaXNSZWFjdE5hdGl2ZTogaXNSZWFjdE5hdGl2ZSQxLFxuICBpc1NTUjogaXNTU1IkNFxufSA9IFJlY29pbF9FbnZpcm9ubWVudDtcblxuXG5cblxuXG5mdW5jdGlvbiBzaG91bGROb3RCZUZyb3plbih2YWx1ZSkge1xuICAvLyBQcmltaXRpdmVzIGFuZCBmdW5jdGlvbnM6XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gUmVhY3QgZWxlbWVudHM6XG5cblxuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZS4kJHR5cGVvZikge1xuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBJbW11dGFibGUgc3RydWN0dXJlczpcblxuXG4gIGlmICh2YWx1ZVsnQEBfX0lNTVVUQUJMRV9JVEVSQUJMRV9fQEAnXSAhPSBudWxsIHx8IHZhbHVlWydAQF9fSU1NVVRBQkxFX0tFWUVEX19AQCddICE9IG51bGwgfHwgdmFsdWVbJ0BAX19JTU1VVEFCTEVfSU5ERVhFRF9fQEAnXSAhPSBudWxsIHx8IHZhbHVlWydAQF9fSU1NVVRBQkxFX09SREVSRURfX0BAJ10gIT0gbnVsbCB8fCB2YWx1ZVsnQEBfX0lNTVVUQUJMRV9SRUNPUkRfX0BAJ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIERPTSBub2RlczpcblxuXG4gIGlmIChSZWNvaWxfaXNOb2RlKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKFJlY29pbF9pc1Byb21pc2UodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBTb21lIGVudmlyb25tZW50cywganVzdCBhcyBKZXN0LCBkb24ndCB3b3JrIHdpdGggdGhlIGluc3RhbmNlb2YgY2hlY2tcblxuXG4gIGlmICghaXNTU1IkNCAmJiAhaXNSZWFjdE5hdGl2ZSQxICYmICggLy8gJEZsb3dGaXhNZShzaXRlPXJlY29pbCkgV2luZG93IGRvZXMgbm90IGhhdmUgYSBGbG93VHlwZSBkZWZpbml0aW9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy82NzA5XG4gIHZhbHVlID09PSB3aW5kb3cgfHwgdmFsdWUgaW5zdGFuY2VvZiBXaW5kb3cpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59IC8vIFJlY3Vyc2l2ZWx5IGZyZWV6ZSBhIHZhbHVlIHRvIGVuZm9yY2UgaXQgaXMgcmVhZC1vbmx5LlxuLy8gVGhpcyBtYXkgYWxzbyBoYXZlIG1pbmltYWwgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzIGZvciBlbnVtZXJhdGluZ1xuLy8gb2JqZWN0cyAoYmFzZWQgb24gYnJvd3NlciBpbXBsZW1lbnRhdGlvbnMsIG9mIGNvdXJzZSlcblxuXG5mdW5jdGlvbiBkZWVwRnJlZXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgc2hvdWxkTm90QmVGcm96ZW4odmFsdWUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgT2JqZWN0LmZyZWV6ZSh2YWx1ZSk7IC8vIE1ha2UgYWxsIHByb3BlcnRpZXMgcmVhZC1vbmx5XG5cbiAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWUpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddIGFkZGVkIHdoZW4gaW1wcm92aW5nIHR5cGluZyBmb3IgdGhpcyBwYXJhbWV0ZXJzXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgY29uc3QgcHJvcCA9IHZhbHVlW2tleV07IC8vIFByZXZlbnQgaW5maW5pdGUgcmVjdXJzc2lvbiBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcy5cblxuICAgICAgaWYgKHR5cGVvZiBwcm9wID09PSAnb2JqZWN0JyAmJiBwcm9wICE9IG51bGwgJiYgIU9iamVjdC5pc0Zyb3plbihwcm9wKSkge1xuICAgICAgICBkZWVwRnJlZXplVmFsdWUocHJvcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LnNlYWwodmFsdWUpOyAvLyBUaGlzIGFsc28gbWFrZXMgZXhpc3RpbmcgcHJvcGVydGllcyBub24tY29uZmlndXJhYmxlLlxufVxuXG52YXIgUmVjb2lsX2RlZXBGcmVlemVWYWx1ZSA9IGRlZXBGcmVlemVWYWx1ZTtcblxuY29uc3QgVElNRV9XQVJOSU5HX1RIUkVTSE9MRF9NUyA9IDE1O1xuXG5mdW5jdGlvbiBzdHJpbmdpZnkoeCwgb3B0LCBrZXkpIHtcbiAgLy8gQSBvcHRpbWl6YXRpb24gdG8gYXZvaWQgdGhlIG1vcmUgZXhwZW5zaXZlIEpTT04uc3RyaW5naWZ5KCkgZm9yIHNpbXBsZSBzdHJpbmdzXG4gIC8vIFRoaXMgbWF5IGxvc2UgcHJvdGVjdGlvbiBmb3IgdTIwMjggYW5kIHUyMDI5LCB0aG91Z2guXG4gIGlmICh0eXBlb2YgeCA9PT0gJ3N0cmluZycgJiYgIXguaW5jbHVkZXMoJ1wiJykgJiYgIXguaW5jbHVkZXMoJ1xcXFwnKSkge1xuICAgIHJldHVybiBgXCIke3h9XCJgO1xuICB9IC8vIEhhbmRsZSBwcmltaXRpdmUgdHlwZXNcblxuXG4gIHN3aXRjaCAodHlwZW9mIHgpIHtcbiAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgcmV0dXJuICcnO1xuICAgIC8vIEpTT04uc3RyaW5naWZ5KHVuZGVmaW5lZCkgcmV0dXJucyB1bmRlZmluZWQsIGJ1dCB3ZSBhbHdheXMgd2FudCB0byByZXR1cm4gYSBzdHJpbmdcblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIHggPyAndHJ1ZScgOiAnZmFsc2UnO1xuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdzeW1ib2wnOlxuICAgICAgLy8gY2FzZSAnYmlnaW50JzogLy8gQmlnSW50IGlzIG5vdCBzdXBwb3J0ZWQgaW4gd3d3XG4gICAgICByZXR1cm4gU3RyaW5nKHgpO1xuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIC8vIEFkZCBzdXJyb3VuZGluZyBxdW90ZXMgYW5kIGVzY2FwZSBpbnRlcm5hbCBxdW90ZXNcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh4KTtcblxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIGlmICgob3B0ID09PSBudWxsIHx8IG9wdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0LmFsbG93RnVuY3Rpb25zKSAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBSZWNvaWxfZXJyKCdBdHRlbXB0IHRvIHNlcmlhbGl6ZSBmdW5jdGlvbiBpbiBhIFJlY29pbCBjYWNoZSBrZXknKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGBfX0ZVTkNUSU9OKCR7eC5uYW1lfSlfX2A7XG4gIH1cblxuICBpZiAoeCA9PT0gbnVsbCkge1xuICAgIHJldHVybiAnbnVsbCc7XG4gIH0gLy8gRmFsbGJhY2sgY2FzZSBmb3IgdW5rbm93biB0eXBlc1xuXG5cbiAgaWYgKHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgIHZhciBfSlNPTiRzdHJpbmdpZnk7XG5cbiAgICByZXR1cm4gKF9KU09OJHN0cmluZ2lmeSA9IEpTT04uc3RyaW5naWZ5KHgpKSAhPT0gbnVsbCAmJiBfSlNPTiRzdHJpbmdpZnkgIT09IHZvaWQgMCA/IF9KU09OJHN0cmluZ2lmeSA6ICcnO1xuICB9IC8vIERlYWwgd2l0aCBhbGwgcHJvbWlzZXMgYXMgZXF1aXZhbGVudCBmb3Igbm93LlxuXG5cbiAgaWYgKFJlY29pbF9pc1Byb21pc2UoeCkpIHtcbiAgICByZXR1cm4gJ19fUFJPTUlTRV9fJztcbiAgfSAvLyBBcnJheXMgaGFuZGxlIHJlY3Vyc2l2ZSBzdHJpbmdpZmljYXRpb25cblxuXG4gIGlmIChBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgcmV0dXJuIGBbJHt4Lm1hcCgodiwgaSkgPT4gc3RyaW5naWZ5KHYsIG9wdCwgaS50b1N0cmluZygpKSl9XWA7XG4gIH0gLy8gSWYgYW4gb2JqZWN0IGRlZmluZXMgYSB0b0pTT04oKSBtZXRob2QsIHRoZW4gdXNlIHRoYXQgdG8gb3ZlcnJpZGUgdGhlXG4gIC8vIHNlcmlhbGl6YXRpb24uICBUaGlzIG1hdGNoZXMgdGhlIGJlaGF2aW9yIG9mIEpTT04uc3RyaW5naWZ5KCkuXG4gIC8vIFBhc3MgdGhlIGtleSBmb3IgY29tcGF0aWJpbGl0eS5cbiAgLy8gSW1tdXRhYmxlLmpzIGNvbGxlY3Rpb25zIGRlZmluZSB0aGlzIG1ldGhvZCB0byBhbGxvdyB1cyB0byBzZXJpYWxpemUgdGhlbS5cblxuXG4gIGlmICh0eXBlb2YgeC50b0pTT04gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOiBvZmZcbiAgICByZXR1cm4gc3RyaW5naWZ5KHgudG9KU09OKGtleSksIG9wdCwga2V5KTtcbiAgfSAvLyBGb3IgYnVpbHQtaW4gTWFwcywgc29ydCB0aGUga2V5cyBpbiBhIHN0YWJsZSBvcmRlciBpbnN0ZWFkIG9mIHRoZVxuICAvLyBkZWZhdWx0IGluc2VydGlvbiBvcmRlci4gIFN1cHBvcnQgbm9uLXN0cmluZyBrZXlzLlxuXG5cbiAgaWYgKHggaW5zdGFuY2VvZiBNYXApIHtcbiAgICBjb25zdCBvYmogPSB7fTtcblxuICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIHgpIHtcbiAgICAgIC8vIFN0cmluZ2lmeSB3aWxsIGVzY2FwZSBhbnkgbmVzdGVkIHF1b3Rlc1xuICAgICAgb2JqW3R5cGVvZiBrID09PSAnc3RyaW5nJyA/IGsgOiBzdHJpbmdpZnkoaywgb3B0KV0gPSB2O1xuICAgIH1cblxuICAgIHJldHVybiBzdHJpbmdpZnkob2JqLCBvcHQsIGtleSk7XG4gIH0gLy8gRm9yIGJ1aWx0LWluIFNldHMsIHNvcnQgdGhlIGtleXMgaW4gYSBzdGFibGUgb3JkZXIgaW5zdGVhZCBvZiB0aGVcbiAgLy8gZGVmYXVsdCBpbnNlcnRpb24gb3JkZXIuXG5cblxuICBpZiAoeCBpbnN0YW5jZW9mIFNldCkge1xuICAgIHJldHVybiBzdHJpbmdpZnkoQXJyYXkuZnJvbSh4KS5zb3J0KChhLCBiKSA9PiBzdHJpbmdpZnkoYSwgb3B0KS5sb2NhbGVDb21wYXJlKHN0cmluZ2lmeShiLCBvcHQpKSksIG9wdCwga2V5KTtcbiAgfSAvLyBBbnl0aGluZyBlbHNlIHRoYXQgaXMgaXRlcmFibGUgc2VyaWFsaXplIGFzIGFuIEFycmF5LlxuXG5cbiAgaWYgKFN5bWJvbCAhPT0gdW5kZWZpbmVkICYmIHhbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsICYmIHR5cGVvZiB4W1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOiBvZmZcbiAgICByZXR1cm4gc3RyaW5naWZ5KEFycmF5LmZyb20oeCksIG9wdCwga2V5KTtcbiAgfSAvLyBGb3IgYWxsIG90aGVyIE9iamVjdHMsIHNvcnQgdGhlIGtleXMgaW4gYSBzdGFibGUgb3JkZXIuXG5cblxuICByZXR1cm4gYHske09iamVjdC5rZXlzKHgpLmZpbHRlcihrID0+IHhba10gIT09IHVuZGVmaW5lZCkuc29ydCgpIC8vIHN0cmluZ2lmeSB0aGUga2V5IHRvIGFkZCBxdW90ZXMgYW5kIGVzY2FwZSBhbnkgbmVzdGVkIHNsYXNoZXMgb3IgcXVvdGVzLlxuICAubWFwKGsgPT4gYCR7c3RyaW5naWZ5KGssIG9wdCl9OiR7c3RyaW5naWZ5KHhba10sIG9wdCwgayl9YCkuam9pbignLCcpfX1gO1xufSAvLyBVdGlsaXR5IHNpbWlsYXIgdG8gSlNPTi5zdHJpbmdpZnkoKSBleGNlcHQ6XG4vLyAqIFNlcmlhbGl6ZSBidWlsdC1pbiBTZXRzIGFzIGFuIEFycmF5XG4vLyAqIFNlcmlhbGl6ZSBidWlsdC1pbiBNYXBzIGFzIGFuIE9iamVjdC4gIFN1cHBvcnRzIG5vbi1zdHJpbmcga2V5cy5cbi8vICogU2VyaWFsaXplIG90aGVyIGl0ZXJhYmxlcyBhcyBhcnJheXNcbi8vICogU29ydCB0aGUga2V5cyBvZiBPYmplY3RzIGFuZCBNYXBzIHRvIGhhdmUgYSBzdGFibGUgb3JkZXIgYmFzZWQgb24gc3RyaW5nIGNvbnZlcnNpb24uXG4vLyAgICBUaGlzIG92ZXJyaWRlcyB0aGVpciBkZWZhdWx0IGluc2VydGlvbiBvcmRlci5cbi8vICogU3RpbGwgdXNlcyB0b0pTT04oKSBvZiBhbnkgb2JqZWN0IHRvIG92ZXJyaWRlIHNlcmlhbGl6YXRpb25cbi8vICogU3VwcG9ydCBTeW1ib2xzICh0aG91Z2ggZG9uJ3QgZ3VhcmFudGVlIHVuaXF1ZW5lc3MpXG4vLyAqIFdlIGNvdWxkIHN1cHBvcnQgQmlnSW50LCBidXQgRmxvdyBkb2Vzbid0IHNlZW0gdG8gbGlrZSBpdC5cbi8vIFNlZSBSZWNvaWxfc3RhYmxlU3RyaW5naWZ5LXRlc3QuanMgZm9yIGV4YW1wbGVzXG5cblxuZnVuY3Rpb24gc3RhYmxlU3RyaW5naWZ5KHgsIG9wdCA9IHtcbiAgYWxsb3dGdW5jdGlvbnM6IGZhbHNlXG59KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IHdpbmRvdy5wZXJmb3JtYW5jZSA/IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSA6IDA7XG4gICAgICBjb25zdCBzdHIgPSBzdHJpbmdpZnkoeCwgb3B0KTtcbiAgICAgIGNvbnN0IGVuZFRpbWUgPSB3aW5kb3cucGVyZm9ybWFuY2UgPyB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgOiAwO1xuXG4gICAgICBpZiAoZW5kVGltZSAtIHN0YXJ0VGltZSA+IFRJTUVfV0FSTklOR19USFJFU0hPTERfTVMpIHtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgZmItd3d3L25vLWNvbnNvbGUgKi9cbiAgICAgICAgY29uc29sZS5ncm91cENvbGxhcHNlZChgUmVjb2lsOiBTcGVudCAke2VuZFRpbWUgLSBzdGFydFRpbWV9bXMgY29tcHV0aW5nIGEgY2FjaGUga2V5YCk7XG4gICAgICAgIGNvbnNvbGUud2Fybih4LCBzdHIpO1xuICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgZmItd3d3L25vLWNvbnNvbGUgKi9cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RyaW5naWZ5KHgsIG9wdCk7XG59XG5cbnZhciBSZWNvaWxfc3RhYmxlU3RyaW5naWZ5ID0gc3RhYmxlU3RyaW5naWZ5O1xuXG5jbGFzcyBUcmVlQ2FjaGUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdmFyIF9vcHRpb25zJG9uSGl0LCBfb3B0aW9ucyRvblNldCwgX29wdGlvbnMkbWFwTm9kZVZhbHVlO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX251bUxlYWZzXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfcm9vdFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX29uSGl0XCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfb25TZXRcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9tYXBOb2RlVmFsdWVcIiwgdm9pZCAwKTtcblxuICAgIHRoaXMuX251bUxlYWZzID0gMDtcbiAgICB0aGlzLl9yb290ID0gbnVsbDtcbiAgICB0aGlzLl9vbkhpdCA9IChfb3B0aW9ucyRvbkhpdCA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5vbkhpdCkgIT09IG51bGwgJiYgX29wdGlvbnMkb25IaXQgIT09IHZvaWQgMCA/IF9vcHRpb25zJG9uSGl0IDogKCkgPT4ge307XG4gICAgdGhpcy5fb25TZXQgPSAoX29wdGlvbnMkb25TZXQgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub25TZXQpICE9PSBudWxsICYmIF9vcHRpb25zJG9uU2V0ICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRvblNldCA6ICgpID0+IHt9O1xuICAgIHRoaXMuX21hcE5vZGVWYWx1ZSA9IChfb3B0aW9ucyRtYXBOb2RlVmFsdWUgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubWFwTm9kZVZhbHVlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRtYXBOb2RlVmFsdWUgIT09IHZvaWQgMCA/IF9vcHRpb25zJG1hcE5vZGVWYWx1ZSA6IHZhbCA9PiB2YWw7XG4gIH1cblxuICBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9udW1MZWFmcztcbiAgfSAvLyBUT0RPOiBub2RlQ291bnQoKTogbnVtYmVyXG5cblxuICByb290KCkge1xuICAgIHJldHVybiB0aGlzLl9yb290O1xuICB9XG5cbiAgZ2V0KGdldE5vZGVWYWx1ZSwgaGFuZGxlcnMpIHtcbiAgICB2YXIgX3RoaXMkZ2V0TGVhZk5vZGU7XG5cbiAgICByZXR1cm4gKF90aGlzJGdldExlYWZOb2RlID0gdGhpcy5nZXRMZWFmTm9kZShnZXROb2RlVmFsdWUsIGhhbmRsZXJzKSkgPT09IG51bGwgfHwgX3RoaXMkZ2V0TGVhZk5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJGdldExlYWZOb2RlLnZhbHVlO1xuICB9XG5cbiAgZ2V0TGVhZk5vZGUoZ2V0Tm9kZVZhbHVlLCBoYW5kbGVycykge1xuICAgIHJldHVybiBmaW5kTGVhZih0aGlzLnJvb3QoKSwgbm9kZUtleSA9PiB0aGlzLl9tYXBOb2RlVmFsdWUoZ2V0Tm9kZVZhbHVlKG5vZGVLZXkpKSwge1xuICAgICAgb25Ob2RlVmlzaXQ6IG5vZGUgPT4ge1xuICAgICAgICBoYW5kbGVycyA9PT0gbnVsbCB8fCBoYW5kbGVycyA9PT0gdm9pZCAwID8gdm9pZCAwIDogaGFuZGxlcnMub25Ob2RlVmlzaXQobm9kZSk7XG5cbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gJ2xlYWYnKSB7XG4gICAgICAgICAgdGhpcy5fb25IaXQobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldChyb3V0ZSwgdmFsdWUsIGhhbmRsZXJzKSB7XG4gICAgbGV0IGxlYWZOb2RlO1xuICAgIGxldCBuZXdSb290ID0gbnVsbDtcblxuICAgIGNvbnN0IHNldFJldHJ5YWJsZVBhcnQgPSAoKSA9PiB7XG4gICAgICBuZXdSb290ID0gYWRkTGVhZih0aGlzLnJvb3QoKSwgcm91dGUubWFwKChbbm9kZUtleSwgbm9kZVZhbHVlXSkgPT4gW25vZGVLZXksIHRoaXMuX21hcE5vZGVWYWx1ZShub2RlVmFsdWUpXSksIG51bGwsIHZhbHVlLCBudWxsLCB7XG4gICAgICAgIG9uTm9kZVZpc2l0OiBub2RlID0+IHtcbiAgICAgICAgICBoYW5kbGVycyA9PT0gbnVsbCB8fCBoYW5kbGVycyA9PT0gdm9pZCAwID8gdm9pZCAwIDogaGFuZGxlcnMub25Ob2RlVmlzaXQobm9kZSk7XG5cbiAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnbGVhZicpIHtcbiAgICAgICAgICAgIGxlYWZOb2RlID0gbm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sICgpID0+IHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICBzZXRSZXRyeWFibGVQYXJ0KCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgc2V0UmV0cnlhYmxlUGFydCgpO1xuXG4gICAgaWYgKCF0aGlzLnJvb3QoKSkge1xuICAgICAgdGhpcy5fcm9vdCA9IG5ld1Jvb3Q7XG4gICAgfVxuXG4gICAgdGhpcy5fbnVtTGVhZnMrKztcblxuICAgIHRoaXMuX29uU2V0KFJlY29pbF9udWxsdGhyb3dzKGxlYWZOb2RlKSk7XG4gIH1cblxuICBkZWxldGUobm9kZSkge1xuICAgIGlmICghdGhpcy5yb290KCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCByb290ID0gUmVjb2lsX251bGx0aHJvd3ModGhpcy5yb290KCkpO1xuICAgIGNvbnN0IGV4aXN0c0luVHJlZSA9IHBydW5lTm9kZUZyb21UcmVlKHJvb3QsIG5vZGUsIG5vZGUucGFyZW50KTtcblxuICAgIGlmICghZXhpc3RzSW5UcmVlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUgPT09IHJvb3QgfHwgcm9vdC50eXBlID09PSAnYnJhbmNoJyAmJiAhcm9vdC5icmFuY2hlcy5zaXplKSB7XG4gICAgICB0aGlzLl9yb290ID0gbnVsbDtcbiAgICAgIHRoaXMuX251bUxlYWZzID0gMDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX251bUxlYWZzIC09IGNvdW50RG93bnN0cmVhbUxlYXZlcyhub2RlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuX251bUxlYWZzID0gMDtcbiAgICB0aGlzLl9yb290ID0gbnVsbDtcbiAgfVxuXG59XG5cbmNvbnN0IGZpbmRMZWFmID0gKHJvb3QsIGdldE5vZGVWYWx1ZSwgaGFuZGxlcnMpID0+IHtcbiAgdmFyIF9oYW5kbGVycyRvbk5vZGVWaXNpdDtcblxuICBpZiAocm9vdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGhhbmRsZXJzID09PSBudWxsIHx8IGhhbmRsZXJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2hhbmRsZXJzJG9uTm9kZVZpc2l0ID0gaGFuZGxlcnMub25Ob2RlVmlzaXQpID09PSBudWxsIHx8IF9oYW5kbGVycyRvbk5vZGVWaXNpdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2hhbmRsZXJzJG9uTm9kZVZpc2l0LmNhbGwoaGFuZGxlcnMsIHJvb3QpO1xuXG4gIGlmIChyb290LnR5cGUgPT09ICdsZWFmJykge1xuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgY29uc3Qgbm9kZVZhbHVlID0gZ2V0Tm9kZVZhbHVlKHJvb3Qubm9kZUtleSk7XG4gIHJldHVybiBmaW5kTGVhZihyb290LmJyYW5jaGVzLmdldChub2RlVmFsdWUpLCBnZXROb2RlVmFsdWUsIGhhbmRsZXJzKTtcbn07XG5cbmNvbnN0IGFkZExlYWYgPSAocm9vdCwgcm91dGUsIHBhcmVudCwgdmFsdWUsIGJyYW5jaEtleSwgaGFuZGxlcnMsIG9uQWJvcnQpID0+IHtcbiAgdmFyIF9oYW5kbGVycyRvbk5vZGVWaXNpdDI7XG5cbiAgbGV0IG5vZGU7XG5cbiAgaWYgKHJvb3QgPT0gbnVsbCkge1xuICAgIGlmIChyb3V0ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIG5vZGUgPSB7XG4gICAgICAgIHR5cGU6ICdsZWFmJyxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgYnJhbmNoS2V5XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBbcGF0aCwgLi4ucmVzdF0gPSByb3V0ZTtcbiAgICAgIGNvbnN0IFtub2RlS2V5LCBub2RlVmFsdWVdID0gcGF0aDtcbiAgICAgIG5vZGUgPSB7XG4gICAgICAgIHR5cGU6ICdicmFuY2gnLFxuICAgICAgICBub2RlS2V5LFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIGJyYW5jaGVzOiBuZXcgTWFwKCksXG4gICAgICAgIGJyYW5jaEtleVxuICAgICAgfTtcbiAgICAgIG5vZGUuYnJhbmNoZXMuc2V0KG5vZGVWYWx1ZSwgYWRkTGVhZihudWxsLCByZXN0LCBub2RlLCB2YWx1ZSwgbm9kZVZhbHVlLCBoYW5kbGVycywgb25BYm9ydCkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBub2RlID0gcm9vdDtcblxuICAgIGlmIChyb3V0ZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IFtwYXRoLCAuLi5yZXN0XSA9IHJvdXRlO1xuICAgICAgY29uc3QgW25vZGVLZXksIG5vZGVWYWx1ZV0gPSBwYXRoO1xuXG4gICAgICBpZiAocm9vdC50eXBlICE9PSAnYnJhbmNoJyB8fCByb290Lm5vZGVLZXkgIT09IG5vZGVLZXkpIHtcbiAgICAgICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKCdFeGlzdGluZyBjYWNoZSBtdXN0IGhhdmUgYSBicmFuY2ggbWlkd2F5IHRocm91Z2ggdGhlICcgKyAncm91dGUgd2l0aCBtYXRjaGluZyBub2RlIGtleS4gUmVzZXR0aW5nIGNhY2hlLicpO1xuICAgICAgICBvbkFib3J0KCk7XG4gICAgICAgIHJldHVybiBub2RlOyAvLyBpZ25vcmVkXG4gICAgICB9XG5cbiAgICAgIHJvb3QuYnJhbmNoZXMuc2V0KG5vZGVWYWx1ZSwgYWRkTGVhZihyb290LmJyYW5jaGVzLmdldChub2RlVmFsdWUpLCByZXN0LCByb290LCB2YWx1ZSwgbm9kZVZhbHVlLCBoYW5kbGVycywgb25BYm9ydCkpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZXJzID09PSBudWxsIHx8IGhhbmRsZXJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2hhbmRsZXJzJG9uTm9kZVZpc2l0MiA9IGhhbmRsZXJzLm9uTm9kZVZpc2l0KSA9PT0gbnVsbCB8fCBfaGFuZGxlcnMkb25Ob2RlVmlzaXQyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaGFuZGxlcnMkb25Ob2RlVmlzaXQyLmNhbGwoaGFuZGxlcnMsIG5vZGUpO1xuICByZXR1cm4gbm9kZTtcbn07XG5cbmNvbnN0IHBydW5lTm9kZUZyb21UcmVlID0gKHJvb3QsIG5vZGUsIHBhcmVudCkgPT4ge1xuICBpZiAoIXBhcmVudCkge1xuICAgIHJldHVybiByb290ID09PSBub2RlO1xuICB9XG5cbiAgcGFyZW50LmJyYW5jaGVzLmRlbGV0ZShub2RlLmJyYW5jaEtleSk7XG4gIHJldHVybiBwcnVuZVVwc3RyZWFtQnJhbmNoZXMocm9vdCwgcGFyZW50LCBwYXJlbnQucGFyZW50KTtcbn07XG5cbmNvbnN0IHBydW5lVXBzdHJlYW1CcmFuY2hlcyA9IChyb290LCBicmFuY2hOb2RlLCBwYXJlbnQpID0+IHtcbiAgaWYgKCFwYXJlbnQpIHtcbiAgICByZXR1cm4gcm9vdCA9PT0gYnJhbmNoTm9kZTtcbiAgfVxuXG4gIGlmIChicmFuY2hOb2RlLmJyYW5jaGVzLnNpemUgPT09IDApIHtcbiAgICBwYXJlbnQuYnJhbmNoZXMuZGVsZXRlKGJyYW5jaE5vZGUuYnJhbmNoS2V5KTtcbiAgfVxuXG4gIHJldHVybiBwcnVuZVVwc3RyZWFtQnJhbmNoZXMocm9vdCwgcGFyZW50LCBwYXJlbnQucGFyZW50KTtcbn07XG5cbmNvbnN0IGNvdW50RG93bnN0cmVhbUxlYXZlcyA9IG5vZGUgPT4gbm9kZS50eXBlID09PSAnbGVhZicgPyAxIDogQXJyYXkuZnJvbShub2RlLmJyYW5jaGVzLnZhbHVlcygpKS5yZWR1Y2UoKHN1bSwgY3Vyck5vZGUpID0+IHN1bSArIGNvdW50RG93bnN0cmVhbUxlYXZlcyhjdXJyTm9kZSksIDApO1xuXG52YXIgUmVjb2lsX1RyZWVDYWNoZSA9IHtcbiAgVHJlZUNhY2hlXG59O1xuXG52YXIgUmVjb2lsX1RyZWVDYWNoZV8xID0gUmVjb2lsX1RyZWVDYWNoZS5UcmVlQ2FjaGU7XG5cbnZhciBSZWNvaWxfVHJlZUNhY2hlJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgVHJlZUNhY2hlOiBSZWNvaWxfVHJlZUNhY2hlXzFcbn0pO1xuXG5jbGFzcyBMUlVDYWNoZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB2YXIgX29wdGlvbnMkbWFwS2V5O1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX21heFNpemVcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9zaXplXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfaGVhZFwiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiX3RhaWxcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9tYXBcIiwgdm9pZCAwKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9rZXlNYXBwZXJcIiwgdm9pZCAwKTtcblxuICAgIHRoaXMuX21heFNpemUgPSBvcHRpb25zLm1heFNpemU7XG4gICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgdGhpcy5faGVhZCA9IG51bGw7XG4gICAgdGhpcy5fdGFpbCA9IG51bGw7XG4gICAgdGhpcy5fbWFwID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX2tleU1hcHBlciA9IChfb3B0aW9ucyRtYXBLZXkgPSBvcHRpb25zLm1hcEtleSkgIT09IG51bGwgJiYgX29wdGlvbnMkbWFwS2V5ICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRtYXBLZXkgOiB2ID0+IHY7XG4gIH1cblxuICBoZWFkKCkge1xuICAgIHJldHVybiB0aGlzLl9oZWFkO1xuICB9XG5cbiAgdGFpbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFpbDtcbiAgfVxuXG4gIHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gIH1cblxuICBtYXhTaXplKCkge1xuICAgIHJldHVybiB0aGlzLl9tYXhTaXplO1xuICB9XG5cbiAgaGFzKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9tYXAuaGFzKHRoaXMuX2tleU1hcHBlcihrZXkpKTtcbiAgfVxuXG4gIGdldChrZXkpIHtcbiAgICBjb25zdCBtYXBwZWRLZXkgPSB0aGlzLl9rZXlNYXBwZXIoa2V5KTtcblxuICAgIGNvbnN0IG5vZGUgPSB0aGlzLl9tYXAuZ2V0KG1hcHBlZEtleSk7XG5cbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdGhpcy5zZXQoa2V5LCBub2RlLnZhbHVlKTtcbiAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgfVxuXG4gIHNldChrZXksIHZhbCkge1xuICAgIGNvbnN0IG1hcHBlZEtleSA9IHRoaXMuX2tleU1hcHBlcihrZXkpO1xuXG4gICAgY29uc3QgZXhpc3RpbmdOb2RlID0gdGhpcy5fbWFwLmdldChtYXBwZWRLZXkpO1xuXG4gICAgaWYgKGV4aXN0aW5nTm9kZSkge1xuICAgICAgdGhpcy5kZWxldGUoa2V5KTtcbiAgICB9XG5cbiAgICBjb25zdCBoZWFkID0gdGhpcy5oZWFkKCk7XG4gICAgY29uc3Qgbm9kZSA9IHtcbiAgICAgIGtleSxcbiAgICAgIHJpZ2h0OiBoZWFkLFxuICAgICAgbGVmdDogbnVsbCxcbiAgICAgIHZhbHVlOiB2YWxcbiAgICB9O1xuXG4gICAgaWYgKGhlYWQpIHtcbiAgICAgIGhlYWQubGVmdCA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3RhaWwgPSBub2RlO1xuICAgIH1cblxuICAgIHRoaXMuX21hcC5zZXQobWFwcGVkS2V5LCBub2RlKTtcblxuICAgIHRoaXMuX2hlYWQgPSBub2RlO1xuICAgIHRoaXMuX3NpemUrKztcblxuICAgIHRoaXMuX21heWJlRGVsZXRlTFJVKCk7XG4gIH1cblxuICBfbWF5YmVEZWxldGVMUlUoKSB7XG4gICAgaWYgKHRoaXMuc2l6ZSgpID4gdGhpcy5tYXhTaXplKCkpIHtcbiAgICAgIHRoaXMuZGVsZXRlTHJ1KCk7XG4gICAgfVxuICB9XG5cbiAgZGVsZXRlTHJ1KCkge1xuICAgIGNvbnN0IHRhaWwgPSB0aGlzLnRhaWwoKTtcblxuICAgIGlmICh0YWlsKSB7XG4gICAgICB0aGlzLmRlbGV0ZSh0YWlsLmtleSk7XG4gICAgfVxuICB9XG5cbiAgZGVsZXRlKGtleSkge1xuICAgIGNvbnN0IG1hcHBlZEtleSA9IHRoaXMuX2tleU1hcHBlcihrZXkpO1xuXG4gICAgaWYgKCF0aGlzLl9zaXplIHx8ICF0aGlzLl9tYXAuaGFzKG1hcHBlZEtleSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBub2RlID0gUmVjb2lsX251bGx0aHJvd3ModGhpcy5fbWFwLmdldChtYXBwZWRLZXkpKTtcbiAgICBjb25zdCByaWdodCA9IG5vZGUucmlnaHQ7XG4gICAgY29uc3QgbGVmdCA9IG5vZGUubGVmdDtcblxuICAgIGlmIChyaWdodCkge1xuICAgICAgcmlnaHQubGVmdCA9IG5vZGUubGVmdDtcbiAgICB9XG5cbiAgICBpZiAobGVmdCkge1xuICAgICAgbGVmdC5yaWdodCA9IG5vZGUucmlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUgPT09IHRoaXMuaGVhZCgpKSB7XG4gICAgICB0aGlzLl9oZWFkID0gcmlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUgPT09IHRoaXMudGFpbCgpKSB7XG4gICAgICB0aGlzLl90YWlsID0gbGVmdDtcbiAgICB9XG5cbiAgICB0aGlzLl9tYXAuZGVsZXRlKG1hcHBlZEtleSk7XG5cbiAgICB0aGlzLl9zaXplLS07XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLl9zaXplID0gMDtcbiAgICB0aGlzLl9oZWFkID0gbnVsbDtcbiAgICB0aGlzLl90YWlsID0gbnVsbDtcbiAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gIH1cblxufVxuXG52YXIgUmVjb2lsX0xSVUNhY2hlID0ge1xuICBMUlVDYWNoZVxufTtcblxudmFyIFJlY29pbF9MUlVDYWNoZV8xID0gUmVjb2lsX0xSVUNhY2hlLkxSVUNhY2hlO1xuXG52YXIgUmVjb2lsX0xSVUNhY2hlJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgTFJVQ2FjaGU6IFJlY29pbF9MUlVDYWNoZV8xXG59KTtcblxuY29uc3Qge1xuICBMUlVDYWNoZTogTFJVQ2FjaGUkMVxufSA9IFJlY29pbF9MUlVDYWNoZSQxO1xuXG5jb25zdCB7XG4gIFRyZWVDYWNoZTogVHJlZUNhY2hlJDFcbn0gPSBSZWNvaWxfVHJlZUNhY2hlJDE7XG5cbmZ1bmN0aW9uIHRyZWVDYWNoZUxSVShtYXhTaXplLCBtYXBOb2RlVmFsdWUgPSB2ID0+IHYpIHtcbiAgY29uc3QgbHJ1Q2FjaGUgPSBuZXcgTFJVQ2FjaGUkMSh7XG4gICAgbWF4U2l6ZVxuICB9KTtcbiAgY29uc3QgY2FjaGUgPSBuZXcgVHJlZUNhY2hlJDEoe1xuICAgIG1hcE5vZGVWYWx1ZSxcbiAgICBvbkhpdDogbm9kZSA9PiB7XG4gICAgICBscnVDYWNoZS5zZXQobm9kZSwgdHJ1ZSk7XG4gICAgfSxcbiAgICBvblNldDogbm9kZSA9PiB7XG4gICAgICBjb25zdCBscnVOb2RlID0gbHJ1Q2FjaGUudGFpbCgpO1xuICAgICAgbHJ1Q2FjaGUuc2V0KG5vZGUsIHRydWUpO1xuXG4gICAgICBpZiAobHJ1Tm9kZSAmJiBjYWNoZS5zaXplKCkgPiBtYXhTaXplKSB7XG4gICAgICAgIGNhY2hlLmRlbGV0ZShscnVOb2RlLmtleSk7XG4gICAgICB9XG4gICAgfVxuICB9KTsgLy8gJEZsb3dGaXhNZVttZXRob2QtdW5iaW5kaW5nXVxuXG4gIHJldHVybiBjYWNoZTtcbn1cblxudmFyIFJlY29pbF90cmVlQ2FjaGVMUlUgPSB0cmVlQ2FjaGVMUlU7XG5cbmNvbnN0IHtcbiAgVHJlZUNhY2hlOiBUcmVlQ2FjaGUkMlxufSA9IFJlY29pbF9UcmVlQ2FjaGUkMTtcblxuXG5cbmNvbnN0IGRlZmF1bHRQb2xpY3kgPSB7XG4gIGVxdWFsaXR5OiAncmVmZXJlbmNlJyxcbiAgZXZpY3Rpb246ICdrZWVwLWFsbCcsXG4gIG1heFNpemU6IEluZmluaXR5XG59O1xuXG5mdW5jdGlvbiB0cmVlQ2FjaGVGcm9tUG9saWN5KHtcbiAgZXF1YWxpdHkgPSBkZWZhdWx0UG9saWN5LmVxdWFsaXR5LFxuICBldmljdGlvbiA9IGRlZmF1bHRQb2xpY3kuZXZpY3Rpb24sXG4gIG1heFNpemUgPSBkZWZhdWx0UG9saWN5Lm1heFNpemVcbn0gPSBkZWZhdWx0UG9saWN5KSB7XG4gIGNvbnN0IHZhbHVlTWFwcGVyID0gZ2V0VmFsdWVNYXBwZXIoZXF1YWxpdHkpO1xuICBjb25zdCB0cmVlQ2FjaGUgPSBnZXRUcmVlQ2FjaGUoZXZpY3Rpb24sIG1heFNpemUsIHZhbHVlTWFwcGVyKTtcbiAgcmV0dXJuIHRyZWVDYWNoZTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWVNYXBwZXIoZXF1YWxpdHkpIHtcbiAgc3dpdGNoIChlcXVhbGl0eSkge1xuICAgIGNhc2UgJ3JlZmVyZW5jZSc6XG4gICAgICByZXR1cm4gdmFsID0+IHZhbDtcblxuICAgIGNhc2UgJ3ZhbHVlJzpcbiAgICAgIHJldHVybiB2YWwgPT4gUmVjb2lsX3N0YWJsZVN0cmluZ2lmeSh2YWwpO1xuICB9XG5cbiAgdGhyb3cgUmVjb2lsX2VycihgVW5yZWNvZ25pemVkIGVxdWFsaXR5IHBvbGljeSAke2VxdWFsaXR5fWApO1xufVxuXG5mdW5jdGlvbiBnZXRUcmVlQ2FjaGUoZXZpY3Rpb24sIG1heFNpemUsIG1hcE5vZGVWYWx1ZSkge1xuICBzd2l0Y2ggKGV2aWN0aW9uKSB7XG4gICAgY2FzZSAna2VlcC1hbGwnOlxuICAgICAgLy8gJEZsb3dGaXhNZVttZXRob2QtdW5iaW5kaW5nXVxuICAgICAgcmV0dXJuIG5ldyBUcmVlQ2FjaGUkMih7XG4gICAgICAgIG1hcE5vZGVWYWx1ZVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdscnUnOlxuICAgICAgcmV0dXJuIFJlY29pbF90cmVlQ2FjaGVMUlUoUmVjb2lsX251bGx0aHJvd3MobWF4U2l6ZSksIG1hcE5vZGVWYWx1ZSk7XG5cbiAgICBjYXNlICdtb3N0LXJlY2VudCc6XG4gICAgICByZXR1cm4gUmVjb2lsX3RyZWVDYWNoZUxSVSgxLCBtYXBOb2RlVmFsdWUpO1xuICB9XG5cbiAgdGhyb3cgUmVjb2lsX2VycihgVW5yZWNvZ25pemVkIGV2aWN0aW9uIHBvbGljeSAke2V2aWN0aW9ufWApO1xufVxuXG52YXIgUmVjb2lsX3RyZWVDYWNoZUZyb21Qb2xpY3kgPSB0cmVlQ2FjaGVGcm9tUG9saWN5O1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBlbWFpbHMgb25jYWxsK3JlY29pbFxuICogXG4gKiBAZm9ybWF0XG4gKlxuICogVGhpcyBpcyBhIHN0dWIgZm9yIHNvbWUgaW50ZWdyYXRpb24gaW50byBGQiBpbnRlcm5hbCBzdHVmZlxuICovXG5mdW5jdGlvbiBzdGFydFBlcmZCbG9jayhfaWQpIHtcbiAgcmV0dXJuICgpID0+IG51bGw7XG59XG5cbnZhciBSZWNvaWxfUGVyZm9ybWFuY2VUaW1pbmdzID0ge1xuICBzdGFydFBlcmZCbG9ja1xufTtcblxuY29uc3Qge1xuICBsb2FkYWJsZVdpdGhFcnJvcjogbG9hZGFibGVXaXRoRXJyb3IkMSxcbiAgbG9hZGFibGVXaXRoUHJvbWlzZTogbG9hZGFibGVXaXRoUHJvbWlzZSQxLFxuICBsb2FkYWJsZVdpdGhWYWx1ZTogbG9hZGFibGVXaXRoVmFsdWUkMlxufSA9IFJlY29pbF9Mb2FkYWJsZSQxO1xuXG5cblxuY29uc3Qge1xuICBnZXROb2RlTG9hZGFibGU6IGdldE5vZGVMb2FkYWJsZSQyLFxuICBwZWVrTm9kZUxvYWRhYmxlOiBwZWVrTm9kZUxvYWRhYmxlJDEsXG4gIHNldE5vZGVWYWx1ZTogc2V0Tm9kZVZhbHVlJDNcbn0gPSBSZWNvaWxfRnVuY3Rpb25hbENvcmU7XG5cbmNvbnN0IHtcbiAgc2F2ZURlcGVuZGVuY3lNYXBUb1N0b3JlOiBzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmUkMVxufSA9IFJlY29pbF9HcmFwaDtcblxuY29uc3Qge1xuICBERUZBVUxUX1ZBTFVFOiBERUZBVUxUX1ZBTFVFJDYsXG4gIFJlY29pbFZhbHVlTm90UmVhZHk6IFJlY29pbFZhbHVlTm90UmVhZHkkMixcbiAgZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyOiBnZXRDb25maWdEZWxldGlvbkhhbmRsZXIkMSxcbiAgZ2V0Tm9kZTogZ2V0Tm9kZSQ2LFxuICByZWdpc3Rlck5vZGU6IHJlZ2lzdGVyTm9kZSQxXG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgaXNSZWNvaWxWYWx1ZTogaXNSZWNvaWxWYWx1ZSQzXG59ID0gUmVjb2lsX1JlY29pbFZhbHVlJDE7XG5cbmNvbnN0IHtcbiAgQWJzdHJhY3RSZWNvaWxWYWx1ZTogQWJzdHJhY3RSZWNvaWxWYWx1ZSQ1XG59ID0gUmVjb2lsX1JlY29pbFZhbHVlJDE7XG5cbmNvbnN0IHtcbiAgbWFya1JlY29pbFZhbHVlTW9kaWZpZWQ6IG1hcmtSZWNvaWxWYWx1ZU1vZGlmaWVkJDEsXG4gIHNldFJlY29pbFZhbHVlTG9hZGFibGU6IHNldFJlY29pbFZhbHVlTG9hZGFibGUkMlxufSA9IFJlY29pbF9SZWNvaWxWYWx1ZUludGVyZmFjZTtcblxuY29uc3Qge1xuICByZXRhaW5lZEJ5T3B0aW9uV2l0aERlZmF1bHQ6IHJldGFpbmVkQnlPcHRpb25XaXRoRGVmYXVsdCQxXG59ID0gUmVjb2lsX1JldGVudGlvbjtcblxuY29uc3Qge1xuICBjbG9uZVNuYXBzaG90OiBjbG9uZVNuYXBzaG90JDNcbn0gPSBSZWNvaWxfU25hcHNob3QkMTtcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuY29uc3Qge1xuICBzdGFydFBlcmZCbG9jazogc3RhcnRQZXJmQmxvY2skMVxufSA9IFJlY29pbF9QZXJmb3JtYW5jZVRpbWluZ3M7XG5cblxuXG5jbGFzcyBDYW5jZWxlZCB7fVxuXG5jb25zdCBDQU5DRUxFRCA9IG5ldyBDYW5jZWxlZCgpO1xuLyoqXG4gKiBBbiBFeGVjdXRpb25JZCBpcyBhbiBhcmJpdHJhcnkgSUQgdGhhdCBsZXRzIHVzIGRpc3Rpbmd1aXNoIGV4ZWN1dGlvbnMgZnJvbVxuICogZWFjaCBvdGhlci4gVGhpcyBpcyBuZWNlc3NhcnkgYXMgd2UgbmVlZCBhIHdheSBvZiBzb2x2aW5nIHRoaXMgcHJvYmxlbTpcbiAqIFwiZ2l2ZW4gMyBhc3luYyBleGVjdXRpb25zLCBvbmx5IHVwZGF0ZSBzdGF0ZSBmb3IgdGhlICdsYXRlc3QnIGV4ZWN1dGlvbiB3aGVuXG4gKiBpdCBmaW5pc2hlcyBydW5uaW5nIHJlZ2FyZGxlc3Mgb2Ygd2hlbiB0aGUgb3RoZXIgMiBmaW5pc2hcIi4gRXhlY3V0aW9uSWRzXG4gKiBwcm92aWRlIGEgY29udmVuaWVudCB3YXkgb2YgaWRlbnRpZnlpbmcgZXhlY3V0aW9ucyBzbyB0aGF0IHdlIGNhbiB0cmFjayBhbmRcbiAqIG1hbmFnZSB0aGVtIG92ZXIgdGltZS5cbiAqL1xuXG5jb25zdCBkZXBlbmRlbmN5U3RhY2sgPSBbXTsgLy8gZm9yIGRldGVjdGluZyBjaXJjdWxhciBkZXBlbmRlbmNpZXMuXG5cbmNvbnN0IHdhaXRpbmdTdG9yZXMgPSBuZXcgTWFwKCk7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cblxuY29uc3QgZ2V0TmV3RXhlY3V0aW9uSWQgPSAoKCkgPT4ge1xuICBsZXQgZXhlY3V0aW9uSWQgPSAwO1xuICByZXR1cm4gKCkgPT4gZXhlY3V0aW9uSWQrKztcbn0pKCk7XG5cbmZ1bmN0aW9uIGdldEluaXRpYWxFeGVjdXRpb25JbmZvKCkge1xuICByZXR1cm4ge1xuICAgIGRlcFZhbHVlc0Rpc2NvdmVyZWRTb0ZhckR1cmluZ0FzeW5jV29yazogbnVsbCxcbiAgICBsYXRlc3RMb2FkYWJsZTogbnVsbCxcbiAgICBsYXRlc3RFeGVjdXRpb25JZDogbnVsbCxcbiAgICBzdGF0ZVZlcnNpb246IG51bGxcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0b3Iob3B0aW9ucykge1xuICBsZXQgcmVjb2lsVmFsdWUgPSBudWxsO1xuICBjb25zdCB7XG4gICAga2V5LFxuICAgIGdldCxcbiAgICBjYWNoZVBvbGljeV9VTlNUQUJMRTogY2FjaGVQb2xpY3lcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHNldCA9IG9wdGlvbnMuc2V0ICE9IG51bGwgPyBvcHRpb25zLnNldCA6IHVuZGVmaW5lZDsgLy8gZmxvd1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IFJlY29pbF9lcnIoJ0Ega2V5IG9wdGlvbiB3aXRoIGEgdW5pcXVlIHN0cmluZyB2YWx1ZSBtdXN0IGJlIHByb3ZpZGVkIHdoZW4gY3JlYXRpbmcgYSBzZWxlY3Rvci4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGdldCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgUmVjb2lsX2VycignU2VsZWN0b3JzIG11c3Qgc3BlY2lmeSBhIGdldCBjYWxsYmFjayBvcHRpb24gdG8gZ2V0IHRoZSBzZWxlY3RvciB2YWx1ZS4nKTtcbiAgICB9XG4gIH0gLy8gVGhpcyBpcyBldmVyeSBkaXNjb3ZlcmVkIGRlcGVuZGVuY3kgYWNyb3NzIGV4ZWN1dGlvbnNcblxuXG4gIGNvbnN0IGRpc2NvdmVyZWREZXBlbmRlbmN5Tm9kZUtleXMgPSBuZXcgU2V0KCk7XG4gIGNvbnN0IGNhY2hlID0gUmVjb2lsX3RyZWVDYWNoZUZyb21Qb2xpY3koY2FjaGVQb2xpY3kgIT09IG51bGwgJiYgY2FjaGVQb2xpY3kgIT09IHZvaWQgMCA/IGNhY2hlUG9saWN5IDoge1xuICAgIGVxdWFsaXR5OiAncmVmZXJlbmNlJyxcbiAgICBldmljdGlvbjogJ2tlZXAtYWxsJ1xuICB9KTtcbiAgY29uc3QgcmV0YWluZWRCeSA9IHJldGFpbmVkQnlPcHRpb25XaXRoRGVmYXVsdCQxKG9wdGlvbnMucmV0YWluZWRCeV9VTlNUQUJMRSk7XG4gIGNvbnN0IGV4ZWN1dGlvbkluZm9NYXAgPSBuZXcgTWFwKCk7XG4gIGxldCBsaXZlU3RvcmVzQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIHNlbGVjdG9ySXNMaXZlKCkge1xuICAgIHJldHVybiAhUmVjb2lsX2dreF8xKCdyZWNvaWxfbWVtb3J5X21hbmFnYW1lbnRfMjAyMCcpIHx8IGxpdmVTdG9yZXNDb3VudCA+IDA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRFeGVjdXRpb25JbmZvKHN0b3JlKSB7XG4gICAgaWYgKCFleGVjdXRpb25JbmZvTWFwLmhhcyhzdG9yZSkpIHtcbiAgICAgIGV4ZWN1dGlvbkluZm9NYXAuc2V0KHN0b3JlLCBnZXRJbml0aWFsRXhlY3V0aW9uSW5mbygpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVjb2lsX251bGx0aHJvd3MoZXhlY3V0aW9uSW5mb01hcC5nZXQoc3RvcmUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdG9ySW5pdChzdG9yZSkge1xuICAgIGxpdmVTdG9yZXNDb3VudCsrO1xuICAgIHN0b3JlLmdldFN0YXRlKCkua25vd25TZWxlY3RvcnMuYWRkKGtleSk7IC8vIEZJWE1FIHJlbW92ZSBrbm93blNlbGVjdG9ycz9cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBsaXZlU3RvcmVzQ291bnQtLTtcbiAgICAgIHN0b3JlLmdldFN0YXRlKCkua25vd25TZWxlY3RvcnMuZGVsZXRlKGtleSk7XG4gICAgICBleGVjdXRpb25JbmZvTWFwLmRlbGV0ZShzdG9yZSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdG9yU2hvdWxkRGVsZXRlQ29uZmlnT25SZWxlYXNlKCkge1xuICAgIHJldHVybiBnZXRDb25maWdEZWxldGlvbkhhbmRsZXIkMShrZXkpICE9PSB1bmRlZmluZWQgJiYgIXNlbGVjdG9ySXNMaXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlTdG9yZVdoZW5Bc3luY1NldHRsZXMoc3RvcmUsIGxvYWRhYmxlLCBleGVjdXRpb25JZCkge1xuICAgIGlmIChsb2FkYWJsZS5zdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICBsZXQgc3RvcmVzID0gd2FpdGluZ1N0b3Jlcy5nZXQoZXhlY3V0aW9uSWQpO1xuXG4gICAgICBpZiAoc3RvcmVzID09IG51bGwpIHtcbiAgICAgICAgd2FpdGluZ1N0b3Jlcy5zZXQoZXhlY3V0aW9uSWQsIHN0b3JlcyA9IG5ldyBTZXQoKSk7XG4gICAgICB9XG5cbiAgICAgIHN0b3Jlcy5hZGQoc3RvcmUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeVN0b3Jlc09mU2V0dGxlZEFzeW5jKG5ld0xvYWRhYmxlLCBleGVjdXRpb25JZCkge1xuICAgIGNvbnN0IHN0b3JlcyA9IHdhaXRpbmdTdG9yZXMuZ2V0KGV4ZWN1dGlvbklkKTtcblxuICAgIGlmIChzdG9yZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZm9yIChjb25zdCBzdG9yZSBvZiBzdG9yZXMpIHtcbiAgICAgICAgc2V0UmVjb2lsVmFsdWVMb2FkYWJsZSQyKHN0b3JlLCBuZXcgQWJzdHJhY3RSZWNvaWxWYWx1ZSQ1KGtleSksIG5ld0xvYWRhYmxlKTtcbiAgICAgIH1cblxuICAgICAgd2FpdGluZ1N0b3Jlcy5kZWxldGUoZXhlY3V0aW9uSWQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENhY2hlZE5vZGVMb2FkYWJsZShzdG9yZSwgc3RhdGUsIG5vZGVLZXkpIHtcbiAgICBjb25zdCBpc0tleVBvaW50aW5nVG9TZWxlY3RvciA9IHN0b3JlLmdldFN0YXRlKCkua25vd25TZWxlY3RvcnMuaGFzKG5vZGVLZXkpO1xuICAgIC8qKlxuICAgICAqIEl0J3MgaW1wb3J0YW50IHRoYXQgd2UgZG9uJ3QgYnlwYXNzIGNhbGxpbmcgZ2V0Tm9kZUxvYWRhYmxlIGZvciBhdG9tc1xuICAgICAqIGFzIGdldE5vZGVMb2FkYWJsZSBoYXMgc2lkZSBlZmZlY3RzIGluIHN0YXRlXG4gICAgICovXG5cbiAgICBpZiAoaXNLZXlQb2ludGluZ1RvU2VsZWN0b3IgJiYgc3RhdGUuYXRvbVZhbHVlcy5oYXMobm9kZUtleSkpIHtcbiAgICAgIHJldHVybiBSZWNvaWxfbnVsbHRocm93cyhzdGF0ZS5hdG9tVmFsdWVzLmdldChub2RlS2V5KSk7XG4gICAgfVxuXG4gICAgY29uc3QgbG9hZGFibGUgPSBnZXROb2RlTG9hZGFibGUkMihzdG9yZSwgc3RhdGUsIG5vZGVLZXkpO1xuXG4gICAgaWYgKGxvYWRhYmxlLnN0YXRlICE9PSAnbG9hZGluZycgJiYgaXNLZXlQb2ludGluZ1RvU2VsZWN0b3IpIHtcbiAgICAgIHN0YXRlLmF0b21WYWx1ZXMuc2V0KG5vZGVLZXksIGxvYWRhYmxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9hZGFibGU7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gYXR0YWNoZXMgYSB0aGVuKCkgYW5kIGEgY2F0Y2goKSB0byBhIHByb21pc2UgdGhhdCB3YXNcbiAgICogcmV0dXJuZWQgZnJvbSBhIHNlbGVjdG9yJ3MgZ2V0KCkgKGVpdGhlciBleHBsaWNpdGx5IG9yIGltcGxpY2l0bHkgYnlcbiAgICogcnVubmluZyBhIGZ1bmN0aW9uIHRoYXQgdXNlcyB0aGUgXCJhc3luY1wiIGtleXdvcmQpLiBJZiBhIHNlbGVjdG9yJ3MgZ2V0KClcbiAgICogcmV0dXJucyBhIHByb21pc2UsIHdlIGhhdmUgdHdvIHBvc3NpYmlsaXRpZXM6XG4gICAqXG4gICAqIDEuIFRoZSBwcm9taXNlIHdpbGwgcmVzb2x2ZSwgaW4gd2hpY2ggY2FzZSBpdCB3aWxsIGhhdmUgY29tcGxldGVseSBmaW5pc2hlZFxuICAgKiAgICBleGVjdXRpbmcgd2l0aG91dCBhbnkgcmVtYWluaW5nIHBlbmRpbmcgZGVwZW5kZW5jaWVzLiBObyBtb3JlIHJldHJpZXNcbiAgICogICAgYXJlIG5lZWRlZCBhbmQgd2UgY2FuIHByb2NlZWQgd2l0aCB1cGRhdGluZyB0aGUgY2FjaGUgYW5kIG5vdGlmeWluZ1xuICAgKiAgICBzdWJzY3JpYmVycyAoaWYgaXQgaXMgdGhlIGxhdGVzdCBleGVjdXRpb24sIG90aGVyd2lzZSBvbmx5IHRoZSBjYWNoZVxuICAgKiAgICB3aWxsIGJlIHVwZGF0ZWQgYW5kIHN1YnNjcmlwdGlvbnMgd2lsbCBub3QgYmUgZmlyZWQpLiBUaGlzIGlzIHRoZSBjYXNlXG4gICAqICAgIGhhbmRsZWQgYnkgdGhlIGF0dGFjaGVkIHRoZW4oKSBoYW5kbGVyLlxuICAgKlxuICAgKiAyLiBUaGUgcHJvbWlzZSB3aWxsIHRocm93IGJlY2F1c2UgaXQgZWl0aGVyIGhhcyBhbiBlcnJvciBvciBpdCBjYW1lIGFjcm9zc1xuICAgKiAgICBhbiBhc3luYyBkZXBlbmRlbmN5IHRoYXQgaGFzIG5vdCB5ZXQgcmVzb2x2ZWQsIGluIHdoaWNoIGNhc2Ugd2Ugd2lsbFxuICAgKiAgICBjYWxsIHdyYXBEZXBkZW5jeVByb21pc2UoKSwgd2hvc2UgcmVzcG9uc2liaWxpdHkgaXMgdG8gaGFuZGxlIGRlcGVuZGVuY3lcbiAgICogICAgcHJvbWlzZXMuIFRoaXMgY2FzZSBpcyBoYW5kbGVkIGJ5IHRoZSBhdHRhY2hlZCBjYXRjaCgpIGhhbmRsZXIuXG4gICAqXG4gICAqIEJvdGggYnJhbmNoZXMgd2lsbCBldmVudHVhbGx5IHJlc29sdmUgdG8gdGhlIGZpbmFsIHJlc3VsdCBvZiB0aGUgc2VsZWN0b3JcbiAgICogKG9yIGFuIGVycm9yIGlmIGEgcmVhbCBlcnJvciBvY2N1cnJlZCkuXG4gICAqXG4gICAqIFRoZSBleGVjdXRpb24gd2lsbCBydW4gdG8gY29tcGxldGlvbiBldmVuIGlmIGl0IGlzIHN0YWxlLCBhbmQgaXRzIHZhbHVlXG4gICAqIHdpbGwgYmUgY2FjaGVkLiBCdXQgc3RhbGUgZXhlY3V0aW9ucyB3aWxsIG5vdCB1cGRhdGUgZ2xvYmFsIHN0YXRlIG9yIHVwZGF0ZVxuICAgKiBleGVjdXRpb25JbmZvIGFzIHRoYXQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSAnbGF0ZXN0JyBleGVjdXRpb24uXG4gICAqXG4gICAqIE5vdGUgdGhpcyBmdW5jdGlvbiBzaG91bGQgbm90IGJlIHBhc3NlZCBhIHByb21pc2UgdGhhdCB3YXMgdGhyb3duLS1BS0EgYVxuICAgKiBkZXBlbmRlbmN5IHByb21pc2UuIERlcGVuZGVuY3kgcHJvbWlzZXMgc2hvdWxkIGJlIHBhc3NlZCB0b1xuICAgKiB3cmFwUGVuZGluZ0RlcGVuZGVuY3lQcm9taXNlKCkpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHdyYXBQZW5kaW5nUHJvbWlzZShzdG9yZSwgcHJvbWlzZSwgc3RhdGUsIGRlcFZhbHVlcywgZXhlY3V0aW9uSWQsIGxvYWRpbmdEZXBzU3RhdGUpIHtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgIGlmICghc2VsZWN0b3JJc0xpdmUoKSkge1xuICAgICAgICAvLyBUaGUgc2VsZWN0b3Igd2FzIHJlbGVhc2VkIHNpbmNlIHRoZSByZXF1ZXN0IGJlZ2FuOyBpZ25vcmUgdGhlIHJlc3BvbnNlLlxuICAgICAgICBjbGVhckV4ZWN1dGlvbkluZm8oc3RvcmUsIGV4ZWN1dGlvbklkKTtcbiAgICAgICAgdGhyb3cgQ0FOQ0VMRUQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxvYWRhYmxlID0gbG9hZGFibGVXaXRoVmFsdWUkMih2YWx1ZSk7XG4gICAgICBtYXliZUZyZWV6ZVZhbHVlKHZhbHVlKTtcbiAgICAgIHNldENhY2hlKHN0YXRlLCBkZXBWYWx1ZXNUb0RlcFJvdXRlKGRlcFZhbHVlcyksIGxvYWRhYmxlKTtcbiAgICAgIHNldERlcHNJblN0b3JlKHN0b3JlLCBzdGF0ZSwgbmV3IFNldChkZXBWYWx1ZXMua2V5cygpKSwgZXhlY3V0aW9uSWQpO1xuICAgICAgc2V0TG9hZGFibGVJblN0b3JlVG9Ob3RpZnlEZXBzKHN0b3JlLCBsb2FkYWJsZSwgZXhlY3V0aW9uSWQpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pLmNhdGNoKGVycm9yT3JQcm9taXNlID0+IHtcbiAgICAgIGlmICghc2VsZWN0b3JJc0xpdmUoKSkge1xuICAgICAgICAvLyBUaGUgc2VsZWN0b3Igd2FzIHJlbGVhc2VkIHNpbmNlIHRoZSByZXF1ZXN0IGJlZ2FuOyBpZ25vcmUgdGhlIHJlc3BvbnNlLlxuICAgICAgICBjbGVhckV4ZWN1dGlvbkluZm8oc3RvcmUsIGV4ZWN1dGlvbklkKTtcbiAgICAgICAgdGhyb3cgQ0FOQ0VMRUQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0xhdGVzdEV4ZWN1dGlvbihzdG9yZSwgZXhlY3V0aW9uSWQpKSB7XG4gICAgICAgIHVwZGF0ZUV4ZWN1dGlvbkluZm9EZXBWYWx1ZXMoZGVwVmFsdWVzLCBzdG9yZSwgZXhlY3V0aW9uSWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoUmVjb2lsX2lzUHJvbWlzZShlcnJvck9yUHJvbWlzZSkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBQZW5kaW5nRGVwZW5kZW5jeVByb21pc2Uoc3RvcmUsIGVycm9yT3JQcm9taXNlLCBzdGF0ZSwgZGVwVmFsdWVzLCBleGVjdXRpb25JZCwgbG9hZGluZ0RlcHNTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxvYWRhYmxlID0gbG9hZGFibGVXaXRoRXJyb3IkMShlcnJvck9yUHJvbWlzZSk7XG4gICAgICBtYXliZUZyZWV6ZVZhbHVlKGVycm9yT3JQcm9taXNlKTtcbiAgICAgIHNldENhY2hlKHN0YXRlLCBkZXBWYWx1ZXNUb0RlcFJvdXRlKGRlcFZhbHVlcyksIGxvYWRhYmxlKTtcbiAgICAgIHNldERlcHNJblN0b3JlKHN0b3JlLCBzdGF0ZSwgbmV3IFNldChkZXBWYWx1ZXMua2V5cygpKSwgZXhlY3V0aW9uSWQpO1xuICAgICAgc2V0TG9hZGFibGVJblN0b3JlVG9Ob3RpZnlEZXBzKHN0b3JlLCBsb2FkYWJsZSwgZXhlY3V0aW9uSWQpO1xuICAgICAgdGhyb3cgZXJyb3JPclByb21pc2U7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gYXR0YWNoZXMgYSB0aGVuKCkgYW5kIGEgY2F0Y2goKSB0byBhIHByb21pc2UgdGhhdCB3YXNcbiAgICogdGhyb3duIGZyb20gYSBzZWxlY3RvcidzIGdldCgpLiBJZiBhIHNlbGVjdG9yJ3MgZ2V0KCkgdGhyb3dzIGEgcHJvbWlzZSxcbiAgICogd2UgaGF2ZSB0d28gcG9zc2liaWxpdGllczpcbiAgICpcbiAgICogMS4gVGhlIHByb21pc2Ugd2lsbCByZXNvbHZlLCBtZWFuaW5nIG9uZSBvZiBvdXIgc2VsZWN0b3IncyBkZXBlbmRlbmNpZXMgaXNcbiAgICogICAgbm93IGF2YWlsYWJsZSBhbmQgd2Ugc2hvdWxkIFwicmV0cnlcIiBvdXIgZ2V0KCkgYnkgcnVubmluZyBpdCBhZ2Fpbi4gVGhpc1xuICAgKiAgICBpcyB0aGUgY2FzZSBoYW5kbGVkIGJ5IHRoZSBhdHRhY2hlZCB0aGVuKCkgaGFuZGxlci5cbiAgICpcbiAgICogMi4gVGhlIHByb21pc2Ugd2lsbCB0aHJvdyBiZWNhdXNlIHNvbWV0aGluZyB3ZW50IHdyb25nIHdpdGggdGhlIGRlcGVuZGVuY3lcbiAgICogICAgcHJvbWlzZSAoaW4gb3RoZXIgd29yZHMgYSByZWFsIGVycm9yIG9jY3VycmVkKS4gVGhpcyBjYXNlIGlzIGhhbmRsZWQgYnlcbiAgICogICAgdGhlIGF0dGFjaGVkIGNhdGNoKCkgaGFuZGxlci4gSWYgdGhlIGRlcGVuZGVuY3kgcHJvbWlzZSB0aHJvd3MsIGl0IGlzXG4gICAqICAgIF9hbHdheXNfIGEgcmVhbCBlcnJvciBhbmQgbm90IGFub3RoZXIgZGVwZW5kZW5jeSBwcm9taXNlIChhbnkgZGVwZW5kZW5jeVxuICAgKiAgICBwcm9taXNlcyB3b3VsZCBoYXZlIGJlZW4gaGFuZGxlZCB1cHN0cmVhbSkuXG4gICAqXG4gICAqIFRoZSB0aGVuKCkgYnJhbmNoIHdpbGwgZXZlbnR1YWxseSByZXNvbHZlIHRvIHRoZSBmaW5hbCByZXN1bHQgb2YgdGhlXG4gICAqIHNlbGVjdG9yIChvciBhbiBlcnJvciBpZiBhIHJlYWwgZXJyb3Igb2NjdXJzKSwgYW5kIHRoZSBjYXRjaCgpIHdpbGwgYWx3YXlzXG4gICAqIHJlc29sdmUgdG8gYW4gZXJyb3IgYmVjYXVzZSB0aGUgZGVwZW5kZW5jeSBwcm9taXNlIGlzIGEgcHJvbWlzZSB0aGF0IHdhc1xuICAgKiB3cmFwcGVkIHVwc3RyZWFtLCBtZWFuaW5nIGl0IHdpbGwgb25seSByZXNvbHZlIHRvIGl0cyByZWFsIHZhbHVlIG9yIHRvIGFcbiAgICogcmVhbCBlcnJvci5cbiAgICpcbiAgICogVGhlIGV4ZWN1dGlvbiB3aWxsIHJ1biB0byBjb21wbGV0aW9uIGV2ZW4gaWYgaXQgaXMgc3RhbGUsIGFuZCBpdHMgdmFsdWVcbiAgICogd2lsbCBiZSBjYWNoZWQuIEJ1dCBzdGFsZSBleGVjdXRpb25zIHdpbGwgbm90IHVwZGF0ZSBnbG9iYWwgc3RhdGUgb3IgdXBkYXRlXG4gICAqIGV4ZWN1dGlvbkluZm8gYXMgdGhhdCBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlICdsYXRlc3QnIGV4ZWN1dGlvbi5cbiAgICpcbiAgICogTm90ZSB0aGlzIGZ1bmN0aW9uIHNob3VsZCBub3QgYmUgcGFzc2VkIGEgcHJvbWlzZSB0aGF0IHdhcyByZXR1cm5lZCBmcm9tXG4gICAqIGdldCgpLiBUaGUgaW50ZW50aW9uIGlzIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IHBhc3NlZCBwcm9taXNlcyB0aGF0XG4gICAqIHdlcmUgdGhyb3duIGR1ZSB0byBhIHBlbmRpbmcgZGVwZW5kZW5jeS4gUHJvbWlzZXMgcmV0dXJuZWQgYnkgZ2V0KCkgc2hvdWxkXG4gICAqIGJlIHBhc3NlZCB0byB3cmFwUGVuZGluZ1Byb21pc2UoKSBpbnN0ZWFkLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHdyYXBQZW5kaW5nRGVwZW5kZW5jeVByb21pc2Uoc3RvcmUsIHByb21pc2UsIHN0YXRlLCBleGlzdGluZ0RlcHMsIGV4ZWN1dGlvbklkLCBsb2FkaW5nRGVwc1N0YXRlKSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbihyZXNvbHZlZERlcCA9PiB7XG4gICAgICBpZiAoIXNlbGVjdG9ySXNMaXZlKCkpIHtcbiAgICAgICAgLy8gVGhlIHNlbGVjdG9yIHdhcyByZWxlYXNlZCBzaW5jZSB0aGUgcmVxdWVzdCBiZWdhbjsgaWdub3JlIHRoZSByZXNwb25zZS5cbiAgICAgICAgY2xlYXJFeGVjdXRpb25JbmZvKHN0b3JlLCBleGVjdXRpb25JZCk7XG4gICAgICAgIHRocm93IENBTkNFTEVEO1xuICAgICAgfSAvLyBDaGVjayBpZiB3ZSBhcmUgaGFuZGxpbmcgYSBwZW5kaW5nIFJlY29pbCBkZXBlbmRlbmN5IG9yIGlmIHRoZSB1c2VyXG4gICAgICAvLyB0aHJldyB0aGVpciBvd24gUHJvbWlzZSB0byBcInN1c3BlbmRcIiBhIHNlbGVjdG9yIGV2YWx1YXRpb24uICBXZSBuZWVkXG4gICAgICAvLyB0byBjaGVjayB0aGF0IHRoZSBsb2FkaW5nRGVwUHJvbWlzZSBhY3R1YWxseSBtYXRjaGVzIHRoZSBwcm9taXNlIHRoYXRcbiAgICAgIC8vIHdlIGNhdWdodCBpbiBjYXNlIHRoZSBzZWxlY3RvciBoYXBwZW5lZCB0byBjYXRjaCB0aGUgcHJvbWlzZSB3ZSB0aHJld1xuICAgICAgLy8gZm9yIGEgcGVuZGluZyBSZWNvaWwgZGVwZW5kZW5jeSBmcm9tIGBnZXRSZWNvaWxWYWx1ZSgpYCBhbmQgdGhyZXdcbiAgICAgIC8vIHRoZWlyIG93biBwcm9taXNlIGluc3RlYWQuXG5cblxuICAgICAgaWYgKGxvYWRpbmdEZXBzU3RhdGUubG9hZGluZ0RlcEtleSAhPSBudWxsICYmIGxvYWRpbmdEZXBzU3RhdGUubG9hZGluZ0RlcFByb21pc2UgPT09IHByb21pc2UpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5vdGUgZm9yIGFzeW5jIGF0b21zLCB0aGlzIG1lYW5zIHdlIGFyZSBjaGFuZ2luZyB0aGUgYXRvbSdzIHZhbHVlXG4gICAgICAgICAqIGluIHRoZSBzdG9yZSBmb3IgdGhlIGdpdmVuIHZlcnNpb24uIFRoaXMgc2hvdWxkIGJlIGFscmlnaHQgYmVjYXVzZVxuICAgICAgICAgKiB0aGUgdmVyc2lvbiBvZiBzdGF0ZSBpcyBub3cgc3RhbGUgYW5kIGEgbmV3IHZlcnNpb24gd2lsbCBoYXZlXG4gICAgICAgICAqIGFscmVhZHkgYmVlbiB0cmlnZ2VyZWQgYnkgdGhlIGF0b20gYmVpbmcgcmVzb2x2ZWQgKHNlZSB0aGlzIGxvZ2ljXG4gICAgICAgICAqIGluIFJlY29pbF9hdG9tLmpzKVxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGUuYXRvbVZhbHVlcy5zZXQobG9hZGluZ0RlcHNTdGF0ZS5sb2FkaW5nRGVwS2V5LCBsb2FkYWJsZVdpdGhWYWx1ZSQyKHJlc29sdmVkRGVwKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgcmVzb2x2ZWREZXBLZXkgaXMgbm90IGRlZmluZWQsIHRoZSBwcm9taXNlIHdhcyBhIHVzZXItdGhyb3duXG4gICAgICAgICAqIHByb21pc2UuIFVzZXItdGhyb3duIHByb21pc2VzIGFyZSBhbiBhZHZhbmNlZCBmZWF0dXJlIGFuZCB0aGV5XG4gICAgICAgICAqIHNob3VsZCBiZSBhdm9pZGVkIGluIGFsbW9zdCBhbGwgY2FzZXMuIFVzaW5nIGBsb2FkYWJsZS5tYXAoKWAgaW5zaWRlXG4gICAgICAgICAqIG9mIHNlbGVjdG9ycyBmb3IgbG9hZGluZyBsb2FkYWJsZXMgYW5kIHRoZW4gdGhyb3dpbmcgdGhhdCBtYXBwZWRcbiAgICAgICAgICogbG9hZGFibGUncyBwcm9taXNlIGlzIGFuIGV4YW1wbGUgb2YgYSB1c2VyLXRocm93biBwcm9taXNlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBXaGVuIHdlIGhpdCBhIHVzZXItdGhyb3duIHByb21pc2UsIHdlIGhhdmUgdG8gYmFpbCBvdXQgb2YgYW4gb3B0aW1pemF0aW9uXG4gICAgICAgICAqIHdoZXJlIHdlIGJ5cGFzcyBjYWxjdWxhdGluZyBzZWxlY3RvciBjYWNoZSBrZXlzIGZvciBzZWxlY3RvcnMgdGhhdFxuICAgICAgICAgKiBoYXZlIGJlZW4gcHJldmlvdXNseSBzZWVuIGZvciBhIGdpdmVuIHN0YXRlICh0aGVzZSBzZWxlY3RvcnMgYXJlIHNhdmVkIGluXG4gICAgICAgICAqIHN0YXRlLmF0b21WYWx1ZXMpIHRvIGF2b2lkIHN0YWxlIHN0YXRlIGFzIHdlIGhhdmUgbm8gd2F5IG9mIGtub3dpbmdcbiAgICAgICAgICogd2hhdCBzdGF0ZSBjaGFuZ2VzIGhhcHBlbmVkIChpZiBhbnkpIGluIHJlc3VsdCB0byB0aGUgcHJvbWlzZSByZXNvbHZpbmcuXG4gICAgICAgICAqXG4gICAgICAgICAqIElkZWFsbHkgd2Ugd291bGQgb25seSBiYWlsIG91dCBzZWxlY3RvcnMgdGhhdCBhcmUgaW4gdGhlIGNoYWluIG9mXG4gICAgICAgICAqIGRlcGVuZGVuY2llcyBmb3IgdGhpcyBzZWxlY3RvciwgYnV0IHRoZXJlJ3MgY3VycmVudGx5IG5vIHdheSB0byBnZXRcbiAgICAgICAgICogYSBmdWxsIGxpc3Qgb2YgYSBzZWxlY3RvcidzIGRvd25zdHJlYW0gbm9kZXMgYmVjYXVzZSB0aGUgc3RhdGUgdGhhdFxuICAgICAgICAgKiBpcyBleGVjdXRpbmcgbWF5IGJlIGEgZGlzY2FyZGVkIHRyZWUgKHNvIHN0b3JlLmdldEdyYXBoKHN0YXRlLnZlcnNpb24pXG4gICAgICAgICAqIHdpbGwgYmUgZW1wdHkpLCBhbmQgdGhlIGZ1bGwgZGVwIHRyZWUgbWF5IG5vdCBiZSBpbiB0aGUgc2VsZWN0b3JcbiAgICAgICAgICogY2FjaGVzIGluIHRoZSBjYXNlIHdoZXJlIHRoZSBzZWxlY3RvcidzIGNhY2hlIHdhcyBjbGVhcmVkLiBUbyBzb2x2ZVxuICAgICAgICAgKiBmb3IgdGhpcyB3ZSB3b3VsZCBoYXZlIHRvIGtlZXAgdHJhY2sgIG9mIGFsbCBydW5uaW5nIHNlbGVjdG9yXG4gICAgICAgICAqIGV4ZWN1dGlvbnMgYW5kIHRoZWlyIGRvd25zdHJlYW0gZGVwcy4gQmVjYXVzZSB0aGlzIG9ubHkgY292ZXJzIGVkZ2VcbiAgICAgICAgICogY2FzZXMsIHRoYXQgY29tcGxleGl0eSBtaWdodCBub3QgYmUganVzdGlmeWFibGUuXG4gICAgICAgICAqL1xuICAgICAgICBzdG9yZS5nZXRTdGF0ZSgpLmtub3duU2VsZWN0b3JzLmZvckVhY2gobm9kZUtleSA9PiB7XG4gICAgICAgICAgc3RhdGUuYXRvbVZhbHVlcy5kZWxldGUobm9kZUtleSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBPcHRpbWl6YXRpb246IE5vdyB0aGF0IHRoZSBkZXBlbmRlbmN5IGhhcyByZXNvbHZlZCwgbGV0J3MgdHJ5IGhpdHRpbmdcbiAgICAgICAqIHRoZSBjYWNoZSBpbiBjYXNlIHRoZSBkZXAgcmVzb2x2ZWQgdG8gYSB2YWx1ZSB3ZSBoYXZlIHByZXZpb3VzbHkgc2Vlbi5cbiAgICAgICAqXG4gICAgICAgKiBUT0RPOlxuICAgICAgICogTm90ZSB0aGlzIG9wdGltaXphdGlvbiBpcyBub3QgcGVyZmVjdCBiZWNhdXNlIGl0IG9ubHkgcHJldmVudHMgcmUtZXhlY3V0aW9uc1xuICAgICAgICogX2FmdGVyXyB0aGUgcG9pbnQgd2hlcmUgYW4gYXN5bmMgZGVwZW5kZW5jeSBpcyBmb3VuZC4gQW55IGNvZGUgbGVhZGluZ1xuICAgICAgICogdXAgdG8gdGhlIGFzeW5jIGRlcGVuZGVuY3kgbWF5IGhhdmUgcnVuIHVubmVjZXNzYXJpbHkuIFRoZSBpZGVhbCBjYXNlXG4gICAgICAgKiB3b3VsZCBiZSB0byB3YWl0IGZvciB0aGUgYXN5bmMgZGVwZW5kZW5jeSB0byByZXNvbHZlIGZpcnN0LCBjaGVjayB0aGVcbiAgICAgICAqIGNhY2hlLCBhbmQgcHJldmVudCBfYW55XyBleGVjdXRpb24gb2YgdGhlIHNlbGVjdG9yIGlmIHRoZSByZXN1bHRpbmdcbiAgICAgICAqIHZhbHVlIG9mIHRoZSBkZXBlbmRlbmN5IGxlYWRzIHRvIGEgcGF0aCB0aGF0IGlzIGZvdW5kIGluIHRoZSBjYWNoZS5cbiAgICAgICAqIFRoZSBpZGVhbCBjYXNlIGlzIG1vcmUgZGlmZmljdWx0IHRvIGltcGxlbWVudCBhcyBpdCB3b3VsZCByZXF1aXJlIHRoYXRcbiAgICAgICAqIHdlIGNhcHR1cmUgYW5kIHdhaXQgZm9yIHRoZSB0aGUgYXN5bmMgZGVwZW5kZW5jeSByaWdodCBhZnRlciBjaGVja2luZ1xuICAgICAgICogdGhlIGNhY2hlLiBUaGUgY3VycmVudCBhcHByb2FjaCB0YWtlcyBhZHZhbnRhZ2Ugb2YgdGhlIGZhY3QgdGhhdCBydW5uaW5nXG4gICAgICAgKiB0aGUgc2VsZWN0b3IgYWxyZWFkeSBoYXMgYSBjb2RlIHBhdGggdGhhdCBsZXRzIHVzIGV4aXQgZWFybHkgd2hlblxuICAgICAgICogYW4gYXN5bmMgZGVwIHJlc29sdmVzLlxuICAgICAgICovXG5cblxuICAgICAgY29uc3QgY2FjaGVkTG9hZGFibGUgPSBnZXRWYWxGcm9tQ2FjaGVBbmRVcGRhdGVkRG93bnN0cmVhbURlcHMoc3RvcmUsIHN0YXRlKTtcblxuICAgICAgaWYgKGNhY2hlZExvYWRhYmxlICYmIGNhY2hlZExvYWRhYmxlLnN0YXRlID09PSAnaGFzVmFsdWUnKSB7XG4gICAgICAgIHNldEV4ZWN1dGlvbkluZm8oY2FjaGVkTG9hZGFibGUsIHN0b3JlKTtcbiAgICAgICAgcmV0dXJuIGNhY2hlZExvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBJZiB0aGlzIGV4ZWN1dGlvbiBpcyBzdGFsZSwgbGV0J3MgY2hlY2sgdG8gc2VlIGlmIHRoZXJlIGlzIHNvbWUgaW5cbiAgICAgICAqIHByb2dyZXNzIGV4ZWN1dGlvbiB3aXRoIGEgbWF0Y2hpbmcgc3RhdGUuIElmIHdlIGZpbmQgYSBtYXRjaCwgdGhlblxuICAgICAgICogd2UgY2FuIHRha2UgdGhlIHZhbHVlIGZyb20gdGhhdCBpbi1wcm9ncmVzcyBleGVjdXRpb24uIE5vdGUgdGhpcyBtYXlcbiAgICAgICAqIHNvdW5kIGxpa2UgYW4gZWRnZSBjYXNlLCBidXQgbWF5IGJlIHZlcnkgY29tbW9uIGluIGNhc2VzIHdoZXJlIGFcbiAgICAgICAqIGxvYWRpbmcgZGVwZW5kZW5jeSByZXNvbHZlcyBmcm9tIGxvYWRpbmcgdG8gaGF2aW5nIGEgdmFsdWUgKHRodXNcbiAgICAgICAqIHBvc3NpYmx5IHRyaWdnZXJpbmcgYSByZS1yZW5kZXIpLCBhbmQgUmVhY3QgcmUtcmVuZGVycyBiZWZvcmUgdGhlXG4gICAgICAgKiBjaGFpbmVkIC50aGVuKCkgZnVuY3Rpb25zIHJ1biwgdGh1cyBzdGFydGluZyBhIG5ldyBleGVjdXRpb24gYXMgdGhlXG4gICAgICAgKiBkZXAgaGFzIGNoYW5nZWQgdmFsdWUuIFdpdGhvdXQgdGhpcyBjaGVjayB3ZSB3aWxsIHJ1biB0aGUgc2VsZWN0b3JcbiAgICAgICAqIHR3aWNlIChvbmNlIGluIHRoZSBuZXcgZXhlY3V0aW9uIGFuZCBvbmNlIGFnYWluIGluIHRoaXMgLnRoZW4oKSwgc29cbiAgICAgICAqIHRoaXMgY2hlY2sgaXMgbmVjZXNzYXJ5IHRvIGtlZXAgdW5uZWNlc3NhcnkgcmUtZXhlY3V0aW9ucyB0byBhXG4gICAgICAgKiBtaW5pbXVtKS5cbiAgICAgICAqXG4gICAgICAgKiBBbHNvIG5vdGUgdGhpcyBjb2RlIGRvZXMgbm90IGNoZWNrIGFjcm9zcyBhbGwgZXhlY3V0aW9ucyB0aGF0IG1heSBiZVxuICAgICAgICogcnVubmluZy4gSXQgb25seSBvcHRpbWl6ZXMgZm9yIHRoZSBfbGF0ZXN0XyBleGVjdXRpb24gcGVyIHN0b3JlIGFzXG4gICAgICAgKiB3ZSBjdXJyZW50bHkgZG8gbm90IG1haW50YWluIGEgbGlzdCBvZiBhbGwgY3VycmVudGx5IHJ1bm5pbmcgZXhlY3V0aW9ucy5cbiAgICAgICAqIFRoaXMgbWVhbnMgaW4gc29tZSBjYXNlcyB3ZSBtYXkgcnVuIHNlbGVjdG9ycyBtb3JlIHRoYW4gc3RyaWN0bHlcbiAgICAgICAqIG5lY2Vzc2FyeSB3aGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBleGVjdXRpb25zIHJ1bm5pbmcgZm9yIHRoZSBzYW1lXG4gICAgICAgKiBzZWxlY3Rvci4gVGhpcyBtYXkgYmUgYSB2YWxpZCB0cmFkZW9mZiBhcyBjaGVja2luZyBmb3IgZGVwIGNoYW5nZXNcbiAgICAgICAqIGFjcm9zcyBhbGwgaW4tcHJvZ3Jlc3MgZXhlY3V0aW9ucyBtYXkgdGFrZSBsb25nZXIgdGhhbiBqdXN0XG4gICAgICAgKiByZS1ydW5uaW5nIHRoZSBzZWxlY3Rvci4gVGhpcyB3aWxsIGJlIGFwcC1kZXBlbmRlbnQsIGFuZCBtYXliZSBpbiB0aGVcbiAgICAgICAqIGZ1dHVyZSB3ZSBjYW4gbWFrZSB0aGUgYmVoYXZpb3IgY29uZmlndXJhYmxlLiBBbiBpZGVhbCBmaXggbWF5IGJlXG4gICAgICAgKiB0byBleHRlbmQgdGhlIHRyZWUgY2FjaGUgdG8gc3VwcG9ydCBjYWNoaW5nIGxvYWRpbmcgc3RhdGVzLlxuICAgICAgICovXG5cblxuICAgICAgaWYgKCFpc0xhdGVzdEV4ZWN1dGlvbihzdG9yZSwgZXhlY3V0aW9uSWQpKSB7XG4gICAgICAgIHZhciBfZXhlY3V0aW9uSW5mbyRsYXRlc3Q7XG5cbiAgICAgICAgY29uc3QgZXhlY3V0aW9uSW5mbyA9IGdldEV4ZWN1dGlvbkluZm9PZkluUHJvZ3Jlc3NFeGVjdXRpb24oc3RhdGUpO1xuXG4gICAgICAgIGlmICgoZXhlY3V0aW9uSW5mbyA9PT0gbnVsbCB8fCBleGVjdXRpb25JbmZvID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2V4ZWN1dGlvbkluZm8kbGF0ZXN0ID0gZXhlY3V0aW9uSW5mby5sYXRlc3RMb2FkYWJsZSkgPT09IG51bGwgfHwgX2V4ZWN1dGlvbkluZm8kbGF0ZXN0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZXhlY3V0aW9uSW5mbyRsYXRlc3Quc3RhdGUpID09PSAnbG9hZGluZycpIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBSZXR1cm5pbmcgcHJvbWlzZSBoZXJlIHdpdGhvdXQgd3JhcHBpbmcgYXMgdGhlIHdyYXBwZXIgbG9naWMgd2FzXG4gICAgICAgICAgICogYWxyZWFkeSBkb25lIHVwc3RyZWFtIHdoZW4gdGhpcyBwcm9taXNlIHdhcyBnZW5lcmF0ZWQuXG4gICAgICAgICAgICovXG4gICAgICAgICAgcmV0dXJuIGV4ZWN1dGlvbkluZm8ubGF0ZXN0TG9hZGFibGUuY29udGVudHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgW2xvYWRhYmxlLCBkZXBWYWx1ZXNdID0gZXZhbHVhdGVTZWxlY3RvckdldHRlcihzdG9yZSwgc3RhdGUsIGV4ZWN1dGlvbklkKTtcblxuICAgICAgaWYgKGlzTGF0ZXN0RXhlY3V0aW9uKHN0b3JlLCBleGVjdXRpb25JZCkpIHtcbiAgICAgICAgdXBkYXRlRXhlY3V0aW9uSW5mb0RlcFZhbHVlcyhkZXBWYWx1ZXMsIHN0b3JlLCBleGVjdXRpb25JZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsb2FkYWJsZS5zdGF0ZSAhPT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgIHNldENhY2hlKHN0YXRlLCBkZXBWYWx1ZXNUb0RlcFJvdXRlKGRlcFZhbHVlcyksIGxvYWRhYmxlKTtcbiAgICAgICAgc2V0RGVwc0luU3RvcmUoc3RvcmUsIHN0YXRlLCBuZXcgU2V0KGRlcFZhbHVlcy5rZXlzKCkpLCBleGVjdXRpb25JZCk7XG4gICAgICAgIHNldExvYWRhYmxlSW5TdG9yZVRvTm90aWZ5RGVwcyhzdG9yZSwgbG9hZGFibGUsIGV4ZWN1dGlvbklkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxvYWRhYmxlLnN0YXRlID09PSAnaGFzRXJyb3InKSB7XG4gICAgICAgIHRocm93IGxvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5pbmcgYW55IHByb21pc2VzIGhlcmUgd2l0aG91dCB3cmFwcGluZyBhcyB0aGUgd3JhcGVwciBsb2dpYyB3YXNcbiAgICAgICAqIGFscmVhZHkgZG9uZSB3aGVuIHdlIGNhbGxlZCBldmFsdWF0ZVNlbGVjdG9yR2V0dGVyKCkgdG8gZ2V0IHRoaXNcbiAgICAgICAqIGxvYWRhYmxlXG4gICAgICAgKi9cblxuXG4gICAgICByZXR1cm4gbG9hZGFibGUuY29udGVudHM7XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgQ2FuY2VsZWQpIHtcbiAgICAgICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKCdTZWxlY3RvciB3YXMgcmVsZWFzZWQgd2hpbGUgaXQgaGFkIGRlcGVuZGVuY2llcycpO1xuICAgICAgICB0aHJvdyBDQU5DRUxFRDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFzZWxlY3RvcklzTGl2ZSgpKSB7XG4gICAgICAgIC8vIFRoZSBzZWxlY3RvciB3YXMgcmVsZWFzZWQgc2luY2UgdGhlIHJlcXVlc3QgYmVnYW47IGlnbm9yZSB0aGUgcmVzcG9uc2UuXG4gICAgICAgIGNsZWFyRXhlY3V0aW9uSW5mbyhzdG9yZSwgZXhlY3V0aW9uSWQpO1xuICAgICAgICB0aHJvdyBDQU5DRUxFRDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgbG9hZGFibGUgPSBsb2FkYWJsZVdpdGhFcnJvciQxKGVycm9yKTtcbiAgICAgIG1heWJlRnJlZXplVmFsdWUoZXJyb3IpO1xuICAgICAgc2V0Q2FjaGUoc3RhdGUsIGRlcFZhbHVlc1RvRGVwUm91dGUoZXhpc3RpbmdEZXBzKSwgbG9hZGFibGVXaXRoRXJyb3IkMShlcnJvcikpO1xuICAgICAgc2V0RGVwc0luU3RvcmUoc3RvcmUsIHN0YXRlLCBuZXcgU2V0KGV4aXN0aW5nRGVwcy5rZXlzKCkpLCBleGVjdXRpb25JZCk7XG4gICAgICBzZXRMb2FkYWJsZUluU3RvcmVUb05vdGlmeURlcHMoc3RvcmUsIGxvYWRhYmxlLCBleGVjdXRpb25JZCk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldExvYWRhYmxlSW5TdG9yZVRvTm90aWZ5RGVwcyhzdG9yZSwgbG9hZGFibGUsIGV4ZWN1dGlvbklkKSB7XG4gICAgaWYgKGlzTGF0ZXN0RXhlY3V0aW9uKHN0b3JlLCBleGVjdXRpb25JZCkpIHtcbiAgICAgIHNldEV4ZWN1dGlvbkluZm8obG9hZGFibGUsIHN0b3JlKTtcbiAgICAgIG5vdGlmeVN0b3Jlc09mU2V0dGxlZEFzeW5jKGxvYWRhYmxlLCBleGVjdXRpb25JZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0RGVwc0luU3RvcmUoc3RvcmUsIHN0YXRlLCBkZXBzLCBleGVjdXRpb25JZCkge1xuICAgIHZhciBfc3RvcmUkZ2V0U3RhdGUsIF9zdG9yZSRnZXRTdGF0ZSRjdXJyZSwgX3N0b3JlJGdldFN0YXRlMiwgX3N0b3JlJGdldFN0YXRlMiRuZXh0O1xuXG4gICAgaWYgKGlzTGF0ZXN0RXhlY3V0aW9uKHN0b3JlLCBleGVjdXRpb25JZCkgfHwgc3RhdGUudmVyc2lvbiA9PT0gKChfc3RvcmUkZ2V0U3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpKSA9PT0gbnVsbCB8fCBfc3RvcmUkZ2V0U3RhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfc3RvcmUkZ2V0U3RhdGUkY3VycmUgPSBfc3RvcmUkZ2V0U3RhdGUuY3VycmVudFRyZWUpID09PSBudWxsIHx8IF9zdG9yZSRnZXRTdGF0ZSRjdXJyZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlJGdldFN0YXRlJGN1cnJlLnZlcnNpb24pIHx8IHN0YXRlLnZlcnNpb24gPT09ICgoX3N0b3JlJGdldFN0YXRlMiA9IHN0b3JlLmdldFN0YXRlKCkpID09PSBudWxsIHx8IF9zdG9yZSRnZXRTdGF0ZTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfc3RvcmUkZ2V0U3RhdGUyJG5leHQgPSBfc3RvcmUkZ2V0U3RhdGUyLm5leHRUcmVlKSA9PT0gbnVsbCB8fCBfc3RvcmUkZ2V0U3RhdGUyJG5leHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdG9yZSRnZXRTdGF0ZTIkbmV4dC52ZXJzaW9uKSkge1xuICAgICAgdmFyIF9zdG9yZSRnZXRTdGF0ZSRuZXh0VCwgX3N0b3JlJGdldFN0YXRlMywgX3N0b3JlJGdldFN0YXRlMyRuZXh0O1xuXG4gICAgICBzYXZlRGVwZW5kZW5jeU1hcFRvU3RvcmUkMShuZXcgTWFwKFtba2V5LCBkZXBzXV0pLCBzdG9yZSwgKF9zdG9yZSRnZXRTdGF0ZSRuZXh0VCA9IChfc3RvcmUkZ2V0U3RhdGUzID0gc3RvcmUuZ2V0U3RhdGUoKSkgPT09IG51bGwgfHwgX3N0b3JlJGdldFN0YXRlMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9zdG9yZSRnZXRTdGF0ZTMkbmV4dCA9IF9zdG9yZSRnZXRTdGF0ZTMubmV4dFRyZWUpID09PSBudWxsIHx8IF9zdG9yZSRnZXRTdGF0ZTMkbmV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlJGdldFN0YXRlMyRuZXh0LnZlcnNpb24pICE9PSBudWxsICYmIF9zdG9yZSRnZXRTdGF0ZSRuZXh0VCAhPT0gdm9pZCAwID8gX3N0b3JlJGdldFN0YXRlJG5leHRUIDogc3RvcmUuZ2V0U3RhdGUoKS5jdXJyZW50VHJlZS52ZXJzaW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXROZXdEZXBJblN0b3JlKHN0b3JlLCBzdGF0ZSwgZGVwcywgbmV3RGVwS2V5LCBleGVjdXRpb25JZCkge1xuICAgIGRlcHMuYWRkKG5ld0RlcEtleSk7XG4gICAgc2V0RGVwc0luU3RvcmUoc3RvcmUsIHN0YXRlLCBkZXBzLCBleGVjdXRpb25JZCk7XG4gIH1cblxuICBmdW5jdGlvbiBldmFsdWF0ZVNlbGVjdG9yR2V0dGVyKHN0b3JlLCBzdGF0ZSwgZXhlY3V0aW9uSWQpIHtcbiAgICBjb25zdCBlbmRQZXJmQmxvY2sgPSBzdGFydFBlcmZCbG9jayQxKGtleSk7IC8vIFRPRE8gVDYzOTY1ODY2OiB1c2UgZXhlY3V0aW9uIElEIGhlcmVcblxuICAgIGxldCByZXN1bHQ7XG4gICAgbGV0IHJlc3VsdElzRXJyb3IgPSBmYWxzZTtcbiAgICBsZXQgbG9hZGFibGU7XG4gICAgY29uc3QgbG9hZGluZ0RlcHNTdGF0ZSA9IHtcbiAgICAgIGxvYWRpbmdEZXBLZXk6IG51bGwsXG4gICAgICBsb2FkaW5nRGVwUHJvbWlzZTogbnVsbFxuICAgIH07XG4gICAgY29uc3QgZGVwVmFsdWVzID0gbmV3IE1hcCgpO1xuICAgIC8qKlxuICAgICAqIFN0YXJ0aW5nIGEgZnJlc2ggc2V0IG9mIGRlcHMgdGhhdCB3ZSdsbCBiZSB1c2luZyB0byB1cGRhdGUgc3RhdGUuIFdlJ3JlXG4gICAgICogc3RhcnRpbmcgYSBuZXcgc2V0IHZlcnN1cyBhZGRpbmcgaXQgaW4gZXhpc3Rpbmcgc3RhdGUgZGVwcyBiZWNhdXNlXG4gICAgICogdGhlIHZlcnNpb24gb2Ygc3RhdGUgdGhhdCB3ZSB1cGRhdGUgZGVwcyBmb3IgbWF5IGJlIGEgbW9yZSByZWNlbnQgdmVyc2lvblxuICAgICAqIHRoYW4gdGhlIHZlcnNpb24gdGhlIHNlbGVjdG9yIHdhcyBjYWxsZWQgd2l0aC4gVGhpcyBpcyBiZWNhdXNlIHRoZSBsYXRlc3RcbiAgICAgKiBleGVjdXRpb24gd2lsbCB1cGRhdGUgdGhlIGRlcHMgb2YgdGhlIGN1cnJlbnQvbGF0ZXN0IHZlcnNpb24gb2Ygc3RhdGUgKFxuICAgICAqIHRoaXMgaXMgc2FmZSB0byBkbyBiZWNhdXNlIHRoZSBmYWN0IHRoYXQgdGhlIHNlbGVjdG9yIGlzIHRoZSBsYXRlc3RcbiAgICAgKiBleGVjdXRpb24gbWVhbnMgdGhlIGRlcHMgd2UgZGlzY292ZXIgYmVsb3cgYXJlIG91ciBiZXN0IGd1ZXNzIGF0IHRoZVxuICAgICAqIGRlcHMgZm9yIHRoZSBjdXJyZW50L2xhdGVzdCBzdGF0ZSBpbiB0aGUgc3RvcmUpXG4gICAgICovXG5cbiAgICBjb25zdCBkZXBzID0gbmV3IFNldCgpO1xuICAgIHNldERlcHNJblN0b3JlKHN0b3JlLCBzdGF0ZSwgZGVwcywgZXhlY3V0aW9uSWQpO1xuXG4gICAgZnVuY3Rpb24gZ2V0UmVjb2lsVmFsdWUoZGVwKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGtleTogZGVwS2V5XG4gICAgICB9ID0gZGVwO1xuICAgICAgc2V0TmV3RGVwSW5TdG9yZShzdG9yZSwgc3RhdGUsIGRlcHMsIGRlcEtleSwgZXhlY3V0aW9uSWQpO1xuICAgICAgY29uc3QgZGVwTG9hZGFibGUgPSBnZXRDYWNoZWROb2RlTG9hZGFibGUoc3RvcmUsIHN0YXRlLCBkZXBLZXkpO1xuICAgICAgZGVwVmFsdWVzLnNldChkZXBLZXksIGRlcExvYWRhYmxlKTtcblxuICAgICAgc3dpdGNoIChkZXBMb2FkYWJsZS5zdGF0ZSkge1xuICAgICAgICBjYXNlICdoYXNWYWx1ZSc6XG4gICAgICAgICAgcmV0dXJuIGRlcExvYWRhYmxlLmNvbnRlbnRzO1xuXG4gICAgICAgIGNhc2UgJ2hhc0Vycm9yJzpcbiAgICAgICAgICB0aHJvdyBkZXBMb2FkYWJsZS5jb250ZW50cztcblxuICAgICAgICBjYXNlICdsb2FkaW5nJzpcbiAgICAgICAgICBsb2FkaW5nRGVwc1N0YXRlLmxvYWRpbmdEZXBLZXkgPSBkZXBLZXk7XG4gICAgICAgICAgbG9hZGluZ0RlcHNTdGF0ZS5sb2FkaW5nRGVwUHJvbWlzZSA9IGRlcExvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgICAgIHRocm93IGRlcExvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBSZWNvaWxfZXJyKCdJbnZhbGlkIExvYWRhYmxlIHN0YXRlJyk7XG4gICAgfVxuXG4gICAgbGV0IGdhdGVDYWxsYmFjayA9IGZhbHNlO1xuXG4gICAgY29uc3QgZ2V0Q2FsbGJhY2sgPSBmbiA9PiB7XG4gICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgaWYgKCFnYXRlQ2FsbGJhY2spIHtcbiAgICAgICAgICB0aHJvdyBSZWNvaWxfZXJyKCdnZXRDYWxsYmFjaygpIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBhc3luY2hyb25vdXNseSBhZnRlciB0aGUgc2VsZWN0b3IgaXMgZXZhbHV0YXRlZC4gIEl0IGNhbiBiZSB1c2VkIGZvciBzZWxlY3RvcnMgdG8gcmV0dXJuIG9iamVjdHMgd2l0aCBjYWxsYmFja3MgdGhhdCBjYW4gb2J0YWluIHRoZSBjdXJyZW50IFJlY29pbCBzdGF0ZSB3aXRob3V0IGEgc3Vic2NyaXB0aW9uLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc25hcHNob3QgPSBjbG9uZVNuYXBzaG90JDMoc3RvcmUpO1xuICAgICAgICBjb25zdCBjYiA9IGZuKHtcbiAgICAgICAgICBzbmFwc2hvdFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgUmVjb2lsX2VycignZ2V0Q2FsbGJhY2soKSBleHBlY3RzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb24uJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2IoLi4uYXJncyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gZ2V0KHtcbiAgICAgICAgZ2V0OiBnZXRSZWNvaWxWYWx1ZSxcbiAgICAgICAgZ2V0Q2FsbGJhY2tcbiAgICAgIH0pO1xuICAgICAgcmVzdWx0ID0gaXNSZWNvaWxWYWx1ZSQzKHJlc3VsdCkgPyBnZXRSZWNvaWxWYWx1ZShyZXN1bHQpIDogcmVzdWx0O1xuICAgICAgZ2F0ZUNhbGxiYWNrID0gdHJ1ZTtcblxuICAgICAgaWYgKFJlY29pbF9pc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICByZXN1bHQgPSB3cmFwUGVuZGluZ1Byb21pc2Uoc3RvcmUsIHJlc3VsdCwgc3RhdGUsIGRlcFZhbHVlcywgZXhlY3V0aW9uSWQsIGxvYWRpbmdEZXBzU3RhdGUpLmZpbmFsbHkoZW5kUGVyZkJsb2NrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZFBlcmZCbG9jaygpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yT3JEZXBQcm9taXNlKSB7XG4gICAgICByZXN1bHQgPSBlcnJvck9yRGVwUHJvbWlzZTtcblxuICAgICAgaWYgKFJlY29pbF9pc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICByZXN1bHQgPSB3cmFwUGVuZGluZ0RlcGVuZGVuY3lQcm9taXNlKHN0b3JlLCByZXN1bHQsIHN0YXRlLCBkZXBWYWx1ZXMsIGV4ZWN1dGlvbklkLCBsb2FkaW5nRGVwc1N0YXRlKS5maW5hbGx5KGVuZFBlcmZCbG9jayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRJc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgZW5kUGVyZkJsb2NrKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdElzRXJyb3IpIHtcbiAgICAgIGxvYWRhYmxlID0gbG9hZGFibGVXaXRoRXJyb3IkMShyZXN1bHQpO1xuICAgIH0gZWxzZSBpZiAoUmVjb2lsX2lzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICBsb2FkYWJsZSA9IGxvYWRhYmxlV2l0aFByb21pc2UkMShyZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2FkYWJsZSA9IGxvYWRhYmxlV2l0aFZhbHVlJDIocmVzdWx0KTtcbiAgICB9XG5cbiAgICBpZiAobG9hZGFibGUuc3RhdGUgIT09ICdsb2FkaW5nJykge1xuICAgICAgbWF5YmVGcmVlemVWYWx1ZShsb2FkYWJsZS5jb250ZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtsb2FkYWJsZSwgZGVwVmFsdWVzXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFZhbEZyb21DYWNoZUFuZFVwZGF0ZWREb3duc3RyZWFtRGVwcyhzdG9yZSwgc3RhdGUpIHtcbiAgICBjb25zdCBkZXBzQWZ0ZXJDYWNoZURvbmUgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgZXhlY3V0aW9uSW5mbyA9IGdldEV4ZWN1dGlvbkluZm8oc3RvcmUpO1xuICAgIGxldCBjYWNoZWRWYWw7XG5cbiAgICB0cnkge1xuICAgICAgY2FjaGVkVmFsID0gY2FjaGUuZ2V0KG5vZGVLZXkgPT4ge1xuICAgICAgICAhKHR5cGVvZiBub2RlS2V5ID09PSAnc3RyaW5nJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSZWNvaWxfaW52YXJpYW50KGZhbHNlLCAnQ2FjaGUgbm9kZUtleSBpcyB0eXBlIHN0cmluZycpIDogUmVjb2lsX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIGNvbnN0IGxvYWRhYmxlID0gZ2V0Q2FjaGVkTm9kZUxvYWRhYmxlKHN0b3JlLCBzdGF0ZSwgbm9kZUtleSk7XG4gICAgICAgIHJldHVybiBsb2FkYWJsZS5jb250ZW50cztcbiAgICAgIH0sIHtcbiAgICAgICAgb25Ob2RlVmlzaXQ6IG5vZGUgPT4ge1xuICAgICAgICAgIGlmIChub2RlLnR5cGUgPT09ICdicmFuY2gnICYmIG5vZGUubm9kZUtleSAhPT0ga2V5ICYmIHR5cGVvZiBub2RlLm5vZGVLZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBkZXBzQWZ0ZXJDYWNoZURvbmUuYWRkKG5vZGUubm9kZUtleSk7XG4gICAgICAgICAgICBkaXNjb3ZlcmVkRGVwZW5kZW5jeU5vZGVLZXlzLmFkZChub2RlLm5vZGVLZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRocm93IFJlY29pbF9lcnIoYFByb2JsZW0gd2l0aCBjYWNoZSBsb29rdXAgZm9yIHNlbGVjdG9yIFwiJHtrZXl9XCI6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5zdXJlIHN0b3JlIGNvbnRhaW5zIGNvcnJlY3QgZGVwZW5kZW5jaWVzIGlmIHdlIGhpdCB0aGUgY2FjaGUgc28gdGhhdFxuICAgICAqIHRoZSBzdG9yZSBkZXBzIGFuZCBjYWNoZSBhcmUgaW4gc3luYyBmb3IgYSBnaXZlbiBzdGF0ZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgICAgKiBiZWNhdXNlIHN0b3JlIGRlcHMgYXJlIG5vcm1hbGx5IHVwZGF0ZWQgd2hlbiBuZXcgZXhlY3V0aW9ucyBhcmUgY3JlYXRlZCxcbiAgICAgKiBidXQgY2FjaGUgaGl0cyBkb24ndCB0cmlnZ2VyIG5ldyBleGVjdXRpb25zIGJ1dCB0aGV5IHN0aWxsIF9tYXlfIHNpZ25pZml5XG4gICAgICogYSBjaGFuZ2UgaW4gZGVwcyBpbiB0aGUgc3RvcmUgaWYgdGhlIHN0b3JlIGRlcHMgZm9yIHRoaXMgc3RhdGUgYXJlIGVtcHR5XG4gICAgICogb3Igc3RhbGUuXG4gICAgICovXG5cblxuICAgIGlmIChjYWNoZWRWYWwpIHtcbiAgICAgIHNldERlcHNJblN0b3JlKHN0b3JlLCBzdGF0ZSwgZGVwc0FmdGVyQ2FjaGVEb25lLCBleGVjdXRpb25JbmZvLmxhdGVzdEV4ZWN1dGlvbklkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FjaGVkVmFsO1xuICB9XG4gIC8qKlxuICAgKiBGSVhNRTogZGVwIGtleXMgc2hvdWxkIHRha2UgaW50byBhY2NvdW50IHRoZSBzdGF0ZSBvZiB0aGUgbG9hZGFibGUgdG9cbiAgICogcHJldmVudCB0aGUgZWRnZSBjYXNlIHdoZXJlIGEgbG9hZGFibGUgd2l0aCBhbiBlcnJvciBhbmQgYSBsb2FkYWJsZSB3aXRoXG4gICAqIGFuIGVycm9yIGFzIGEgdmFsdWUgYXJlIHRyZWF0ZWQgYXMgdGhlIHNhbWUgdGhpbmcgaW5jb3JyZWN0bHkuIEZvciBleGFtcGxlXG4gICAqIHRoZXNlIHR3byBzaG91bGQgYmUgdHJlYXRlZCBkaWZmZXJlbnRseTpcbiAgICpcbiAgICogc2VsZWN0b3Ioe2tleTogJycsIGdldDogKCkgPT4gbmV3IEVycm9yKCdoaScpfSk7XG4gICAqIHNlbGVjdG9yKHtrZXk6ICcnLCBnZXQgKCkgPT4ge3Rocm93IG5ldyBFcnJvcignaGknKX19KTtcbiAgICpcbiAgICogV2l0aCBjdXJyZW50IGltcGxlbWVudGF0aW9uIHRoZXkgYXJlIHRyZWF0ZWQgdGhlIHNhbWVcbiAgICovXG5cblxuICBmdW5jdGlvbiBkZXBWYWx1ZXNUb0RlcFJvdXRlKGRlcFZhbHVlcykge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGRlcFZhbHVlcy5lbnRyaWVzKCkpLm1hcCgoW2RlcEtleSwgdmFsTG9hZGFibGVdKSA9PiBbZGVwS2V5LCB2YWxMb2FkYWJsZS5jb250ZW50c10pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VmFsRnJvbVJ1bm5pbmdOZXdFeGVjdXRpb25BbmRVcGRhdGVkRGVwcyhzdG9yZSwgc3RhdGUpIHtcbiAgICBjb25zdCBuZXdFeGVjdXRpb25JZCA9IGdldE5ld0V4ZWN1dGlvbklkKCk7XG4gICAgY29uc3QgW2xvYWRhYmxlLCBuZXdEZXBWYWx1ZXNdID0gZXZhbHVhdGVTZWxlY3RvckdldHRlcihzdG9yZSwgc3RhdGUsIG5ld0V4ZWN1dGlvbklkKTtcbiAgICBzZXRFeGVjdXRpb25JbmZvKGxvYWRhYmxlLCBzdG9yZSwgbmV3RGVwVmFsdWVzLCBuZXdFeGVjdXRpb25JZCwgc3RhdGUpO1xuICAgIG1heWJlU2V0Q2FjaGVXaXRoTG9hZGFibGUoc3RhdGUsIGRlcFZhbHVlc1RvRGVwUm91dGUobmV3RGVwVmFsdWVzKSwgbG9hZGFibGUpO1xuICAgIG5vdGlmeVN0b3JlV2hlbkFzeW5jU2V0dGxlcyhzdG9yZSwgbG9hZGFibGUsIG5ld0V4ZWN1dGlvbklkKTtcbiAgICByZXR1cm4gbG9hZGFibGU7XG4gIH1cbiAgLyoqXG4gICAqIEdpdmVuIGEgdHJlZSBzdGF0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBcInNlbGVjdG9yIHJlc3VsdFwiLCB3aGljaCBpc1xuICAgKiBkZWZpbmVkIGFzIGEgc2l6ZS0yIHR1cGxlIG9mIFtEZXBlbmRlbmN5TWFwLCBMb2FkYWJsZTxUPl0uXG4gICAqXG4gICAqIFRoZSBzZWxlY3RvcidzIGdldCgpIGZ1bmN0aW9uIHdpbGwgb25seSBiZSByZS1ldmFsdWF0ZWQgaWYgX2JvdGhfIG9mIHRoZVxuICAgKiBmb2xsb3dpbmcgc3RhdGVtZW50cyBhcmUgdHJ1ZTpcbiAgICpcbiAgICogMS4gVGhlIGN1cnJlbnQgZGVwIHZhbHVlcyBmcm9tIHRoZSBnaXZlbiBzdGF0ZSBwcm9kdWNlZCBhIGNhY2hlIGtleSB0aGF0XG4gICAqICAgIHdhcyBub3QgZm91bmQgaW4gdGhlIGNhY2hlLlxuICAgKiAyLiBUaGVyZSBpcyBubyBjdXJyZW50bHkgcnVubmluZyBhc3luYyBleGVjdXRpb24gT1IgdGhlcmUgaXMgYW5cbiAgICogICAgYXN5bmMgZXhlY3V0aW9uIHRoYXQgaXMgcnVubmluZywgYnV0IGFmdGVyIGNvbXBhcmluZyB0aGUgZGVwIHZhbHVlcyBpblxuICAgKiAgICB0aGUgZ2l2ZW4gc3RhdGUgd2l0aCB0aGUgZGVwIHZhbHVlcyB0aGF0IHRoZSBleGVjdXRpb24gaGFzIGRpc2NvdmVyZWQgc29cbiAgICogICAgZmFyIHdlIGZpbmQgdGhhdCBhdCBsZWFzdCBvbmUgZGVwIHZhbHVlIGhhcyBjaGFuZ2VkLCBpbiB3aGljaCBjYXNlIHdlXG4gICAqICAgIHN0YXJ0IGEgbmV3IGV4ZWN1dGlvbiAodGhlIHByZXZpb3VzbHkgcnVubmluZyBleGVjdXRpb24gd2lsbCBjb250aW51ZSB0b1xuICAgKiAgICBydW4gdG8gY29tcGxldGlvbiwgYnV0IG9ubHkgdGhlIG5ldyBleGVjdXRpb24gd2lsbCBiZSBkZWVtZWQgdGhlXG4gICAqICAgICdsYXRlc3QnIGV4ZWN1dGlvbiwgbWVhbmluZyBpdCB3aWxsIGJlIHRoZSBvbmx5IGV4ZWN1dGlvbiB0aGF0IHdpbGxcbiAgICogICAgdXBkYXRlIGdsb2JhbCBzdGF0ZSB3aGVuIGl0IGlzIGZpbmlzaGVkLiBBbnkgbm9uLWxhdGVzdCBleGVjdXRpb25zIHdpbGxcbiAgICogICAgcnVuIHRvIGNvbXBsZXRpb24gYW5kIHVwZGF0ZSB0aGUgc2VsZWN0b3IgY2FjaGUgYnV0IG5vdCBnbG9iYWwgc3RhdGUpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGdldFNlbGVjdG9yVmFsQW5kVXBkYXRlZERlcHMoc3RvcmUsIHN0YXRlKSB7XG4gICAgY29uc3QgY2FjaGVkVmFsID0gZ2V0VmFsRnJvbUNhY2hlQW5kVXBkYXRlZERvd25zdHJlYW1EZXBzKHN0b3JlLCBzdGF0ZSk7XG5cbiAgICBpZiAoY2FjaGVkVmFsICE9IG51bGwpIHtcbiAgICAgIHNldEV4ZWN1dGlvbkluZm8oY2FjaGVkVmFsLCBzdG9yZSk7XG4gICAgICByZXR1cm4gY2FjaGVkVmFsO1xuICAgIH1cblxuICAgIGNvbnN0IGluUHJvZ3Jlc3NFeGVjdXRpb25JbmZvID0gZ2V0RXhlY3V0aW9uSW5mb09mSW5Qcm9ncmVzc0V4ZWN1dGlvbihzdGF0ZSk7IC8vIEZJWE1FOiB0aGlzIHdvbid0IHdvcmsgd2l0aCBjdXN0b20gY2FjaGluZyBiL2MgaXQgdXNlcyBzZXBhcmF0ZSBjYWNoZVxuXG4gICAgaWYgKGluUHJvZ3Jlc3NFeGVjdXRpb25JbmZvKSB7XG4gICAgICBjb25zdCBleGVjdXRpb25JbmZvID0gaW5Qcm9ncmVzc0V4ZWN1dGlvbkluZm87XG4gICAgICBub3RpZnlTdG9yZVdoZW5Bc3luY1NldHRsZXMoc3RvcmUsIFJlY29pbF9udWxsdGhyb3dzKGV4ZWN1dGlvbkluZm8ubGF0ZXN0TG9hZGFibGUpLCBSZWNvaWxfbnVsbHRocm93cyhleGVjdXRpb25JbmZvLmxhdGVzdEV4ZWN1dGlvbklkKSk7IC8vIEZJWE1FOiBjaGVjayBhZnRlciB0aGUgZmFjdCB0byBzZWUgaWYgd2UgbWFkZSB0aGUgcmlnaHQgY2hvaWNlIGJ5IHdhaXRpbmdcblxuICAgICAgcmV0dXJuIFJlY29pbF9udWxsdGhyb3dzKGV4ZWN1dGlvbkluZm8ubGF0ZXN0TG9hZGFibGUpO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRWYWxGcm9tUnVubmluZ05ld0V4ZWN1dGlvbkFuZFVwZGF0ZWREZXBzKHN0b3JlLCBzdGF0ZSk7XG4gIH1cbiAgLyoqXG4gICAqIFNlYXJjaGVzIGV4ZWN1dGlvbiBpbmZvIGFjcm9zcyBhbGwgc3RvcmVzIHRvIHNlZSBpZiB0aGVyZSBpcyBhbiBpbi1wcm9ncmVzc1xuICAgKiBleGVjdXRpb24gd2hvc2UgZGVwZW5kZW5jeSB2YWx1ZXMgbWF0Y2ggdGhlIHZhbHVlcyBvZiB0aGUgcmVxdWVzdGluZyBzdG9yZS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRFeGVjdXRpb25JbmZvT2ZJblByb2dyZXNzRXhlY3V0aW9uKHN0YXRlKSB7XG4gICAgdmFyIF9BcnJheSRmcm9tJGZpbmQ7XG5cbiAgICBjb25zdCBbLCBleGVjdXRpb25JbmZvXSA9IChfQXJyYXkkZnJvbSRmaW5kID0gQXJyYXkuZnJvbShleGVjdXRpb25JbmZvTWFwLmVudHJpZXMoKSkuZmluZCgoW3N0b3JlLCBleGVjSW5mb10pID0+IHtcbiAgICAgIHJldHVybiBleGVjSW5mby5sYXRlc3RMb2FkYWJsZSAhPSBudWxsICYmIGV4ZWNJbmZvLmxhdGVzdEV4ZWN1dGlvbklkICE9IG51bGwgJiYgIWhhdmVBc3luY0RlcHNDaGFuZ2VkKHN0b3JlLCBzdGF0ZSk7XG4gICAgfSkpICE9PSBudWxsICYmIF9BcnJheSRmcm9tJGZpbmQgIT09IHZvaWQgMCA/IF9BcnJheSRmcm9tJGZpbmQgOiBbXTtcbiAgICByZXR1cm4gZXhlY3V0aW9uSW5mbztcbiAgfVxuXG4gIGNvbnN0IG1hcE9mQ2hlY2tlZFZlcnNpb25zID0gbmV3IE1hcCgpO1xuXG4gIGZ1bmN0aW9uIGhhdmVBc3luY0RlcHNDaGFuZ2VkKHN0b3JlLCBzdGF0ZSkge1xuICAgIHZhciBfZXhlY3V0aW9uSW5mbyRkZXBWYWwsIF9tYXBPZkNoZWNrZWRWZXJzaW9ucztcblxuICAgIGNvbnN0IGV4ZWN1dGlvbkluZm8gPSBnZXRFeGVjdXRpb25JbmZvKHN0b3JlKTtcbiAgICBjb25zdCBvbGREZXBWYWx1ZXMgPSAoX2V4ZWN1dGlvbkluZm8kZGVwVmFsID0gZXhlY3V0aW9uSW5mby5kZXBWYWx1ZXNEaXNjb3ZlcmVkU29GYXJEdXJpbmdBc3luY1dvcmspICE9PSBudWxsICYmIF9leGVjdXRpb25JbmZvJGRlcFZhbCAhPT0gdm9pZCAwID8gX2V4ZWN1dGlvbkluZm8kZGVwVmFsIDogbmV3IE1hcCgpO1xuICAgIGNvbnN0IGNhY2hlZERlcFZhbHVlc0NoZWNrZWRGb3JUaGlzVmVyc2lvbiA9IEFycmF5KCgoX21hcE9mQ2hlY2tlZFZlcnNpb25zID0gbWFwT2ZDaGVja2VkVmVyc2lvbnMuZ2V0KHN0YXRlLnZlcnNpb24pKSAhPT0gbnVsbCAmJiBfbWFwT2ZDaGVja2VkVmVyc2lvbnMgIT09IHZvaWQgMCA/IF9tYXBPZkNoZWNrZWRWZXJzaW9ucyA6IG5ldyBNYXAoKSkuZW50cmllcygpKTtcbiAgICBjb25zdCBpc0NhY2hlZFZlcnNpb25TYW1lID0gbWFwT2ZDaGVja2VkVmVyc2lvbnMuaGFzKHN0YXRlLnZlcnNpb24pICYmIGNhY2hlZERlcFZhbHVlc0NoZWNrZWRGb3JUaGlzVmVyc2lvbi5sZW5ndGggPT09IG9sZERlcFZhbHVlcy5zaXplICYmIGNhY2hlZERlcFZhbHVlc0NoZWNrZWRGb3JUaGlzVmVyc2lvbi5ldmVyeSgoW25vZGVLZXksIG5vZGVWYWxdKSA9PiB7XG4gICAgICByZXR1cm4gb2xkRGVwVmFsdWVzLmdldChub2RlS2V5KSA9PT0gbm9kZVZhbDtcbiAgICB9KTtcblxuICAgIGlmIChvbGREZXBWYWx1ZXMgPT0gbnVsbCB8fCBzdGF0ZS52ZXJzaW9uID09PSBleGVjdXRpb25JbmZvLnN0YXRlVmVyc2lvbiB8fCBpc0NhY2hlZFZlcnNpb25TYW1lKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbWFwT2ZDaGVja2VkVmVyc2lvbnMuc2V0KHN0YXRlLnZlcnNpb24sIG5ldyBNYXAob2xkRGVwVmFsdWVzKSk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ob2xkRGVwVmFsdWVzKS5zb21lKChbbm9kZUtleSwgb2xkVmFsXSkgPT4ge1xuICAgICAgY29uc3QgbG9hZGFibGUgPSBnZXRDYWNoZWROb2RlTG9hZGFibGUoc3RvcmUsIHN0YXRlLCBub2RlS2V5KTtcbiAgICAgIHJldHVybiBsb2FkYWJsZS5jb250ZW50cyAhPT0gb2xkVmFsLmNvbnRlbnRzO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgdXBkYXRlIHRoZSBzZWxlY3RvcidzIGV4ZWN1dGlvbiBpbmZvIHdoZW4gdGhlIHNlbGVjdG9yXG4gICAqIGhhcyBlaXRoZXIgZmluaXNoZWQgcnVubmluZyBhbiBleGVjdXRpb24gb3IgaGFzIHN0YXJ0ZWQgYSBuZXcgZXhlY3V0aW9uLiBJZlxuICAgKiB0aGUgZ2l2ZW4gbG9hZGFibGUgaXMgaW4gYSAnbG9hZGluZycgc3RhdGUsIHRoZSBpbnRlbnRpb24gaXMgdGhhdCBhIG5ld1xuICAgKiBleGVjdXRpb24gaGFzIHN0YXJ0ZWQuIE90aGVyd2lzZSwgdGhlIGludGVudGlvbiBpcyB0aGF0IGFuIGV4ZWN1dGlvbiBoYXNcbiAgICoganVzdCBmaW5pc2hlZC5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzZXRFeGVjdXRpb25JbmZvKGxvYWRhYmxlLCBzdG9yZSwgZGVwVmFsdWVzLCBuZXdFeGVjdXRpb25JZCwgc3RhdGUpIHtcbiAgICBjb25zdCBleGVjdXRpb25JbmZvID0gZ2V0RXhlY3V0aW9uSW5mbyhzdG9yZSk7XG5cbiAgICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgICAgZXhlY3V0aW9uSW5mby5kZXBWYWx1ZXNEaXNjb3ZlcmVkU29GYXJEdXJpbmdBc3luY1dvcmsgPSBkZXBWYWx1ZXM7XG4gICAgICBleGVjdXRpb25JbmZvLmxhdGVzdEV4ZWN1dGlvbklkID0gbmV3RXhlY3V0aW9uSWQ7XG4gICAgICBleGVjdXRpb25JbmZvLmxhdGVzdExvYWRhYmxlID0gbG9hZGFibGU7XG4gICAgICBleGVjdXRpb25JbmZvLnN0YXRlVmVyc2lvbiA9IHN0YXRlID09PSBudWxsIHx8IHN0YXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdGF0ZS52ZXJzaW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGVjdXRpb25JbmZvLmRlcFZhbHVlc0Rpc2NvdmVyZWRTb0ZhckR1cmluZ0FzeW5jV29yayA9IG51bGw7XG4gICAgICBleGVjdXRpb25JbmZvLmxhdGVzdEV4ZWN1dGlvbklkID0gbnVsbDtcbiAgICAgIGV4ZWN1dGlvbkluZm8ubGF0ZXN0TG9hZGFibGUgPSBudWxsO1xuICAgICAgZXhlY3V0aW9uSW5mby5zdGF0ZVZlcnNpb24gPSBudWxsO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29uZGl0aW9uYWxseSB1cGRhdGVzIHRoZSBjYWNoZSB3aXRoIGEgZ2l2ZW4gbG9hZGFibGUuXG4gICAqXG4gICAqIFdlIG9ubHkgY2FjaGUgbG9hZGFibGVzIHRoYXQgYXJlIG5vdCBsb2FkaW5nIGJlY2F1c2Ugb3VyIGNhY2hlIGtleXMgYXJlXG4gICAqIGJhc2VkIG9uIGRlcCB2YWx1ZXMsIHdoaWNoIGFyZSBpbiBhbiB1bmZpbmlzaGVkIHN0YXRlIGZvciBsb2FkYWJsZXMgdGhhdFxuICAgKiBoYXZlIGEgJ2xvYWRpbmcnIHN0YXRlIChuZXcgZGVwcyBtYXkgYmUgZGlzY292ZXJlZCB3aGlsZSB0aGUgc2VsZWN0b3JcbiAgICogcnVucyBpdHMgYXN5bmMgY29kZSkuIFdlIG5ldmVyIHdhbnQgdG8gY2FjaGUgcGFydGlhbCBkZXBlbmRlbmNpZXMgYi9jIGl0XG4gICAqIGNvdWxkIGxlYWQgdG8gZXJyb3JzLCBzdWNoIGFzIHByZW1hdHVyZWx5IHJldHVybmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIGFcbiAgICogcGFydGlhbCBsaXN0IG9mIGRlcHMtLSB3ZSBuZWVkIHRoZSBmdWxsIGxpc3Qgb2YgZGVwcyB0byBlbnN1cmUgdGhhdCB3ZVxuICAgKiBhcmUgcmV0dXJuaW5nIHRoZSBjb3JyZWN0IHJlc3VsdCBmcm9tIGNhY2hlLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG1heWJlU2V0Q2FjaGVXaXRoTG9hZGFibGUoc3RhdGUsIGRlcFJvdXRlLCBsb2FkYWJsZSkge1xuICAgIGlmIChsb2FkYWJsZS5zdGF0ZSAhPT0gJ2xvYWRpbmcnKSB7XG4gICAgICBzZXRDYWNoZShzdGF0ZSwgZGVwUm91dGUsIGxvYWRhYmxlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVFeGVjdXRpb25JbmZvRGVwVmFsdWVzKGRlcFZhbHVlcywgc3RvcmUsIGV4ZWN1dGlvbklkKSB7XG4gICAgY29uc3QgZXhlY3V0aW9uSW5mbyA9IGdldEV4ZWN1dGlvbkluZm8oc3RvcmUpO1xuXG4gICAgaWYgKGlzTGF0ZXN0RXhlY3V0aW9uKHN0b3JlLCBleGVjdXRpb25JZCkpIHtcbiAgICAgIGV4ZWN1dGlvbkluZm8uZGVwVmFsdWVzRGlzY292ZXJlZFNvRmFyRHVyaW5nQXN5bmNXb3JrID0gZGVwVmFsdWVzO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyRXhlY3V0aW9uSW5mbyhzdG9yZSwgZXhlY3V0aW9uSWQpIHtcbiAgICBpZiAoaXNMYXRlc3RFeGVjdXRpb24oc3RvcmUsIGV4ZWN1dGlvbklkKSkge1xuICAgICAgZXhlY3V0aW9uSW5mb01hcC5kZWxldGUoc3RvcmUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTGF0ZXN0RXhlY3V0aW9uKHN0b3JlLCBleGVjdXRpb25JZCkge1xuICAgIGNvbnN0IGV4ZWN1dGlvbkluZm8gPSBnZXRFeGVjdXRpb25JbmZvKHN0b3JlKTtcbiAgICByZXR1cm4gZXhlY3V0aW9uSWQgPT09IGV4ZWN1dGlvbkluZm8ubGF0ZXN0RXhlY3V0aW9uSWQ7XG4gIH1cblxuICBmdW5jdGlvbiBtYXliZUZyZWV6ZVZhbHVlKHZhbCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmIChCb29sZWFuKG9wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHkpID09PSBmYWxzZSkge1xuICAgICAgICBSZWNvaWxfZGVlcEZyZWV6ZVZhbHVlKHZhbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0Q2FjaGUoc3RhdGUsIGNhY2hlUm91dGUsIGxvYWRhYmxlKSB7XG4gICAgc3RhdGUuYXRvbVZhbHVlcy5zZXQoa2V5LCBsb2FkYWJsZSk7XG5cbiAgICB0cnkge1xuICAgICAgY2FjaGUuc2V0KGNhY2hlUm91dGUsIGxvYWRhYmxlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgUmVjb2lsX2VycihgUHJvYmxlbSB3aXRoIHNldHRpbmcgY2FjaGUgZm9yIHNlbGVjdG9yIFwiJHtrZXl9XCI6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXRlY3RDaXJjdWxhckRlcGVuZGVuY2llcyhmbikge1xuICAgIGlmIChkZXBlbmRlbmN5U3RhY2suaW5jbHVkZXMoa2V5KSkge1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGBSZWNvaWwgc2VsZWN0b3IgaGFzIGNpcmN1bGFyIGRlcGVuZGVuY2llczogJHtkZXBlbmRlbmN5U3RhY2suc2xpY2UoZGVwZW5kZW5jeVN0YWNrLmluZGV4T2Yoa2V5KSkuam9pbignIFxcdTIxOTIgJyl9YDtcbiAgICAgIHJldHVybiBsb2FkYWJsZVdpdGhFcnJvciQxKFJlY29pbF9lcnIobWVzc2FnZSkpO1xuICAgIH1cblxuICAgIGRlcGVuZGVuY3lTdGFjay5wdXNoKGtleSk7XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZuKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGRlcGVuZGVuY3lTdGFjay5wb3AoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3RvclBlZWsoc3RvcmUsIHN0YXRlKSB7XG4gICAgY29uc3QgY2FjaGVWYWwgPSBjYWNoZS5nZXQobm9kZUtleSA9PiB7XG4gICAgICAhKHR5cGVvZiBub2RlS2V5ID09PSAnc3RyaW5nJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBSZWNvaWxfaW52YXJpYW50KGZhbHNlLCAnQ2FjaGUgbm9kZUtleSBpcyB0eXBlIHN0cmluZycpIDogUmVjb2lsX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBjb25zdCBwZWVrID0gcGVla05vZGVMb2FkYWJsZSQxKHN0b3JlLCBzdGF0ZSwgbm9kZUtleSk7XG4gICAgICByZXR1cm4gcGVlayA9PT0gbnVsbCB8fCBwZWVrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwZWVrLmNvbnRlbnRzO1xuICAgIH0pO1xuICAgIHJldHVybiBjYWNoZVZhbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlbGVjdG9yR2V0KHN0b3JlLCBzdGF0ZSkge1xuICAgIHJldHVybiBkZXRlY3RDaXJjdWxhckRlcGVuZGVuY2llcygoKSA9PiBnZXRTZWxlY3RvclZhbEFuZFVwZGF0ZWREZXBzKHN0b3JlLCBzdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52YWxpZGF0ZVNlbGVjdG9yKHN0YXRlKSB7XG4gICAgc3RhdGUuYXRvbVZhbHVlcy5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyU2VsZWN0b3JDYWNoZShzdG9yZSwgdHJlZVN0YXRlKSB7XG4gICAgIShyZWNvaWxWYWx1ZSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJlY29pbF9pbnZhcmlhbnQoZmFsc2UsICdSZWNvaWwgVmFsdWUgY2FuIG5ldmVyIGJlIG51bGwnKSA6IFJlY29pbF9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgZm9yIChjb25zdCBub2RlS2V5IG9mIGRpc2NvdmVyZWREZXBlbmRlbmN5Tm9kZUtleXMpIHtcbiAgICAgIHZhciBfbm9kZSRjbGVhckNhY2hlO1xuXG4gICAgICBjb25zdCBub2RlID0gZ2V0Tm9kZSQ2KG5vZGVLZXkpO1xuICAgICAgKF9ub2RlJGNsZWFyQ2FjaGUgPSBub2RlLmNsZWFyQ2FjaGUpID09PSBudWxsIHx8IF9ub2RlJGNsZWFyQ2FjaGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub2RlJGNsZWFyQ2FjaGUuY2FsbChub2RlLCBzdG9yZSwgdHJlZVN0YXRlKTtcbiAgICB9XG5cbiAgICBpbnZhbGlkYXRlU2VsZWN0b3IodHJlZVN0YXRlKTtcbiAgICBjYWNoZS5jbGVhcigpO1xuICAgIG1hcmtSZWNvaWxWYWx1ZU1vZGlmaWVkJDEoc3RvcmUsIHJlY29pbFZhbHVlKTtcbiAgfVxuXG4gIGlmIChzZXQgIT0gbnVsbCkge1xuICAgIC8qKlxuICAgICAqIEVTNSBzdHJpY3QgbW9kZSBwcm9oaWJpdHMgZGVmaW5pbmcgbm9uLXRvcC1sZXZlbCBmdW5jdGlvbiBkZWNsYXJhdGlvbnMsXG4gICAgICogc28gZG9uJ3QgdXNlIGZ1bmN0aW9uIGRlY2xhcmF0aW9uIHN5bnRheCBoZXJlXG4gICAgICovXG4gICAgY29uc3Qgc2VsZWN0b3JTZXQgPSAoc3RvcmUsIHN0YXRlLCBuZXdWYWx1ZSkgPT4ge1xuICAgICAgbGV0IHN5bmNTZWxlY3RvclNldEZpbmlzaGVkID0gZmFsc2U7XG4gICAgICBjb25zdCB3cml0ZXMgPSBuZXcgTWFwKCk7XG5cbiAgICAgIGZ1bmN0aW9uIGdldFJlY29pbFZhbHVlKHtcbiAgICAgICAga2V5OiBkZXBLZXlcbiAgICAgIH0pIHtcbiAgICAgICAgaWYgKHN5bmNTZWxlY3RvclNldEZpbmlzaGVkKSB7XG4gICAgICAgICAgdGhyb3cgUmVjb2lsX2VycignUmVjb2lsOiBBc3luYyBzZWxlY3RvciBzZXRzIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxvYWRhYmxlID0gZ2V0Q2FjaGVkTm9kZUxvYWRhYmxlKHN0b3JlLCBzdGF0ZSwgZGVwS2V5KTtcblxuICAgICAgICBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdoYXNWYWx1ZScpIHtcbiAgICAgICAgICByZXR1cm4gbG9hZGFibGUuY29udGVudHM7XG4gICAgICAgIH0gZWxzZSBpZiAobG9hZGFibGUuc3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgICAgICAgIHRocm93IG5ldyBSZWNvaWxWYWx1ZU5vdFJlYWR5JDIoZGVwS2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBsb2FkYWJsZS5jb250ZW50cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzZXRSZWNvaWxTdGF0ZShyZWNvaWxTdGF0ZSwgdmFsdWVPclVwZGF0ZXIpIHtcbiAgICAgICAgaWYgKHN5bmNTZWxlY3RvclNldEZpbmlzaGVkKSB7XG4gICAgICAgICAgdGhyb3cgUmVjb2lsX2VycignUmVjb2lsOiBBc3luYyBzZWxlY3RvciBzZXRzIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNldFZhbHVlID0gdHlwZW9mIHZhbHVlT3JVcGRhdGVyID09PSAnZnVuY3Rpb24nID8gLy8gY2FzdCB0byBhbnkgYmVjYXVzZSB3ZSBjYW4ndCByZXN0cmljdCB0eXBlIFMgZnJvbSBiZWluZyBhIGZ1bmN0aW9uIGl0c2VsZiB3aXRob3V0IGxvc2luZyBzdXBwb3J0IGZvciBvcGFxdWUgdHlwZXNcbiAgICAgICAgLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbiAgICAgICAgdmFsdWVPclVwZGF0ZXIoZ2V0UmVjb2lsVmFsdWUocmVjb2lsU3RhdGUpKSA6IHZhbHVlT3JVcGRhdGVyO1xuICAgICAgICBjb25zdCB1cHN0cmVhbVdyaXRlcyA9IHNldE5vZGVWYWx1ZSQzKHN0b3JlLCBzdGF0ZSwgcmVjb2lsU3RhdGUua2V5LCBzZXRWYWx1ZSk7XG4gICAgICAgIHVwc3RyZWFtV3JpdGVzLmZvckVhY2goKHYsIGspID0+IHdyaXRlcy5zZXQoaywgdikpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZXNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlKSB7XG4gICAgICAgIHNldFJlY29pbFN0YXRlKHJlY29pbFN0YXRlLCBERUZBVUxUX1ZBTFVFJDYpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXQgPSBzZXQoe1xuICAgICAgICBzZXQ6IHNldFJlY29pbFN0YXRlLFxuICAgICAgICBnZXQ6IGdldFJlY29pbFZhbHVlLFxuICAgICAgICByZXNldDogcmVzZXRSZWNvaWxTdGF0ZVxuICAgICAgfSwgbmV3VmFsdWUpOyAvLyBzZXQgc2hvdWxkIGJlIGEgdm9pZCBtZXRob2QsIGJ1dCBpZiB0aGUgdXNlciBtYWtlcyBpdCBgYXN5bmNgLCB0aGVuIGl0XG4gICAgICAvLyB3aWxsIHJldHVybiBhIFByb21pc2UsIHdoaWNoIHdlIGRvbid0IGN1cnJlbnRseSBzdXBwb3J0LlxuXG4gICAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgUmVjb2lsX2lzUHJvbWlzZShyZXQpID8gUmVjb2lsX2VycignUmVjb2lsOiBBc3luYyBzZWxlY3RvciBzZXRzIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZC4nKSA6IFJlY29pbF9lcnIoJ1JlY29pbDogc2VsZWN0b3Igc2V0IHNob3VsZCBiZSBhIHZvaWQgZnVuY3Rpb24uJyk7XG4gICAgICB9XG5cbiAgICAgIHN5bmNTZWxlY3RvclNldEZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB3cml0ZXM7XG4gICAgfTtcblxuICAgIHJldHVybiByZWNvaWxWYWx1ZSA9IHJlZ2lzdGVyTm9kZSQxKHtcbiAgICAgIGtleSxcbiAgICAgIG5vZGVUeXBlOiAnc2VsZWN0b3InLFxuICAgICAgcGVlazogc2VsZWN0b3JQZWVrLFxuICAgICAgZ2V0OiBzZWxlY3RvckdldCxcbiAgICAgIHNldDogc2VsZWN0b3JTZXQsXG4gICAgICBpbml0OiBzZWxlY3RvckluaXQsXG4gICAgICBpbnZhbGlkYXRlOiBpbnZhbGlkYXRlU2VsZWN0b3IsXG4gICAgICBjbGVhckNhY2hlOiBjbGVhclNlbGVjdG9yQ2FjaGUsXG4gICAgICBzaG91bGREZWxldGVDb25maWdPblJlbGVhc2U6IHNlbGVjdG9yU2hvdWxkRGVsZXRlQ29uZmlnT25SZWxlYXNlLFxuICAgICAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IG9wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHksXG4gICAgICBzaG91bGRSZXN0b3JlRnJvbVNuYXBzaG90czogZmFsc2UsXG4gICAgICByZXRhaW5lZEJ5XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlY29pbFZhbHVlID0gcmVnaXN0ZXJOb2RlJDEoe1xuICAgICAga2V5LFxuICAgICAgbm9kZVR5cGU6ICdzZWxlY3RvcicsXG4gICAgICBwZWVrOiBzZWxlY3RvclBlZWssXG4gICAgICBnZXQ6IHNlbGVjdG9yR2V0LFxuICAgICAgaW5pdDogc2VsZWN0b3JJbml0LFxuICAgICAgaW52YWxpZGF0ZTogaW52YWxpZGF0ZVNlbGVjdG9yLFxuICAgICAgY2xlYXJDYWNoZTogY2xlYXJTZWxlY3RvckNhY2hlLFxuICAgICAgc2hvdWxkRGVsZXRlQ29uZmlnT25SZWxlYXNlOiBzZWxlY3RvclNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZSxcbiAgICAgIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiBvcHRpb25zLmRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5LFxuICAgICAgc2hvdWxkUmVzdG9yZUZyb21TbmFwc2hvdHM6IGZhbHNlLFxuICAgICAgcmV0YWluZWRCeVxuICAgIH0pO1xuICB9XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXJlZGVjbGFyZSAqL1xuXG5cbnZhciBSZWNvaWxfc2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuLy8gQGZiLW9ubHk6IGNvbnN0IHtzY29wZWRBdG9tfSA9IHJlcXVpcmUoJ1JlY29pbF9TY29wZWRBdG9tJyk7XG5jb25zdCB7XG4gIGxvYWRhYmxlV2l0aEVycm9yOiBsb2FkYWJsZVdpdGhFcnJvciQyLFxuICBsb2FkYWJsZVdpdGhQcm9taXNlOiBsb2FkYWJsZVdpdGhQcm9taXNlJDIsXG4gIGxvYWRhYmxlV2l0aFZhbHVlOiBsb2FkYWJsZVdpdGhWYWx1ZSQzXG59ID0gUmVjb2lsX0xvYWRhYmxlJDE7XG5cbmNvbnN0IHtcbiAgcGVla05vZGVJbmZvOiBwZWVrTm9kZUluZm8kM1xufSA9IFJlY29pbF9GdW5jdGlvbmFsQ29yZTtcblxuY29uc3Qge1xuICBERUZBVUxUX1ZBTFVFOiBERUZBVUxUX1ZBTFVFJDcsXG4gIERlZmF1bHRWYWx1ZTogRGVmYXVsdFZhbHVlJDIsXG4gIGdldENvbmZpZ0RlbGV0aW9uSGFuZGxlcjogZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDIsXG4gIHJlZ2lzdGVyTm9kZTogcmVnaXN0ZXJOb2RlJDIsXG4gIHNldENvbmZpZ0RlbGV0aW9uSGFuZGxlcjogc2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDFcbn0gPSBSZWNvaWxfTm9kZTtcblxuY29uc3Qge1xuICBpc1JlY29pbFZhbHVlOiBpc1JlY29pbFZhbHVlJDRcbn0gPSBSZWNvaWxfUmVjb2lsVmFsdWUkMTtcblxuY29uc3Qge1xuICBnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGU6IGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQ0LFxuICBtYXJrUmVjb2lsVmFsdWVNb2RpZmllZDogbWFya1JlY29pbFZhbHVlTW9kaWZpZWQkMixcbiAgc2V0UmVjb2lsVmFsdWU6IHNldFJlY29pbFZhbHVlJDQsXG4gIHNldFJlY29pbFZhbHVlTG9hZGFibGU6IHNldFJlY29pbFZhbHVlTG9hZGFibGUkM1xufSA9IFJlY29pbF9SZWNvaWxWYWx1ZUludGVyZmFjZTtcblxuY29uc3Qge1xuICByZXRhaW5lZEJ5T3B0aW9uV2l0aERlZmF1bHQ6IHJldGFpbmVkQnlPcHRpb25XaXRoRGVmYXVsdCQyXG59ID0gUmVjb2lsX1JldGVudGlvbjtcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uIGJhc2VBdG9tKG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIGtleSxcbiAgICBwZXJzaXN0ZW5jZV9VTlNUQUJMRTogcGVyc2lzdGVuY2VcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHJldGFpbmVkQnkgPSByZXRhaW5lZEJ5T3B0aW9uV2l0aERlZmF1bHQkMihvcHRpb25zLnJldGFpbmVkQnlfVU5TVEFCTEUpO1xuICBsZXQgbGl2ZVN0b3Jlc0NvdW50ID0gMDtcbiAgbGV0IGRlZmF1bHRMb2FkYWJsZSA9IFJlY29pbF9pc1Byb21pc2Uob3B0aW9ucy5kZWZhdWx0KSA/IGxvYWRhYmxlV2l0aFByb21pc2UkMihvcHRpb25zLmRlZmF1bHQudGhlbih2YWx1ZSA9PiB7XG4gICAgZGVmYXVsdExvYWRhYmxlID0gbG9hZGFibGVXaXRoVmFsdWUkMyh2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgZGVmYXVsdExvYWRhYmxlID0gbG9hZGFibGVXaXRoRXJyb3IkMihlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0pKSA6IGxvYWRhYmxlV2l0aFZhbHVlJDMob3B0aW9ucy5kZWZhdWx0KTtcbiAgbWF5YmVGcmVlemVWYWx1ZU9yUHJvbWlzZShvcHRpb25zLmRlZmF1bHQpO1xuICBsZXQgY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZSA9IHVuZGVmaW5lZDsgLy8gQ2xlYW51cCBoYW5kbGVycyBmb3IgdGhpcyBhdG9tXG4gIC8vIFJlbHkgb24gc3RhYmxlIHJlZmVyZW5jZSBlcXVhbGl0eSBvZiB0aGUgc3RvcmUgdG8gdXNlIGl0IGFzIGEga2V5IHBlciA8UmVjb2lsUm9vdD5cblxuICBjb25zdCBjbGVhbnVwRWZmZWN0c0J5U3RvcmUgPSBuZXcgTWFwKCk7XG5cbiAgZnVuY3Rpb24gbWF5YmVGcmVlemVWYWx1ZU9yUHJvbWlzZSh2YWx1ZU9yUHJvbWlzZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmIChvcHRpb25zLmRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5ICE9PSB0cnVlKSB7XG4gICAgICAgIGlmIChSZWNvaWxfaXNQcm9taXNlKHZhbHVlT3JQcm9taXNlKSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZU9yUHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgIFJlY29pbF9kZWVwRnJlZXplVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFJlY29pbF9kZWVwRnJlZXplVmFsdWUodmFsdWVPclByb21pc2UpO1xuICAgICAgICAgIHJldHVybiB2YWx1ZU9yUHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZU9yUHJvbWlzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXBQZW5kaW5nUHJvbWlzZShzdG9yZSwgcHJvbWlzZSkge1xuICAgIGNvbnN0IHdyYXBwZWRQcm9taXNlID0gcHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgIHZhciBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQsIF9zdGF0ZSRhdG9tVmFsdWVzJGdldDtcblxuICAgICAgY29uc3Qgc3RhdGUgPSAoX3N0b3JlJGdldFN0YXRlJG5leHRUID0gc3RvcmUuZ2V0U3RhdGUoKS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlJGdldFN0YXRlJG5leHRUICE9PSB2b2lkIDAgPyBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQgOiBzdG9yZS5nZXRTdGF0ZSgpLmN1cnJlbnRUcmVlO1xuXG4gICAgICBpZiAoKChfc3RhdGUkYXRvbVZhbHVlcyRnZXQgPSBzdGF0ZS5hdG9tVmFsdWVzLmdldChrZXkpKSA9PT0gbnVsbCB8fCBfc3RhdGUkYXRvbVZhbHVlcyRnZXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zdGF0ZSRhdG9tVmFsdWVzJGdldC5jb250ZW50cykgPT09IHdyYXBwZWRQcm9taXNlKSB7XG4gICAgICAgIHNldFJlY29pbFZhbHVlJDQoc3RvcmUsIG5vZGUsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIHZhciBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQyLCBfc3RhdGUkYXRvbVZhbHVlcyRnZXQyO1xuXG4gICAgICBjb25zdCBzdGF0ZSA9IChfc3RvcmUkZ2V0U3RhdGUkbmV4dFQyID0gc3RvcmUuZ2V0U3RhdGUoKS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlJGdldFN0YXRlJG5leHRUMiAhPT0gdm9pZCAwID8gX3N0b3JlJGdldFN0YXRlJG5leHRUMiA6IHN0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWU7XG5cbiAgICAgIGlmICgoKF9zdGF0ZSRhdG9tVmFsdWVzJGdldDIgPSBzdGF0ZS5hdG9tVmFsdWVzLmdldChrZXkpKSA9PT0gbnVsbCB8fCBfc3RhdGUkYXRvbVZhbHVlcyRnZXQyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RhdGUkYXRvbVZhbHVlcyRnZXQyLmNvbnRlbnRzKSA9PT0gd3JhcHBlZFByb21pc2UpIHtcbiAgICAgICAgc2V0UmVjb2lsVmFsdWVMb2FkYWJsZSQzKHN0b3JlLCBub2RlLCBsb2FkYWJsZVdpdGhFcnJvciQyKGVycm9yKSk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0pO1xuICAgIHJldHVybiB3cmFwcGVkUHJvbWlzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRBdG9tKHN0b3JlLCBpbml0U3RhdGUsIHRyaWdnZXIpIHtcbiAgICBsaXZlU3RvcmVzQ291bnQrKztcbiAgICBjb25zdCBhbHJlYWR5S25vd24gPSBzdG9yZS5nZXRTdGF0ZSgpLmtub3duQXRvbXMuaGFzKGtleSk7XG4gICAgc3RvcmUuZ2V0U3RhdGUoKS5rbm93bkF0b21zLmFkZChrZXkpOyAvLyBTZXR1cCBhc3luYyBkZWZhdWx0cyB0byBub3RpZnkgc3Vic2NyaWJlcnMgd2hlbiB0aGV5IHJlc29sdmVcblxuICAgIGlmIChkZWZhdWx0TG9hZGFibGUuc3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgICAgY29uc3Qgbm90aWZ5RGVmYXVsdFN1YnNjcmliZXJzID0gKCkgPT4ge1xuICAgICAgICB2YXIgX3N0b3JlJGdldFN0YXRlJG5leHRUMztcblxuICAgICAgICBjb25zdCBzdGF0ZSA9IChfc3RvcmUkZ2V0U3RhdGUkbmV4dFQzID0gc3RvcmUuZ2V0U3RhdGUoKS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlJGdldFN0YXRlJG5leHRUMyAhPT0gdm9pZCAwID8gX3N0b3JlJGdldFN0YXRlJG5leHRUMyA6IHN0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWU7XG5cbiAgICAgICAgaWYgKCFzdGF0ZS5hdG9tVmFsdWVzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgbWFya1JlY29pbFZhbHVlTW9kaWZpZWQkMihzdG9yZSwgbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGRlZmF1bHRMb2FkYWJsZS5jb250ZW50cy50aGVuKG5vdGlmeURlZmF1bHRTdWJzY3JpYmVycykuY2F0Y2gobm90aWZ5RGVmYXVsdFN1YnNjcmliZXJzKTtcbiAgICB9IC8vIFJ1biBBdG9tIEVmZmVjdHNcbiAgICAvLyBUaGlzIHN0YXRlIGlzIHNjb3BlZCBieSBTdG9yZSwgc2luY2UgdGhpcyBpcyBpbiB0aGUgaW5pdEF0b20oKSBjbG9zdXJlXG5cblxuICAgIGxldCBpbml0VmFsdWUgPSBERUZBVUxUX1ZBTFVFJDc7XG4gICAgbGV0IHBlbmRpbmdTZXRTZWxmID0gbnVsbDtcblxuICAgIGlmIChvcHRpb25zLmVmZmVjdHNfVU5TVEFCTEUgIT0gbnVsbCAmJiAhYWxyZWFkeUtub3duKSB7XG4gICAgICBsZXQgZHVyaW5nSW5pdCA9IHRydWU7XG5cbiAgICAgIGZ1bmN0aW9uIGdldExvYWRhYmxlKHJlY29pbFZhbHVlKSB7XG4gICAgICAgIC8vIE5vcm1hbGx5IHdlIGNhbiBqdXN0IGdldCB0aGUgY3VycmVudCB2YWx1ZSBvZiBhbm90aGVyIGF0b20uXG4gICAgICAgIC8vIEJ1dCBmb3Igb3VyIG93biB2YWx1ZSB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoZXJlIGlzIGEgcGVuZGluZ1xuICAgICAgICAvLyBpbml0aWFsaXplZCB2YWx1ZSBvciBnZXQgdGhlIGZhbGxiYWNrIGRlZmF1bHQgdmFsdWUuXG4gICAgICAgIGlmIChkdXJpbmdJbml0ICYmIHJlY29pbFZhbHVlLmtleSA9PT0ga2V5ICYmICEoaW5pdFZhbHVlIGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDIpKSB7XG4gICAgICAgICAgLy8gQ2FzdCBUIHRvIFNcbiAgICAgICAgICBjb25zdCByZXRWYWx1ZSA9IGluaXRWYWx1ZTsgLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG5cbiAgICAgICAgICByZXR1cm4gcmV0VmFsdWUgaW5zdGFuY2VvZiBEZWZhdWx0VmFsdWUkMiA/IGRlZmF1bHRMb2FkYWJsZSA6IC8vIGZsb3dsaW50LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuICAgICAgICAgIFJlY29pbF9pc1Byb21pc2UocmV0VmFsdWUpID8gbG9hZGFibGVXaXRoUHJvbWlzZSQyKHJldFZhbHVlLnRoZW4odiA9PiB2IGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDIgPyAvLyBDYXN0IFQgdG8gU1xuICAgICAgICAgIGRlZmF1bHRMb2FkYWJsZS50b1Byb21pc2UoKSAvLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbiAgICAgICAgICA6IHYpKSA6IGxvYWRhYmxlV2l0aFZhbHVlJDMocmV0VmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQ0KHN0b3JlLCByZWNvaWxWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldFByb21pc2UocmVjb2lsVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGdldExvYWRhYmxlKHJlY29pbFZhbHVlKS50b1Byb21pc2UoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0SW5mb19VTlNUQUJMRShyZWNvaWxWYWx1ZSkge1xuICAgICAgICB2YXIgX3N0b3JlJGdldFN0YXRlJG5leHRUNDtcblxuICAgICAgICBjb25zdCBpbmZvID0gcGVla05vZGVJbmZvJDMoc3RvcmUsIChfc3RvcmUkZ2V0U3RhdGUkbmV4dFQ0ID0gc3RvcmUuZ2V0U3RhdGUoKS5uZXh0VHJlZSkgIT09IG51bGwgJiYgX3N0b3JlJGdldFN0YXRlJG5leHRUNCAhPT0gdm9pZCAwID8gX3N0b3JlJGdldFN0YXRlJG5leHRUNCA6IHN0b3JlLmdldFN0YXRlKCkuY3VycmVudFRyZWUsIHJlY29pbFZhbHVlLmtleSk7XG4gICAgICAgIHJldHVybiBkdXJpbmdJbml0ICYmIHJlY29pbFZhbHVlLmtleSA9PT0ga2V5ICYmICEoaW5pdFZhbHVlIGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDIpID8geyAuLi5pbmZvLFxuICAgICAgICAgIGlzU2V0OiB0cnVlLFxuICAgICAgICAgIGxvYWRhYmxlOiBnZXRMb2FkYWJsZShyZWNvaWxWYWx1ZSlcbiAgICAgICAgfSA6IGluZm87XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNldFNlbGYgPSBlZmZlY3QgPT4gdmFsdWVPclVwZGF0ZXIgPT4ge1xuICAgICAgICBpZiAoZHVyaW5nSW5pdCkge1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IGluaXRWYWx1ZSBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQyIHx8IFJlY29pbF9pc1Byb21pc2UoaW5pdFZhbHVlKSA/IGRlZmF1bHRMb2FkYWJsZS5zdGF0ZSA9PT0gJ2hhc1ZhbHVlJyA/IGRlZmF1bHRMb2FkYWJsZS5jb250ZW50cyA6IERFRkFVTFRfVkFMVUUkNyA6IGluaXRWYWx1ZTtcbiAgICAgICAgICBpbml0VmFsdWUgPSB0eXBlb2YgdmFsdWVPclVwZGF0ZXIgPT09ICdmdW5jdGlvbicgPyAvLyBjYXN0IHRvIGFueSBiZWNhdXNlIHdlIGNhbid0IHJlc3RyaWN0IFQgZnJvbSBiZWluZyBhIGZ1bmN0aW9uIHdpdGhvdXQgbG9zaW5nIHN1cHBvcnQgZm9yIG9wYXF1ZSB0eXBlc1xuICAgICAgICAgIHZhbHVlT3JVcGRhdGVyKGN1cnJlbnRWYWx1ZSkgLy8gZmxvd2xpbnQtbGluZSB1bmNsZWFyLXR5cGU6b2ZmXG4gICAgICAgICAgOiB2YWx1ZU9yVXBkYXRlcjtcblxuICAgICAgICAgIGlmIChSZWNvaWxfaXNQcm9taXNlKGluaXRWYWx1ZSkpIHtcbiAgICAgICAgICAgIGluaXRWYWx1ZSA9IGluaXRWYWx1ZS50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgLy8gQXZvaWQgY2FsbGluZyBvblNldCgpIHdoZW4gc2V0U2VsZigpIGluaXRpYWxpemVzIHdpdGggYSBQcm9taXNlXG4gICAgICAgICAgICAgIHBlbmRpbmdTZXRTZWxmID0ge1xuICAgICAgICAgICAgICAgIGVmZmVjdCxcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKFJlY29pbF9pc1Byb21pc2UodmFsdWVPclVwZGF0ZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBSZWNvaWxfZXJyKCdTZXR0aW5nIGF0b21zIHRvIGFzeW5jIHZhbHVlcyBpcyBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZU9yVXBkYXRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcGVuZGluZ1NldFNlbGYgPSB7XG4gICAgICAgICAgICAgIGVmZmVjdCxcbiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlT3JVcGRhdGVyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNldFJlY29pbFZhbHVlJDQoc3RvcmUsIG5vZGUsIHR5cGVvZiB2YWx1ZU9yVXBkYXRlciA9PT0gJ2Z1bmN0aW9uJyA/IGN1cnJlbnRWYWx1ZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IC8vIGNhc3QgdG8gYW55IGJlY2F1c2Ugd2UgY2FuJ3QgcmVzdHJpY3QgVCBmcm9tIGJlaW5nIGEgZnVuY3Rpb24gd2l0aG91dCBsb3Npbmcgc3VwcG9ydCBmb3Igb3BhcXVlIHR5cGVzXG4gICAgICAgICAgICB2YWx1ZU9yVXBkYXRlcihjdXJyZW50VmFsdWUpOyAvLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuICAgICAgICAgICAgcGVuZGluZ1NldFNlbGYgPSB7XG4gICAgICAgICAgICAgIGVmZmVjdCxcbiAgICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgICAgICAgIH0gOiB2YWx1ZU9yVXBkYXRlcik7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc2V0U2VsZiA9IGVmZmVjdCA9PiAoKSA9PiBzZXRTZWxmKGVmZmVjdCkoREVGQVVMVF9WQUxVRSQ3KTtcblxuICAgICAgY29uc3Qgb25TZXQgPSBlZmZlY3QgPT4gaGFuZGxlciA9PiB7XG4gICAgICAgIHN0b3JlLnN1YnNjcmliZVRvVHJhbnNhY3Rpb25zKGN1cnJlbnRTdG9yZSA9PiB7XG4gICAgICAgICAgdmFyIF9jdXJyZW50VHJlZSRhdG9tVmFsdTtcblxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgY3VycmVudFRyZWUsXG4gICAgICAgICAgICBwcmV2aW91c1RyZWVcbiAgICAgICAgICB9ID0gY3VycmVudFN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICAgICAgICBpZiAoIXByZXZpb3VzVHJlZSkge1xuICAgICAgICAgICAgUmVjb2lsX3JlY292ZXJhYmxlVmlvbGF0aW9uKCdUcmFuc2FjdGlvbiBzdWJzY3JpYmVycyBub3RpZmllZCB3aXRob3V0IGEgbmV4dCB0cmVlIGJlaW5nIHByZXNlbnQgLS0gdGhpcyBpcyBhIGJ1ZyBpbiBSZWNvaWwnKTtcbiAgICAgICAgICAgIHByZXZpb3VzVHJlZSA9IGN1cnJlbnRUcmVlOyAvLyBhdHRlbXB0IHRvIHRydW5kbGUgb25cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBuZXdMb2FkYWJsZSA9IChfY3VycmVudFRyZWUkYXRvbVZhbHUgPSBjdXJyZW50VHJlZS5hdG9tVmFsdWVzLmdldChrZXkpKSAhPT0gbnVsbCAmJiBfY3VycmVudFRyZWUkYXRvbVZhbHUgIT09IHZvaWQgMCA/IF9jdXJyZW50VHJlZSRhdG9tVmFsdSA6IGRlZmF1bHRMb2FkYWJsZTtcblxuICAgICAgICAgIGlmIChuZXdMb2FkYWJsZS5zdGF0ZSA9PT0gJ2hhc1ZhbHVlJykge1xuICAgICAgICAgICAgdmFyIF9wcmV2aW91c1RyZWUkYXRvbVZhbCwgX3BlbmRpbmdTZXRTZWxmLCBfcGVuZGluZ1NldFNlbGYyLCBfcGVuZGluZ1NldFNlbGYzO1xuXG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IG5ld0xvYWRhYmxlLmNvbnRlbnRzO1xuICAgICAgICAgICAgY29uc3Qgb2xkTG9hZGFibGUgPSAoX3ByZXZpb3VzVHJlZSRhdG9tVmFsID0gcHJldmlvdXNUcmVlLmF0b21WYWx1ZXMuZ2V0KGtleSkpICE9PSBudWxsICYmIF9wcmV2aW91c1RyZWUkYXRvbVZhbCAhPT0gdm9pZCAwID8gX3ByZXZpb3VzVHJlZSRhdG9tVmFsIDogZGVmYXVsdExvYWRhYmxlO1xuICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBvbGRMb2FkYWJsZS5zdGF0ZSA9PT0gJ2hhc1ZhbHVlJyA/IG9sZExvYWRhYmxlLmNvbnRlbnRzIDogREVGQVVMVF9WQUxVRSQ3OyAvLyBUT0RPIFRoaXMgaXNuJ3QgYWN0dWFsbHkgdmFsaWQsIHVzZSBhcyBhIHBsYWNlaG9sZGVyIGZvciBub3cuXG4gICAgICAgICAgICAvLyBJZ25vcmUgYXRvbSB2YWx1ZSBjaGFuZ2VzIHRoYXQgd2VyZSBzZXQgdmlhIHNldFNlbGYoKSBpbiB0aGUgc2FtZSBlZmZlY3QuXG4gICAgICAgICAgICAvLyBXZSB3aWxsIHN0aWxsIHByb3Blcmx5IGNhbGwgdGhlIGhhbmRsZXIgaWYgdGhlcmUgd2FzIGEgc3Vic2VxdWVudFxuICAgICAgICAgICAgLy8gc2V0IGZyb20gc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gYXRvbSBlZmZlY3Qgd2hpY2ggd2FzIGJhdGNoZWRcbiAgICAgICAgICAgIC8vIHdpdGggdGhlIGBzZXRTZWxmKClgIGNhbGwuICBIb3dldmVyLCB3ZSBtYXkgaW5jb3JyZWN0bHkgaWdub3JlXG4gICAgICAgICAgICAvLyB0aGUgaGFuZGxlciBpZiB0aGUgc3Vic2VxdWVudCBiYXRjaGVkIGNhbGwgaGFwcGVucyB0byBzZXQgdGhlXG4gICAgICAgICAgICAvLyBhdG9tIHRvIHRoZSBleGFjdCBzYW1lIHZhbHVlIGFzIHRoZSBgc2V0U2VsZigpYC4gICBCdXQsIGluIHRoYXRcbiAgICAgICAgICAgIC8vIGNhc2UsIGl0IHdhcyBraW5kIG9mIGEgbm9vcCwgc28gdGhlIHNlbWFudGljcyBhcmUgZGViYXRhYmxlLi5cblxuICAgICAgICAgICAgaWYgKCgoX3BlbmRpbmdTZXRTZWxmID0gcGVuZGluZ1NldFNlbGYpID09PSBudWxsIHx8IF9wZW5kaW5nU2V0U2VsZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3BlbmRpbmdTZXRTZWxmLmVmZmVjdCkgIT09IGVmZmVjdCB8fCAoKF9wZW5kaW5nU2V0U2VsZjIgPSBwZW5kaW5nU2V0U2VsZikgPT09IG51bGwgfHwgX3BlbmRpbmdTZXRTZWxmMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3BlbmRpbmdTZXRTZWxmMi52YWx1ZSkgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgIGhhbmRsZXIobmV3VmFsdWUsIG9sZFZhbHVlLCAhY3VycmVudFRyZWUuYXRvbVZhbHVlcy5oYXMoa2V5KSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCgoX3BlbmRpbmdTZXRTZWxmMyA9IHBlbmRpbmdTZXRTZWxmKSA9PT0gbnVsbCB8fCBfcGVuZGluZ1NldFNlbGYzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcGVuZGluZ1NldFNlbGYzLmVmZmVjdCkgPT09IGVmZmVjdCkge1xuICAgICAgICAgICAgICBwZW5kaW5nU2V0U2VsZiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBrZXkpO1xuICAgICAgfTtcblxuICAgICAgZm9yIChjb25zdCBlZmZlY3Qgb2YgKF9vcHRpb25zJGVmZmVjdHNfVU5TVCA9IG9wdGlvbnMuZWZmZWN0c19VTlNUQUJMRSkgIT09IG51bGwgJiYgX29wdGlvbnMkZWZmZWN0c19VTlNUICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRlZmZlY3RzX1VOU1QgOiBbXSkge1xuICAgICAgICB2YXIgX29wdGlvbnMkZWZmZWN0c19VTlNUO1xuXG4gICAgICAgIGNvbnN0IGNsZWFudXAgPSBlZmZlY3Qoe1xuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgdHJpZ2dlcixcbiAgICAgICAgICBzZXRTZWxmOiBzZXRTZWxmKGVmZmVjdCksXG4gICAgICAgICAgcmVzZXRTZWxmOiByZXNldFNlbGYoZWZmZWN0KSxcbiAgICAgICAgICBvblNldDogb25TZXQoZWZmZWN0KSxcbiAgICAgICAgICBnZXRQcm9taXNlLFxuICAgICAgICAgIGdldExvYWRhYmxlLFxuICAgICAgICAgIGdldEluZm9fVU5TVEFCTEVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGNsZWFudXAgIT0gbnVsbCkge1xuICAgICAgICAgIHZhciBfY2xlYW51cEVmZmVjdHNCeVN0b3I7XG5cbiAgICAgICAgICBjbGVhbnVwRWZmZWN0c0J5U3RvcmUuc2V0KHN0b3JlLCBbLi4uKChfY2xlYW51cEVmZmVjdHNCeVN0b3IgPSBjbGVhbnVwRWZmZWN0c0J5U3RvcmUuZ2V0KHN0b3JlKSkgIT09IG51bGwgJiYgX2NsZWFudXBFZmZlY3RzQnlTdG9yICE9PSB2b2lkIDAgPyBfY2xlYW51cEVmZmVjdHNCeVN0b3IgOiBbXSksIGNsZWFudXBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkdXJpbmdJbml0ID0gZmFsc2U7XG4gICAgfSAvLyBNdXRhdGUgaW5pdGlhbCBzdGF0ZSBpbiBwbGFjZSBzaW5jZSB3ZSBrbm93IHRoZXJlIGFyZSBubyBvdGhlciBzdWJzY3JpYmVyc1xuICAgIC8vIHNpbmNlIHdlIGFyZSB0aGUgb25lcyBpbml0aWFsaXppbmcgb24gZmlyc3QgdXNlLlxuXG5cbiAgICBpZiAoIShpbml0VmFsdWUgaW5zdGFuY2VvZiBEZWZhdWx0VmFsdWUkMikpIHtcbiAgICAgIHZhciBfc3RvcmUkZ2V0U3RhdGUkbmV4dFQ1O1xuXG4gICAgICBjb25zdCBmcm96ZW5Jbml0VmFsdWUgPSBtYXliZUZyZWV6ZVZhbHVlT3JQcm9taXNlKGluaXRWYWx1ZSk7XG4gICAgICBjb25zdCBpbml0TG9hZGFibGUgPSBSZWNvaWxfaXNQcm9taXNlKGZyb3plbkluaXRWYWx1ZSkgPyBsb2FkYWJsZVdpdGhQcm9taXNlJDIod3JhcFBlbmRpbmdQcm9taXNlKHN0b3JlLCBmcm96ZW5Jbml0VmFsdWUpKSA6IGxvYWRhYmxlV2l0aFZhbHVlJDMoZnJvemVuSW5pdFZhbHVlKTtcbiAgICAgIGluaXRTdGF0ZS5hdG9tVmFsdWVzLnNldChrZXksIGluaXRMb2FkYWJsZSk7IC8vIElmIHRoZXJlIGlzIGEgcGVuZGluZyB0cmFuc2FjdGlvbiwgdGhlbiBhbHNvIG11dGF0ZSB0aGUgbmV4dCBzdGF0ZSB0cmVlLlxuICAgICAgLy8gVGhpcyBjb3VsZCBoYXBwZW4gaWYgdGhlIGF0b20gd2FzIGZpcnN0IGluaXRpYWxpemVkIGluIGFuIGFjdGlvbiB0aGF0XG4gICAgICAvLyBhbHNvIHVwZGF0ZWQgc29tZSBvdGhlciBhdG9tJ3Mgc3RhdGUuXG5cbiAgICAgIChfc3RvcmUkZ2V0U3RhdGUkbmV4dFQ1ID0gc3RvcmUuZ2V0U3RhdGUoKS5uZXh0VHJlZSkgPT09IG51bGwgfHwgX3N0b3JlJGdldFN0YXRlJG5leHRUNSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0b3JlJGdldFN0YXRlJG5leHRUNS5hdG9tVmFsdWVzLnNldChrZXksIGluaXRMb2FkYWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHZhciBfY2xlYW51cEVmZmVjdHNCeVN0b3IyO1xuXG4gICAgICBsaXZlU3RvcmVzQ291bnQtLTtcbiAgICAgIChfY2xlYW51cEVmZmVjdHNCeVN0b3IyID0gY2xlYW51cEVmZmVjdHNCeVN0b3JlLmdldChzdG9yZSkpID09PSBudWxsIHx8IF9jbGVhbnVwRWZmZWN0c0J5U3RvcjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jbGVhbnVwRWZmZWN0c0J5U3RvcjIuZm9yRWFjaChjbGVhbnVwID0+IGNsZWFudXAoKSk7XG4gICAgICBjbGVhbnVwRWZmZWN0c0J5U3RvcmUuZGVsZXRlKHN0b3JlKTtcbiAgICAgIHN0b3JlLmdldFN0YXRlKCkua25vd25BdG9tcy5kZWxldGUoa2V5KTsgLy8gRklYTUUgcmVtb3ZlIGtub3duQXRvbXM/XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZWtBdG9tKF9zdG9yZSwgc3RhdGUpIHtcbiAgICB2YXIgX3JlZiwgX3N0YXRlJGF0b21WYWx1ZXMkZ2V0MztcblxuICAgIHJldHVybiAoX3JlZiA9IChfc3RhdGUkYXRvbVZhbHVlcyRnZXQzID0gc3RhdGUuYXRvbVZhbHVlcy5nZXQoa2V5KSkgIT09IG51bGwgJiYgX3N0YXRlJGF0b21WYWx1ZXMkZ2V0MyAhPT0gdm9pZCAwID8gX3N0YXRlJGF0b21WYWx1ZXMkZ2V0MyA6IGNhY2hlZEFuc3dlckZvclVudmFsaWRhdGVkVmFsdWUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBkZWZhdWx0TG9hZGFibGU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRBdG9tKF9zdG9yZSwgc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUuYXRvbVZhbHVlcy5oYXMoa2V5KSkge1xuICAgICAgLy8gQXRvbSB2YWx1ZSBpcyBzdG9yZWQgaW4gc3RhdGU6XG4gICAgICByZXR1cm4gUmVjb2lsX251bGx0aHJvd3Moc3RhdGUuYXRvbVZhbHVlcy5nZXQoa2V5KSk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5oYXMoa2V5KSkge1xuICAgICAgLy8gQXRvbSB2YWx1ZSBpcyBzdG9yZWQgYnV0IG5lZWRzIHZhbGlkYXRpb24gYmVmb3JlIHVzZS5cbiAgICAgIC8vIFdlIG1pZ2h0IGhhdmUgYWxyZWFkeSB2YWxpZGF0ZWQgaXQgYW5kIGhhdmUgYSBjYWNoZWQgdmFsaWRhdGVkIHZhbHVlOlxuICAgICAgaWYgKGNhY2hlZEFuc3dlckZvclVudmFsaWRhdGVkVmFsdWUgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBlcnNpc3RlbmNlID09IG51bGwpIHtcbiAgICAgICAgUmVjb2lsX2V4cGVjdGF0aW9uVmlvbGF0aW9uKGBUcmllZCB0byByZXN0b3JlIGEgcGVyc2lzdGVkIHZhbHVlIGZvciBhdG9tICR7a2V5fSBidXQgaXQgaGFzIG5vIHBlcnNpc3RlbmNlIHNldHRpbmdzLmApO1xuICAgICAgICByZXR1cm4gZGVmYXVsdExvYWRhYmxlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub252YWxpZGF0ZWRWYWx1ZSA9IHN0YXRlLm5vbnZhbGlkYXRlZEF0b21zLmdldChrZXkpO1xuICAgICAgY29uc3QgdmFsaWRhdG9yUmVzdWx0ID0gcGVyc2lzdGVuY2UudmFsaWRhdG9yKG5vbnZhbGlkYXRlZFZhbHVlLCBERUZBVUxUX1ZBTFVFJDcpO1xuICAgICAgY29uc3QgdmFsaWRhdGVkVmFsdWVMb2FkYWJsZSA9IHZhbGlkYXRvclJlc3VsdCBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQyID8gZGVmYXVsdExvYWRhYmxlIDogbG9hZGFibGVXaXRoVmFsdWUkMyh2YWxpZGF0b3JSZXN1bHQpO1xuICAgICAgY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZSA9IHZhbGlkYXRlZFZhbHVlTG9hZGFibGU7XG4gICAgICByZXR1cm4gY2FjaGVkQW5zd2VyRm9yVW52YWxpZGF0ZWRWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRlZmF1bHRMb2FkYWJsZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZhbGlkYXRlQXRvbSgpIHtcbiAgICBjYWNoZWRBbnN3ZXJGb3JVbnZhbGlkYXRlZFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0QXRvbShfc3RvcmUsIHN0YXRlLCBuZXdWYWx1ZSkge1xuICAgIC8vIEJhaWwgb3V0IGlmIHdlJ3JlIGJlaW5nIHNldCB0byB0aGUgZXhpc3RpbmcgdmFsdWUsIG9yIGlmIHdlJ3JlIGJlaW5nXG4gICAgLy8gcmVzZXQgYnV0IGhhdmUgbm8gc3RvcmVkIHZhbHVlICh2YWxpZGF0ZWQgb3IgdW52YWxpZGF0ZWQpIHRvIHJlc2V0IGZyb206XG4gICAgaWYgKHN0YXRlLmF0b21WYWx1ZXMuaGFzKGtleSkpIHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gUmVjb2lsX251bGx0aHJvd3Moc3RhdGUuYXRvbVZhbHVlcy5nZXQoa2V5KSk7XG5cbiAgICAgIGlmIChleGlzdGluZy5zdGF0ZSA9PT0gJ2hhc1ZhbHVlJyAmJiBuZXdWYWx1ZSA9PT0gZXhpc3RpbmcuY29udGVudHMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXAoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFzdGF0ZS5ub252YWxpZGF0ZWRBdG9tcy5oYXMoa2V5KSAmJiBuZXdWYWx1ZSBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQyKSB7XG4gICAgICByZXR1cm4gbmV3IE1hcCgpO1xuICAgIH1cblxuICAgIG1heWJlRnJlZXplVmFsdWVPclByb21pc2UobmV3VmFsdWUpO1xuICAgIGNhY2hlZEFuc3dlckZvclVudmFsaWRhdGVkVmFsdWUgPSB1bmRlZmluZWQ7IC8vIGNhbiBiZSByZWxlYXNlZCBub3cgaWYgaXQgd2FzIHByZXZpb3VzbHkgaW4gdXNlXG5cbiAgICByZXR1cm4gbmV3IE1hcCgpLnNldChrZXksIGxvYWRhYmxlV2l0aFZhbHVlJDMobmV3VmFsdWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZUF0b20oKSB7XG4gICAgcmV0dXJuIGdldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQyKGtleSkgIT09IHVuZGVmaW5lZCAmJiBsaXZlU3RvcmVzQ291bnQgPD0gMDtcbiAgfVxuXG4gIGNvbnN0IG5vZGUgPSByZWdpc3Rlck5vZGUkMih7XG4gICAga2V5LFxuICAgIG5vZGVUeXBlOiAnYXRvbScsXG4gICAgcGVlazogcGVla0F0b20sXG4gICAgZ2V0OiBnZXRBdG9tLFxuICAgIHNldDogc2V0QXRvbSxcbiAgICBpbml0OiBpbml0QXRvbSxcbiAgICBpbnZhbGlkYXRlOiBpbnZhbGlkYXRlQXRvbSxcbiAgICBzaG91bGREZWxldGVDb25maWdPblJlbGVhc2U6IHNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZUF0b20sXG4gICAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IG9wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHksXG4gICAgcGVyc2lzdGVuY2VfVU5TVEFCTEU6IG9wdGlvbnMucGVyc2lzdGVuY2VfVU5TVEFCTEUgPyB7XG4gICAgICB0eXBlOiBvcHRpb25zLnBlcnNpc3RlbmNlX1VOU1RBQkxFLnR5cGUsXG4gICAgICBiYWNrQnV0dG9uOiBvcHRpb25zLnBlcnNpc3RlbmNlX1VOU1RBQkxFLmJhY2tCdXR0b25cbiAgICB9IDogdW5kZWZpbmVkLFxuICAgIHNob3VsZFJlc3RvcmVGcm9tU25hcHNob3RzOiB0cnVlLFxuICAgIHJldGFpbmVkQnlcbiAgfSk7XG4gIHJldHVybiBub2RlO1xufSAvLyBwcmV0dGllci1pZ25vcmVcblxuXG5mdW5jdGlvbiBhdG9tKG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5rZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBSZWNvaWxfZXJyKCdBIGtleSBvcHRpb24gd2l0aCBhIHVuaXF1ZSBzdHJpbmcgdmFsdWUgbXVzdCBiZSBwcm92aWRlZCB3aGVuIGNyZWF0aW5nIGFuIGF0b20uJyk7XG4gICAgfVxuXG4gICAgaWYgKCEoJ2RlZmF1bHQnIGluIG9wdGlvbnMpKSB7XG4gICAgICB0aHJvdyBSZWNvaWxfZXJyKCdBIGRlZmF1bHQgdmFsdWUgbXVzdCBiZSBzcGVjaWZpZWQgd2hlbiBjcmVhdGluZyBhbiBhdG9tLicpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBkZWZhdWx0OiBvcHRpb25zRGVmYXVsdCxcbiAgICAvLyBAZmItb25seTogc2NvcGVSdWxlc19BUFBFTkRfT05MWV9SRUFEX1RIRV9ET0NTLFxuICAgIC4uLnJlc3RPcHRpb25zXG4gIH0gPSBvcHRpb25zO1xuXG4gIGlmIChpc1JlY29pbFZhbHVlJDQob3B0aW9uc0RlZmF1bHQpIC8vIENvbnRpbnVlIHRvIHVzZSBhdG9tV2l0aEZhbGxiYWNrIGZvciBwcm9taXNlIGRlZmF1bHRzIGZvciBzY29wZWQgYXRvbXNcbiAgLy8gZm9yIG5vdywgc2luY2Ugc2NvcGVkIGF0b21zIGRvbid0IHN1cHBvcnQgYXN5bmMgZGVmYXVsdHNcbiAgLy8gQGZiLW9ubHk6IHx8IChpc1Byb21pc2Uob3B0aW9uc0RlZmF1bHQpICYmIHNjb3BlUnVsZXNfQVBQRU5EX09OTFlfUkVBRF9USEVfRE9DUylcbiAgKSB7XG4gICAgICByZXR1cm4gYXRvbVdpdGhGYWxsYmFjayh7IC4uLnJlc3RPcHRpb25zLFxuICAgICAgICBkZWZhdWx0OiBvcHRpb25zRGVmYXVsdCAvLyBAZmItb25seTogc2NvcGVSdWxlc19BUFBFTkRfT05MWV9SRUFEX1RIRV9ET0NTLFxuXG4gICAgICB9KTsgLy8gQGZiLW9ubHk6IH0gZWxzZSBpZiAoc2NvcGVSdWxlc19BUFBFTkRfT05MWV9SRUFEX1RIRV9ET0NTICYmICFpc1Byb21pc2Uob3B0aW9uc0RlZmF1bHQpKSB7XG4gICAgICAvLyBAZmItb25seTogcmV0dXJuIHNjb3BlZEF0b208VD4oe1xuICAgICAgLy8gQGZiLW9ubHk6IC4uLnJlc3RPcHRpb25zLFxuICAgICAgLy8gQGZiLW9ubHk6IGRlZmF1bHQ6IG9wdGlvbnNEZWZhdWx0LFxuICAgICAgLy8gQGZiLW9ubHk6IHNjb3BlUnVsZXNfQVBQRU5EX09OTFlfUkVBRF9USEVfRE9DUyxcbiAgICAgIC8vIEBmYi1vbmx5OiB9KTtcbiAgICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlQXRvbSh7IC4uLnJlc3RPcHRpb25zLFxuICAgICAgZGVmYXVsdDogb3B0aW9uc0RlZmF1bHRcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhdG9tV2l0aEZhbGxiYWNrKG9wdGlvbnMpIHtcbiAgY29uc3QgYmFzZSA9IGF0b20oeyAuLi5vcHRpb25zLFxuICAgIGRlZmF1bHQ6IERFRkFVTFRfVkFMVUUkNyxcbiAgICBwZXJzaXN0ZW5jZV9VTlNUQUJMRTogb3B0aW9ucy5wZXJzaXN0ZW5jZV9VTlNUQUJMRSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogeyAuLi5vcHRpb25zLnBlcnNpc3RlbmNlX1VOU1RBQkxFLFxuICAgICAgdmFsaWRhdG9yOiBzdG9yZWRWYWx1ZSA9PiBzdG9yZWRWYWx1ZSBpbnN0YW5jZW9mIERlZmF1bHRWYWx1ZSQyID8gc3RvcmVkVmFsdWUgOiBSZWNvaWxfbnVsbHRocm93cyhvcHRpb25zLnBlcnNpc3RlbmNlX1VOU1RBQkxFKS52YWxpZGF0b3Ioc3RvcmVkVmFsdWUsIERFRkFVTFRfVkFMVUUkNylcbiAgICB9LFxuICAgIC8vIFRPRE8gSGFjayBmb3Igbm93LlxuICAgIC8vIGZsb3dsaW50LW5leHQtbGluZSB1bmNsZWFyLXR5cGU6IG9mZlxuICAgIGVmZmVjdHNfVU5TVEFCTEU6IG9wdGlvbnMuZWZmZWN0c19VTlNUQUJMRVxuICB9KTtcbiAgY29uc3Qgc2VsID0gUmVjb2lsX3NlbGVjdG9yKHtcbiAgICBrZXk6IGAke29wdGlvbnMua2V5fV9fd2l0aEZhbGxiYWNrYCxcbiAgICBnZXQ6ICh7XG4gICAgICBnZXRcbiAgICB9KSA9PiB7XG4gICAgICBjb25zdCBiYXNlVmFsdWUgPSBnZXQoYmFzZSk7XG4gICAgICByZXR1cm4gYmFzZVZhbHVlIGluc3RhbmNlb2YgRGVmYXVsdFZhbHVlJDIgPyBvcHRpb25zLmRlZmF1bHQgOiBiYXNlVmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6ICh7XG4gICAgICBzZXRcbiAgICB9LCBuZXdWYWx1ZSkgPT4gc2V0KGJhc2UsIG5ld1ZhbHVlKSxcbiAgICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogb3B0aW9ucy5kYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eVxuICB9KTtcbiAgc2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDEoc2VsLmtleSwgZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDIob3B0aW9ucy5rZXkpKTtcbiAgcmV0dXJuIHNlbDtcbn1cblxudmFyIFJlY29pbF9hdG9tID0gYXRvbTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZW1haWxzIG9uY2FsbCtyZWNvaWxcbiAqIFxuICogQGZvcm1hdFxuICovXG5cbmNsYXNzIE1hcENhY2hlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHZhciBfb3B0aW9ucyRtYXBLZXk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfbWFwXCIsIHZvaWQgMCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfa2V5TWFwcGVyXCIsIHZvaWQgMCk7XG5cbiAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fa2V5TWFwcGVyID0gKF9vcHRpb25zJG1hcEtleSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tYXBLZXkpICE9PSBudWxsICYmIF9vcHRpb25zJG1hcEtleSAhPT0gdm9pZCAwID8gX29wdGlvbnMkbWFwS2V5IDogdiA9PiB2O1xuICB9XG5cbiAgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLnNpemU7XG4gIH1cblxuICBoYXMoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5oYXModGhpcy5fa2V5TWFwcGVyKGtleSkpO1xuICB9XG5cbiAgZ2V0KGtleSkge1xuICAgIHJldHVybiB0aGlzLl9tYXAuZ2V0KHRoaXMuX2tleU1hcHBlcihrZXkpKTtcbiAgfVxuXG4gIHNldChrZXksIHZhbCkge1xuICAgIHRoaXMuX21hcC5zZXQodGhpcy5fa2V5TWFwcGVyKGtleSksIHZhbCk7XG4gIH1cblxuICBkZWxldGUoa2V5KSB7XG4gICAgdGhpcy5fbWFwLmRlbGV0ZSh0aGlzLl9rZXlNYXBwZXIoa2V5KSk7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLl9tYXAuY2xlYXIoKTtcbiAgfVxuXG59XG5cbnZhciBSZWNvaWxfTWFwQ2FjaGUgPSB7XG4gIE1hcENhY2hlXG59O1xuXG52YXIgUmVjb2lsX01hcENhY2hlXzEgPSBSZWNvaWxfTWFwQ2FjaGUuTWFwQ2FjaGU7XG5cbnZhciBSZWNvaWxfTWFwQ2FjaGUkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBNYXBDYWNoZTogUmVjb2lsX01hcENhY2hlXzFcbn0pO1xuXG5jb25zdCB7XG4gIExSVUNhY2hlOiBMUlVDYWNoZSQyXG59ID0gUmVjb2lsX0xSVUNhY2hlJDE7XG5cbmNvbnN0IHtcbiAgTWFwQ2FjaGU6IE1hcENhY2hlJDFcbn0gPSBSZWNvaWxfTWFwQ2FjaGUkMTtcblxuY29uc3QgZGVmYXVsdFBvbGljeSQxID0ge1xuICBlcXVhbGl0eTogJ3JlZmVyZW5jZScsXG4gIGV2aWN0aW9uOiAnbm9uZScsXG4gIG1heFNpemU6IEluZmluaXR5XG59O1xuXG5mdW5jdGlvbiBjYWNoZUZyb21Qb2xpY3koe1xuICBlcXVhbGl0eSA9IGRlZmF1bHRQb2xpY3kkMS5lcXVhbGl0eSxcbiAgZXZpY3Rpb24gPSBkZWZhdWx0UG9saWN5JDEuZXZpY3Rpb24sXG4gIG1heFNpemUgPSBkZWZhdWx0UG9saWN5JDEubWF4U2l6ZVxufSA9IGRlZmF1bHRQb2xpY3kkMSkge1xuICBjb25zdCB2YWx1ZU1hcHBlciA9IGdldFZhbHVlTWFwcGVyJDEoZXF1YWxpdHkpO1xuICBjb25zdCBjYWNoZSA9IGdldENhY2hlKGV2aWN0aW9uLCBtYXhTaXplLCB2YWx1ZU1hcHBlcik7XG4gIHJldHVybiBjYWNoZTtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWVNYXBwZXIkMShlcXVhbGl0eSkge1xuICBzd2l0Y2ggKGVxdWFsaXR5KSB7XG4gICAgY2FzZSAncmVmZXJlbmNlJzpcbiAgICAgIHJldHVybiB2YWwgPT4gdmFsO1xuXG4gICAgY2FzZSAndmFsdWUnOlxuICAgICAgcmV0dXJuIHZhbCA9PiBSZWNvaWxfc3RhYmxlU3RyaW5naWZ5KHZhbCk7XG4gIH1cblxuICB0aHJvdyBSZWNvaWxfZXJyKGBVbnJlY29nbml6ZWQgZXF1YWxpdHkgcG9saWN5ICR7ZXF1YWxpdHl9YCk7XG59XG5cbmZ1bmN0aW9uIGdldENhY2hlKGV2aWN0aW9uLCBtYXhTaXplLCBtYXBLZXkpIHtcbiAgc3dpdGNoIChldmljdGlvbikge1xuICAgIGNhc2UgJ2tlZXAtYWxsJzpcbiAgICAgIC8vICRGbG93Rml4TWVbbWV0aG9kLXVuYmluZGluZ11cbiAgICAgIHJldHVybiBuZXcgTWFwQ2FjaGUkMSh7XG4gICAgICAgIG1hcEtleVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdscnUnOlxuICAgICAgLy8gJEZsb3dGaXhNZVttZXRob2QtdW5iaW5kaW5nXVxuICAgICAgcmV0dXJuIG5ldyBMUlVDYWNoZSQyKHtcbiAgICAgICAgbWFwS2V5LFxuICAgICAgICBtYXhTaXplOiBSZWNvaWxfbnVsbHRocm93cyhtYXhTaXplKVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdtb3N0LXJlY2VudCc6XG4gICAgICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddXG4gICAgICByZXR1cm4gbmV3IExSVUNhY2hlJDIoe1xuICAgICAgICBtYXBLZXksXG4gICAgICAgIG1heFNpemU6IDFcbiAgICAgIH0pO1xuICB9XG5cbiAgdGhyb3cgUmVjb2lsX2VycihgVW5yZWNvZ25pemVkIGV2aWN0aW9uIHBvbGljeSAke2V2aWN0aW9ufWApO1xufVxuXG52YXIgUmVjb2lsX2NhY2hlRnJvbVBvbGljeSA9IGNhY2hlRnJvbVBvbGljeTtcblxuY29uc3Qge1xuICBzZXRDb25maWdEZWxldGlvbkhhbmRsZXI6IHNldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQyXG59ID0gUmVjb2lsX05vZGU7XG5cblxuXG5cblxuLy8gUHJvY2VzcyBzY29wZVJ1bGVzIHRvIGhhbmRsZSBhbnkgZW50cmllcyB3aGljaCBhcmUgZnVuY3Rpb25zIHRha2luZyBwYXJhbWV0ZXJzXG4vLyBwcmV0dGllci1pZ25vcmVcbi8vIEBmYi1vbmx5OiBmdW5jdGlvbiBtYXBTY29wZVJ1bGVzPFA+KFxuLy8gQGZiLW9ubHk6IHNjb3BlUnVsZXM/OiBQYXJhbWV0ZXJpemVkU2NvcGVSdWxlczxQPixcbi8vIEBmYi1vbmx5OiBwYXJhbTogUCxcbi8vIEBmYi1vbmx5OiApOiBTY29wZVJ1bGVzIHwgdm9pZCB7XG4vLyBAZmItb25seTogcmV0dXJuIHNjb3BlUnVsZXM/Lm1hcChydWxlID0+XG4vLyBAZmItb25seTogQXJyYXkuaXNBcnJheShydWxlKVxuLy8gQGZiLW9ubHk6ID8gcnVsZS5tYXAoZW50cnkgPT4gKHR5cGVvZiBlbnRyeSA9PT0gJ2Z1bmN0aW9uJyA/IGVudHJ5KHBhcmFtKSA6IGVudHJ5KSlcbi8vIEBmYi1vbmx5OiA6IHJ1bGUsXG4vLyBAZmItb25seTogKTtcbi8vIEBmYi1vbmx5OiB9XG5cbi8qXG5BIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gYXRvbSBiYXNlZCBvbiB0aGUgaW5wdXQgcGFyYW1ldGVyLlxuXG5FYWNoIHVuaXF1ZSBwYXJhbWV0ZXIgcmV0dXJucyBhIHVuaXF1ZSBhdG9tLiBFLmcuLFxuXG4gIGNvbnN0IGYgPSBhdG9tRmFtaWx5KC4uLik7XG4gIGYoe2E6IDF9KSA9PiBhbiBhdG9tXG4gIGYoe2E6IDJ9KSA9PiBhIGRpZmZlcmVudCBhdG9tXG5cblRoaXMgYWxsb3dzIGNvbXBvbmVudHMgdG8gcGVyc2lzdCBsb2NhbCwgcHJpdmF0ZSBzdGF0ZSB1c2luZyBhdG9tcy4gIEVhY2hcbmluc3RhbmNlIG9mIHRoZSBjb21wb25lbnQgbWF5IGhhdmUgYSBkaWZmZXJlbnQga2V5LCB3aGljaCBpdCB1c2VzIGFzIHRoZVxucGFyYW1ldGVyIGZvciBhIGZhbWlseSBvZiBhdG9tczsgaW4gdGhpcyB3YXksIGVhY2ggY29tcG9uZW50IHdpbGwgaGF2ZVxuaXRzIG93biBhdG9tIG5vdCBzaGFyZWQgYnkgb3RoZXIgaW5zdGFuY2VzLiAgVGhlc2Ugc3RhdGUga2V5cyBtYXkgYmUgY29tcG9zZWRcbmludG8gY2hpbGRyZW4ncyBzdGF0ZSBrZXlzIGFzIHdlbGwuXG4qL1xuZnVuY3Rpb24gYXRvbUZhbWlseShvcHRpb25zKSB7XG4gIHZhciBfb3B0aW9ucyRjYWNoZVBvbGljeUYsIF9vcHRpb25zJGNhY2hlUG9saWN5RjI7XG5cbiAgY29uc3QgYXRvbUNhY2hlID0gUmVjb2lsX2NhY2hlRnJvbVBvbGljeSh7XG4gICAgZXF1YWxpdHk6IChfb3B0aW9ucyRjYWNoZVBvbGljeUYgPSAoX29wdGlvbnMkY2FjaGVQb2xpY3lGMiA9IG9wdGlvbnMuY2FjaGVQb2xpY3lGb3JQYXJhbXNfVU5TVEFCTEUpID09PSBudWxsIHx8IF9vcHRpb25zJGNhY2hlUG9saWN5RjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGNhY2hlUG9saWN5RjIuZXF1YWxpdHkpICE9PSBudWxsICYmIF9vcHRpb25zJGNhY2hlUG9saWN5RiAhPT0gdm9pZCAwID8gX29wdGlvbnMkY2FjaGVQb2xpY3lGIDogJ3ZhbHVlJyxcbiAgICBldmljdGlvbjogJ2tlZXAtYWxsJ1xuICB9KTsgLy8gU2ltcGxlIGF0b21GYW1pbHkgaW1wbGVtZW50YXRpb24gdG8gY2FjaGUgaW5kaXZpZHVhbCBhdG9tcyBiYXNlZFxuICAvLyBvbiB0aGUgcGFyYW1ldGVyIHZhbHVlIGVxdWFsaXR5LlxuXG4gIHJldHVybiBwYXJhbXMgPT4ge1xuICAgIHZhciBfc3RhYmxlU3RyaW5naWZ5O1xuXG4gICAgY29uc3QgY2FjaGVkQXRvbSA9IGF0b21DYWNoZS5nZXQocGFyYW1zKTtcblxuICAgIGlmIChjYWNoZWRBdG9tICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBjYWNoZWRBdG9tO1xuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIGNhY2hlUG9saWN5Rm9yUGFyYW1zX1VOU1RBQkxFLFxuICAgICAgLi4uYXRvbU9wdGlvbnNcbiAgICB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBuZXdBdG9tID0gUmVjb2lsX2F0b20oeyAuLi5hdG9tT3B0aW9ucyxcbiAgICAgIGtleTogYCR7b3B0aW9ucy5rZXl9X18keyhfc3RhYmxlU3RyaW5naWZ5ID0gUmVjb2lsX3N0YWJsZVN0cmluZ2lmeShwYXJhbXMpKSAhPT0gbnVsbCAmJiBfc3RhYmxlU3RyaW5naWZ5ICE9PSB2b2lkIDAgPyBfc3RhYmxlU3RyaW5naWZ5IDogJ3ZvaWQnfWAsXG4gICAgICBkZWZhdWx0OiB0eXBlb2Ygb3B0aW9ucy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nID8gLy8gVGhlIGRlZmF1bHQgd2FzIHBhcmFtZXRlcml6ZWRcbiAgICAgIC8vIEZsb3cgZG9lc24ndCBrbm93IHRoYXQgVCBpc24ndCBhIGZ1bmN0aW9uLCBzbyB3ZSBuZWVkIHRvIGNhc2UgdG8gYW55XG4gICAgICBvcHRpb25zLmRlZmF1bHQocGFyYW1zKSAvLyBmbG93bGludC1saW5lIHVuY2xlYXItdHlwZTpvZmZcbiAgICAgIDogLy8gRGVmYXVsdCBtYXkgYmUgYSBzdGF0aWMgdmFsdWUsIHByb21pc2UsIG9yIFJlY29pbFZhbHVlXG4gICAgICBvcHRpb25zLmRlZmF1bHQsXG4gICAgICByZXRhaW5lZEJ5X1VOU1RBQkxFOiB0eXBlb2Ygb3B0aW9ucy5yZXRhaW5lZEJ5X1VOU1RBQkxFID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5yZXRhaW5lZEJ5X1VOU1RBQkxFKHBhcmFtcykgOiBvcHRpb25zLnJldGFpbmVkQnlfVU5TVEFCTEUsXG4gICAgICBlZmZlY3RzX1VOU1RBQkxFOiB0eXBlb2Ygb3B0aW9ucy5lZmZlY3RzX1VOU1RBQkxFID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5lZmZlY3RzX1VOU1RBQkxFKHBhcmFtcykgOiBvcHRpb25zLmVmZmVjdHNfVU5TVEFCTEUgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAvLyBAZmItb25seTogc2NvcGVSdWxlc19BUFBFTkRfT05MWV9SRUFEX1RIRV9ET0NTOiBtYXBTY29wZVJ1bGVzKFxuICAgICAgLy8gQGZiLW9ubHk6IG9wdGlvbnMuc2NvcGVSdWxlc19BUFBFTkRfT05MWV9SRUFEX1RIRV9ET0NTLFxuICAgICAgLy8gQGZiLW9ubHk6IHBhcmFtcyxcbiAgICAgIC8vIEBmYi1vbmx5OiApLFxuXG4gICAgfSk7XG4gICAgYXRvbUNhY2hlLnNldChwYXJhbXMsIG5ld0F0b20pO1xuICAgIHNldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQyKG5ld0F0b20ua2V5LCAoKSA9PiB7XG4gICAgICBhdG9tQ2FjaGUuZGVsZXRlKHBhcmFtcyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ld0F0b207XG4gIH07XG59XG5cbnZhciBSZWNvaWxfYXRvbUZhbWlseSA9IGF0b21GYW1pbHk7XG5cbmNvbnN0IHtcbiAgc2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyOiBzZXRDb25maWdEZWxldGlvbkhhbmRsZXIkM1xufSA9IFJlY29pbF9Ob2RlO1xuXG5cblxuIC8vIEtlZXAgaW4gbWluZCB0aGUgcGFyYW1ldGVyIG5lZWRzIHRvIGJlIHNlcmlhbGl6YWJsZSBhcyBhIGNhaGNoZSBrZXlcbi8vIHVzaW5nIFJlY29pbF9zdGFibGVTdHJpbmdpZnlcblxuXG4vLyBBZGQgYSB1bmlxdWUgaW5kZXggdG8gZWFjaCBzZWxlY3RvciBpbiBjYXNlIHRoZSBjYWNoZSBpbXBsZW1lbnRhdGlvbiBhbGxvd3Ncbi8vIGR1cGxpY2F0ZSBrZXlzIGJhc2VkIG9uIGVxdWl2YWxlbnQgc3RyaW5naWZpZWQgcGFyYW1ldGVyc1xubGV0IG5leHRJbmRleCA9IDA7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cblxuLy8gUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG1lbWJlcnMgb2YgYSBmYW1pbHkgb2Ygc2VsZWN0b3JzIG9mIHRoZSBzYW1lIHR5cGVcbi8vIEUuZy4sXG4vL1xuLy8gY29uc3QgcyA9IHNlbGVjdG9yRmFtaWx5KC4uLik7XG4vLyBzKHthOiAxfSkgPT4gYSBzZWxlY3RvclxuLy8gcyh7YTogMn0pID0+IGEgZGlmZmVyZW50IHNlbGVjdG9yXG4vL1xuLy8gQnkgZGVmYXVsdCwgdGhlIHNlbGVjdG9ycyBhcmUgZGlzdGluZ3Vpc2hlZCBieSBkaXN0aW5jdCB2YWx1ZXMgb2YgdGhlXG4vLyBwYXJhbWV0ZXIgYmFzZWQgb24gdmFsdWUgZXF1YWxpdHksIG5vdCByZWZlcmVuY2UgZXF1YWxpdHkuICBUaGlzIGFsbG93cyB1c2luZ1xuLy8gb2JqZWN0IGxpdGVyYWxzIG9yIG90aGVyIGVxdWl2YWxlbnQgb2JqZWN0cyBhdCBjYWxsc2l0ZXMgdG8gbm90IGNyZWF0ZVxuLy8gZHVwbGljYXRlIGNhY2hlIGVudHJpZXMuICBUaGlzIGJlaGF2aW9yIG1heSBiZSBvdmVycmlkZGVuIHdpdGggdGhlXG4vLyBjYWNoZUltcGxlbWVudGF0aW9uRm9yUGFyYW1zIG9wdGlvbi5cbmZ1bmN0aW9uIHNlbGVjdG9yRmFtaWx5KG9wdGlvbnMpIHtcbiAgdmFyIF9vcHRpb25zJGNhY2hlUG9saWN5RiwgX29wdGlvbnMkY2FjaGVQb2xpY3lGMjtcblxuICBjb25zdCBzZWxlY3RvckNhY2hlID0gUmVjb2lsX2NhY2hlRnJvbVBvbGljeSh7XG4gICAgZXF1YWxpdHk6IChfb3B0aW9ucyRjYWNoZVBvbGljeUYgPSAoX29wdGlvbnMkY2FjaGVQb2xpY3lGMiA9IG9wdGlvbnMuY2FjaGVQb2xpY3lGb3JQYXJhbXNfVU5TVEFCTEUpID09PSBudWxsIHx8IF9vcHRpb25zJGNhY2hlUG9saWN5RjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGNhY2hlUG9saWN5RjIuZXF1YWxpdHkpICE9PSBudWxsICYmIF9vcHRpb25zJGNhY2hlUG9saWN5RiAhPT0gdm9pZCAwID8gX29wdGlvbnMkY2FjaGVQb2xpY3lGIDogJ3ZhbHVlJyxcbiAgICBldmljdGlvbjogJ2tlZXAtYWxsJ1xuICB9KTtcbiAgcmV0dXJuIHBhcmFtcyA9PiB7XG4gICAgdmFyIF9zdGFibGVTdHJpbmdpZnk7XG5cbiAgICBjb25zdCBjYWNoZWRTZWxlY3RvciA9IHNlbGVjdG9yQ2FjaGUuZ2V0KHBhcmFtcyk7XG5cbiAgICBpZiAoY2FjaGVkU2VsZWN0b3IgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNhY2hlZFNlbGVjdG9yO1xuICAgIH1cblxuICAgIGNvbnN0IG15S2V5ID0gYCR7b3B0aW9ucy5rZXl9X19zZWxlY3RvckZhbWlseS8keyhfc3RhYmxlU3RyaW5naWZ5ID0gUmVjb2lsX3N0YWJsZVN0cmluZ2lmeShwYXJhbXMsIHtcbiAgICAgIC8vIEl0IGlzIHBvc3NpYmxlIHRvIHVzZSBmdW5jdGlvbnMgaW4gcGFyYW1ldGVycyBpZiB0aGUgdXNlciB1c2VzXG4gICAgICAvLyBhIGNhY2hlIHdpdGggcmVmZXJlbmNlIGVxdWFsaXR5IHRoYW5rcyB0byB0aGUgaW5jcmVtZW50aW5nIGluZGV4LlxuICAgICAgYWxsb3dGdW5jdGlvbnM6IHRydWVcbiAgICB9KSkgIT09IG51bGwgJiYgX3N0YWJsZVN0cmluZ2lmeSAhPT0gdm9pZCAwID8gX3N0YWJsZVN0cmluZ2lmeSA6ICd2b2lkJ30vJHtuZXh0SW5kZXgrK31gOyAvLyBBcHBlbmQgaW5kZXggaW4gY2FzZSB2YWx1ZXMgc2VyaWFsaXplIHRvIHRoZSBzYW1lIGtleSBzdHJpbmdcblxuICAgIGNvbnN0IG15R2V0ID0gY2FsbGJhY2tzID0+IG9wdGlvbnMuZ2V0KHBhcmFtcykoY2FsbGJhY2tzKTtcblxuICAgIGNvbnN0IG15Q2FjaGVQb2xpY3kgPSBvcHRpb25zLmNhY2hlUG9saWN5X1VOU1RBQkxFO1xuICAgIGNvbnN0IHJldGFpbmVkQnkgPSB0eXBlb2Ygb3B0aW9ucy5yZXRhaW5lZEJ5X1VOU1RBQkxFID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5yZXRhaW5lZEJ5X1VOU1RBQkxFKHBhcmFtcykgOiBvcHRpb25zLnJldGFpbmVkQnlfVU5TVEFCTEU7XG4gICAgbGV0IG5ld1NlbGVjdG9yO1xuXG4gICAgaWYgKG9wdGlvbnMuc2V0ICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IHNldCA9IG9wdGlvbnMuc2V0O1xuXG4gICAgICBjb25zdCBteVNldCA9IChjYWxsYmFja3MsIG5ld1ZhbHVlKSA9PiBzZXQocGFyYW1zKShjYWxsYmFja3MsIG5ld1ZhbHVlKTtcblxuICAgICAgbmV3U2VsZWN0b3IgPSBSZWNvaWxfc2VsZWN0b3Ioe1xuICAgICAgICBrZXk6IG15S2V5LFxuICAgICAgICBnZXQ6IG15R2V0LFxuICAgICAgICBzZXQ6IG15U2V0LFxuICAgICAgICBjYWNoZVBvbGljeV9VTlNUQUJMRTogbXlDYWNoZVBvbGljeSxcbiAgICAgICAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IG9wdGlvbnMuZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHksXG4gICAgICAgIHJldGFpbmVkQnlfVU5TVEFCTEU6IHJldGFpbmVkQnlcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTZWxlY3RvciA9IFJlY29pbF9zZWxlY3Rvcih7XG4gICAgICAgIGtleTogbXlLZXksXG4gICAgICAgIGdldDogbXlHZXQsXG4gICAgICAgIGNhY2hlUG9saWN5X1VOU1RBQkxFOiBteUNhY2hlUG9saWN5LFxuICAgICAgICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogb3B0aW9ucy5kYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eSxcbiAgICAgICAgcmV0YWluZWRCeV9VTlNUQUJMRTogcmV0YWluZWRCeVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2VsZWN0b3JDYWNoZS5zZXQocGFyYW1zLCBuZXdTZWxlY3Rvcik7XG4gICAgc2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDMobmV3U2VsZWN0b3Iua2V5LCAoKSA9PiB7XG4gICAgICBzZWxlY3RvckNhY2hlLmRlbGV0ZShwYXJhbXMpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXdTZWxlY3RvcjtcbiAgfTtcbn1cbi8qIGVzbGludC1lbmFibGUgbm8tcmVkZWNsYXJlICovXG5cblxudmFyIFJlY29pbF9zZWxlY3RvckZhbWlseSA9IHNlbGVjdG9yRmFtaWx5O1xuXG4vLyBmbG93bGludC1uZXh0LWxpbmUgdW5jbGVhci10eXBlOm9mZlxuXG5cbmNvbnN0IGNvbnN0YW50U2VsZWN0b3IgPSBSZWNvaWxfc2VsZWN0b3JGYW1pbHkoe1xuICBrZXk6ICdfX2NvbnN0YW50JyxcbiAgZ2V0OiBjb25zdGFudCA9PiAoKSA9PiBjb25zdGFudCxcbiAgY2FjaGVQb2xpY3lGb3JQYXJhbXNfVU5TVEFCTEU6IHtcbiAgICBlcXVhbGl0eTogJ3JlZmVyZW5jZSdcbiAgfVxufSk7IC8vIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNlbGVjdG9yIHdoaWNoIGFsd2F5cyBwcm9kdWNlcyB0aGVcbi8vIHNhbWUgY29uc3RhbnQgdmFsdWUuICBJdCBtYXkgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdpdGggdGhlXG4vLyBzYW1lIHZhbHVlLCBiYXNlZCBvbiByZWZlcmVuY2UgZXF1YWxpdHksIGFuZCB3aWxsIHByb3ZpZGUgdGhlXG4vLyBzYW1lIHNlbGVjdG9yLlxuXG5mdW5jdGlvbiBjb25zdFNlbGVjdG9yKGNvbnN0YW50KSB7XG4gIHJldHVybiBjb25zdGFudFNlbGVjdG9yKGNvbnN0YW50KTtcbn1cblxudmFyIFJlY29pbF9jb25zdFNlbGVjdG9yID0gY29uc3RTZWxlY3RvcjtcblxuLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTpvZmZcblxuXG5jb25zdCB0aHJvd2luZ1NlbGVjdG9yID0gUmVjb2lsX3NlbGVjdG9yRmFtaWx5KHtcbiAga2V5OiAnX19lcnJvcicsXG4gIGdldDogbWVzc2FnZSA9PiAoKSA9PiB7XG4gICAgdGhyb3cgUmVjb2lsX2VycihtZXNzYWdlKTtcbiAgfSxcbiAgLy8gVE9ETyBXaHk/XG4gIGNhY2hlUG9saWN5Rm9yUGFyYW1zX1VOU1RBQkxFOiB7XG4gICAgZXF1YWxpdHk6ICdyZWZlcmVuY2UnXG4gIH1cbn0pOyAvLyBGdW5jdGlvbiB0aGF0IHJldHVybnMgYSBzZWxlY3RvciB3aGljaCBhbHdheXMgdGhyb3dzIGFuIGVycm9yXG4vLyB3aXRoIHRoZSBwcm92aWRlZCBtZXNzYWdlLlxuXG5mdW5jdGlvbiBlcnJvclNlbGVjdG9yKG1lc3NhZ2UpIHtcbiAgcmV0dXJuIHRocm93aW5nU2VsZWN0b3IobWVzc2FnZSk7XG59XG5cbnZhciBSZWNvaWxfZXJyb3JTZWxlY3RvciA9IGVycm9yU2VsZWN0b3I7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogV3JhcHMgYW5vdGhlciByZWNvaWwgdmFsdWUgYW5kIHByZXZlbnRzIHdyaXRpbmcgdG8gaXQuXG4gKlxuICogQGVtYWlscyBvbmNhbGwrcmVjb2lsXG4gKiBcbiAqIEBmb3JtYXRcbiAqL1xuXG5mdW5jdGlvbiByZWFkT25seVNlbGVjdG9yKGF0b20pIHtcbiAgLy8gZmxvd2xpbnQtbmV4dC1saW5lIHVuY2xlYXItdHlwZTogb2ZmXG4gIHJldHVybiBhdG9tO1xufVxuXG52YXIgUmVjb2lsX3JlYWRPbmx5U2VsZWN0b3IgPSByZWFkT25seVNlbGVjdG9yO1xuXG5jb25zdCB7XG4gIGxvYWRhYmxlV2l0aEVycm9yOiBsb2FkYWJsZVdpdGhFcnJvciQzLFxuICBsb2FkYWJsZVdpdGhQcm9taXNlOiBsb2FkYWJsZVdpdGhQcm9taXNlJDMsXG4gIGxvYWRhYmxlV2l0aFZhbHVlOiBsb2FkYWJsZVdpdGhWYWx1ZSQ0XG59ID0gUmVjb2lsX0xvYWRhYmxlJDE7XG5cblxuXG4gLy8vLy8vLy8vLy8vLy8vLy9cbi8vICBUUlVUSCBUQUJMRVxuLy8vLy8vLy8vLy8vLy8vLy9cbi8vIERlcGVuZGVuY2llcyAgICAgICAgd2FpdEZvck5vbmUgICAgICAgICB3YWl0Rm9yQW55ICAgICAgICB3YWl0Rm9yQWxsICAgICAgIHdhaXRGb3JBbGxTZXR0bGVkXG4vLyAgW2xvYWRpbmcsIGxvYWRpbmddICBbUHJvbWlzZSwgUHJvbWlzZV0gIFByb21pc2UgICAgICAgICAgIFByb21pc2UgICAgICAgICBQcm9taXNlXG4vLyAgW3ZhbHVlLCBsb2FkaW5nXSAgICBbdmFsdWUsIFByb21pc2VdICAgIFt2YWx1ZSwgUHJvbWlzZV0gIFByb21pc2UgICAgICAgICBQcm9taXNlXG4vLyAgW3ZhbHVlLCB2YWx1ZV0gICAgICBbdmFsdWUsIHZhbHVlXSAgICAgIFt2YWx1ZSwgdmFsdWVdICAgIFt2YWx1ZSwgdmFsdWVdICBbdmFsdWUsIHZhbHVlXVxuLy9cbi8vICBbZXJyb3IsIGxvYWRpbmddICAgIFtFcnJvciwgUHJvbWlzZV0gICAgW0Vycm9yLCBQcm9taXNlXSAgRXJyb3IgICAgICAgICAgIFByb21pc2Vcbi8vICBbZXJyb3IsIGVycm9yXSAgICAgIFtFcnJvciwgRXJyb3JdICAgICAgW0Vycm9yLCBFcnJvcl0gICAgRXJyb3IgICAgICAgICAgIFtlcnJvciwgZXJyb3JdXG4vLyAgW3ZhbHVlLCBlcnJvcl0gICAgICBbdmFsdWUsIEVycm9yXSAgICAgIFt2YWx1ZSwgRXJyb3JdICAgIEVycm9yICAgICAgICAgICBbdmFsdWUsIGVycm9yXVxuLy8gSXNzdWUgcGFyYWxsZWwgcmVxdWVzdHMgZm9yIGFsbCBkZXBlbmRlbmNpZXMgYW5kIHJldHVybiB0aGUgY3VycmVudFxuLy8gc3RhdHVzIGlmIHRoZXkgaGF2ZSByZXN1bHRzLCBoYXZlIHNvbWUgZXJyb3IsIG9yIGFyZSBzdGlsbCBwZW5kaW5nLlxuXG5cbmZ1bmN0aW9uIGNvbmN1cnJlbnRSZXF1ZXN0cyhnZXRSZWNvaWxWYWx1ZSwgZGVwcykge1xuICBjb25zdCByZXN1bHRzID0gQXJyYXkoZGVwcy5sZW5ndGgpLmZpbGwodW5kZWZpbmVkKTtcbiAgY29uc3QgZXhjZXB0aW9ucyA9IEFycmF5KGRlcHMubGVuZ3RoKS5maWxsKHVuZGVmaW5lZCk7XG5cbiAgZm9yIChjb25zdCBbaSwgZGVwXSBvZiBkZXBzLmVudHJpZXMoKSkge1xuICAgIHRyeSB7XG4gICAgICByZXN1bHRzW2ldID0gZ2V0UmVjb2lsVmFsdWUoZGVwKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBleGNlcHRpb25zIGNhbiBlaXRoZXIgYmUgUHJvbWlzZXMgb2YgcGVuZGluZyByZXN1bHRzIG9yIHJlYWwgZXJyb3JzXG4gICAgICBleGNlcHRpb25zW2ldID0gZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW3Jlc3VsdHMsIGV4Y2VwdGlvbnNdO1xufVxuXG5mdW5jdGlvbiBpc0Vycm9yKGV4cCkge1xuICByZXR1cm4gZXhwICE9IG51bGwgJiYgIVJlY29pbF9pc1Byb21pc2UoZXhwKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwRGVwZW5kZW5jaWVzKGRlcGVuZGVuY2llcykge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShkZXBlbmRlbmNpZXMpID8gZGVwZW5kZW5jaWVzIDogT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGVwZW5kZW5jaWVzKS5tYXAoa2V5ID0+IGRlcGVuZGVuY2llc1trZXldKTtcbn1cblxuZnVuY3Rpb24gd3JhcFJlc3VsdHMoZGVwZW5kZW5jaWVzLCByZXN1bHRzKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRlcGVuZGVuY2llcykgPyByZXN1bHRzIDogLy8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoKSBoYXMgY29uc2lzdGVudCBrZXkgb3JkZXJpbmcgd2l0aCBFUzZcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGVwZW5kZW5jaWVzKS5yZWR1Y2UoKG91dCwga2V5LCBpZHgpID0+ICh7IC4uLm91dCxcbiAgICBba2V5XTogcmVzdWx0c1tpZHhdXG4gIH0pLCB7fSk7XG59XG5cbmZ1bmN0aW9uIHdyYXBMb2FkYWJsZXMoZGVwZW5kZW5jaWVzLCByZXN1bHRzLCBleGNlcHRpb25zKSB7XG4gIGNvbnN0IG91dHB1dCA9IGV4Y2VwdGlvbnMubWFwKChleGNlcHRpb24sIGlkeCkgPT4gZXhjZXB0aW9uID09IG51bGwgPyBsb2FkYWJsZVdpdGhWYWx1ZSQ0KHJlc3VsdHNbaWR4XSkgOiBSZWNvaWxfaXNQcm9taXNlKGV4Y2VwdGlvbikgPyBsb2FkYWJsZVdpdGhQcm9taXNlJDMoZXhjZXB0aW9uKSA6IGxvYWRhYmxlV2l0aEVycm9yJDMoZXhjZXB0aW9uKSk7XG4gIHJldHVybiB3cmFwUmVzdWx0cyhkZXBlbmRlbmNpZXMsIG91dHB1dCk7XG59XG5cbmZ1bmN0aW9uIGNvbWJpbmVBc3luY1Jlc3VsdHNXaXRoU3luY1Jlc3VsdHMoc3luY1Jlc3VsdHMsIGFzeW5jUmVzdWx0cykge1xuICByZXR1cm4gYXN5bmNSZXN1bHRzLm1hcCgocmVzdWx0LCBpZHgpID0+XG4gIC8qKlxuICAgKiBpdCdzIGltcG9ydGFudCB3ZSB1c2UgPT09IHVuZGVmaW5lZCBhcyBvcHBvc2VkIHRvID09IG51bGwsIGJlY2F1c2UgdGhlXG4gICAqIHJlc29sdmVkIHZhbHVlIG9mIHRoZSBhc3luYyBwcm9taXNlIGNvdWxkIGJlIGBudWxsYCwgaW4gd2hpY2ggY2FzZSB3ZVxuICAgKiBkb24ndCB3YW50IHRvIHVzZSBzeW5jUmVzdWx0c1tpZHhdLCB3aGljaCB3b3VsZCBiZSB1bmRlZmluZWQuIElmIGFzeW5jXG4gICAqIHByb21pc2UgcmVzb2x2ZXMgdG8gYHVuZGVmaW5lZGAsIHRoYXQncyBvayBiZWNhdXNlIGBzeW5jUmVzdWx0c1tpZHhdYFxuICAgKiB3aWxsIGFsc28gYmUgYHVuZGVmaW5lZGAuIFRoYXQncyBhIGxpdHRsZSBoYWNreSwgYnV0IGl0IHdvcmtzLlxuICAgKi9cbiAgcmVzdWx0ID09PSB1bmRlZmluZWQgPyBzeW5jUmVzdWx0c1tpZHhdIDogcmVzdWx0KTtcbn0gLy8gU2VsZWN0b3IgdGhhdCByZXF1ZXN0cyBhbGwgZGVwZW5kZW5jaWVzIGluIHBhcmFsbGVsIGFuZCBpbW1lZGlhdGVseSByZXR1cm5zXG4vLyBjdXJyZW50IHJlc3VsdHMgd2l0aG91dCB3YWl0aW5nLlxuXG5cbmNvbnN0IHdhaXRGb3JOb25lID0gUmVjb2lsX3NlbGVjdG9yRmFtaWx5KHtcbiAga2V5OiAnX193YWl0Rm9yTm9uZScsXG4gIGdldDogZGVwZW5kZW5jaWVzID0+ICh7XG4gICAgZ2V0XG4gIH0pID0+IHtcbiAgICAvLyBJc3N1ZSByZXF1ZXN0cyBmb3IgYWxsIGRlcGVuZGVuY2llcyBpbiBwYXJhbGxlbC5cbiAgICBjb25zdCBkZXBzID0gdW53cmFwRGVwZW5kZW5jaWVzKGRlcGVuZGVuY2llcyk7XG4gICAgY29uc3QgW3Jlc3VsdHMsIGV4Y2VwdGlvbnNdID0gY29uY3VycmVudFJlcXVlc3RzKGdldCwgZGVwcyk7IC8vIEFsd2F5cyByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSByZXN1bHRzOyBuZXZlciBibG9jay5cblxuICAgIHJldHVybiB3cmFwTG9hZGFibGVzKGRlcGVuZGVuY2llcywgcmVzdWx0cywgZXhjZXB0aW9ucyk7XG4gIH0sXG4gIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiB0cnVlXG59KTsgLy8gU2VsZWN0b3IgdGhhdCByZXF1ZXN0cyBhbGwgZGVwZW5kZW5jaWVzIGluIHBhcmFsbGVsIGFuZCB3YWl0cyBmb3IgYXQgbGVhc3Rcbi8vIG9uZSB0byBiZSBhdmFpbGFibGUgYmVmb3JlIHJldHVybmluZyByZXN1bHRzLiAgSXQgd2lsbCBvbmx5IGVycm9yIGlmIGFsbFxuLy8gZGVwZW5kZW5jaWVzIGhhdmUgZXJyb3JzLlxuXG5jb25zdCB3YWl0Rm9yQW55ID0gUmVjb2lsX3NlbGVjdG9yRmFtaWx5KHtcbiAga2V5OiAnX193YWl0Rm9yQW55JyxcbiAgZ2V0OiBkZXBlbmRlbmNpZXMgPT4gKHtcbiAgICBnZXRcbiAgfSkgPT4ge1xuICAgIC8vIElzc3VlIHJlcXVlc3RzIGZvciBhbGwgZGVwZW5kZW5jaWVzIGluIHBhcmFsbGVsLlxuICAgIC8vIEV4Y2VwdGlvbnMgY2FuIGVpdGhlciBiZSBQcm9taXNlcyBvZiBwZW5kaW5nIHJlc3VsdHMgb3IgcmVhbCBlcnJvcnNcbiAgICBjb25zdCBkZXBzID0gdW53cmFwRGVwZW5kZW5jaWVzKGRlcGVuZGVuY2llcyk7XG4gICAgY29uc3QgW3Jlc3VsdHMsIGV4Y2VwdGlvbnNdID0gY29uY3VycmVudFJlcXVlc3RzKGdldCwgZGVwcyk7IC8vIElmIGFueSByZXN1bHRzIGFyZSBhdmFpbGFibGUsIHZhbHVlIG9yIGVycm9yLCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdHVzXG5cbiAgICBpZiAoZXhjZXB0aW9ucy5zb21lKGV4cCA9PiAhUmVjb2lsX2lzUHJvbWlzZShleHApKSkge1xuICAgICAgcmV0dXJuIHdyYXBMb2FkYWJsZXMoZGVwZW5kZW5jaWVzLCByZXN1bHRzLCBleGNlcHRpb25zKTtcbiAgICB9IC8vIE90aGVyd2lzZSwgcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSB3aGVuIHRoZSBuZXh0IHJlc3VsdCBpc1xuICAgIC8vIGF2YWlsYWJsZSwgd2hpY2hldmVyIG9uZSBoYXBwZW5zIHRvIGJlIG5leHQuICBCdXQsIGlmIGFsbCBwZW5kaW5nXG4gICAgLy8gZGVwZW5kZW5jaWVzIGVuZCB1cCB3aXRoIGVycm9ycywgdGhlbiByZWplY3QgdGhlIHByb21pc2UuXG5cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGZvciAoY29uc3QgW2ksIGV4cF0gb2YgZXhjZXB0aW9ucy5lbnRyaWVzKCkpIHtcbiAgICAgICAgaWYgKFJlY29pbF9pc1Byb21pc2UoZXhwKSkge1xuICAgICAgICAgIGV4cC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICByZXN1bHRzW2ldID0gcmVzdWx0O1xuICAgICAgICAgICAgZXhjZXB0aW9uc1tpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJlc29sdmUod3JhcExvYWRhYmxlcyhkZXBlbmRlbmNpZXMsIHJlc3VsdHMsIGV4Y2VwdGlvbnMpKTtcbiAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBleGNlcHRpb25zW2ldID0gZXJyb3I7XG4gICAgICAgICAgICByZXNvbHZlKHdyYXBMb2FkYWJsZXMoZGVwZW5kZW5jaWVzLCByZXN1bHRzLCBleGNlcHRpb25zKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IHRydWVcbn0pOyAvLyBTZWxlY3RvciB0aGF0IHJlcXVlc3RzIGFsbCBkZXBlbmRlbmNpZXMgaW4gcGFyYWxsZWwgYW5kIHdhaXRzIGZvciBhbGwgdG8gYmVcbi8vIGF2YWlsYWJsZSBiZWZvcmUgcmV0dXJuaW5nIGEgdmFsdWUuICBJdCB3aWxsIGVycm9yIGlmIGFueSBkZXBlbmRlbmNpZXMgZXJyb3IuXG5cbmNvbnN0IHdhaXRGb3JBbGwgPSBSZWNvaWxfc2VsZWN0b3JGYW1pbHkoe1xuICBrZXk6ICdfX3dhaXRGb3JBbGwnLFxuICBnZXQ6IGRlcGVuZGVuY2llcyA9PiAoe1xuICAgIGdldFxuICB9KSA9PiB7XG4gICAgLy8gSXNzdWUgcmVxdWVzdHMgZm9yIGFsbCBkZXBlbmRlbmNpZXMgaW4gcGFyYWxsZWwuXG4gICAgLy8gRXhjZXB0aW9ucyBjYW4gZWl0aGVyIGJlIFByb21pc2VzIG9mIHBlbmRpbmcgcmVzdWx0cyBvciByZWFsIGVycm9yc1xuICAgIGNvbnN0IGRlcHMgPSB1bndyYXBEZXBlbmRlbmNpZXMoZGVwZW5kZW5jaWVzKTtcbiAgICBjb25zdCBbcmVzdWx0cywgZXhjZXB0aW9uc10gPSBjb25jdXJyZW50UmVxdWVzdHMoZ2V0LCBkZXBzKTsgLy8gSWYgYWxsIHJlc3VsdHMgYXJlIGF2YWlsYWJsZSwgcmV0dXJuIHRoZSByZXN1bHRzXG5cbiAgICBpZiAoZXhjZXB0aW9ucy5ldmVyeShleHAgPT4gZXhwID09IG51bGwpKSB7XG4gICAgICByZXR1cm4gd3JhcFJlc3VsdHMoZGVwZW5kZW5jaWVzLCByZXN1bHRzKTtcbiAgICB9IC8vIElmIHdlIGhhdmUgYW55IGVycm9ycywgdGhyb3cgdGhlIGZpcnN0IGVycm9yXG5cblxuICAgIGNvbnN0IGVycm9yID0gZXhjZXB0aW9ucy5maW5kKGlzRXJyb3IpO1xuXG4gICAgaWYgKGVycm9yICE9IG51bGwpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0gLy8gT3RoZXJ3aXNlLCByZXR1cm4gYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIHdoZW4gYWxsIHJlc3VsdHMgYXJlIGF2YWlsYWJsZVxuXG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoZXhjZXB0aW9ucykudGhlbihleGNlcHRpb25SZXN1bHRzID0+IHdyYXBSZXN1bHRzKGRlcGVuZGVuY2llcywgY29tYmluZUFzeW5jUmVzdWx0c1dpdGhTeW5jUmVzdWx0cyhyZXN1bHRzLCBleGNlcHRpb25SZXN1bHRzKSkpO1xuICB9LFxuICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogdHJ1ZVxufSk7XG5jb25zdCB3YWl0Rm9yQWxsU2V0dGxlZCA9IFJlY29pbF9zZWxlY3RvckZhbWlseSh7XG4gIGtleTogJ19fd2FpdEZvckFsbFNldHRsZWQnLFxuICBnZXQ6IGRlcGVuZGVuY2llcyA9PiAoe1xuICAgIGdldFxuICB9KSA9PiB7XG4gICAgLy8gSXNzdWUgcmVxdWVzdHMgZm9yIGFsbCBkZXBlbmRlbmNpZXMgaW4gcGFyYWxsZWwuXG4gICAgLy8gRXhjZXB0aW9ucyBjYW4gZWl0aGVyIGJlIFByb21pc2VzIG9mIHBlbmRpbmcgcmVzdWx0cyBvciByZWFsIGVycm9yc1xuICAgIGNvbnN0IGRlcHMgPSB1bndyYXBEZXBlbmRlbmNpZXMoZGVwZW5kZW5jaWVzKTtcbiAgICBjb25zdCBbcmVzdWx0cywgZXhjZXB0aW9uc10gPSBjb25jdXJyZW50UmVxdWVzdHMoZ2V0LCBkZXBzKTsgLy8gSWYgYWxsIHJlc3VsdHMgYXJlIGF2YWlsYWJsZSwgcmV0dXJuIHRoZSByZXN1bHRzXG5cbiAgICBpZiAoZXhjZXB0aW9ucy5ldmVyeShleHAgPT4gIVJlY29pbF9pc1Byb21pc2UoZXhwKSkpIHtcbiAgICAgIHJldHVybiB3cmFwTG9hZGFibGVzKGRlcGVuZGVuY2llcywgcmVzdWx0cywgZXhjZXB0aW9ucyk7XG4gICAgfSAvLyBXYWl0IGZvciBhbGwgcmVzdWx0cyB0byBzZXR0bGVcblxuXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKGV4Y2VwdGlvbnMubWFwKChleHAsIGkpID0+IFJlY29pbF9pc1Byb21pc2UoZXhwKSA/IGV4cC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICByZXN1bHRzW2ldID0gcmVzdWx0O1xuICAgICAgZXhjZXB0aW9uc1tpXSA9IHVuZGVmaW5lZDtcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICByZXN1bHRzW2ldID0gdW5kZWZpbmVkO1xuICAgICAgZXhjZXB0aW9uc1tpXSA9IGVycm9yO1xuICAgIH0pIDogbnVsbCkpIC8vIFRoZW4gd3JhcCB0aGVtIGFzIGxvYWRhYmxlc1xuICAgIC50aGVuKCgpID0+IHdyYXBMb2FkYWJsZXMoZGVwZW5kZW5jaWVzLCByZXN1bHRzLCBleGNlcHRpb25zKSk7XG4gIH0sXG4gIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiB0cnVlXG59KTtcbmNvbnN0IG5vV2FpdCA9IFJlY29pbF9zZWxlY3RvckZhbWlseSh7XG4gIGtleTogJ19fbm9XYWl0JyxcbiAgZ2V0OiBkZXBlbmRlbmN5ID0+ICh7XG4gICAgZ2V0XG4gIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGxvYWRhYmxlV2l0aFZhbHVlJDQoZ2V0KGRlcGVuZGVuY3kpKTtcbiAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgIHJldHVybiBSZWNvaWxfaXNQcm9taXNlKGV4Y2VwdGlvbikgPyBsb2FkYWJsZVdpdGhQcm9taXNlJDMoZXhjZXB0aW9uKSA6IGxvYWRhYmxlV2l0aEVycm9yJDMoZXhjZXB0aW9uKTtcbiAgICB9XG4gIH0sXG4gIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiB0cnVlXG59KTtcbnZhciBSZWNvaWxfV2FpdEZvciA9IHtcbiAgd2FpdEZvck5vbmUsXG4gIHdhaXRGb3JBbnksXG4gIHdhaXRGb3JBbGwsXG4gIHdhaXRGb3JBbGxTZXR0bGVkLFxuICBub1dhaXRcbn07XG5cbmNvbnN0IHtcbiAgUmVjb2lsTG9hZGFibGVcbn0gPSBSZWNvaWxfTG9hZGFibGUkMTtcblxuY29uc3Qge1xuICBEZWZhdWx0VmFsdWU6IERlZmF1bHRWYWx1ZSQzXG59ID0gUmVjb2lsX05vZGU7XG5cbmNvbnN0IHtcbiAgUmVjb2lsUm9vdDogUmVjb2lsUm9vdCQyXG59ID0gUmVjb2lsX1JlY29pbFJvb3RfcmVhY3Q7XG5cbmNvbnN0IHtcbiAgaXNSZWNvaWxWYWx1ZTogaXNSZWNvaWxWYWx1ZSQ1XG59ID0gUmVjb2lsX1JlY29pbFZhbHVlJDE7XG5cbmNvbnN0IHtcbiAgcmV0ZW50aW9uWm9uZTogcmV0ZW50aW9uWm9uZSQxXG59ID0gUmVjb2lsX1JldGVudGlvblpvbmU7XG5cbmNvbnN0IHtcbiAgZnJlc2hTbmFwc2hvdDogZnJlc2hTbmFwc2hvdCQyXG59ID0gUmVjb2lsX1NuYXBzaG90JDE7XG5cbmNvbnN0IHtcbiAgdXNlUmVjb2lsU3RhdGU6IHVzZVJlY29pbFN0YXRlJDEsXG4gIHVzZVJlY29pbFN0YXRlTG9hZGFibGU6IHVzZVJlY29pbFN0YXRlTG9hZGFibGUkMSxcbiAgdXNlUmVjb2lsVmFsdWU6IHVzZVJlY29pbFZhbHVlJDEsXG4gIHVzZVJlY29pbFZhbHVlTG9hZGFibGU6IHVzZVJlY29pbFZhbHVlTG9hZGFibGUkMSxcbiAgdXNlUmVzZXRSZWNvaWxTdGF0ZTogdXNlUmVzZXRSZWNvaWxTdGF0ZSQxLFxuICB1c2VTZXRSZWNvaWxTdGF0ZTogdXNlU2V0UmVjb2lsU3RhdGUkMSxcbiAgdXNlU2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzOiB1c2VTZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXMkMVxufSA9IFJlY29pbF9Ib29rcztcblxuY29uc3Qge1xuICB1c2VHb3RvUmVjb2lsU25hcHNob3Q6IHVzZUdvdG9SZWNvaWxTbmFwc2hvdCQyLFxuICB1c2VSZWNvaWxTbmFwc2hvdDogdXNlUmVjb2lsU25hcHNob3QkMSxcbiAgdXNlUmVjb2lsVHJhbnNhY3Rpb25PYnNlcnZlcjogdXNlUmVjb2lsVHJhbnNhY3Rpb25PYnNlcnZlciQxLFxuICB1c2VUcmFuc2FjdGlvbk9ic2VydmF0aW9uX0RFUFJFQ0FURUQ6IHVzZVRyYW5zYWN0aW9uT2JzZXJ2YXRpb25fREVQUkVDQVRFRCQxXG59ID0gUmVjb2lsX1NuYXBzaG90SG9va3M7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5jb25zdCB7XG4gIG5vV2FpdDogbm9XYWl0JDEsXG4gIHdhaXRGb3JBbGw6IHdhaXRGb3JBbGwkMSxcbiAgd2FpdEZvckFsbFNldHRsZWQ6IHdhaXRGb3JBbGxTZXR0bGVkJDEsXG4gIHdhaXRGb3JBbnk6IHdhaXRGb3JBbnkkMSxcbiAgd2FpdEZvck5vbmU6IHdhaXRGb3JOb25lJDFcbn0gPSBSZWNvaWxfV2FpdEZvcjtcblxudmFyIFJlY29pbF9pbmRleCA9IHtcbiAgLy8gVHlwZXNcbiAgRGVmYXVsdFZhbHVlOiBEZWZhdWx0VmFsdWUkMyxcbiAgaXNSZWNvaWxWYWx1ZTogaXNSZWNvaWxWYWx1ZSQ1LFxuICBSZWNvaWxMb2FkYWJsZSxcbiAgLy8gUmVjb2lsIFJvb3RcbiAgUmVjb2lsUm9vdDogUmVjb2lsUm9vdCQyLFxuICB1c2VSZWNvaWxCcmlkZ2VBY3Jvc3NSZWFjdFJvb3RzX1VOU1RBQkxFOiBSZWNvaWxfdXNlUmVjb2lsQnJpZGdlQWNyb3NzUmVhY3RSb290cyxcbiAgLy8gQXRvbXMvU2VsZWN0b3JzXG4gIGF0b206IFJlY29pbF9hdG9tLFxuICBzZWxlY3RvcjogUmVjb2lsX3NlbGVjdG9yLFxuICAvLyBDb252ZW5pZW5jZSBBdG9tcy9TZWxlY3RvcnNcbiAgYXRvbUZhbWlseTogUmVjb2lsX2F0b21GYW1pbHksXG4gIHNlbGVjdG9yRmFtaWx5OiBSZWNvaWxfc2VsZWN0b3JGYW1pbHksXG4gIGNvbnN0U2VsZWN0b3I6IFJlY29pbF9jb25zdFNlbGVjdG9yLFxuICBlcnJvclNlbGVjdG9yOiBSZWNvaWxfZXJyb3JTZWxlY3RvcixcbiAgcmVhZE9ubHlTZWxlY3RvcjogUmVjb2lsX3JlYWRPbmx5U2VsZWN0b3IsXG4gIC8vIENvbmN1cnJlbmN5IEhlbHBlcnMgZm9yIEF0b21zL1NlbGVjdG9yc1xuICBub1dhaXQ6IG5vV2FpdCQxLFxuICB3YWl0Rm9yTm9uZTogd2FpdEZvck5vbmUkMSxcbiAgd2FpdEZvckFueTogd2FpdEZvckFueSQxLFxuICB3YWl0Rm9yQWxsOiB3YWl0Rm9yQWxsJDEsXG4gIHdhaXRGb3JBbGxTZXR0bGVkOiB3YWl0Rm9yQWxsU2V0dGxlZCQxLFxuICAvLyBIb29rcyBmb3IgQXRvbXMvU2VsZWN0b3JzXG4gIHVzZVJlY29pbFZhbHVlOiB1c2VSZWNvaWxWYWx1ZSQxLFxuICB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlOiB1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlJDEsXG4gIHVzZVJlY29pbFN0YXRlOiB1c2VSZWNvaWxTdGF0ZSQxLFxuICB1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlOiB1c2VSZWNvaWxTdGF0ZUxvYWRhYmxlJDEsXG4gIHVzZVNldFJlY29pbFN0YXRlOiB1c2VTZXRSZWNvaWxTdGF0ZSQxLFxuICB1c2VSZXNldFJlY29pbFN0YXRlOiB1c2VSZXNldFJlY29pbFN0YXRlJDEsXG4gIHVzZUdldFJlY29pbFZhbHVlSW5mb19VTlNUQUJMRTogUmVjb2lsX3VzZUdldFJlY29pbFZhbHVlSW5mbyxcbiAgdXNlUmVjb2lsUmVmcmVzaGVyX1VOU1RBQkxFOiBSZWNvaWxfdXNlUmVjb2lsUmVmcmVzaGVyLFxuICAvLyBIb29rcyBmb3IgY29tcGxleCBvcGVyYXRpb25zXG4gIHVzZVJlY29pbENhbGxiYWNrOiBSZWNvaWxfdXNlUmVjb2lsQ2FsbGJhY2ssXG4gIHVzZVJlY29pbFRyYW5zYWN0aW9uX1VOU1RBQkxFOiBSZWNvaWxfdXNlUmVjb2lsVHJhbnNhY3Rpb24sXG4gIC8vIFNuYXBzaG90c1xuICB1c2VHb3RvUmVjb2lsU25hcHNob3Q6IHVzZUdvdG9SZWNvaWxTbmFwc2hvdCQyLFxuICB1c2VSZWNvaWxTbmFwc2hvdDogdXNlUmVjb2lsU25hcHNob3QkMSxcbiAgdXNlUmVjb2lsVHJhbnNhY3Rpb25PYnNlcnZlcl9VTlNUQUJMRTogdXNlUmVjb2lsVHJhbnNhY3Rpb25PYnNlcnZlciQxLFxuICB1c2VUcmFuc2FjdGlvbk9ic2VydmF0aW9uX1VOU1RBQkxFOiB1c2VUcmFuc2FjdGlvbk9ic2VydmF0aW9uX0RFUFJFQ0FURUQkMSxcbiAgdXNlU2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVzX1VOU1RBQkxFOiB1c2VTZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXMkMSxcbiAgc25hcHNob3RfVU5TVEFCTEU6IGZyZXNoU25hcHNob3QkMixcbiAgLy8gTWVtb3J5IE1hbmFnZW1lbnRcbiAgdXNlUmV0YWluOiBSZWNvaWxfdXNlUmV0YWluLFxuICByZXRlbnRpb25ab25lOiByZXRlbnRpb25ab25lJDFcbn07XG52YXIgUmVjb2lsX2luZGV4XzEgPSBSZWNvaWxfaW5kZXguRGVmYXVsdFZhbHVlO1xudmFyIFJlY29pbF9pbmRleF8yID0gUmVjb2lsX2luZGV4LmlzUmVjb2lsVmFsdWU7XG52YXIgUmVjb2lsX2luZGV4XzMgPSBSZWNvaWxfaW5kZXguUmVjb2lsTG9hZGFibGU7XG52YXIgUmVjb2lsX2luZGV4XzQgPSBSZWNvaWxfaW5kZXguUmVjb2lsUm9vdDtcbnZhciBSZWNvaWxfaW5kZXhfNSA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxCcmlkZ2VBY3Jvc3NSZWFjdFJvb3RzX1VOU1RBQkxFO1xudmFyIFJlY29pbF9pbmRleF82ID0gUmVjb2lsX2luZGV4LmF0b207XG52YXIgUmVjb2lsX2luZGV4XzcgPSBSZWNvaWxfaW5kZXguc2VsZWN0b3I7XG52YXIgUmVjb2lsX2luZGV4XzggPSBSZWNvaWxfaW5kZXguYXRvbUZhbWlseTtcbnZhciBSZWNvaWxfaW5kZXhfOSA9IFJlY29pbF9pbmRleC5zZWxlY3RvckZhbWlseTtcbnZhciBSZWNvaWxfaW5kZXhfMTAgPSBSZWNvaWxfaW5kZXguY29uc3RTZWxlY3RvcjtcbnZhciBSZWNvaWxfaW5kZXhfMTEgPSBSZWNvaWxfaW5kZXguZXJyb3JTZWxlY3RvcjtcbnZhciBSZWNvaWxfaW5kZXhfMTIgPSBSZWNvaWxfaW5kZXgucmVhZE9ubHlTZWxlY3RvcjtcbnZhciBSZWNvaWxfaW5kZXhfMTMgPSBSZWNvaWxfaW5kZXgubm9XYWl0O1xudmFyIFJlY29pbF9pbmRleF8xNCA9IFJlY29pbF9pbmRleC53YWl0Rm9yTm9uZTtcbnZhciBSZWNvaWxfaW5kZXhfMTUgPSBSZWNvaWxfaW5kZXgud2FpdEZvckFueTtcbnZhciBSZWNvaWxfaW5kZXhfMTYgPSBSZWNvaWxfaW5kZXgud2FpdEZvckFsbDtcbnZhciBSZWNvaWxfaW5kZXhfMTcgPSBSZWNvaWxfaW5kZXgud2FpdEZvckFsbFNldHRsZWQ7XG52YXIgUmVjb2lsX2luZGV4XzE4ID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbFZhbHVlO1xudmFyIFJlY29pbF9pbmRleF8xOSA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxWYWx1ZUxvYWRhYmxlO1xudmFyIFJlY29pbF9pbmRleF8yMCA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxTdGF0ZTtcbnZhciBSZWNvaWxfaW5kZXhfMjEgPSBSZWNvaWxfaW5kZXgudXNlUmVjb2lsU3RhdGVMb2FkYWJsZTtcbnZhciBSZWNvaWxfaW5kZXhfMjIgPSBSZWNvaWxfaW5kZXgudXNlU2V0UmVjb2lsU3RhdGU7XG52YXIgUmVjb2lsX2luZGV4XzIzID0gUmVjb2lsX2luZGV4LnVzZVJlc2V0UmVjb2lsU3RhdGU7XG52YXIgUmVjb2lsX2luZGV4XzI0ID0gUmVjb2lsX2luZGV4LnVzZUdldFJlY29pbFZhbHVlSW5mb19VTlNUQUJMRTtcbnZhciBSZWNvaWxfaW5kZXhfMjUgPSBSZWNvaWxfaW5kZXgudXNlUmVjb2lsUmVmcmVzaGVyX1VOU1RBQkxFO1xudmFyIFJlY29pbF9pbmRleF8yNiA9IFJlY29pbF9pbmRleC51c2VSZWNvaWxDYWxsYmFjaztcbnZhciBSZWNvaWxfaW5kZXhfMjcgPSBSZWNvaWxfaW5kZXgudXNlUmVjb2lsVHJhbnNhY3Rpb25fVU5TVEFCTEU7XG52YXIgUmVjb2lsX2luZGV4XzI4ID0gUmVjb2lsX2luZGV4LnVzZUdvdG9SZWNvaWxTbmFwc2hvdDtcbnZhciBSZWNvaWxfaW5kZXhfMjkgPSBSZWNvaWxfaW5kZXgudXNlUmVjb2lsU25hcHNob3Q7XG52YXIgUmVjb2lsX2luZGV4XzMwID0gUmVjb2lsX2luZGV4LnVzZVJlY29pbFRyYW5zYWN0aW9uT2JzZXJ2ZXJfVU5TVEFCTEU7XG52YXIgUmVjb2lsX2luZGV4XzMxID0gUmVjb2lsX2luZGV4LnVzZVRyYW5zYWN0aW9uT2JzZXJ2YXRpb25fVU5TVEFCTEU7XG52YXIgUmVjb2lsX2luZGV4XzMyID0gUmVjb2lsX2luZGV4LnVzZVNldFVudmFsaWRhdGVkQXRvbVZhbHVlc19VTlNUQUJMRTtcbnZhciBSZWNvaWxfaW5kZXhfMzMgPSBSZWNvaWxfaW5kZXguc25hcHNob3RfVU5TVEFCTEU7XG52YXIgUmVjb2lsX2luZGV4XzM0ID0gUmVjb2lsX2luZGV4LnVzZVJldGFpbjtcbnZhciBSZWNvaWxfaW5kZXhfMzUgPSBSZWNvaWxfaW5kZXgucmV0ZW50aW9uWm9uZTtcblxuZXhwb3J0IGRlZmF1bHQgUmVjb2lsX2luZGV4O1xuZXhwb3J0IHsgUmVjb2lsX2luZGV4XzEgYXMgRGVmYXVsdFZhbHVlLCBSZWNvaWxfaW5kZXhfMyBhcyBSZWNvaWxMb2FkYWJsZSwgUmVjb2lsX2luZGV4XzQgYXMgUmVjb2lsUm9vdCwgUmVjb2lsX2luZGV4XzYgYXMgYXRvbSwgUmVjb2lsX2luZGV4XzggYXMgYXRvbUZhbWlseSwgUmVjb2lsX2luZGV4XzEwIGFzIGNvbnN0U2VsZWN0b3IsIFJlY29pbF9pbmRleF8xMSBhcyBlcnJvclNlbGVjdG9yLCBSZWNvaWxfaW5kZXhfMiBhcyBpc1JlY29pbFZhbHVlLCBSZWNvaWxfaW5kZXhfMTMgYXMgbm9XYWl0LCBSZWNvaWxfaW5kZXhfMTIgYXMgcmVhZE9ubHlTZWxlY3RvciwgUmVjb2lsX2luZGV4XzM1IGFzIHJldGVudGlvblpvbmUsIFJlY29pbF9pbmRleF83IGFzIHNlbGVjdG9yLCBSZWNvaWxfaW5kZXhfOSBhcyBzZWxlY3RvckZhbWlseSwgUmVjb2lsX2luZGV4XzMzIGFzIHNuYXBzaG90X1VOU1RBQkxFLCBSZWNvaWxfaW5kZXhfMjQgYXMgdXNlR2V0UmVjb2lsVmFsdWVJbmZvX1VOU1RBQkxFLCBSZWNvaWxfaW5kZXhfMjggYXMgdXNlR290b1JlY29pbFNuYXBzaG90LCBSZWNvaWxfaW5kZXhfNSBhcyB1c2VSZWNvaWxCcmlkZ2VBY3Jvc3NSZWFjdFJvb3RzX1VOU1RBQkxFLCBSZWNvaWxfaW5kZXhfMjYgYXMgdXNlUmVjb2lsQ2FsbGJhY2ssIFJlY29pbF9pbmRleF8yNSBhcyB1c2VSZWNvaWxSZWZyZXNoZXJfVU5TVEFCTEUsIFJlY29pbF9pbmRleF8yOSBhcyB1c2VSZWNvaWxTbmFwc2hvdCwgUmVjb2lsX2luZGV4XzIwIGFzIHVzZVJlY29pbFN0YXRlLCBSZWNvaWxfaW5kZXhfMjEgYXMgdXNlUmVjb2lsU3RhdGVMb2FkYWJsZSwgUmVjb2lsX2luZGV4XzMwIGFzIHVzZVJlY29pbFRyYW5zYWN0aW9uT2JzZXJ2ZXJfVU5TVEFCTEUsIFJlY29pbF9pbmRleF8yNyBhcyB1c2VSZWNvaWxUcmFuc2FjdGlvbl9VTlNUQUJMRSwgUmVjb2lsX2luZGV4XzE4IGFzIHVzZVJlY29pbFZhbHVlLCBSZWNvaWxfaW5kZXhfMTkgYXMgdXNlUmVjb2lsVmFsdWVMb2FkYWJsZSwgUmVjb2lsX2luZGV4XzIzIGFzIHVzZVJlc2V0UmVjb2lsU3RhdGUsIFJlY29pbF9pbmRleF8zNCBhcyB1c2VSZXRhaW4sIFJlY29pbF9pbmRleF8yMiBhcyB1c2VTZXRSZWNvaWxTdGF0ZSwgUmVjb2lsX2luZGV4XzMyIGFzIHVzZVNldFVudmFsaWRhdGVkQXRvbVZhbHVlc19VTlNUQUJMRSwgUmVjb2lsX2luZGV4XzMxIGFzIHVzZVRyYW5zYWN0aW9uT2JzZXJ2YXRpb25fVU5TVEFCTEUsIFJlY29pbF9pbmRleF8xNiBhcyB3YWl0Rm9yQWxsLCBSZWNvaWxfaW5kZXhfMTcgYXMgd2FpdEZvckFsbFNldHRsZWQsIFJlY29pbF9pbmRleF8xNSBhcyB3YWl0Rm9yQW55LCBSZWNvaWxfaW5kZXhfMTQgYXMgd2FpdEZvck5vbmUgfTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgdHlwZSB7XG4gIEhpc3RvcnksXG4gIEluaXRpYWxFbnRyeSxcbiAgTG9jYXRpb24sXG4gIE1lbW9yeUhpc3RvcnksXG4gIFBhdGgsXG4gIFRvXG59IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQge1xuICBBY3Rpb24gYXMgTmF2aWdhdGlvblR5cGUsXG4gIGNyZWF0ZU1lbW9yeUhpc3RvcnksXG4gIHBhcnNlUGF0aFxufSBmcm9tIFwiaGlzdG9yeVwiO1xuXG5leHBvcnQgdHlwZSB7IExvY2F0aW9uLCBQYXRoLCBUbywgTmF2aWdhdGlvblR5cGUgfTtcblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmQ6IGFueSwgbWVzc2FnZTogc3RyaW5nKTogYXNzZXJ0cyBjb25kIHtcbiAgaWYgKCFjb25kKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG59XG5cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZDogYW55LCBtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCBSb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cblxuY29uc3QgYWxyZWFkeVdhcm5lZDogUmVjb3JkPHN0cmluZywgYm9vbGVhbj4gPSB7fTtcbmZ1bmN0aW9uIHdhcm5pbmdPbmNlKGtleTogc3RyaW5nLCBjb25kOiBib29sZWFuLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgaWYgKCFjb25kICYmICFhbHJlYWR5V2FybmVkW2tleV0pIHtcbiAgICBhbHJlYWR5V2FybmVkW2tleV0gPSB0cnVlO1xuICAgIHdhcm5pbmcoZmFsc2UsIG1lc3NhZ2UpO1xuICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIENPTlRFWFRcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBBIE5hdmlnYXRvciBpcyBhIFwibG9jYXRpb24gY2hhbmdlclwiOyBpdCdzIGhvdyB5b3UgZ2V0IHRvIGRpZmZlcmVudCBsb2NhdGlvbnMuXG4gKlxuICogRXZlcnkgaGlzdG9yeSBpbnN0YW5jZSBjb25mb3JtcyB0byB0aGUgTmF2aWdhdG9yIGludGVyZmFjZSwgYnV0IHRoZVxuICogZGlzdGluY3Rpb24gaXMgdXNlZnVsIHByaW1hcmlseSB3aGVuIGl0IGNvbWVzIHRvIHRoZSBsb3ctbGV2ZWwgPFJvdXRlcj4gQVBJXG4gKiB3aGVyZSBib3RoIHRoZSBsb2NhdGlvbiBhbmQgYSBuYXZpZ2F0b3IgbXVzdCBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGluIG9yZGVyXG4gKiB0byBhdm9pZCBcInRlYXJpbmdcIiB0aGF0IG1heSBvY2N1ciBpbiBhIHN1c3BlbnNlLWVuYWJsZWQgYXBwIGlmIHRoZSBhY3Rpb25cbiAqIGFuZC9vciBsb2NhdGlvbiB3ZXJlIHRvIGJlIHJlYWQgZGlyZWN0bHkgZnJvbSB0aGUgaGlzdG9yeSBpbnN0YW5jZS5cbiAqL1xuZXhwb3J0IHR5cGUgTmF2aWdhdG9yID0gT21pdDxcbiAgSGlzdG9yeSxcbiAgXCJhY3Rpb25cIiB8IFwibG9jYXRpb25cIiB8IFwiYmFja1wiIHwgXCJmb3J3YXJkXCIgfCBcImxpc3RlblwiIHwgXCJibG9ja1wiXG4+O1xuXG5pbnRlcmZhY2UgTmF2aWdhdGlvbkNvbnRleHRPYmplY3Qge1xuICBiYXNlbmFtZTogc3RyaW5nO1xuICBuYXZpZ2F0b3I6IE5hdmlnYXRvcjtcbiAgc3RhdGljOiBib29sZWFuO1xufVxuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8TmF2aWdhdGlvbkNvbnRleHRPYmplY3Q+KG51bGwhKTtcblxuaWYgKF9fREVWX18pIHtcbiAgTmF2aWdhdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIk5hdmlnYXRpb25cIjtcbn1cblxuaW50ZXJmYWNlIExvY2F0aW9uQ29udGV4dE9iamVjdCB7XG4gIGxvY2F0aW9uOiBMb2NhdGlvbjtcbiAgbmF2aWdhdGlvblR5cGU6IE5hdmlnYXRpb25UeXBlO1xufVxuXG5jb25zdCBMb2NhdGlvbkNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PExvY2F0aW9uQ29udGV4dE9iamVjdD4obnVsbCEpO1xuXG5pZiAoX19ERVZfXykge1xuICBMb2NhdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkxvY2F0aW9uXCI7XG59XG5cbmludGVyZmFjZSBSb3V0ZUNvbnRleHRPYmplY3Qge1xuICBvdXRsZXQ6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGw7XG4gIG1hdGNoZXM6IFJvdXRlTWF0Y2hbXTtcbn1cblxuY29uc3QgUm91dGVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxSb3V0ZUNvbnRleHRPYmplY3Q+KHtcbiAgb3V0bGV0OiBudWxsLFxuICBtYXRjaGVzOiBbXVxufSk7XG5cbmlmIChfX0RFVl9fKSB7XG4gIFJvdXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVcIjtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQ09NUE9ORU5UU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgaW50ZXJmYWNlIE1lbW9yeVJvdXRlclByb3BzIHtcbiAgYmFzZW5hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICBpbml0aWFsRW50cmllcz86IEluaXRpYWxFbnRyeVtdO1xuICBpbml0aWFsSW5kZXg/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQSA8Um91dGVyPiB0aGF0IHN0b3JlcyBhbGwgZW50cmllcyBpbiBtZW1vcnkuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNtZW1vcnlyb3V0ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE1lbW9yeVJvdXRlcih7XG4gIGJhc2VuYW1lLFxuICBjaGlsZHJlbixcbiAgaW5pdGlhbEVudHJpZXMsXG4gIGluaXRpYWxJbmRleFxufTogTWVtb3J5Um91dGVyUHJvcHMpOiBSZWFjdC5SZWFjdEVsZW1lbnQge1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZjxNZW1vcnlIaXN0b3J5PigpO1xuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KHsgaW5pdGlhbEVudHJpZXMsIGluaXRpYWxJbmRleCB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcblxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuXG4gIHJldHVybiAoXG4gICAgPFJvdXRlclxuICAgICAgYmFzZW5hbWU9e2Jhc2VuYW1lfVxuICAgICAgY2hpbGRyZW49e2NoaWxkcmVufVxuICAgICAgbG9jYXRpb249e3N0YXRlLmxvY2F0aW9ufVxuICAgICAgbmF2aWdhdGlvblR5cGU9e3N0YXRlLmFjdGlvbn1cbiAgICAgIG5hdmlnYXRvcj17aGlzdG9yeX1cbiAgICAvPlxuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdmlnYXRlUHJvcHMge1xuICB0bzogVG87XG4gIHJlcGxhY2U/OiBib29sZWFuO1xuICBzdGF0ZT86IGFueTtcbn1cblxuLyoqXG4gKiBDaGFuZ2VzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIE5vdGU6IFRoaXMgQVBJIGlzIG1vc3RseSB1c2VmdWwgaW4gUmVhY3QuQ29tcG9uZW50IHN1YmNsYXNzZXMgdGhhdCBhcmUgbm90XG4gKiBhYmxlIHRvIHVzZSBob29rcy4gSW4gZnVuY3Rpb25hbCBjb21wb25lbnRzLCB3ZSByZWNvbW1lbmQgeW91IHVzZSB0aGVcbiAqIGB1c2VOYXZpZ2F0ZWAgaG9vayBpbnN0ZWFkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjbmF2aWdhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE5hdmlnYXRlKHsgdG8sIHJlcGxhY2UsIHN0YXRlIH06IE5hdmlnYXRlUHJvcHMpOiBudWxsIHtcbiAgaW52YXJpYW50KFxuICAgIHVzZUluUm91dGVyQ29udGV4dCgpLFxuICAgIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mXG4gICAgLy8gdGhlIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgICBgPE5hdmlnYXRlPiBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LmBcbiAgKTtcblxuICB3YXJuaW5nKFxuICAgICFSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWMsXG4gICAgYDxOYXZpZ2F0ZT4gbXVzdCBub3QgYmUgdXNlZCBvbiB0aGUgaW5pdGlhbCByZW5kZXIgaW4gYSA8U3RhdGljUm91dGVyPi4gYCArXG4gICAgICBgVGhpcyBpcyBhIG5vLW9wLCBidXQgeW91IHNob3VsZCBtb2RpZnkgeW91ciBjb2RlIHNvIHRoZSA8TmF2aWdhdGU+IGlzIGAgK1xuICAgICAgYG9ubHkgZXZlciByZW5kZXJlZCBpbiByZXNwb25zZSB0byBzb21lIHVzZXIgaW50ZXJhY3Rpb24gb3Igc3RhdGUgY2hhbmdlLmBcbiAgKTtcblxuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIG5hdmlnYXRlKHRvLCB7IHJlcGxhY2UsIHN0YXRlIH0pO1xuICB9KTtcblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPdXRsZXRQcm9wcyB7fVxuXG4vKipcbiAqIFJlbmRlcnMgdGhlIGNoaWxkIHJvdXRlJ3MgZWxlbWVudCwgaWYgdGhlcmUgaXMgb25lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjb3V0bGV0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBPdXRsZXQoX3Byb3BzOiBPdXRsZXRQcm9wcyk6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwge1xuICByZXR1cm4gdXNlT3V0bGV0KCk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVQcm9wcyB7XG4gIGNhc2VTZW5zaXRpdmU/OiBib29sZWFuO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgZWxlbWVudD86IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGw7XG4gIGluZGV4PzogYm9vbGVhbjtcbiAgcGF0aD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXRoUm91dGVQcm9wcyB7XG4gIGNhc2VTZW5zaXRpdmU/OiBib29sZWFuO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgZWxlbWVudD86IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGw7XG4gIGluZGV4PzogZmFsc2U7XG4gIHBhdGg6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMYXlvdXRSb3V0ZVByb3BzIHtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGVsZW1lbnQ/OiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluZGV4Um91dGVQcm9wcyB7XG4gIGVsZW1lbnQ/OiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsO1xuICBpbmRleDogdHJ1ZTtcbn1cblxuLyoqXG4gKiBEZWNsYXJlcyBhbiBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHJlbmRlcmVkIGF0IGEgY2VydGFpbiBVUkwgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3JvdXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSb3V0ZShcbiAgX3Byb3BzOiBQYXRoUm91dGVQcm9wcyB8IExheW91dFJvdXRlUHJvcHMgfCBJbmRleFJvdXRlUHJvcHNcbik6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwge1xuICBpbnZhcmlhbnQoXG4gICAgZmFsc2UsXG4gICAgYEEgPFJvdXRlPiBpcyBvbmx5IGV2ZXIgdG8gYmUgdXNlZCBhcyB0aGUgY2hpbGQgb2YgPFJvdXRlcz4gZWxlbWVudCwgYCArXG4gICAgICBgbmV2ZXIgcmVuZGVyZWQgZGlyZWN0bHkuIFBsZWFzZSB3cmFwIHlvdXIgPFJvdXRlPiBpbiBhIDxSb3V0ZXM+LmBcbiAgKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSb3V0ZXJQcm9wcyB7XG4gIGJhc2VuYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgbG9jYXRpb246IFBhcnRpYWw8TG9jYXRpb24+IHwgc3RyaW5nO1xuICBuYXZpZ2F0aW9uVHlwZT86IE5hdmlnYXRpb25UeXBlO1xuICBuYXZpZ2F0b3I6IE5hdmlnYXRvcjtcbiAgc3RhdGljPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBQcm92aWRlcyBsb2NhdGlvbiBjb250ZXh0IGZvciB0aGUgcmVzdCBvZiB0aGUgYXBwLlxuICpcbiAqIE5vdGU6IFlvdSB1c3VhbGx5IHdvbid0IHJlbmRlciBhIDxSb3V0ZXI+IGRpcmVjdGx5LiBJbnN0ZWFkLCB5b3UnbGwgcmVuZGVyIGFcbiAqIHJvdXRlciB0aGF0IGlzIG1vcmUgc3BlY2lmaWMgdG8geW91ciBlbnZpcm9ubWVudCBzdWNoIGFzIGEgPEJyb3dzZXJSb3V0ZXI+XG4gKiBpbiB3ZWIgYnJvd3NlcnMgb3IgYSA8U3RhdGljUm91dGVyPiBmb3Igc2VydmVyIHJlbmRlcmluZy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3JvdXRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gUm91dGVyKHtcbiAgYmFzZW5hbWU6IGJhc2VuYW1lUHJvcCA9IFwiL1wiLFxuICBjaGlsZHJlbiA9IG51bGwsXG4gIGxvY2F0aW9uOiBsb2NhdGlvblByb3AsXG4gIG5hdmlnYXRpb25UeXBlID0gTmF2aWdhdGlvblR5cGUuUG9wLFxuICBuYXZpZ2F0b3IsXG4gIHN0YXRpYzogc3RhdGljUHJvcCA9IGZhbHNlXG59OiBSb3V0ZXJQcm9wcyk6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwge1xuICBpbnZhcmlhbnQoXG4gICAgIXVzZUluUm91dGVyQ29udGV4dCgpLFxuICAgIGBZb3UgY2Fubm90IHJlbmRlciBhIDxSb3V0ZXI+IGluc2lkZSBhbm90aGVyIDxSb3V0ZXI+LmAgK1xuICAgICAgYCBZb3Ugc2hvdWxkIG5ldmVyIGhhdmUgbW9yZSB0aGFuIG9uZSBpbiB5b3VyIGFwcC5gXG4gICk7XG5cbiAgbGV0IGJhc2VuYW1lID0gbm9ybWFsaXplUGF0aG5hbWUoYmFzZW5hbWVQcm9wKTtcbiAgbGV0IG5hdmlnYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PiAoeyBiYXNlbmFtZSwgbmF2aWdhdG9yLCBzdGF0aWM6IHN0YXRpY1Byb3AgfSksXG4gICAgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdXG4gICk7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvblByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICBsb2NhdGlvblByb3AgPSBwYXJzZVBhdGgobG9jYXRpb25Qcm9wKTtcbiAgfVxuXG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiLFxuICAgIHN0YXRlID0gbnVsbCxcbiAgICBrZXkgPSBcImRlZmF1bHRcIlxuICB9ID0gbG9jYXRpb25Qcm9wO1xuXG4gIGxldCBsb2NhdGlvbiA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCB0cmFpbGluZ1BhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpO1xuXG4gICAgaWYgKHRyYWlsaW5nUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhuYW1lOiB0cmFpbGluZ1BhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaCxcbiAgICAgIHN0YXRlLFxuICAgICAga2V5XG4gICAgfTtcbiAgfSwgW2Jhc2VuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoLCBzdGF0ZSwga2V5XSk7XG5cbiAgd2FybmluZyhcbiAgICBsb2NhdGlvbiAhPSBudWxsLFxuICAgIGA8Um91dGVyIGJhc2VuYW1lPVwiJHtiYXNlbmFtZX1cIj4gaXMgbm90IGFibGUgdG8gbWF0Y2ggdGhlIFVSTCBgICtcbiAgICAgIGBcIiR7cGF0aG5hbWV9JHtzZWFyY2h9JHtoYXNofVwiIGJlY2F1c2UgaXQgZG9lcyBub3Qgc3RhcnQgd2l0aCB0aGUgYCArXG4gICAgICBgYmFzZW5hbWUsIHNvIHRoZSA8Um91dGVyPiB3b24ndCByZW5kZXIgYW55dGhpbmcuYFxuICApO1xuXG4gIGlmIChsb2NhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxOYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17bmF2aWdhdGlvbkNvbnRleHR9PlxuICAgICAgPExvY2F0aW9uQ29udGV4dC5Qcm92aWRlclxuICAgICAgICBjaGlsZHJlbj17Y2hpbGRyZW59XG4gICAgICAgIHZhbHVlPXt7IGxvY2F0aW9uLCBuYXZpZ2F0aW9uVHlwZSB9fVxuICAgICAgLz5cbiAgICA8L05hdmlnYXRpb25Db250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlc1Byb3BzIHtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGxvY2F0aW9uPzogUGFydGlhbDxMb2NhdGlvbj4gfCBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBjb250YWluZXIgZm9yIGEgbmVzdGVkIHRyZWUgb2YgPFJvdXRlPiBlbGVtZW50cyB0aGF0IHJlbmRlcnMgdGhlIGJyYW5jaFxuICogdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNyb3V0ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFJvdXRlcyh7XG4gIGNoaWxkcmVuLFxuICBsb2NhdGlvblxufTogUm91dGVzUHJvcHMpOiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsIHtcbiAgcmV0dXJuIHVzZVJvdXRlcyhjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pLCBsb2NhdGlvbik7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEhPT0tTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZnVsbCBocmVmIGZvciB0aGUgZ2l2ZW4gXCJ0b1wiIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgYnVpbGRpbmdcbiAqIGN1c3RvbSBsaW5rcyB0aGF0IGFyZSBhbHNvIGFjY2Vzc2libGUgYW5kIHByZXNlcnZlIHJpZ2h0LWNsaWNrIGJlaGF2aW9yLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlaHJlZlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlSHJlZih0bzogVG8pOiBzdHJpbmcge1xuICBpbnZhcmlhbnQoXG4gICAgdXNlSW5Sb3V0ZXJDb250ZXh0KCksXG4gICAgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gICAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICAgIGB1c2VIcmVmKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5gXG4gICk7XG5cbiAgbGV0IHsgYmFzZW5hbWUsIG5hdmlnYXRvciB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7IGhhc2gsIHBhdGhuYW1lLCBzZWFyY2ggfSA9IHVzZVJlc29sdmVkUGF0aCh0byk7XG5cbiAgbGV0IGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWU7XG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBsZXQgdG9QYXRobmFtZSA9IGdldFRvUGF0aG5hbWUodG8pO1xuICAgIGxldCBlbmRzV2l0aFNsYXNoID0gdG9QYXRobmFtZSAhPSBudWxsICYmIHRvUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpO1xuICAgIGpvaW5lZFBhdGhuYW1lID1cbiAgICAgIHBhdGhuYW1lID09PSBcIi9cIlxuICAgICAgICA/IGJhc2VuYW1lICsgKGVuZHNXaXRoU2xhc2ggPyBcIi9cIiA6IFwiXCIpXG4gICAgICAgIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuYXZpZ2F0b3IuY3JlYXRlSHJlZih7IHBhdGhuYW1lOiBqb2luZWRQYXRobmFtZSwgc2VhcmNoLCBoYXNoIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIGNvbXBvbmVudCBpcyBhIGRlc2NlbmRhbnQgb2YgYSA8Um91dGVyPi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZWlucm91dGVyY29udGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlSW5Sb3V0ZXJDb250ZXh0KCk6IGJvb2xlYW4ge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpICE9IG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBsb2NhdGlvbiBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgVVJMIGluIHdlYlxuICogYnJvd3NlcnMuXG4gKlxuICogTm90ZTogSWYgeW91J3JlIHVzaW5nIHRoaXMgaXQgbWF5IG1lYW4geW91J3JlIGRvaW5nIHNvbWUgb2YgeW91ciBvd25cbiAqIFwicm91dGluZ1wiIGluIHlvdXIgYXBwLCBhbmQgd2UnZCBsaWtlIHRvIGtub3cgd2hhdCB5b3VyIHVzZSBjYXNlIGlzLiBXZSBtYXlcbiAqIGJlIGFibGUgdG8gcHJvdmlkZSBzb21ldGhpbmcgaGlnaGVyLWxldmVsIHRvIGJldHRlciBzdWl0IHlvdXIgbmVlZHMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2Vsb2NhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9jYXRpb24oKTogTG9jYXRpb24ge1xuICBpbnZhcmlhbnQoXG4gICAgdXNlSW5Sb3V0ZXJDb250ZXh0KCksXG4gICAgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gICAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICAgIGB1c2VMb2NhdGlvbigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuYFxuICApO1xuXG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubG9jYXRpb247XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIGFjdGlvbiB3aGljaCBkZXNjcmliZXMgaG93IHRoZSByb3V0ZXIgY2FtZSB0b1xuICogdGhlIGN1cnJlbnQgbG9jYXRpb24sIGVpdGhlciBieSBhIHBvcCwgcHVzaCwgb3IgcmVwbGFjZSBvbiB0aGUgaGlzdG9yeSBzdGFjay5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZW5hdmlnYXRpb250eXBlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VOYXZpZ2F0aW9uVHlwZSgpOiBOYXZpZ2F0aW9uVHlwZSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubmF2aWdhdGlvblR5cGU7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBVUkwgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUgbWF0Y2hlcyB0aGUgY3VycmVudCBVUkwuXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8ga25vdyBcImFjdGl2ZVwiIHN0YXRlLCBlLmcuXG4gKiA8TmF2TGluaz4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VtYXRjaFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTWF0Y2g8UGFyYW1LZXkgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+KFxuICBwYXR0ZXJuOiBQYXRoUGF0dGVybiB8IHN0cmluZ1xuKTogUGF0aE1hdGNoPFBhcmFtS2V5PiB8IG51bGwge1xuICBpbnZhcmlhbnQoXG4gICAgdXNlSW5Sb3V0ZXJDb250ZXh0KCksXG4gICAgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gICAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICAgIGB1c2VNYXRjaCgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuYFxuICApO1xuXG4gIHJldHVybiBtYXRjaFBhdGgocGF0dGVybiwgdXNlTG9jYXRpb24oKS5wYXRobmFtZSk7XG59XG5cbi8qKlxuICogVGhlIGludGVyZmFjZSBmb3IgdGhlIG5hdmlnYXRlKCkgZnVuY3Rpb24gcmV0dXJuZWQgZnJvbSB1c2VOYXZpZ2F0ZSgpLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5hdmlnYXRlRnVuY3Rpb24ge1xuICAodG86IFRvLCBvcHRpb25zPzogTmF2aWdhdGVPcHRpb25zKTogdm9pZDtcbiAgKGRlbHRhOiBudW1iZXIpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdmlnYXRlT3B0aW9ucyB7XG4gIHJlcGxhY2U/OiBib29sZWFuO1xuICBzdGF0ZT86IGFueTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGltcGVyYXRpdmUgbWV0aG9kIGZvciBjaGFuZ2luZyB0aGUgbG9jYXRpb24uIFVzZWQgYnkgPExpbms+cywgYnV0XG4gKiBtYXkgYWxzbyBiZSB1c2VkIGJ5IG90aGVyIGVsZW1lbnRzIHRvIGNoYW5nZSB0aGUgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VuYXZpZ2F0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTmF2aWdhdGUoKTogTmF2aWdhdGVGdW5jdGlvbiB7XG4gIGludmFyaWFudChcbiAgICB1c2VJblJvdXRlckNvbnRleHQoKSxcbiAgICAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gICAgYHVzZU5hdmlnYXRlKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5gXG4gICk7XG5cbiAgbGV0IHsgYmFzZW5hbWUsIG5hdmlnYXRvciB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7IG1hdGNoZXMgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHsgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWUgfSA9IHVzZUxvY2F0aW9uKCk7XG5cbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFxuICAgIG1hdGNoZXMubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSlcbiAgKTtcblxuICBsZXQgYWN0aXZlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuXG4gIGxldCBuYXZpZ2F0ZTogTmF2aWdhdGVGdW5jdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICh0bzogVG8gfCBudW1iZXIsIG9wdGlvbnM6IHsgcmVwbGFjZT86IGJvb2xlYW47IHN0YXRlPzogYW55IH0gPSB7fSkgPT4ge1xuICAgICAgd2FybmluZyhcbiAgICAgICAgYWN0aXZlUmVmLmN1cnJlbnQsXG4gICAgICAgIGBZb3Ugc2hvdWxkIGNhbGwgbmF2aWdhdGUoKSBpbiBhIFJlYWN0LnVzZUVmZmVjdCgpLCBub3Qgd2hlbiBgICtcbiAgICAgICAgICBgeW91ciBjb21wb25lbnQgaXMgZmlyc3QgcmVuZGVyZWQuYFxuICAgICAgKTtcblxuICAgICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuXG4gICAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IHBhdGggPSByZXNvbHZlVG8oXG4gICAgICAgIHRvLFxuICAgICAgICBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksXG4gICAgICAgIGxvY2F0aW9uUGF0aG5hbWVcbiAgICAgICk7XG5cbiAgICAgIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICAgICAgcGF0aC5wYXRobmFtZSA9IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgICAgIH1cblxuICAgICAgKCEhb3B0aW9ucy5yZXBsYWNlID8gbmF2aWdhdG9yLnJlcGxhY2UgOiBuYXZpZ2F0b3IucHVzaCkoXG4gICAgICAgIHBhdGgsXG4gICAgICAgIG9wdGlvbnMuc3RhdGVcbiAgICAgICk7XG4gICAgfSxcbiAgICBbYmFzZW5hbWUsIG5hdmlnYXRvciwgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lXVxuICApO1xuXG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IDxPdXRsZXQ+IHRvIHJlbmRlciBjaGlsZCByb3V0ZXMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VvdXRsZXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU91dGxldCgpOiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KS5vdXRsZXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2Yga2V5L3ZhbHVlIHBhaXJzIG9mIHRoZSBkeW5hbWljIHBhcmFtcyBmcm9tIHRoZSBjdXJyZW50XG4gKiBVUkwgdGhhdCB3ZXJlIG1hdGNoZWQgYnkgdGhlIHJvdXRlIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VwYXJhbXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVBhcmFtczxLZXkgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+KCk6IFJlYWRvbmx5PFxuICBQYXJhbXM8S2V5PlxuPiB7XG4gIGxldCB7IG1hdGNoZXMgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIHJldHVybiByb3V0ZU1hdGNoID8gKHJvdXRlTWF0Y2gucGFyYW1zIGFzIGFueSkgOiB7fTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgcGF0aG5hbWUgb2YgdGhlIGdpdmVuIGB0b2AgdmFsdWUgYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZXJlc29sdmVkcGF0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVzb2x2ZWRQYXRoKHRvOiBUbyk6IFBhdGgge1xuICBsZXQgeyBtYXRjaGVzIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7IHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lIH0gPSB1c2VMb2NhdGlvbigpO1xuXG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShcbiAgICBtYXRjaGVzLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpXG4gICk7XG5cbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oXG4gICAgKCkgPT4gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUpLFxuICAgIFt0bywgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lXVxuICApO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHJvdXRlIHRoYXQgbWF0Y2hlZCB0aGUgY3VycmVudCBsb2NhdGlvbiwgcHJlcGFyZWRcbiAqIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dCB0byByZW5kZXIgdGhlIHJlbWFpbmRlciBvZiB0aGUgcm91dGUgdHJlZS4gUm91dGVcbiAqIGVsZW1lbnRzIGluIHRoZSB0cmVlIG11c3QgcmVuZGVyIGFuIDxPdXRsZXQ+IHRvIHJlbmRlciB0aGVpciBjaGlsZCByb3V0ZSdzXG4gKiBlbGVtZW50LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlcm91dGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZXMoXG4gIHJvdXRlczogUm91dGVPYmplY3RbXSxcbiAgbG9jYXRpb25Bcmc/OiBQYXJ0aWFsPExvY2F0aW9uPiB8IHN0cmluZ1xuKTogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCB7XG4gIGludmFyaWFudChcbiAgICB1c2VJblJvdXRlckNvbnRleHQoKSxcbiAgICAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gICAgYHVzZVJvdXRlcygpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuYFxuICApO1xuXG4gIGxldCB7IG1hdGNoZXM6IHBhcmVudE1hdGNoZXMgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBwYXJlbnRNYXRjaGVzW3BhcmVudE1hdGNoZXMubGVuZ3RoIC0gMV07XG4gIGxldCBwYXJlbnRQYXJhbXMgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbiAgbGV0IHBhcmVudFBhdGhuYW1lID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWUgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFBhdGhuYW1lQmFzZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lQmFzZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50Um91dGUgPSByb3V0ZU1hdGNoICYmIHJvdXRlTWF0Y2gucm91dGU7XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICAvLyBZb3Ugd29uJ3QgZ2V0IGEgd2FybmluZyBhYm91dCAyIGRpZmZlcmVudCA8Um91dGVzPiB1bmRlciBhIDxSb3V0ZT5cbiAgICAvLyB3aXRob3V0IGEgdHJhaWxpbmcgKiwgYnV0IHRoaXMgaXMgYSBiZXN0LWVmZm9ydCB3YXJuaW5nIGFueXdheSBzaW5jZSB3ZVxuICAgIC8vIGNhbm5vdCBldmVuIGdpdmUgdGhlIHdhcm5pbmcgdW5sZXNzIHRoZXkgbGFuZCBhdCB0aGUgcGFyZW50IHJvdXRlLlxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vIDxSb3V0ZXM+XG4gICAgLy8gICB7LyogVGhpcyByb3V0ZSBwYXRoIE1VU1QgZW5kIHdpdGggLyogYmVjYXVzZSBvdGhlcndpc2VcbiAgICAvLyAgICAgICBpdCB3aWxsIG5ldmVyIG1hdGNoIC9ibG9nL3Bvc3QvMTIzICovfVxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nXCIgZWxlbWVudD17PEJsb2cgLz59IC8+XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2cvZmVlZFwiIGVsZW1lbnQ9ezxCbG9nRmVlZCAvPn0gLz5cbiAgICAvLyA8L1JvdXRlcz5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIEJsb2coKSB7XG4gICAgLy8gICByZXR1cm4gKFxuICAgIC8vICAgICA8Um91dGVzPlxuICAgIC8vICAgICAgIDxSb3V0ZSBwYXRoPVwicG9zdC86aWRcIiBlbGVtZW50PXs8UG9zdCAvPn0gLz5cbiAgICAvLyAgICAgPC9Sb3V0ZXM+XG4gICAgLy8gICApO1xuICAgIC8vIH1cbiAgICBsZXQgcGFyZW50UGF0aCA9IChwYXJlbnRSb3V0ZSAmJiBwYXJlbnRSb3V0ZS5wYXRoKSB8fCBcIlwiO1xuICAgIHdhcm5pbmdPbmNlKFxuICAgICAgcGFyZW50UGF0aG5hbWUsXG4gICAgICAhcGFyZW50Um91dGUgfHwgcGFyZW50UGF0aC5lbmRzV2l0aChcIipcIiksXG4gICAgICBgWW91IHJlbmRlcmVkIGRlc2NlbmRhbnQgPFJvdXRlcz4gKG9yIGNhbGxlZCBcXGB1c2VSb3V0ZXMoKVxcYCkgYXQgYCArXG4gICAgICAgIGBcIiR7cGFyZW50UGF0aG5hbWV9XCIgKHVuZGVyIDxSb3V0ZSBwYXRoPVwiJHtwYXJlbnRQYXRofVwiPikgYnV0IHRoZSBgICtcbiAgICAgICAgYHBhcmVudCByb3V0ZSBwYXRoIGhhcyBubyB0cmFpbGluZyBcIipcIi4gVGhpcyBtZWFucyBpZiB5b3UgbmF2aWdhdGUgYCArXG4gICAgICAgIGBkZWVwZXIsIHRoZSBwYXJlbnQgd29uJ3QgbWF0Y2ggYW55bW9yZSBhbmQgdGhlcmVmb3JlIHRoZSBjaGlsZCBgICtcbiAgICAgICAgYHJvdXRlcyB3aWxsIG5ldmVyIHJlbmRlci5cXG5cXG5gICtcbiAgICAgICAgYFBsZWFzZSBjaGFuZ2UgdGhlIHBhcmVudCA8Um91dGUgcGF0aD1cIiR7cGFyZW50UGF0aH1cIj4gdG8gPFJvdXRlIGAgK1xuICAgICAgICBgcGF0aD1cIiR7cGFyZW50UGF0aH0vKlwiPi5gXG4gICAgKTtcbiAgfVxuXG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcblxuICBsZXQgbG9jYXRpb247XG4gIGlmIChsb2NhdGlvbkFyZykge1xuICAgIGxldCBwYXJzZWRMb2NhdGlvbkFyZyA9XG4gICAgICB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiIHx8XG4gICAgICAgIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lPy5zdGFydHNXaXRoKHBhcmVudFBhdGhuYW1lQmFzZSksXG4gICAgICBgV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBcXGA8Um91dGVzIGxvY2F0aW9uPlxcYCBvciBcXGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilcXGAsIGAgK1xuICAgICAgICBgdGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIGAgK1xuICAgICAgICBgbWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcIiR7cGFyZW50UGF0aG5hbWVCYXNlfVwiIGAgK1xuICAgICAgICBgYnV0IHBhdGhuYW1lIFwiJHtwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZX1cIiB3YXMgZ2l2ZW4gaW4gdGhlIFxcYGxvY2F0aW9uXFxgIHByb3AuYFxuICAgICk7XG5cbiAgICBsb2NhdGlvbiA9IHBhcnNlZExvY2F0aW9uQXJnO1xuICB9IGVsc2Uge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb25Gcm9tQ29udGV4dDtcbiAgfVxuXG4gIGxldCBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiO1xuICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPVxuICAgIHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCJcbiAgICAgID8gcGF0aG5hbWVcbiAgICAgIDogcGF0aG5hbWUuc2xpY2UocGFyZW50UGF0aG5hbWVCYXNlLmxlbmd0aCkgfHwgXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzLCB7IHBhdGhuYW1lOiByZW1haW5pbmdQYXRobmFtZSB9KTtcblxuICBpZiAoX19ERVZfXykge1xuICAgIHdhcm5pbmcoXG4gICAgICBwYXJlbnRSb3V0ZSB8fCBtYXRjaGVzICE9IG51bGwsXG4gICAgICBgTm8gcm91dGVzIG1hdGNoZWQgbG9jYXRpb24gXCIke2xvY2F0aW9uLnBhdGhuYW1lfSR7bG9jYXRpb24uc2VhcmNofSR7bG9jYXRpb24uaGFzaH1cIiBgXG4gICAgKTtcblxuICAgIHdhcm5pbmcoXG4gICAgICBtYXRjaGVzID09IG51bGwgfHxcbiAgICAgICAgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCxcbiAgICAgIGBNYXRjaGVkIGxlYWYgcm91dGUgYXQgbG9jYXRpb24gXCIke2xvY2F0aW9uLnBhdGhuYW1lfSR7bG9jYXRpb24uc2VhcmNofSR7bG9jYXRpb24uaGFzaH1cIiBkb2VzIG5vdCBoYXZlIGFuIGVsZW1lbnQuIGAgK1xuICAgICAgICBgVGhpcyBtZWFucyBpdCB3aWxsIHJlbmRlciBhbiA8T3V0bGV0IC8+IHdpdGggYSBudWxsIHZhbHVlIGJ5IGRlZmF1bHQgcmVzdWx0aW5nIGluIGFuIFwiZW1wdHlcIiBwYWdlLmBcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIF9yZW5kZXJNYXRjaGVzKFxuICAgIG1hdGNoZXMgJiZcbiAgICAgIG1hdGNoZXMubWFwKG1hdGNoID0+XG4gICAgICAgIE9iamVjdC5hc3NpZ24oe30sIG1hdGNoLCB7XG4gICAgICAgICAgcGFyYW1zOiBPYmplY3QuYXNzaWduKHt9LCBwYXJlbnRQYXJhbXMsIG1hdGNoLnBhcmFtcyksXG4gICAgICAgICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbcGFyZW50UGF0aG5hbWVCYXNlLCBtYXRjaC5wYXRobmFtZV0pLFxuICAgICAgICAgIHBhdGhuYW1lQmFzZTpcbiAgICAgICAgICAgIG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCJcbiAgICAgICAgICAgICAgPyBwYXJlbnRQYXRobmFtZUJhc2VcbiAgICAgICAgICAgICAgOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgICAgICAgfSlcbiAgICAgICksXG4gICAgcGFyZW50TWF0Y2hlc1xuICApO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYSByb3V0ZSBjb25maWcgZnJvbSBhIFJlYWN0IFwiY2hpbGRyZW5cIiBvYmplY3QsIHdoaWNoIGlzIHVzdWFsbHlcbiAqIGVpdGhlciBhIGA8Um91dGU+YCBlbGVtZW50IG9yIGFuIGFycmF5IG9mIHRoZW0uIFVzZWQgaW50ZXJuYWxseSBieVxuICogYDxSb3V0ZXM+YCB0byBjcmVhdGUgYSByb3V0ZSBjb25maWcgZnJvbSBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNjcmVhdGVyb3V0ZXNmcm9tY2hpbGRyZW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZVxuKTogUm91dGVPYmplY3RbXSB7XG4gIGxldCByb3V0ZXM6IFJvdXRlT2JqZWN0W10gPSBbXTtcblxuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBlbGVtZW50ID0+IHtcbiAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAvLyBJZ25vcmUgbm9uLWVsZW1lbnRzLiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gbW9yZSBlYXNpbHkgaW5saW5lXG4gICAgICAvLyBjb25kaXRpb25hbHMgaW4gdGhlaXIgcm91dGUgY29uZmlnLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50LnR5cGUgPT09IFJlYWN0LkZyYWdtZW50KSB7XG4gICAgICAvLyBUcmFuc3BhcmVudGx5IHN1cHBvcnQgUmVhY3QuRnJhZ21lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgIHJvdXRlcy5wdXNoLmFwcGx5KFxuICAgICAgICByb3V0ZXMsXG4gICAgICAgIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuKVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBlbGVtZW50LnR5cGUgPT09IFJvdXRlLFxuICAgICAgYFske1xuICAgICAgICB0eXBlb2YgZWxlbWVudC50eXBlID09PSBcInN0cmluZ1wiID8gZWxlbWVudC50eXBlIDogZWxlbWVudC50eXBlLm5hbWVcbiAgICAgIH1dIGlzIG5vdCBhIDxSb3V0ZT4gY29tcG9uZW50LiBBbGwgY29tcG9uZW50IGNoaWxkcmVuIG9mIDxSb3V0ZXM+IG11c3QgYmUgYSA8Um91dGU+IG9yIDxSZWFjdC5GcmFnbWVudD5gXG4gICAgKTtcblxuICAgIGxldCByb3V0ZTogUm91dGVPYmplY3QgPSB7XG4gICAgICBjYXNlU2Vuc2l0aXZlOiBlbGVtZW50LnByb3BzLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbGVtZW50OiBlbGVtZW50LnByb3BzLmVsZW1lbnQsXG4gICAgICBpbmRleDogZWxlbWVudC5wcm9wcy5pbmRleCxcbiAgICAgIHBhdGg6IGVsZW1lbnQucHJvcHMucGF0aFxuICAgIH07XG5cbiAgICBpZiAoZWxlbWVudC5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgcm91dGUuY2hpbGRyZW4gPSBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcm91dGVzLnB1c2gocm91dGUpO1xuICB9KTtcblxuICByZXR1cm4gcm91dGVzO1xufVxuXG4vKipcbiAqIFRoZSBwYXJhbWV0ZXJzIHRoYXQgd2VyZSBwYXJzZWQgZnJvbSB0aGUgVVJMIHBhdGguXG4gKi9cbmV4cG9ydCB0eXBlIFBhcmFtczxLZXkgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+ID0ge1xuICByZWFkb25seSBba2V5IGluIEtleV06IHN0cmluZyB8IHVuZGVmaW5lZDtcbn07XG5cbi8qKlxuICogQSByb3V0ZSBvYmplY3QgcmVwcmVzZW50cyBhIGxvZ2ljYWwgcm91dGUsIHdpdGggKG9wdGlvbmFsbHkpIGl0cyBjaGlsZFxuICogcm91dGVzIG9yZ2FuaXplZCBpbiBhIHRyZWUtbGlrZSBzdHJ1Y3R1cmUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVPYmplY3Qge1xuICBjYXNlU2Vuc2l0aXZlPzogYm9vbGVhbjtcbiAgY2hpbGRyZW4/OiBSb3V0ZU9iamVjdFtdO1xuICBlbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlO1xuICBpbmRleD86IGJvb2xlYW47XG4gIHBhdGg/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHBhdGggd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjZ2VuZXJhdGVwYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aDogc3RyaW5nLCBwYXJhbXM6IFBhcmFtcyA9IHt9KTogc3RyaW5nIHtcbiAgcmV0dXJuIHBhdGhcbiAgICAucmVwbGFjZSgvOihcXHcrKS9nLCAoXywga2V5KSA9PiB7XG4gICAgICBpbnZhcmlhbnQocGFyYW1zW2tleV0gIT0gbnVsbCwgYE1pc3NpbmcgXCI6JHtrZXl9XCIgcGFyYW1gKTtcbiAgICAgIHJldHVybiBwYXJhbXNba2V5XSE7XG4gICAgfSlcbiAgICAucmVwbGFjZSgvXFwvKlxcKiQvLCBfID0+XG4gICAgICBwYXJhbXNbXCIqXCJdID09IG51bGwgPyBcIlwiIDogcGFyYW1zW1wiKlwiXS5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKVxuICAgICk7XG59XG5cbi8qKlxuICogQSBSb3V0ZU1hdGNoIGNvbnRhaW5zIGluZm8gYWJvdXQgaG93IGEgcm91dGUgbWF0Y2hlZCBhIFVSTC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3V0ZU1hdGNoPFBhcmFtS2V5IGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nPiB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZXMgYW5kIHZhbHVlcyBvZiBkeW5hbWljIHBhcmFtZXRlcnMgaW4gdGhlIFVSTC5cbiAgICovXG4gIHBhcmFtczogUGFyYW1zPFBhcmFtS2V5PjtcbiAgLyoqXG4gICAqIFRoZSBwb3J0aW9uIG9mIHRoZSBVUkwgcGF0aG5hbWUgdGhhdCB3YXMgbWF0Y2hlZC5cbiAgICovXG4gIHBhdGhuYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIG1hdGNoZWQgYmVmb3JlIGNoaWxkIHJvdXRlcy5cbiAgICovXG4gIHBhdGhuYW1lQmFzZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHJvdXRlIG9iamVjdCB0aGF0IHdhcyB1c2VkIHRvIG1hdGNoLlxuICAgKi9cbiAgcm91dGU6IFJvdXRlT2JqZWN0O1xufVxuXG4vKipcbiAqIE1hdGNoZXMgdGhlIGdpdmVuIHJvdXRlcyB0byBhIGxvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBtYXRjaCBkYXRhLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjbWF0Y2hyb3V0ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoUm91dGVzKFxuICByb3V0ZXM6IFJvdXRlT2JqZWN0W10sXG4gIGxvY2F0aW9uQXJnOiBQYXJ0aWFsPExvY2F0aW9uPiB8IHN0cmluZyxcbiAgYmFzZW5hbWUgPSBcIi9cIlxuKTogUm91dGVNYXRjaFtdIHwgbnVsbCB7XG4gIGxldCBsb2NhdGlvbiA9XG4gICAgdHlwZW9mIGxvY2F0aW9uQXJnID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uQXJnKSA6IGxvY2F0aW9uQXJnO1xuXG4gIGxldCBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCIsIGJhc2VuYW1lKTtcblxuICBpZiAocGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbGV0IGJyYW5jaGVzID0gZmxhdHRlblJvdXRlcyhyb3V0ZXMpO1xuICByYW5rUm91dGVCcmFuY2hlcyhicmFuY2hlcyk7XG5cbiAgbGV0IG1hdGNoZXMgPSBudWxsO1xuICBmb3IgKGxldCBpID0gMDsgbWF0Y2hlcyA9PSBudWxsICYmIGkgPCBicmFuY2hlcy5sZW5ndGg7ICsraSkge1xuICAgIG1hdGNoZXMgPSBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaGVzW2ldLCByb3V0ZXMsIHBhdGhuYW1lKTtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVzO1xufVxuXG5pbnRlcmZhY2UgUm91dGVNZXRhIHtcbiAgcmVsYXRpdmVQYXRoOiBzdHJpbmc7XG4gIGNhc2VTZW5zaXRpdmU6IGJvb2xlYW47XG4gIGNoaWxkcmVuSW5kZXg6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIFJvdXRlQnJhbmNoIHtcbiAgcGF0aDogc3RyaW5nO1xuICBzY29yZTogbnVtYmVyO1xuICByb3V0ZXNNZXRhOiBSb3V0ZU1ldGFbXTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlblJvdXRlcyhcbiAgcm91dGVzOiBSb3V0ZU9iamVjdFtdLFxuICBicmFuY2hlczogUm91dGVCcmFuY2hbXSA9IFtdLFxuICBwYXJlbnRzTWV0YTogUm91dGVNZXRhW10gPSBbXSxcbiAgcGFyZW50UGF0aCA9IFwiXCJcbik6IFJvdXRlQnJhbmNoW10ge1xuICByb3V0ZXMuZm9yRWFjaCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgbGV0IG1ldGE6IFJvdXRlTWV0YSA9IHtcbiAgICAgIHJlbGF0aXZlUGF0aDogcm91dGUucGF0aCB8fCBcIlwiLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogcm91dGUuY2FzZVNlbnNpdGl2ZSA9PT0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuSW5kZXg6IGluZGV4XG4gICAgfTtcblxuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKHBhcmVudFBhdGgpLFxuICAgICAgICBgQWJzb2x1dGUgcm91dGUgcGF0aCBcIiR7bWV0YS5yZWxhdGl2ZVBhdGh9XCIgbmVzdGVkIHVuZGVyIHBhdGggYCArXG4gICAgICAgICAgYFwiJHtwYXJlbnRQYXRofVwiIGlzIG5vdCB2YWxpZC4gQW4gYWJzb2x1dGUgY2hpbGQgcm91dGUgcGF0aCBgICtcbiAgICAgICAgICBgbXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5gXG4gICAgICApO1xuXG4gICAgICBtZXRhLnJlbGF0aXZlUGF0aCA9IG1ldGEucmVsYXRpdmVQYXRoLnNsaWNlKHBhcmVudFBhdGgubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBsZXQgcGF0aCA9IGpvaW5QYXRocyhbcGFyZW50UGF0aCwgbWV0YS5yZWxhdGl2ZVBhdGhdKTtcbiAgICBsZXQgcm91dGVzTWV0YSA9IHBhcmVudHNNZXRhLmNvbmNhdChtZXRhKTtcblxuICAgIC8vIEFkZCB0aGUgY2hpbGRyZW4gYmVmb3JlIGFkZGluZyB0aGlzIHJvdXRlIHRvIHRoZSBhcnJheSBzbyB3ZSB0cmF2ZXJzZSB0aGVcbiAgICAvLyByb3V0ZSB0cmVlIGRlcHRoLWZpcnN0IGFuZCBjaGlsZCByb3V0ZXMgYXBwZWFyIGJlZm9yZSB0aGVpciBwYXJlbnRzIGluXG4gICAgLy8gdGhlIFwiZmxhdHRlbmVkXCIgdmVyc2lvbi5cbiAgICBpZiAocm91dGUuY2hpbGRyZW4gJiYgcm91dGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICByb3V0ZS5pbmRleCAhPT0gdHJ1ZSxcbiAgICAgICAgYEluZGV4IHJvdXRlcyBtdXN0IG5vdCBoYXZlIGNoaWxkIHJvdXRlcy4gUGxlYXNlIHJlbW92ZSBgICtcbiAgICAgICAgICBgYWxsIGNoaWxkIHJvdXRlcyBmcm9tIHJvdXRlIHBhdGggXCIke3BhdGh9XCIuYFxuICAgICAgKTtcblxuICAgICAgZmxhdHRlblJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgYnJhbmNoZXMsIHJvdXRlc01ldGEsIHBhdGgpO1xuICAgIH1cblxuICAgIC8vIFJvdXRlcyB3aXRob3V0IGEgcGF0aCBzaG91bGRuJ3QgZXZlciBtYXRjaCBieSB0aGVtc2VsdmVzIHVubGVzcyB0aGV5IGFyZVxuICAgIC8vIGluZGV4IHJvdXRlcywgc28gZG9uJ3QgYWRkIHRoZW0gdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgYnJhbmNoZXMuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBicmFuY2hlcy5wdXNoKHsgcGF0aCwgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksIHJvdXRlc01ldGEgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBicmFuY2hlcztcbn1cblxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXM6IFJvdXRlQnJhbmNoW10pOiB2b2lkIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT5cbiAgICBhLnNjb3JlICE9PSBiLnNjb3JlXG4gICAgICA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICAgICAgOiBjb21wYXJlSW5kZXhlcyhcbiAgICAgICAgICBhLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSxcbiAgICAgICAgICBiLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KVxuICAgICAgICApXG4gICk7XG59XG5cbmNvbnN0IHBhcmFtUmUgPSAvXjpcXHcrJC87XG5jb25zdCBkeW5hbWljU2VnbWVudFZhbHVlID0gMztcbmNvbnN0IGluZGV4Um91dGVWYWx1ZSA9IDI7XG5jb25zdCBlbXB0eVNlZ21lbnRWYWx1ZSA9IDE7XG5jb25zdCBzdGF0aWNTZWdtZW50VmFsdWUgPSAxMDtcbmNvbnN0IHNwbGF0UGVuYWx0eSA9IC0yO1xuY29uc3QgaXNTcGxhdCA9IChzOiBzdHJpbmcpID0+IHMgPT09IFwiKlwiO1xuXG5mdW5jdGlvbiBjb21wdXRlU2NvcmUocGF0aDogc3RyaW5nLCBpbmRleDogYm9vbGVhbiB8IHVuZGVmaW5lZCk6IG51bWJlciB7XG4gIGxldCBzZWdtZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBsZXQgaW5pdGlhbFNjb3JlID0gc2VnbWVudHMubGVuZ3RoO1xuICBpZiAoc2VnbWVudHMuc29tZShpc1NwbGF0KSkge1xuICAgIGluaXRpYWxTY29yZSArPSBzcGxhdFBlbmFsdHk7XG4gIH1cblxuICBpZiAoaW5kZXgpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gaW5kZXhSb3V0ZVZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzXG4gICAgLmZpbHRlcihzID0+ICFpc1NwbGF0KHMpKVxuICAgIC5yZWR1Y2UoXG4gICAgICAoc2NvcmUsIHNlZ21lbnQpID0+XG4gICAgICAgIHNjb3JlICtcbiAgICAgICAgKHBhcmFtUmUudGVzdChzZWdtZW50KVxuICAgICAgICAgID8gZHluYW1pY1NlZ21lbnRWYWx1ZVxuICAgICAgICAgIDogc2VnbWVudCA9PT0gXCJcIlxuICAgICAgICAgID8gZW1wdHlTZWdtZW50VmFsdWVcbiAgICAgICAgICA6IHN0YXRpY1NlZ21lbnRWYWx1ZSksXG4gICAgICBpbml0aWFsU2NvcmVcbiAgICApO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlSW5kZXhlcyhhOiBudW1iZXJbXSwgYjogbnVtYmVyW10pOiBudW1iZXIge1xuICBsZXQgc2libGluZ3MgPVxuICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLnNsaWNlKDAsIC0xKS5ldmVyeSgobiwgaSkgPT4gbiA9PT0gYltpXSk7XG5cbiAgcmV0dXJuIHNpYmxpbmdzXG4gICAgPyAvLyBJZiB0d28gcm91dGVzIGFyZSBzaWJsaW5ncywgd2Ugc2hvdWxkIHRyeSB0byBtYXRjaCB0aGUgZWFybGllciBzaWJsaW5nXG4gICAgICAvLyBmaXJzdC4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIGhhdmUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgbWF0Y2hpbmdcbiAgICAgIC8vIGJlaGF2aW9yIGJ5IHNpbXBseSBwdXR0aW5nIHJvdXRlcyB3aXRoIGlkZW50aWNhbCBwYXRocyBpbiB0aGUgb3JkZXIgdGhleVxuICAgICAgLy8gd2FudCB0aGVtIHRyaWVkLlxuICAgICAgYVthLmxlbmd0aCAtIDFdIC0gYltiLmxlbmd0aCAtIDFdXG4gICAgOiAvLyBPdGhlcndpc2UsIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gcmFuayBub24tc2libGluZ3MgYnkgaW5kZXgsXG4gICAgICAvLyBzbyB0aGV5IHNvcnQgZXF1YWxseS5cbiAgICAgIDA7XG59XG5cbmZ1bmN0aW9uIG1hdGNoUm91dGVCcmFuY2g8UGFyYW1LZXkgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+KFxuICBicmFuY2g6IFJvdXRlQnJhbmNoLFxuICAvLyBUT0RPOiBhdHRhY2ggb3JpZ2luYWwgcm91dGUgb2JqZWN0IGluc2lkZSByb3V0ZXNNZXRhIHNvIHdlIGRvbid0IG5lZWQgdGhpcyBhcmdcbiAgcm91dGVzQXJnOiBSb3V0ZU9iamVjdFtdLFxuICBwYXRobmFtZTogc3RyaW5nXG4pOiBSb3V0ZU1hdGNoPFBhcmFtS2V5PltdIHwgbnVsbCB7XG4gIGxldCByb3V0ZXMgPSByb3V0ZXNBcmc7XG4gIGxldCB7IHJvdXRlc01ldGEgfSA9IGJyYW5jaDtcblxuICBsZXQgbWF0Y2hlZFBhcmFtcyA9IHt9O1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gXCIvXCI7XG4gIGxldCBtYXRjaGVzOiBSb3V0ZU1hdGNoW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXNNZXRhLmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IG1ldGEgPSByb3V0ZXNNZXRhW2ldO1xuICAgIGxldCBlbmQgPSBpID09PSByb3V0ZXNNZXRhLmxlbmd0aCAtIDE7XG4gICAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID1cbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9PT0gXCIvXCJcbiAgICAgICAgPyBwYXRobmFtZVxuICAgICAgICA6IHBhdGhuYW1lLnNsaWNlKG1hdGNoZWRQYXRobmFtZS5sZW5ndGgpIHx8IFwiL1wiO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoUGF0aChcbiAgICAgIHsgcGF0aDogbWV0YS5yZWxhdGl2ZVBhdGgsIGNhc2VTZW5zaXRpdmU6IG1ldGEuY2FzZVNlbnNpdGl2ZSwgZW5kIH0sXG4gICAgICByZW1haW5pbmdQYXRobmFtZVxuICAgICk7XG5cbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24obWF0Y2hlZFBhcmFtcywgbWF0Y2gucGFyYW1zKTtcblxuICAgIGxldCByb3V0ZSA9IHJvdXRlc1ttZXRhLmNoaWxkcmVuSW5kZXhdO1xuXG4gICAgbWF0Y2hlcy5wdXNoKHtcbiAgICAgIHBhcmFtczogbWF0Y2hlZFBhcmFtcyxcbiAgICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICAgIHBhdGhuYW1lQmFzZTogam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pLFxuICAgICAgcm91dGVcbiAgICB9KTtcblxuICAgIGlmIChtYXRjaC5wYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgICBtYXRjaGVkUGF0aG5hbWUgPSBqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSk7XG4gICAgfVxuXG4gICAgcm91dGVzID0gcm91dGUuY2hpbGRyZW4hO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgcmVzdWx0IG9mIGBtYXRjaFJvdXRlcygpYCBpbnRvIGEgUmVhY3QgZWxlbWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlck1hdGNoZXMoXG4gIG1hdGNoZXM6IFJvdXRlTWF0Y2hbXSB8IG51bGxcbik6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwge1xuICByZXR1cm4gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyk7XG59XG5cbmZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKFxuICBtYXRjaGVzOiBSb3V0ZU1hdGNoW10gfCBudWxsLFxuICBwYXJlbnRNYXRjaGVzOiBSb3V0ZU1hdGNoW10gPSBbXVxuKTogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCB7XG4gIGlmIChtYXRjaGVzID09IG51bGwpIHJldHVybiBudWxsO1xuXG4gIHJldHVybiBtYXRjaGVzLnJlZHVjZVJpZ2h0KChvdXRsZXQsIG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8Um91dGVDb250ZXh0LlByb3ZpZGVyXG4gICAgICAgIGNoaWxkcmVuPXtcbiAgICAgICAgICBtYXRjaC5yb3V0ZS5lbGVtZW50ICE9PSB1bmRlZmluZWQgPyBtYXRjaC5yb3V0ZS5lbGVtZW50IDogPE91dGxldCAvPlxuICAgICAgICB9XG4gICAgICAgIHZhbHVlPXt7XG4gICAgICAgICAgb3V0bGV0LFxuICAgICAgICAgIG1hdGNoZXM6IHBhcmVudE1hdGNoZXMuY29uY2F0KG1hdGNoZXMuc2xpY2UoMCwgaW5kZXggKyAxKSlcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgKTtcbiAgfSwgbnVsbCBhcyBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsKTtcbn1cblxuLyoqXG4gKiBBIFBhdGhQYXR0ZXJuIGlzIHVzZWQgdG8gbWF0Y2ggb24gc29tZSBwb3J0aW9uIG9mIGEgVVJMIHBhdGhuYW1lLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhdGhQYXR0ZXJuIHtcbiAgLyoqXG4gICAqIEEgc3RyaW5nIHRvIG1hdGNoIGFnYWluc3QgYSBVUkwgcGF0aG5hbWUuIE1heSBjb250YWluIGA6aWRgLXN0eWxlIHNlZ21lbnRzXG4gICAqIHRvIGluZGljYXRlIHBsYWNlaG9sZGVycyBmb3IgZHluYW1pYyBwYXJhbWV0ZXJzLiBNYXkgYWxzbyBlbmQgd2l0aCBgLypgIHRvXG4gICAqIGluZGljYXRlIG1hdGNoaW5nIHRoZSByZXN0IG9mIHRoZSBVUkwgcGF0aG5hbWUuXG4gICAqL1xuICBwYXRoOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTaG91bGQgYmUgYHRydWVgIGlmIHRoZSBzdGF0aWMgcG9ydGlvbnMgb2YgdGhlIGBwYXRoYCBzaG91bGQgYmUgbWF0Y2hlZCBpblxuICAgKiB0aGUgc2FtZSBjYXNlLlxuICAgKi9cbiAgY2FzZVNlbnNpdGl2ZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBTaG91bGQgYmUgYHRydWVgIGlmIHRoaXMgcGF0dGVybiBzaG91bGQgbWF0Y2ggdGhlIGVudGlyZSBVUkwgcGF0aG5hbWUuXG4gICAqL1xuICBlbmQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEEgUGF0aE1hdGNoIGNvbnRhaW5zIGluZm8gYWJvdXQgaG93IGEgUGF0aFBhdHRlcm4gbWF0Y2hlZCBvbiBhIFVSTCBwYXRobmFtZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXRoTWF0Y2g8UGFyYW1LZXkgZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+IHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lcyBhbmQgdmFsdWVzIG9mIGR5bmFtaWMgcGFyYW1ldGVycyBpbiB0aGUgVVJMLlxuICAgKi9cbiAgcGFyYW1zOiBQYXJhbXM8UGFyYW1LZXk+O1xuICAvKipcbiAgICogVGhlIHBvcnRpb24gb2YgdGhlIFVSTCBwYXRobmFtZSB0aGF0IHdhcyBtYXRjaGVkLlxuICAgKi9cbiAgcGF0aG5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBwb3J0aW9uIG9mIHRoZSBVUkwgcGF0aG5hbWUgdGhhdCB3YXMgbWF0Y2hlZCBiZWZvcmUgY2hpbGQgcm91dGVzLlxuICAgKi9cbiAgcGF0aG5hbWVCYXNlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgcGF0dGVybiB0aGF0IHdhcyB1c2VkIHRvIG1hdGNoLlxuICAgKi9cbiAgcGF0dGVybjogUGF0aFBhdHRlcm47XG59XG5cbnR5cGUgTXV0YWJsZTxUPiA9IHtcbiAgLXJlYWRvbmx5IFtQIGluIGtleW9mIFRdOiBUW1BdO1xufTtcblxuLyoqXG4gKiBQZXJmb3JtcyBwYXR0ZXJuIG1hdGNoaW5nIG9uIGEgVVJMIHBhdGhuYW1lIGFuZCByZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0XG4gKiB0aGUgbWF0Y2guXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNtYXRjaHBhdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoUGF0aDxQYXJhbUtleSBleHRlbmRzIHN0cmluZyA9IHN0cmluZz4oXG4gIHBhdHRlcm46IFBhdGhQYXR0ZXJuIHwgc3RyaW5nLFxuICBwYXRobmFtZTogc3RyaW5nXG4pOiBQYXRoTWF0Y2g8UGFyYW1LZXk+IHwgbnVsbCB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gXCJzdHJpbmdcIikge1xuICAgIHBhdHRlcm4gPSB7IHBhdGg6IHBhdHRlcm4sIGNhc2VTZW5zaXRpdmU6IGZhbHNlLCBlbmQ6IHRydWUgfTtcbiAgfVxuXG4gIGxldCBbbWF0Y2hlciwgcGFyYW1OYW1lc10gPSBjb21waWxlUGF0aChcbiAgICBwYXR0ZXJuLnBhdGgsXG4gICAgcGF0dGVybi5jYXNlU2Vuc2l0aXZlLFxuICAgIHBhdHRlcm4uZW5kXG4gICk7XG5cbiAgbGV0IG1hdGNoID0gcGF0aG5hbWUubWF0Y2gobWF0Y2hlcik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuXG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBtYXRjaFswXTtcbiAgbGV0IHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gIGxldCBjYXB0dXJlR3JvdXBzID0gbWF0Y2guc2xpY2UoMSk7XG4gIGxldCBwYXJhbXM6IFBhcmFtcyA9IHBhcmFtTmFtZXMucmVkdWNlPE11dGFibGU8UGFyYW1zPj4oXG4gICAgKG1lbW8sIHBhcmFtTmFtZSwgaW5kZXgpID0+IHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcGF0aG5hbWVCYXNlIGhlcmUgdXNpbmcgdGhlIHJhdyBzcGxhdCB2YWx1ZVxuICAgICAgLy8gaW5zdGVhZCBvZiB1c2luZyBwYXJhbXNbXCIqXCJdIGxhdGVyIGJlY2F1c2UgaXQgd2lsbCBiZSBkZWNvZGVkIHRoZW5cbiAgICAgIGlmIChwYXJhbU5hbWUgPT09IFwiKlwiKSB7XG4gICAgICAgIGxldCBzcGxhdFZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIjtcbiAgICAgICAgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lXG4gICAgICAgICAgLnNsaWNlKDAsIG1hdGNoZWRQYXRobmFtZS5sZW5ndGggLSBzcGxhdFZhbHVlLmxlbmd0aClcbiAgICAgICAgICAucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICAgICAgfVxuXG4gICAgICBtZW1vW3BhcmFtTmFtZV0gPSBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQoXG4gICAgICAgIGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8IFwiXCIsXG4gICAgICAgIHBhcmFtTmFtZVxuICAgICAgKTtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sXG4gICAge31cbiAgKTtcblxuICByZXR1cm4ge1xuICAgIHBhcmFtcyxcbiAgICBwYXRobmFtZTogbWF0Y2hlZFBhdGhuYW1lLFxuICAgIHBhdGhuYW1lQmFzZSxcbiAgICBwYXR0ZXJuXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKFxuICBwYXRoOiBzdHJpbmcsXG4gIGNhc2VTZW5zaXRpdmUgPSBmYWxzZSxcbiAgZW5kID0gdHJ1ZVxuKTogW1JlZ0V4cCwgc3RyaW5nW11dIHtcbiAgd2FybmluZyhcbiAgICBwYXRoID09PSBcIipcIiB8fCAhcGF0aC5lbmRzV2l0aChcIipcIikgfHwgcGF0aC5lbmRzV2l0aChcIi8qXCIpLFxuICAgIGBSb3V0ZSBwYXRoIFwiJHtwYXRofVwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIGAgK1xuICAgICAgYFwiJHtwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpfVwiIGJlY2F1c2UgdGhlIFxcYCpcXGAgY2hhcmFjdGVyIG11c3QgYCArXG4gICAgICBgYWx3YXlzIGZvbGxvdyBhIFxcYC9cXGAgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBgICtcbiAgICAgIGBwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFwiJHtwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpfVwiLmBcbiAgKTtcblxuICBsZXQgcGFyYW1OYW1lczogc3RyaW5nW10gPSBbXTtcbiAgbGV0IHJlZ2V4cFNvdXJjZSA9XG4gICAgXCJeXCIgK1xuICAgIHBhdGhcbiAgICAgIC5yZXBsYWNlKC9cXC8qXFwqPyQvLCBcIlwiKSAvLyBJZ25vcmUgdHJhaWxpbmcgLyBhbmQgLyosIHdlJ2xsIGhhbmRsZSBpdCBiZWxvd1xuICAgICAgLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpIC8vIE1ha2Ugc3VyZSBpdCBoYXMgYSBsZWFkaW5nIC9cbiAgICAgIC5yZXBsYWNlKC9bXFxcXC4qK14kP3t9fCgpW1xcXV0vZywgXCJcXFxcJCZcIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnNcbiAgICAgIC5yZXBsYWNlKC86KFxcdyspL2csIChfOiBzdHJpbmcsIHBhcmFtTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHBhcmFtTmFtZXMucHVzaChwYXJhbU5hbWUpO1xuICAgICAgICByZXR1cm4gXCIoW15cXFxcL10rKVwiO1xuICAgICAgfSk7XG5cbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpKSB7XG4gICAgcGFyYW1OYW1lcy5wdXNoKFwiKlwiKTtcbiAgICByZWdleHBTb3VyY2UgKz1cbiAgICAgIHBhdGggPT09IFwiKlwiIHx8IHBhdGggPT09IFwiLypcIlxuICAgICAgICA/IFwiKC4qKSRcIiAvLyBBbHJlYWR5IG1hdGNoZWQgdGhlIGluaXRpYWwgLywganVzdCBtYXRjaCB0aGUgcmVzdFxuICAgICAgICA6IFwiKD86XFxcXC8oLispfFxcXFwvKikkXCI7IC8vIERvbid0IGluY2x1ZGUgdGhlIC8gaW4gcGFyYW1zW1wiKlwiXVxuICB9IGVsc2Uge1xuICAgIHJlZ2V4cFNvdXJjZSArPSBlbmRcbiAgICAgID8gXCJcXFxcLyokXCIgLy8gV2hlbiBtYXRjaGluZyB0byB0aGUgZW5kLCBpZ25vcmUgdHJhaWxpbmcgc2xhc2hlc1xuICAgICAgOiAvLyBPdGhlcndpc2UsIGF0IGxlYXN0IG1hdGNoIGEgd29yZCBib3VuZGFyeS4gVGhpcyByZXN0cmljdHMgcGFyZW50XG4gICAgICAgIC8vIHJvdXRlcyB0byBtYXRjaGluZyBvbmx5IHRoZWlyIG93biB3b3JkcyBhbmQgbm90aGluZyBtb3JlLCBlLmcuIHBhcmVudFxuICAgICAgICAvLyByb3V0ZSBcIi9ob21lXCIgc2hvdWxkIG5vdCBtYXRjaCBcIi9ob21lMlwiLlxuICAgICAgICBcIig/OlxcXFxifCQpXCI7XG4gIH1cblxuICBsZXQgbWF0Y2hlciA9IG5ldyBSZWdFeHAocmVnZXhwU291cmNlLCBjYXNlU2Vuc2l0aXZlID8gdW5kZWZpbmVkIDogXCJpXCIpO1xuXG4gIHJldHVybiBbbWF0Y2hlciwgcGFyYW1OYW1lc107XG59XG5cbmZ1bmN0aW9uIHNhZmVseURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZTogc3RyaW5nLCBwYXJhbU5hbWU6IHN0cmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgIGBUaGUgdmFsdWUgZm9yIHRoZSBVUkwgcGFyYW0gXCIke3BhcmFtTmFtZX1cIiB3aWxsIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2VgICtcbiAgICAgICAgYCB0aGUgc3RyaW5nIFwiJHt2YWx1ZX1cIiBpcyBhIG1hbGZvcm1lZCBVUkwgc2VnbWVudC4gVGhpcyBpcyBwcm9iYWJseWAgK1xuICAgICAgICBgIGR1ZSB0byBhIGJhZCBwZXJjZW50IGVuY29kaW5nICgke2Vycm9yfSkuYFxuICAgICk7XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmVzb2x2ZWQgcGF0aCBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHBhdGhuYW1lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjcmVzb2x2ZXBhdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVQYXRoKHRvOiBUbywgZnJvbVBhdGhuYW1lID0gXCIvXCIpOiBQYXRoIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogdG9QYXRobmFtZSxcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG5cbiAgbGV0IHBhdGhuYW1lID0gdG9QYXRobmFtZVxuICAgID8gdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKVxuICAgICAgPyB0b1BhdGhuYW1lXG4gICAgICA6IHJlc29sdmVQYXRobmFtZSh0b1BhdGhuYW1lLCBmcm9tUGF0aG5hbWUpXG4gICAgOiBmcm9tUGF0aG5hbWU7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2g6IG5vcm1hbGl6ZVNlYXJjaChzZWFyY2gpLFxuICAgIGhhc2g6IG5vcm1hbGl6ZUhhc2goaGFzaClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHJlbGF0aXZlUGF0aDogc3RyaW5nLCBmcm9tUGF0aG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIGxldCBzZWdtZW50cyA9IGZyb21QYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgbGV0IHJlbGF0aXZlU2VnbWVudHMgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIvXCIpO1xuXG4gIHJlbGF0aXZlU2VnbWVudHMuZm9yRWFjaChzZWdtZW50ID0+IHtcbiAgICBpZiAoc2VnbWVudCA9PT0gXCIuLlwiKSB7XG4gICAgICAvLyBLZWVwIHRoZSByb290IFwiXCIgc2VnbWVudCBzbyB0aGUgcGF0aG5hbWUgc3RhcnRzIGF0IC9cbiAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiAxKSBzZWdtZW50cy5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09IFwiLlwiKSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA+IDEgPyBzZWdtZW50cy5qb2luKFwiL1wiKSA6IFwiL1wiO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlVG8oXG4gIHRvQXJnOiBUbyxcbiAgcm91dGVQYXRobmFtZXM6IHN0cmluZ1tdLFxuICBsb2NhdGlvblBhdGhuYW1lOiBzdHJpbmdcbik6IFBhdGgge1xuICBsZXQgdG8gPSB0eXBlb2YgdG9BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG9BcmcpIDogdG9Bcmc7XG4gIGxldCB0b1BhdGhuYW1lID0gdG9BcmcgPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHRvLnBhdGhuYW1lO1xuXG4gIC8vIElmIGEgcGF0aG5hbWUgaXMgZXhwbGljaXRseSBwcm92aWRlZCBpbiBgdG9gLCBpdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlXG4gIC8vIHJvdXRlIGNvbnRleHQuIFRoaXMgaXMgZXhwbGFpbmVkIGluIGBOb3RlIG9uIGA8TGluayB0bz5gIHZhbHVlc2AgaW4gb3VyXG4gIC8vIG1pZ3JhdGlvbiBndWlkZSBmcm9tIHY1IGFzIGEgbWVhbnMgb2YgZGlzYW1iaWd1YXRpb24gYmV0d2VlbiBgdG9gIHZhbHVlc1xuICAvLyB0aGF0IGJlZ2luIHdpdGggYC9gIGFuZCB0aG9zZSB0aGF0IGRvIG5vdC4gSG93ZXZlciwgdGhpcyBpcyBwcm9ibGVtYXRpYyBmb3JcbiAgLy8gYHRvYCB2YWx1ZXMgdGhhdCBkbyBub3QgcHJvdmlkZSBhIHBhdGhuYW1lLiBgdG9gIGNhbiBzaW1wbHkgYmUgYSBzZWFyY2ggb3JcbiAgLy8gaGFzaCBzdHJpbmcsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGFzc3VtZSB0aGF0IHRoZSBuYXZpZ2F0aW9uIGlzIHJlbGF0aXZlXG4gIC8vIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uJ3MgcGF0aG5hbWUgYW5kICpub3QqIHRoZSByb3V0ZSBwYXRobmFtZS5cbiAgbGV0IGZyb206IHN0cmluZztcbiAgaWYgKHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuXG4gICAgaWYgKHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi4uXCIpKSB7XG4gICAgICBsZXQgdG9TZWdtZW50cyA9IHRvUGF0aG5hbWUuc3BsaXQoXCIvXCIpO1xuXG4gICAgICAvLyBFYWNoIGxlYWRpbmcgLi4gc2VnbWVudCBtZWFucyBcImdvIHVwIG9uZSByb3V0ZVwiIGluc3RlYWQgb2YgXCJnbyB1cCBvbmVcbiAgICAgIC8vIFVSTCBzZWdtZW50XCIuICBUaGlzIGlzIGEga2V5IGRpZmZlcmVuY2UgZnJvbSBob3cgPGEgaHJlZj4gd29ya3MgYW5kIGFcbiAgICAgIC8vIG1ham9yIHJlYXNvbiB3ZSBjYWxsIHRoaXMgYSBcInRvXCIgdmFsdWUgaW5zdGVhZCBvZiBhIFwiaHJlZlwiLlxuICAgICAgd2hpbGUgKHRvU2VnbWVudHNbMF0gPT09IFwiLi5cIikge1xuICAgICAgICB0b1NlZ21lbnRzLnNoaWZ0KCk7XG4gICAgICAgIHJvdXRlUGF0aG5hbWVJbmRleCAtPSAxO1xuICAgICAgfVxuXG4gICAgICB0by5wYXRobmFtZSA9IHRvU2VnbWVudHMuam9pbihcIi9cIik7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgYXJlIG1vcmUgXCIuLlwiIHNlZ21lbnRzIHRoYW4gcGFyZW50IHJvdXRlcywgcmVzb2x2ZSByZWxhdGl2ZSB0b1xuICAgIC8vIHRoZSByb290IC8gVVJMLlxuICAgIGZyb20gPSByb3V0ZVBhdGhuYW1lSW5kZXggPj0gMCA/IHJvdXRlUGF0aG5hbWVzW3JvdXRlUGF0aG5hbWVJbmRleF0gOiBcIi9cIjtcbiAgfVxuXG4gIGxldCBwYXRoID0gcmVzb2x2ZVBhdGgodG8sIGZyb20pO1xuXG4gIC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIHRvIHZhbHVlIGhhZCBvbmUuXG4gIGlmIChcbiAgICB0b1BhdGhuYW1lICYmXG4gICAgdG9QYXRobmFtZSAhPT0gXCIvXCIgJiZcbiAgICB0b1BhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSAmJlxuICAgICFwYXRoLnBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKVxuICApIHtcbiAgICBwYXRoLnBhdGhuYW1lICs9IFwiL1wiO1xuICB9XG5cbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGdldFRvUGF0aG5hbWUodG86IFRvKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgLy8gRW1wdHkgc3RyaW5ncyBzaG91bGQgYmUgdHJlYXRlZCB0aGUgc2FtZSBhcyAvIHBhdGhzXG4gIHJldHVybiB0byA9PT0gXCJcIiB8fCAodG8gYXMgUGF0aCkucGF0aG5hbWUgPT09IFwiXCJcbiAgICA/IFwiL1wiXG4gICAgOiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCJcbiAgICA/IHBhcnNlUGF0aCh0bykucGF0aG5hbWVcbiAgICA6IHRvLnBhdGhuYW1lO1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lOiBzdHJpbmcsIGJhc2VuYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikgcmV0dXJuIHBhdGhuYW1lO1xuXG4gIGlmICghcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGJhc2VuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoYmFzZW5hbWUubGVuZ3RoKTtcbiAgaWYgKG5leHRDaGFyICYmIG5leHRDaGFyICE9PSBcIi9cIikge1xuICAgIC8vIHBhdGhuYW1lIGRvZXMgbm90IHN0YXJ0IHdpdGggYmFzZW5hbWUvXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF0aG5hbWUuc2xpY2UoYmFzZW5hbWUubGVuZ3RoKSB8fCBcIi9cIjtcbn1cblxuY29uc3Qgam9pblBhdGhzID0gKHBhdGhzOiBzdHJpbmdbXSk6IHN0cmluZyA9PlxuICBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcblxuY29uc3Qgbm9ybWFsaXplUGF0aG5hbWUgPSAocGF0aG5hbWU6IHN0cmluZyk6IHN0cmluZyA9PlxuICBwYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuXG5jb25zdCBub3JtYWxpemVTZWFyY2ggPSAoc2VhcmNoOiBzdHJpbmcpOiBzdHJpbmcgPT5cbiAgIXNlYXJjaCB8fCBzZWFyY2ggPT09IFwiP1wiXG4gICAgPyBcIlwiXG4gICAgOiBzZWFyY2guc3RhcnRzV2l0aChcIj9cIilcbiAgICA/IHNlYXJjaFxuICAgIDogXCI/XCIgKyBzZWFyY2g7XG5cbmNvbnN0IG5vcm1hbGl6ZUhhc2ggPSAoaGFzaDogc3RyaW5nKTogc3RyaW5nID0+XG4gICFoYXNoIHx8IGhhc2ggPT09IFwiI1wiID8gXCJcIiA6IGhhc2guc3RhcnRzV2l0aChcIiNcIikgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBEQU5HRVIhIFBMRUFTRSBSRUFEIE1FIVxuLy8gV2UgcHJvdmlkZSB0aGVzZSBleHBvcnRzIGFzIGFuIGVzY2FwZSBoYXRjaCBpbiB0aGUgZXZlbnQgdGhhdCB5b3UgbmVlZCBhbnlcbi8vIHJvdXRpbmcgZGF0YSB0aGF0IHdlIGRvbid0IHByb3ZpZGUgYW4gZXhwbGljaXQgQVBJIGZvci4gV2l0aCB0aGF0IHNhaWQsIHdlXG4vLyB3YW50IHRvIGNvdmVyIHlvdXIgdXNlIGNhc2UgaWYgd2UgY2FuLCBzbyBpZiB5b3UgZmVlbCB0aGUgbmVlZCB0byB1c2UgdGhlc2Vcbi8vIHdlIHdhbnQgdG8gaGVhciBmcm9tIHlvdS4gTGV0IHVzIGtub3cgd2hhdCB5b3UncmUgYnVpbGRpbmcgYW5kIHdlJ2xsIGRvIG91clxuLy8gYmVzdCB0byBtYWtlIHN1cmUgd2UgY2FuIHN1cHBvcnQgeW91IVxuLy9cbi8vIFdlIGNvbnNpZGVyIHRoZXNlIGV4cG9ydHMgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsIGFuZCBkbyBub3QgZ3VhcmFudGVlXG4vLyBhZ2FpbnN0IGFueSBicmVha2luZyBjaGFuZ2VzLCByZWdhcmRsZXNzIG9mIHRoZSBzZW12ZXIgcmVsZWFzZS4gVXNlIHdpdGhcbi8vIGV4dHJlbWUgY2F1dGlvbiBhbmQgb25seSBpZiB5b3UgdW5kZXJzdGFuZCB0aGUgY29uc2VxdWVuY2VzLiBHb2RzcGVlZC5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IHtcbiAgTmF2aWdhdGlvbkNvbnRleHQgYXMgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LFxuICBMb2NhdGlvbkNvbnRleHQgYXMgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCxcbiAgUm91dGVDb250ZXh0IGFzIFVOU0FGRV9Sb3V0ZUNvbnRleHRcbn07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB0eXBlIHsgQnJvd3Nlckhpc3RvcnksIEhhc2hIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlUGF0aCB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQge1xuICBNZW1vcnlSb3V0ZXIsXG4gIE5hdmlnYXRlLFxuICBPdXRsZXQsXG4gIFJvdXRlLFxuICBSb3V0ZXIsXG4gIFJvdXRlcyxcbiAgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLFxuICBnZW5lcmF0ZVBhdGgsXG4gIG1hdGNoUm91dGVzLFxuICBtYXRjaFBhdGgsXG4gIHJlc29sdmVQYXRoLFxuICByZW5kZXJNYXRjaGVzLFxuICB1c2VIcmVmLFxuICB1c2VJblJvdXRlckNvbnRleHQsXG4gIHVzZUxvY2F0aW9uLFxuICB1c2VNYXRjaCxcbiAgdXNlTmF2aWdhdGUsXG4gIHVzZU5hdmlnYXRpb25UeXBlLFxuICB1c2VPdXRsZXQsXG4gIHVzZVBhcmFtcyxcbiAgdXNlUmVzb2x2ZWRQYXRoLFxuICB1c2VSb3V0ZXNcbn0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuaW1wb3J0IHR5cGUgeyBUbyB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcblxuZnVuY3Rpb24gd2FybmluZyhjb25kOiBib29sZWFuLCBtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCBSb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFJFLUVYUE9SVFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8vIE5vdGU6IEtlZXAgaW4gc3luYyB3aXRoIHJlYWN0LXJvdXRlciBleHBvcnRzIVxuZXhwb3J0IHtcbiAgTWVtb3J5Um91dGVyLFxuICBOYXZpZ2F0ZSxcbiAgT3V0bGV0LFxuICBSb3V0ZSxcbiAgUm91dGVyLFxuICBSb3V0ZXMsXG4gIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbixcbiAgZ2VuZXJhdGVQYXRoLFxuICBtYXRjaFJvdXRlcyxcbiAgbWF0Y2hQYXRoLFxuICByZW5kZXJNYXRjaGVzLFxuICByZXNvbHZlUGF0aCxcbiAgdXNlSHJlZixcbiAgdXNlSW5Sb3V0ZXJDb250ZXh0LFxuICB1c2VMb2NhdGlvbixcbiAgdXNlTWF0Y2gsXG4gIHVzZU5hdmlnYXRlLFxuICB1c2VOYXZpZ2F0aW9uVHlwZSxcbiAgdXNlT3V0bGV0LFxuICB1c2VQYXJhbXMsXG4gIHVzZVJlc29sdmVkUGF0aCxcbiAgdXNlUm91dGVzXG59O1xuXG5leHBvcnQgdHlwZSB7XG4gIExvY2F0aW9uLFxuICBQYXRoLFxuICBUbyxcbiAgTmF2aWdhdGlvblR5cGUsXG4gIE1lbW9yeVJvdXRlclByb3BzLFxuICBOYXZpZ2F0ZUZ1bmN0aW9uLFxuICBOYXZpZ2F0ZU9wdGlvbnMsXG4gIE5hdmlnYXRlUHJvcHMsXG4gIE5hdmlnYXRvcixcbiAgT3V0bGV0UHJvcHMsXG4gIFBhcmFtcyxcbiAgUGF0aE1hdGNoLFxuICBSb3V0ZU1hdGNoLFxuICBSb3V0ZU9iamVjdCxcbiAgUm91dGVQcm9wcyxcbiAgUGF0aFJvdXRlUHJvcHMsXG4gIExheW91dFJvdXRlUHJvcHMsXG4gIEluZGV4Um91dGVQcm9wcyxcbiAgUm91dGVyUHJvcHMsXG4gIFJvdXRlc1Byb3BzXG59IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gREFOR0VSISBQTEVBU0UgUkVBRCBNRSFcbi8vIFdlIHByb3ZpZGUgdGhlc2UgZXhwb3J0cyBhcyBhbiBlc2NhcGUgaGF0Y2ggaW4gdGhlIGV2ZW50IHRoYXQgeW91IG5lZWQgYW55XG4vLyByb3V0aW5nIGRhdGEgdGhhdCB3ZSBkb24ndCBwcm92aWRlIGFuIGV4cGxpY2l0IEFQSSBmb3IuIFdpdGggdGhhdCBzYWlkLCB3ZVxuLy8gd2FudCB0byBjb3ZlciB5b3VyIHVzZSBjYXNlIGlmIHdlIGNhbiwgc28gaWYgeW91IGZlZWwgdGhlIG5lZWQgdG8gdXNlIHRoZXNlXG4vLyB3ZSB3YW50IHRvIGhlYXIgZnJvbSB5b3UuIExldCB1cyBrbm93IHdoYXQgeW91J3JlIGJ1aWxkaW5nIGFuZCB3ZSdsbCBkbyBvdXJcbi8vIGJlc3QgdG8gbWFrZSBzdXJlIHdlIGNhbiBzdXBwb3J0IHlvdSFcbi8vXG4vLyBXZSBjb25zaWRlciB0aGVzZSBleHBvcnRzIGFuIGltcGxlbWVudGF0aW9uIGRldGFpbCBhbmQgZG8gbm90IGd1YXJhbnRlZVxuLy8gYWdhaW5zdCBhbnkgYnJlYWtpbmcgY2hhbmdlcywgcmVnYXJkbGVzcyBvZiB0aGUgc2VtdmVyIHJlbGVhc2UuIFVzZSB3aXRoXG4vLyBleHRyZW1lIGNhdXRpb24gYW5kIG9ubHkgaWYgeW91IHVuZGVyc3RhbmQgdGhlIGNvbnNlcXVlbmNlcy4gR29kc3BlZWQuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCB7XG4gIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCxcbiAgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCxcbiAgVU5TQUZFX1JvdXRlQ29udGV4dFxufSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBDT01QT05FTlRTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyb3dzZXJSb3V0ZXJQcm9wcyB7XG4gIGJhc2VuYW1lPzogc3RyaW5nO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgd2luZG93PzogV2luZG93O1xufVxuXG4vKipcbiAqIEEgPFJvdXRlcj4gZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFByb3ZpZGVzIHRoZSBjbGVhbmVzdCBVUkxzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gQnJvd3NlclJvdXRlcih7XG4gIGJhc2VuYW1lLFxuICBjaGlsZHJlbixcbiAgd2luZG93XG59OiBCcm93c2VyUm91dGVyUHJvcHMpIHtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWY8QnJvd3Nlckhpc3Rvcnk+KCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHsgd2luZG93IH0pO1xuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Um91dGVyXG4gICAgICBiYXNlbmFtZT17YmFzZW5hbWV9XG4gICAgICBjaGlsZHJlbj17Y2hpbGRyZW59XG4gICAgICBsb2NhdGlvbj17c3RhdGUubG9jYXRpb259XG4gICAgICBuYXZpZ2F0aW9uVHlwZT17c3RhdGUuYWN0aW9ufVxuICAgICAgbmF2aWdhdG9yPXtoaXN0b3J5fVxuICAgIC8+XG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGFzaFJvdXRlclByb3BzIHtcbiAgYmFzZW5hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICB3aW5kb3c/OiBXaW5kb3c7XG59XG5cbi8qKlxuICogQSA8Um91dGVyPiBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gU3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB0aGUgaGFzaFxuICogcG9ydGlvbiBvZiB0aGUgVVJMIHNvIGl0IGlzIG5vdCBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBIYXNoUm91dGVyKHsgYmFzZW5hbWUsIGNoaWxkcmVuLCB3aW5kb3cgfTogSGFzaFJvdXRlclByb3BzKSB7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmPEhhc2hIaXN0b3J5PigpO1xuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVIYXNoSGlzdG9yeSh7IHdpbmRvdyB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcblxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuXG4gIHJldHVybiAoXG4gICAgPFJvdXRlclxuICAgICAgYmFzZW5hbWU9e2Jhc2VuYW1lfVxuICAgICAgY2hpbGRyZW49e2NoaWxkcmVufVxuICAgICAgbG9jYXRpb249e3N0YXRlLmxvY2F0aW9ufVxuICAgICAgbmF2aWdhdGlvblR5cGU9e3N0YXRlLmFjdGlvbn1cbiAgICAgIG5hdmlnYXRvcj17aGlzdG9yeX1cbiAgICAvPlxuICApO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExpbmtQcm9wc1xuICBleHRlbmRzIE9taXQ8UmVhY3QuQW5jaG9ySFRNTEF0dHJpYnV0ZXM8SFRNTEFuY2hvckVsZW1lbnQ+LCBcImhyZWZcIj4ge1xuICByZWxvYWREb2N1bWVudD86IGJvb2xlYW47XG4gIHJlcGxhY2U/OiBib29sZWFuO1xuICBzdGF0ZT86IGFueTtcbiAgdG86IFRvO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuZXhwb3J0IGNvbnN0IExpbmsgPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxBbmNob3JFbGVtZW50LCBMaW5rUHJvcHM+KFxuICBmdW5jdGlvbiBMaW5rV2l0aFJlZihcbiAgICB7IG9uQ2xpY2ssIHJlbG9hZERvY3VtZW50LCByZXBsYWNlID0gZmFsc2UsIHN0YXRlLCB0YXJnZXQsIHRvLCAuLi5yZXN0IH0sXG4gICAgcmVmXG4gICkge1xuICAgIGxldCBocmVmID0gdXNlSHJlZih0byk7XG4gICAgbGV0IGludGVybmFsT25DbGljayA9IHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIHsgcmVwbGFjZSwgc3RhdGUsIHRhcmdldCB9KTtcbiAgICBmdW5jdGlvbiBoYW5kbGVDbGljayhcbiAgICAgIGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxBbmNob3JFbGVtZW50LCBNb3VzZUV2ZW50PlxuICAgICkge1xuICAgICAgaWYgKG9uQ2xpY2spIG9uQ2xpY2soZXZlbnQpO1xuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmICFyZWxvYWREb2N1bWVudCkge1xuICAgICAgICBpbnRlcm5hbE9uQ2xpY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50XG4gICAgICA8YVxuICAgICAgICB7Li4ucmVzdH1cbiAgICAgICAgaHJlZj17aHJlZn1cbiAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2t9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICB0YXJnZXQ9e3RhcmdldH1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuKTtcblxuaWYgKF9fREVWX18pIHtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdkxpbmtQcm9wcyBleHRlbmRzIE9taXQ8TGlua1Byb3BzLCBcImNsYXNzTmFtZVwiIHwgXCJzdHlsZVwiPiB7XG4gIGNhc2VTZW5zaXRpdmU/OiBib29sZWFuO1xuICBjbGFzc05hbWU/OiBzdHJpbmcgfCAoKHByb3BzOiB7IGlzQWN0aXZlOiBib29sZWFuIH0pID0+IHN0cmluZyk7XG4gIGVuZD86IGJvb2xlYW47XG4gIHN0eWxlPzpcbiAgICB8IFJlYWN0LkNTU1Byb3BlcnRpZXNcbiAgICB8ICgocHJvcHM6IHsgaXNBY3RpdmU6IGJvb2xlYW4gfSkgPT4gUmVhY3QuQ1NTUHJvcGVydGllcyk7XG59XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbmV4cG9ydCBjb25zdCBOYXZMaW5rID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MQW5jaG9yRWxlbWVudCwgTmF2TGlua1Byb3BzPihcbiAgZnVuY3Rpb24gTmF2TGlua1dpdGhSZWYoXG4gICAge1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRQcm9wID0gXCJwYWdlXCIsXG4gICAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2UsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByb3AgPSBcIlwiLFxuICAgICAgZW5kID0gZmFsc2UsXG4gICAgICBzdHlsZTogc3R5bGVQcm9wLFxuICAgICAgdG8sXG4gICAgICAuLi5yZXN0XG4gICAgfSxcbiAgICByZWZcbiAgKSB7XG4gICAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0byk7XG5cbiAgICBsZXQgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIGxldCB0b1BhdGhuYW1lID0gcGF0aC5wYXRobmFtZTtcbiAgICBpZiAoIWNhc2VTZW5zaXRpdmUpIHtcbiAgICAgIGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICB0b1BhdGhuYW1lID0gdG9QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIGxldCBpc0FjdGl2ZSA9XG4gICAgICBsb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8XG4gICAgICAoIWVuZCAmJlxuICAgICAgICBsb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiZcbiAgICAgICAgbG9jYXRpb25QYXRobmFtZS5jaGFyQXQodG9QYXRobmFtZS5sZW5ndGgpID09PSBcIi9cIik7XG5cbiAgICBsZXQgYXJpYUN1cnJlbnQgPSBpc0FjdGl2ZSA/IGFyaWFDdXJyZW50UHJvcCA6IHVuZGVmaW5lZDtcblxuICAgIGxldCBjbGFzc05hbWU6IHN0cmluZztcbiAgICBpZiAodHlwZW9mIGNsYXNzTmFtZVByb3AgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lUHJvcCh7IGlzQWN0aXZlIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgY2xhc3NOYW1lIHByb3AgaXMgbm90IGEgZnVuY3Rpb24sIHdlIHVzZSBhIGRlZmF1bHQgYGFjdGl2ZWBcbiAgICAgIC8vIGNsYXNzIGZvciA8TmF2TGluayAvPnMgdGhhdCBhcmUgYWN0aXZlLiBJbiB2NSBgYWN0aXZlYCB3YXMgdGhlIGRlZmF1bHRcbiAgICAgIC8vIHZhbHVlIGZvciBgYWN0aXZlQ2xhc3NOYW1lYCwgYnV0IHdlIGFyZSByZW1vdmluZyB0aGF0IEFQSSBhbmQgY2FuIHN0aWxsXG4gICAgICAvLyB1c2UgdGhlIG9sZCBkZWZhdWx0IGJlaGF2aW9yIGZvciBhIGNsZWFuZXIgdXBncmFkZSBwYXRoIGFuZCBrZWVwIHRoZVxuICAgICAgLy8gc2ltcGxlIHN0eWxpbmcgcnVsZXMgd29ya2luZyBhcyB0aGV5IGN1cnJlbnRseSBkby5cbiAgICAgIGNsYXNzTmFtZSA9IFtjbGFzc05hbWVQcm9wLCBpc0FjdGl2ZSA/IFwiYWN0aXZlXCIgOiBudWxsXVxuICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgIC5qb2luKFwiIFwiKTtcbiAgICB9XG5cbiAgICBsZXQgc3R5bGUgPVxuICAgICAgdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKHsgaXNBY3RpdmUgfSkgOiBzdHlsZVByb3A7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPExpbmtcbiAgICAgICAgey4uLnJlc3R9XG4gICAgICAgIGFyaWEtY3VycmVudD17YXJpYUN1cnJlbnR9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgICB0bz17dG99XG4gICAgICAvPlxuICAgICk7XG4gIH1cbik7XG5cbmlmIChfX0RFVl9fKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEhPT0tTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEhhbmRsZXMgdGhlIGNsaWNrIGJlaGF2aW9yIGZvciByb3V0ZXIgYDxMaW5rPmAgY29tcG9uZW50cy4gVGhpcyBpcyB1c2VmdWwgaWZcbiAqIHlvdSBuZWVkIHRvIGNyZWF0ZSBjdXN0b20gYDxMaW5rPmAgY29tcG9uZW50cyB3aXRoIHRoZSBzYW1lIGNsaWNrIGJlaGF2aW9yIHdlXG4gKiB1c2UgaW4gb3VyIGV4cG9ydGVkIGA8TGluaz5gLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTGlua0NsaWNrSGFuZGxlcjxFIGV4dGVuZHMgRWxlbWVudCA9IEhUTUxBbmNob3JFbGVtZW50PihcbiAgdG86IFRvLFxuICB7XG4gICAgdGFyZ2V0LFxuICAgIHJlcGxhY2U6IHJlcGxhY2VQcm9wLFxuICAgIHN0YXRlXG4gIH06IHtcbiAgICB0YXJnZXQ/OiBSZWFjdC5IVE1MQXR0cmlidXRlQW5jaG9yVGFyZ2V0O1xuICAgIHJlcGxhY2U/OiBib29sZWFuO1xuICAgIHN0YXRlPzogYW55O1xuICB9ID0ge31cbik6IChldmVudDogUmVhY3QuTW91c2VFdmVudDxFLCBNb3VzZUV2ZW50PikgPT4gdm9pZCB7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvKTtcblxuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50OiBSZWFjdC5Nb3VzZUV2ZW50PEUsIE1vdXNlRXZlbnQ+KSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAgICAgKCF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIExldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIElnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyBJZiB0aGUgVVJMIGhhc24ndCBjaGFuZ2VkLCBhIHJlZ3VsYXIgPGE+IHdpbGwgZG8gYSByZXBsYWNlIGluc3RlYWQgb2ZcbiAgICAgICAgLy8gYSBwdXNoLCBzbyBkbyB0aGUgc2FtZSBoZXJlLlxuICAgICAgICBsZXQgcmVwbGFjZSA9XG4gICAgICAgICAgISFyZXBsYWNlUHJvcCB8fCBjcmVhdGVQYXRoKGxvY2F0aW9uKSA9PT0gY3JlYXRlUGF0aChwYXRoKTtcblxuICAgICAgICBuYXZpZ2F0ZSh0bywgeyByZXBsYWNlLCBzdGF0ZSB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtsb2NhdGlvbiwgbmF2aWdhdGUsIHBhdGgsIHJlcGxhY2VQcm9wLCBzdGF0ZSwgdGFyZ2V0LCB0b11cbiAgKTtcbn1cblxuLyoqXG4gKiBBIGNvbnZlbmllbnQgd3JhcHBlciBmb3IgcmVhZGluZyBhbmQgd3JpdGluZyBzZWFyY2ggcGFyYW1ldGVycyB2aWEgdGhlXG4gKiBVUkxTZWFyY2hQYXJhbXMgaW50ZXJmYWNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0PzogVVJMU2VhcmNoUGFyYW1zSW5pdCkge1xuICB3YXJuaW5nKFxuICAgIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09IFwidW5kZWZpbmVkXCIsXG4gICAgYFlvdSBjYW5ub3QgdXNlIHRoZSBcXGB1c2VTZWFyY2hQYXJhbXNcXGAgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBgICtcbiAgICAgIGBzdXBwb3J0IHRoZSBVUkxTZWFyY2hQYXJhbXMgQVBJLiBJZiB5b3UgbmVlZCB0byBzdXBwb3J0IEludGVybmV0IGAgK1xuICAgICAgYEV4cGxvcmVyIDExLCB3ZSByZWNvbW1lbmQgeW91IGxvYWQgYSBwb2x5ZmlsbCBzdWNoIGFzIGAgK1xuICAgICAgYGh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtc1xcblxcbmAgK1xuICAgICAgYElmIHlvdSdyZSB1bnN1cmUgaG93IHRvIGxvYWQgcG9seWZpbGxzLCB3ZSByZWNvbW1lbmQgeW91IGNoZWNrIG91dCBgICtcbiAgICAgIGBodHRwczovL3BvbHlmaWxsLmlvL3YzLyB3aGljaCBwcm92aWRlcyBzb21lIHJlY29tbWVuZGF0aW9ucyBhYm91dCBob3cgYCArXG4gICAgICBgdG8gbG9hZCBwb2x5ZmlsbHMgb25seSBmb3IgdXNlcnMgdGhhdCBuZWVkIHRoZW0sIGluc3RlYWQgb2YgZm9yIGV2ZXJ5IGAgK1xuICAgICAgYHVzZXIuYFxuICApO1xuXG4gIGxldCBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmID0gUmVhY3QudXNlUmVmKGNyZWF0ZVNlYXJjaFBhcmFtcyhkZWZhdWx0SW5pdCkpO1xuXG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKGxvY2F0aW9uLnNlYXJjaCk7XG5cbiAgICBmb3IgKGxldCBrZXkgb2YgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50LmtleXMoKSkge1xuICAgICAgaWYgKCFzZWFyY2hQYXJhbXMuaGFzKGtleSkpIHtcbiAgICAgICAgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50LmdldEFsbChrZXkpLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZWFyY2hQYXJhbXM7XG4gIH0sIFtsb2NhdGlvbi5zZWFyY2hdKTtcblxuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgc2V0U2VhcmNoUGFyYW1zID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKFxuICAgICAgbmV4dEluaXQ6IFVSTFNlYXJjaFBhcmFtc0luaXQsXG4gICAgICBuYXZpZ2F0ZU9wdGlvbnM/OiB7IHJlcGxhY2U/OiBib29sZWFuOyBzdGF0ZT86IGFueSB9XG4gICAgKSA9PiB7XG4gICAgICBuYXZpZ2F0ZShcIj9cIiArIGNyZWF0ZVNlYXJjaFBhcmFtcyhuZXh0SW5pdCksIG5hdmlnYXRlT3B0aW9ucyk7XG4gICAgfSxcbiAgICBbbmF2aWdhdGVdXG4gICk7XG5cbiAgcmV0dXJuIFtzZWFyY2hQYXJhbXMsIHNldFNlYXJjaFBhcmFtc10gYXMgY29uc3Q7XG59XG5cbmV4cG9ydCB0eXBlIFBhcmFtS2V5VmFsdWVQYWlyID0gW3N0cmluZywgc3RyaW5nXTtcblxuZXhwb3J0IHR5cGUgVVJMU2VhcmNoUGFyYW1zSW5pdCA9XG4gIHwgc3RyaW5nXG4gIHwgUGFyYW1LZXlWYWx1ZVBhaXJbXVxuICB8IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHN0cmluZ1tdPlxuICB8IFVSTFNlYXJjaFBhcmFtcztcblxuLyoqXG4gKiBDcmVhdGVzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gaW5pdGlhbGl6ZXIuXG4gKlxuICogVGhpcyBpcyBpZGVudGljYWwgdG8gYG5ldyBVUkxTZWFyY2hQYXJhbXMoaW5pdClgIGV4Y2VwdCBpdCBhbHNvXG4gKiBzdXBwb3J0cyBhcnJheXMgYXMgdmFsdWVzIGluIHRoZSBvYmplY3QgZm9ybSBvZiB0aGUgaW5pdGlhbGl6ZXJcbiAqIGluc3RlYWQgb2YganVzdCBzdHJpbmdzLiBUaGlzIGlzIGNvbnZlbmllbnQgd2hlbiB5b3UgbmVlZCBtdWx0aXBsZVxuICogdmFsdWVzIGZvciBhIGdpdmVuIGtleSwgYnV0IGRvbid0IHdhbnQgdG8gdXNlIGFuIGFycmF5IGluaXRpYWxpemVyLlxuICpcbiAqIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoW1xuICogICAgIFsnc29ydCcsICduYW1lJ10sXG4gKiAgICAgWydzb3J0JywgJ3ByaWNlJ11cbiAqICAgXSk7XG4gKlxuICogeW91IGNhbiBkbzpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMoe1xuICogICAgIHNvcnQ6IFsnbmFtZScsICdwcmljZSddXG4gKiAgIH0pO1xuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VhcmNoUGFyYW1zKFxuICBpbml0OiBVUkxTZWFyY2hQYXJhbXNJbml0ID0gXCJcIlxuKTogVVJMU2VhcmNoUGFyYW1zIHtcbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoXG4gICAgdHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIgfHxcbiAgICBBcnJheS5pc0FycmF5KGluaXQpIHx8XG4gICAgaW5pdCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtc1xuICAgICAgPyBpbml0XG4gICAgICA6IE9iamVjdC5rZXlzKGluaXQpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgICAgICAgbGV0IHZhbHVlID0gaW5pdFtrZXldO1xuICAgICAgICAgIHJldHVybiBtZW1vLmNvbmNhdChcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKHYgPT4gW2tleSwgdl0pIDogW1trZXksIHZhbHVlXV1cbiAgICAgICAgICApO1xuICAgICAgICB9LCBbXSBhcyBQYXJhbUtleVZhbHVlUGFpcltdKVxuICApO1xufVxuIiwiZXhwb3J0IGNvbnN0IFJPVVRFUyA9IHtcbiAgSE9NRTogXCIvXCIsXG4gIFNJR05fSU46IFwiL3NpZ25pblwiLFxufSBhcyBjb25zdDtcbiIsInZhciBpc01lcmdlYWJsZU9iamVjdCA9IGZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiBpc05vbk51bGxPYmplY3QodmFsdWUpXG5cdFx0JiYgIWlzU3BlY2lhbCh2YWx1ZSlcbn07XG5cbmZ1bmN0aW9uIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG59XG5cbmZ1bmN0aW9uIGlzU3BlY2lhbCh2YWx1ZSkge1xuXHR2YXIgc3RyaW5nVmFsdWUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXG5cdHJldHVybiBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcblx0XHR8fCBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG5cdFx0fHwgaXNSZWFjdEVsZW1lbnQodmFsdWUpXG59XG5cbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iNWFjOTYzZmI3OTFkMTI5OGU3ZjM5NjIzNjM4M2JjOTU1ZjkxNmMxL3NyYy9pc29tb3JwaGljL2NsYXNzaWMvZWxlbWVudC9SZWFjdEVsZW1lbnQuanMjTDIxLUwyNVxudmFyIGNhblVzZVN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBjYW5Vc2VTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG5cbmZ1bmN0aW9uIGlzUmVhY3RFbGVtZW50KHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFXG59XG5cbmZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fVxufVxuXG5mdW5jdGlvbiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh2YWx1ZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gKG9wdGlvbnMuY2xvbmUgIT09IGZhbHNlICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodmFsdWUpKVxuXHRcdD8gZGVlcG1lcmdlKGVtcHR5VGFyZ2V0KHZhbHVlKSwgdmFsdWUsIG9wdGlvbnMpXG5cdFx0OiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gdGFyZ2V0LmNvbmNhdChzb3VyY2UpLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKGVsZW1lbnQsIG9wdGlvbnMpXG5cdH0pXG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHZhciBkZXN0aW5hdGlvbiA9IHt9O1xuXHRpZiAob3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh0YXJnZXQpKSB7XG5cdFx0T2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHRhcmdldFtrZXldLCBvcHRpb25zKTtcblx0XHR9KTtcblx0fVxuXHRPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0aWYgKCFvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSB8fCAhdGFyZ2V0W2tleV0pIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRvcHRpb25zLmFycmF5TWVyZ2UgPSBvcHRpb25zLmFycmF5TWVyZ2UgfHwgZGVmYXVsdEFycmF5TWVyZ2U7XG5cdG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgPSBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0IHx8IGlzTWVyZ2VhYmxlT2JqZWN0O1xuXG5cdHZhciBzb3VyY2VJc0FycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuXHR2YXIgdGFyZ2V0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkodGFyZ2V0KTtcblx0dmFyIHNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2ggPSBzb3VyY2VJc0FycmF5ID09PSB0YXJnZXRJc0FycmF5O1xuXG5cdGlmICghc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSBpZiAoc291cmNlSXNBcnJheSkge1xuXHRcdHJldHVybiBvcHRpb25zLmFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9XG59XG5cbmRlZXBtZXJnZS5hbGwgPSBmdW5jdGlvbiBkZWVwbWVyZ2VBbGwoYXJyYXksIG9wdGlvbnMpIHtcblx0aWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5Jylcblx0fVxuXG5cdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuXHRcdHJldHVybiBkZWVwbWVyZ2UocHJldiwgbmV4dCwgb3B0aW9ucylcblx0fSwge30pXG59O1xuXG52YXIgZGVlcG1lcmdlXzEgPSBkZWVwbWVyZ2U7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZXBtZXJnZV8xO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuZXhwb3J0IGRlZmF1bHQgZnJlZUdsb2JhbDtcbiIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bWJvbDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBvdmVyQXJnO1xuIiwiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBnZXRQcm90b3R5cGU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3RMaWtlO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1BsYWluT2JqZWN0O1xuIiwiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGVxO1xuIiwiaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3NvY0luZGV4T2Y7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlRGVsZXRlO1xuIiwiaW1wb3J0IGxpc3RDYWNoZUNsZWFyIGZyb20gJy4vX2xpc3RDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVEZWxldGUgZnJvbSAnLi9fbGlzdENhY2hlRGVsZXRlLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVHZXQgZnJvbSAnLi9fbGlzdENhY2hlR2V0LmpzJztcbmltcG9ydCBsaXN0Q2FjaGVIYXMgZnJvbSAnLi9fbGlzdENhY2hlSGFzLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVTZXQgZnJvbSAnLi9fbGlzdENhY2hlU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBMaXN0Q2FjaGU7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUNsZWFyO1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVHZXQ7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVIYXM7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlU2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0O1xuIiwiaW1wb3J0IGNvcmVKc0RhdGEgZnJvbSAnLi9fY29yZUpzRGF0YS5qcyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTWFza2VkO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRnVuY3Rpb247XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuZXhwb3J0IGRlZmF1bHQgY29yZUpzRGF0YTtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9Tb3VyY2U7XG4iLCJpbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuaW1wb3J0IGlzTWFza2VkIGZyb20gJy4vX2lzTWFza2VkLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCB0b1NvdXJjZSBmcm9tICcuL190b1NvdXJjZS5qcyc7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc05hdGl2ZTtcbiIsImltcG9ydCBiYXNlSXNOYXRpdmUgZnJvbSAnLi9fYmFzZUlzTmF0aXZlLmpzJztcbmltcG9ydCBnZXRWYWx1ZSBmcm9tICcuL19nZXRWYWx1ZS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE5hdGl2ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRWYWx1ZTtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxuZXhwb3J0IGRlZmF1bHQgTWFwO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVDcmVhdGU7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaEdldDtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoSGFzO1xuIiwiaW1wb3J0IGhhc2hDbGVhciBmcm9tICcuL19oYXNoQ2xlYXIuanMnO1xuaW1wb3J0IGhhc2hEZWxldGUgZnJvbSAnLi9faGFzaERlbGV0ZS5qcyc7XG5pbXBvcnQgaGFzaEdldCBmcm9tICcuL19oYXNoR2V0LmpzJztcbmltcG9ydCBoYXNoSGFzIGZyb20gJy4vX2hhc2hIYXMuanMnO1xuaW1wb3J0IGhhc2hTZXQgZnJvbSAnLi9faGFzaFNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBIYXNoO1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaENsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaERlbGV0ZTtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hTZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzS2V5YWJsZTtcbiIsImltcG9ydCBpc0tleWFibGUgZnJvbSAnLi9faXNLZXlhYmxlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRNYXBEYXRhO1xuIiwiaW1wb3J0IG1hcENhY2hlQ2xlYXIgZnJvbSAnLi9fbWFwQ2FjaGVDbGVhci5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVEZWxldGUgZnJvbSAnLi9fbWFwQ2FjaGVEZWxldGUuanMnO1xuaW1wb3J0IG1hcENhY2hlR2V0IGZyb20gJy4vX21hcENhY2hlR2V0LmpzJztcbmltcG9ydCBtYXBDYWNoZUhhcyBmcm9tICcuL19tYXBDYWNoZUhhcy5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVTZXQgZnJvbSAnLi9fbWFwQ2FjaGVTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuZXhwb3J0IGRlZmF1bHQgTWFwQ2FjaGU7XG4iLCJpbXBvcnQgSGFzaCBmcm9tICcuL19IYXNoLmpzJztcbmltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBNYXAgZnJvbSAnLi9fTWFwLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZUNsZWFyO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZURlbGV0ZTtcbiIsImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlR2V0O1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlSGFzO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVTZXQ7XG4iLCJpbXBvcnQgTGlzdENhY2hlIGZyb20gJy4vX0xpc3RDYWNoZS5qcyc7XG5pbXBvcnQgc3RhY2tDbGVhciBmcm9tICcuL19zdGFja0NsZWFyLmpzJztcbmltcG9ydCBzdGFja0RlbGV0ZSBmcm9tICcuL19zdGFja0RlbGV0ZS5qcyc7XG5pbXBvcnQgc3RhY2tHZXQgZnJvbSAnLi9fc3RhY2tHZXQuanMnO1xuaW1wb3J0IHN0YWNrSGFzIGZyb20gJy4vX3N0YWNrSGFzLmpzJztcbmltcG9ydCBzdGFja1NldCBmcm9tICcuL19zdGFja1NldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuZXhwb3J0IGRlZmF1bHQgU3RhY2s7XG4iLCJpbXBvcnQgTGlzdENhY2hlIGZyb20gJy4vX0xpc3RDYWNoZS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrRGVsZXRlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0dldDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrSGFzO1xuIiwiaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuaW1wb3J0IE1hcENhY2hlIGZyb20gJy4vX01hcENhY2hlLmpzJztcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrU2V0O1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lUHJvcGVydHk7XG4iLCJpbXBvcnQgZGVmaW5lUHJvcGVydHkgZnJvbSAnLi9fZGVmaW5lUHJvcGVydHkuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gKiB2YWx1ZSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlQXNzaWduVmFsdWU7XG4iLCJpbXBvcnQgYmFzZUFzc2lnblZhbHVlIGZyb20gJy4vX2Jhc2VBc3NpZ25WYWx1ZS5qcyc7XG5pbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzc2lnblZhbHVlO1xuIiwiaW1wb3J0IGFzc2lnblZhbHVlIGZyb20gJy4vX2Fzc2lnblZhbHVlLmpzJztcbmltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlPYmplY3Q7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNBcmd1bWVudHM7XG4iLCJpbXBvcnQgYmFzZUlzQXJndW1lbnRzIGZyb20gJy4vX2Jhc2VJc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJndW1lbnRzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXk7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcbmltcG9ydCBzdHViRmFsc2UgZnJvbSAnLi9zdHViRmFsc2UuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQnVmZmVyO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHViRmFsc2U7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzSW5kZXg7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTGVuZ3RoO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNUeXBlZEFycmF5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVW5hcnk7XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgbm9kZVV0aWw7XG4iLCJpbXBvcnQgYmFzZUlzVHlwZWRBcnJheSBmcm9tICcuL19iYXNlSXNUeXBlZEFycmF5LmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBpc1R5cGVkQXJyYXk7XG4iLCJpbXBvcnQgYmFzZVRpbWVzIGZyb20gJy4vX2Jhc2VUaW1lcy5qcyc7XG5pbXBvcnQgaXNBcmd1bWVudHMgZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzSW5kZXggZnJvbSAnLi9faXNJbmRleC5qcyc7XG5pbXBvcnQgaXNUeXBlZEFycmF5IGZyb20gJy4vaXNUeXBlZEFycmF5LmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUxpa2VLZXlzO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVRpbWVzO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1Byb3RvdHlwZTtcbiIsImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUtleXM7XG4iLCJpbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuaW1wb3J0IG5hdGl2ZUtleXMgZnJvbSAnLi9fbmF0aXZlS2V5cy5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUtleXM7XG4iLCJpbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuaW1wb3J0IGlzTGVuZ3RoIGZyb20gJy4vaXNMZW5ndGguanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNBcnJheUxpa2U7XG4iLCJpbXBvcnQgYXJyYXlMaWtlS2V5cyBmcm9tICcuL19hcnJheUxpa2VLZXlzLmpzJztcbmltcG9ydCBiYXNlS2V5cyBmcm9tICcuL19iYXNlS2V5cy5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBrZXlzO1xuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGlzUHJvdG90eXBlIGZyb20gJy4vX2lzUHJvdG90eXBlLmpzJztcbmltcG9ydCBuYXRpdmVLZXlzSW4gZnJvbSAnLi9fbmF0aXZlS2V5c0luLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUtleXNJbjtcbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVLZXlzSW47XG4iLCJpbXBvcnQgYXJyYXlMaWtlS2V5cyBmcm9tICcuL19hcnJheUxpa2VLZXlzLmpzJztcbmltcG9ydCBiYXNlS2V5c0luIGZyb20gJy4vX2Jhc2VLZXlzSW4uanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzSW4obmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQga2V5c0luO1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lQnVmZmVyO1xuIiwiLyoqXG4gKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlBcnJheTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0dWJBcnJheTtcbiIsImltcG9ydCBhcnJheUZpbHRlciBmcm9tICcuL19hcnJheUZpbHRlci5qcyc7XG5pbXBvcnQgc3R1YkFycmF5IGZyb20gJy4vc3R1YkFycmF5LmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRTeW1ib2xzO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUZpbHRlcjtcbiIsIi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJyYXlQdXNoO1xuIiwiaW1wb3J0IGFycmF5UHVzaCBmcm9tICcuL19hcnJheVB1c2guanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGdldFN5bWJvbHMgZnJvbSAnLi9fZ2V0U3ltYm9scy5qcyc7XG5pbXBvcnQgc3R1YkFycmF5IGZyb20gJy4vc3R1YkFycmF5LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB3aGlsZSAob2JqZWN0KSB7XG4gICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0U3ltYm9sc0luO1xuIiwiaW1wb3J0IGFycmF5UHVzaCBmcm9tICcuL19hcnJheVB1c2guanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0QWxsS2V5cztcbiIsImltcG9ydCBiYXNlR2V0QWxsS2V5cyBmcm9tICcuL19iYXNlR2V0QWxsS2V5cy5qcyc7XG5pbXBvcnQgZ2V0U3ltYm9scyBmcm9tICcuL19nZXRTeW1ib2xzLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEFsbEtleXM7XG4iLCJpbXBvcnQgYmFzZUdldEFsbEtleXMgZnJvbSAnLi9fYmFzZUdldEFsbEtleXMuanMnO1xuaW1wb3J0IGdldFN5bWJvbHNJbiBmcm9tICcuL19nZXRTeW1ib2xzSW4uanMnO1xuaW1wb3J0IGtleXNJbiBmcm9tICcuL2tleXNJbi5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEFsbEtleXNJbjtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFWaWV3O1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IFByb21pc2U7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbmV4cG9ydCBkZWZhdWx0IFNldDtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5leHBvcnQgZGVmYXVsdCBXZWFrTWFwO1xuIiwiaW1wb3J0IERhdGFWaWV3IGZyb20gJy4vX0RhdGFWaWV3LmpzJztcbmltcG9ydCBNYXAgZnJvbSAnLi9fTWFwLmpzJztcbmltcG9ydCBQcm9taXNlIGZyb20gJy4vX1Byb21pc2UuanMnO1xuaW1wb3J0IFNldCBmcm9tICcuL19TZXQuanMnO1xuaW1wb3J0IFdlYWtNYXAgZnJvbSAnLi9fV2Vha01hcC5qcyc7XG5pbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCB0b1NvdXJjZSBmcm9tICcuL190b1NvdXJjZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFRhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRDbG9uZUFycmF5O1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IFVpbnQ4QXJyYXk7XG4iLCJpbXBvcnQgVWludDhBcnJheSBmcm9tICcuL19VaW50OEFycmF5LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZUFycmF5QnVmZmVyO1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICovXG5mdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVSZWdFeHA7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVTeW1ib2w7XG4iLCJpbXBvcnQgY2xvbmVBcnJheUJ1ZmZlciBmcm9tICcuL19jbG9uZUFycmF5QnVmZmVyLmpzJztcbmltcG9ydCBjbG9uZURhdGFWaWV3IGZyb20gJy4vX2Nsb25lRGF0YVZpZXcuanMnO1xuaW1wb3J0IGNsb25lUmVnRXhwIGZyb20gJy4vX2Nsb25lUmVnRXhwLmpzJztcbmltcG9ydCBjbG9uZVN5bWJvbCBmcm9tICcuL19jbG9uZVN5bWJvbC5qcyc7XG5pbXBvcnQgY2xvbmVUeXBlZEFycmF5IGZyb20gJy4vX2Nsb25lVHlwZWRBcnJheS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbml0Q2xvbmVCeVRhZztcbiIsImltcG9ydCBjbG9uZUFycmF5QnVmZmVyIGZyb20gJy4vX2Nsb25lQXJyYXlCdWZmZXIuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgZGF0YSB2aWV3LlxuICovXG5mdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIoZGF0YVZpZXcuYnVmZmVyKSA6IGRhdGFWaWV3LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZURhdGFWaWV3O1xuIiwiaW1wb3J0IGNsb25lQXJyYXlCdWZmZXIgZnJvbSAnLi9fY2xvbmVBcnJheUJ1ZmZlci5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lVHlwZWRBcnJheTtcbiIsImltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xudmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgIH1cbiAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgYmFzZUNyZWF0ZTtcbiIsImltcG9ydCBiYXNlSXNNYXAgZnJvbSAnLi9fYmFzZUlzTWFwLmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXA7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTWFwKG5ldyBNYXApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbmV4cG9ydCBkZWZhdWx0IGlzTWFwO1xuIiwiaW1wb3J0IGdldFRhZyBmcm9tICcuL19nZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNNYXA7XG4iLCJpbXBvcnQgYmFzZUlzU2V0IGZyb20gJy4vX2Jhc2VJc1NldC5qcyc7XG5pbXBvcnQgYmFzZVVuYXJ5IGZyb20gJy4vX2Jhc2VVbmFyeS5qcyc7XG5pbXBvcnQgbm9kZVV0aWwgZnJvbSAnLi9fbm9kZVV0aWwuanMnO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1NldChuZXcgU2V0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBpc1NldDtcbiIsImltcG9ydCBnZXRUYWcgZnJvbSAnLi9fZ2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzU2V0O1xuIiwiaW1wb3J0IFN0YWNrIGZyb20gJy4vX1N0YWNrLmpzJztcbmltcG9ydCBhcnJheUVhY2ggZnJvbSAnLi9fYXJyYXlFYWNoLmpzJztcbmltcG9ydCBhc3NpZ25WYWx1ZSBmcm9tICcuL19hc3NpZ25WYWx1ZS5qcyc7XG5pbXBvcnQgYmFzZUFzc2lnbiBmcm9tICcuL19iYXNlQXNzaWduLmpzJztcbmltcG9ydCBiYXNlQXNzaWduSW4gZnJvbSAnLi9fYmFzZUFzc2lnbkluLmpzJztcbmltcG9ydCBjbG9uZUJ1ZmZlciBmcm9tICcuL19jbG9uZUJ1ZmZlci5qcyc7XG5pbXBvcnQgY29weUFycmF5IGZyb20gJy4vX2NvcHlBcnJheS5qcyc7XG5pbXBvcnQgY29weVN5bWJvbHMgZnJvbSAnLi9fY29weVN5bWJvbHMuanMnO1xuaW1wb3J0IGNvcHlTeW1ib2xzSW4gZnJvbSAnLi9fY29weVN5bWJvbHNJbi5qcyc7XG5pbXBvcnQgZ2V0QWxsS2V5cyBmcm9tICcuL19nZXRBbGxLZXlzLmpzJztcbmltcG9ydCBnZXRBbGxLZXlzSW4gZnJvbSAnLi9fZ2V0QWxsS2V5c0luLmpzJztcbmltcG9ydCBnZXRUYWcgZnJvbSAnLi9fZ2V0VGFnLmpzJztcbmltcG9ydCBpbml0Q2xvbmVBcnJheSBmcm9tICcuL19pbml0Q2xvbmVBcnJheS5qcyc7XG5pbXBvcnQgaW5pdENsb25lQnlUYWcgZnJvbSAnLi9faW5pdENsb25lQnlUYWcuanMnO1xuaW1wb3J0IGluaXRDbG9uZU9iamVjdCBmcm9tICcuL19pbml0Q2xvbmVPYmplY3QuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc0J1ZmZlciBmcm9tICcuL2lzQnVmZmVyLmpzJztcbmltcG9ydCBpc01hcCBmcm9tICcuL2lzTWFwLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCBpc1NldCBmcm9tICcuL2lzU2V0LmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5pbXBvcnQga2V5c0luIGZyb20gJy4va2V5c0luLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xudmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbmNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG5jbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbmNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbmNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG5jbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbmNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbmNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIERlZXAgY2xvbmVcbiAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICB2YXIgcmVzdWx0LFxuICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gIGlmIChjdXN0b21pemVyKSB7XG4gICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICB9XG4gIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gIGlmIChpc0Fycikge1xuICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgfVxuICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gIGlmIChzdGFja2VkKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQ7XG4gIH1cbiAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgIGlmIChwcm9wcykge1xuICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VDbG9uZTtcbiIsImltcG9ydCBiYXNlQ3JlYXRlIGZyb20gJy4vX2Jhc2VDcmVhdGUuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzUHJvdG90eXBlIGZyb20gJy4vX2lzUHJvdG90eXBlLmpzJztcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbml0Q2xvbmVPYmplY3Q7XG4iLCJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBnZXRTeW1ib2xzSW4gZnJvbSAnLi9fZ2V0U3ltYm9sc0luLmpzJztcblxuLyoqXG4gKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb3B5U3ltYm9sc0luO1xuIiwiaW1wb3J0IGNvcHlPYmplY3QgZnJvbSAnLi9fY29weU9iamVjdC5qcyc7XG5pbXBvcnQga2V5c0luIGZyb20gJy4va2V5c0luLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlQXNzaWduSW47XG4iLCJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBnZXRTeW1ib2xzIGZyb20gJy4vX2dldFN5bWJvbHMuanMnO1xuXG4vKipcbiAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlTeW1ib2xzO1xuIiwiaW1wb3J0IGNvcHlPYmplY3QgZnJvbSAnLi9fY29weU9iamVjdC5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VBc3NpZ247XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5RWFjaDtcbiIsImltcG9ydCBiYXNlQ2xvbmUgZnJvbSAnLi9fYmFzZUNsb25lLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICogYW5kIHN1cHBvcnRzIGNsb25pbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucywgZGF0ZSBvYmplY3RzLCBtYXBzLFxuICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICogYXMgcGxhaW4gb2JqZWN0cy4gQW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkIGZvciB1bmNsb25lYWJsZSB2YWx1ZXMgc3VjaFxuICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICogQHNlZSBfLmNsb25lRGVlcFxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAqXG4gKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gKiBjb25zb2xlLmxvZyhzaGFsbG93WzBdID09PSBvYmplY3RzWzBdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY2xvbmUodmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmU7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheU1hcDtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzeW1ib2wnIHx8XG4gICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNTeW1ib2w7XG4iLCJpbXBvcnQgTWFwQ2FjaGUgZnJvbSAnLi9fTWFwQ2FjaGUuanMnO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAqXG4gKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogdmFsdWVzKG90aGVyKTtcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMjtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gIHJldHVybiBtZW1vaXplZDtcbn1cblxuLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG5tZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJpbXBvcnQgbWVtb2l6ZSBmcm9tICcuL21lbW9pemUuanMnO1xuXG4vKiogVXNlZCBhcyB0aGUgbWF4aW11bSBtZW1vaXplIGNhY2hlIHNpemUuICovXG52YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gIHZhciByZXN1bHQgPSBtZW1vaXplKGZ1bmMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICBjYWNoZS5jbGVhcigpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xuICB9KTtcblxuICB2YXIgY2FjaGUgPSByZXN1bHQuY2FjaGU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemVDYXBwZWQ7XG4iLCJpbXBvcnQgbWVtb2l6ZUNhcHBlZCBmcm9tICcuL19tZW1vaXplQ2FwcGVkLmpzJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgfVxuICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdUb1BhdGg7XG4iLCJpbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAqL1xuZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0tleTtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBhcnJheU1hcCBmcm9tICcuL19hcnJheU1hcC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVG9TdHJpbmc7XG4iLCJpbXBvcnQgYmFzZVRvU3RyaW5nIGZyb20gJy4vX2Jhc2VUb1N0cmluZy5qcyc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9TdHJpbmc7XG4iLCJpbXBvcnQgYXJyYXlNYXAgZnJvbSAnLi9fYXJyYXlNYXAuanMnO1xuaW1wb3J0IGNvcHlBcnJheSBmcm9tICcuL19jb3B5QXJyYXkuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc1N5bWJvbCBmcm9tICcuL2lzU3ltYm9sLmpzJztcbmltcG9ydCBzdHJpbmdUb1BhdGggZnJvbSAnLi9fc3RyaW5nVG9QYXRoLmpzJztcbmltcG9ydCB0b0tleSBmcm9tICcuL190b0tleS5qcyc7XG5pbXBvcnQgdG9TdHJpbmcgZnJvbSAnLi90b1N0cmluZy5qcyc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICpcbiAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICogLy8gPT4gWydhJywgJzAnLCAnYicsICdjJ11cbiAqL1xuZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICB9XG4gIHJldHVybiBpc1N5bWJvbCh2YWx1ZSkgPyBbdmFsdWVdIDogY29weUFycmF5KHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9QYXRoO1xuIiwiaW1wb3J0IGJhc2VDbG9uZSBmcm9tICcuL19iYXNlQ2xvbmUuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDEuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gKiBAc2VlIF8uY2xvbmVcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gKlxuICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lRGVlcDtcbiIsImltcG9ydCBjbG9uZSBmcm9tICdsb2Rhc2gvY2xvbmUnO1xuaW1wb3J0IHRvUGF0aCBmcm9tICdsb2Rhc2gvdG9QYXRoJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLy8gQXNzZXJ0aW9uc1xuXG4vKiogQHByaXZhdGUgaXMgdGhlIHZhbHVlIGFuIGVtcHR5IGFycmF5PyAqL1xuZXhwb3J0IGNvbnN0IGlzRW1wdHlBcnJheSA9ICh2YWx1ZT86IGFueSkgPT5cbiAgQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwO1xuXG4vKiogQHByaXZhdGUgaXMgdGhlIGdpdmVuIG9iamVjdCBhIEZ1bmN0aW9uPyAqL1xuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSAob2JqOiBhbnkpOiBvYmogaXMgRnVuY3Rpb24gPT5cbiAgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJztcblxuLyoqIEBwcml2YXRlIGlzIHRoZSBnaXZlbiBvYmplY3QgYW4gT2JqZWN0PyAqL1xuZXhwb3J0IGNvbnN0IGlzT2JqZWN0ID0gKG9iajogYW55KTogb2JqIGlzIE9iamVjdCA9PlxuICBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCc7XG5cbi8qKiBAcHJpdmF0ZSBpcyB0aGUgZ2l2ZW4gb2JqZWN0IGFuIGludGVnZXI/ICovXG5leHBvcnQgY29uc3QgaXNJbnRlZ2VyID0gKG9iajogYW55KTogYm9vbGVhbiA9PlxuICBTdHJpbmcoTWF0aC5mbG9vcihOdW1iZXIob2JqKSkpID09PSBvYmo7XG5cbi8qKiBAcHJpdmF0ZSBpcyB0aGUgZ2l2ZW4gb2JqZWN0IGEgc3RyaW5nPyAqL1xuZXhwb3J0IGNvbnN0IGlzU3RyaW5nID0gKG9iajogYW55KTogb2JqIGlzIHN0cmluZyA9PlxuICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cbi8qKiBAcHJpdmF0ZSBpcyB0aGUgZ2l2ZW4gb2JqZWN0IGEgTmFOPyAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuZXhwb3J0IGNvbnN0IGlzTmFOID0gKG9iajogYW55KTogYm9vbGVhbiA9PiBvYmogIT09IG9iajtcblxuLyoqIEBwcml2YXRlIERvZXMgYSBSZWFjdCBjb21wb25lbnQgaGF2ZSBleGFjdGx5IDAgY2hpbGRyZW4/ICovXG5leHBvcnQgY29uc3QgaXNFbXB0eUNoaWxkcmVuID0gKGNoaWxkcmVuOiBhbnkpOiBib29sZWFuID0+XG4gIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcblxuLyoqIEBwcml2YXRlIGlzIHRoZSBnaXZlbiBvYmplY3QvdmFsdWUgYSBwcm9taXNlPyAqL1xuZXhwb3J0IGNvbnN0IGlzUHJvbWlzZSA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgUHJvbWlzZUxpa2U8YW55PiA9PlxuICBpc09iamVjdCh2YWx1ZSkgJiYgaXNGdW5jdGlvbih2YWx1ZS50aGVuKTtcblxuLyoqIEBwcml2YXRlIGlzIHRoZSBnaXZlbiBvYmplY3QvdmFsdWUgYSB0eXBlIG9mIHN5bnRoZXRpYyBldmVudD8gKi9cbmV4cG9ydCBjb25zdCBpc0lucHV0RXZlbnQgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIFJlYWN0LlN5bnRoZXRpY0V2ZW50PGFueT4gPT5cbiAgdmFsdWUgJiYgaXNPYmplY3QodmFsdWUpICYmIGlzT2JqZWN0KHZhbHVlLnRhcmdldCk7XG5cbi8qKlxuICogU2FtZSBhcyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGJ1dCB3cmFwcyBpbiBhIHRyeS1jYXRjaCBibG9jay4gSW4gSUUgaXQgaXNcbiAqIG5vdCBzYWZlIHRvIGNhbGwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpZiB0aGVyZSBpcyBub3RoaW5nIGZvY3VzZWQuXG4gKlxuICogVGhlIGFjdGl2ZUVsZW1lbnQgd2lsbCBiZSBudWxsIG9ubHkgaWYgdGhlIGRvY3VtZW50IG9yIGRvY3VtZW50IGJvZHkgaXMgbm90XG4gKiB5ZXQgZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0gez9Eb2N1bWVudH0gZG9jIERlZmF1bHRzIHRvIGN1cnJlbnQgZG9jdW1lbnQuXG4gKiBAcmV0dXJuIHtFbGVtZW50IHwgbnVsbH1cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9tYXN0ZXIvcGFja2FnZXMvZmJqcy9zcmMvY29yZS9kb20vZ2V0QWN0aXZlRWxlbWVudC5qc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2M/OiBEb2N1bWVudCk6IEVsZW1lbnQgfCBudWxsIHtcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG4vKipcbiAqIERlZXBseSBnZXQgYSB2YWx1ZSBmcm9tIGFuIG9iamVjdCB2aWEgaXRzIHBhdGguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbihcbiAgb2JqOiBhbnksXG4gIGtleTogc3RyaW5nIHwgc3RyaW5nW10sXG4gIGRlZj86IGFueSxcbiAgcDogbnVtYmVyID0gMFxuKSB7XG4gIGNvbnN0IHBhdGggPSB0b1BhdGgoa2V5KTtcbiAgd2hpbGUgKG9iaiAmJiBwIDwgcGF0aC5sZW5ndGgpIHtcbiAgICBvYmogPSBvYmpbcGF0aFtwKytdXTtcbiAgfVxuICByZXR1cm4gb2JqID09PSB1bmRlZmluZWQgPyBkZWYgOiBvYmo7XG59XG5cbi8qKlxuICogRGVlcGx5IHNldCBhIHZhbHVlIGZyb20gaW4gb2JqZWN0IHZpYSBpdCdzIHBhdGguIElmIHRoZSB2YWx1ZSBhdCBgcGF0aGBcbiAqIGhhcyBjaGFuZ2VkLCByZXR1cm4gYSBzaGFsbG93IGNvcHkgb2Ygb2JqIHdpdGggYHZhbHVlYCBzZXQgYXQgYHBhdGhgLlxuICogSWYgYHZhbHVlYCBoYXMgbm90IGNoYW5nZWQsIHJldHVybiB0aGUgb3JpZ2luYWwgYG9iamAuXG4gKlxuICogRXhpc3Rpbmcgb2JqZWN0cyAvIGFycmF5cyBhbG9uZyBgcGF0aGAgYXJlIGFsc28gc2hhbGxvdyBjb3BpZWQuIFNpYmxpbmdcbiAqIG9iamVjdHMgYWxvbmcgcGF0aCByZXRhaW4gdGhlIHNhbWUgaW50ZXJuYWwganMgcmVmZXJlbmNlLiBTaW5jZSBuZXdcbiAqIG9iamVjdHMgLyBhcnJheXMgYXJlIG9ubHkgY3JlYXRlZCBhbG9uZyBgcGF0aGAsIHdlIGNhbiB0ZXN0IGlmIGFueXRoaW5nXG4gKiBjaGFuZ2VkIGluIGEgbmVzdGVkIHN0cnVjdHVyZSBieSBjb21wYXJpbmcgdGhlIG9iamVjdCdzIHJlZmVyZW5jZSBpblxuICogdGhlIG9sZCBhbmQgbmV3IG9iamVjdCwgc2ltaWxhciB0byBob3cgcnVzc2lhbiBkb2xsIGNhY2hlIGludmFsaWRhdGlvblxuICogd29ya3MuXG4gKlxuICogSW4gZWFybGllciB2ZXJzaW9ucyBvZiB0aGlzIGZ1bmN0aW9uLCB3aGljaCB1c2VkIGNsb25lRGVlcCwgdGhlcmUgd2VyZVxuICogaXNzdWVzIHdoZXJlYnkgc2V0dGluZ3MgYSBuZXN0ZWQgdmFsdWUgd291bGQgbXV0YXRlIHRoZSBwYXJlbnRcbiAqIGluc3RlYWQgb2YgY3JlYXRpbmcgYSBuZXcgb2JqZWN0LiBgY2xvbmVgIGF2b2lkcyB0aGF0IGJ1ZyBtYWtpbmcgYVxuICogc2hhbGxvdyBjb3B5IG9mIHRoZSBvYmplY3RzIGFsb25nIHRoZSB1cGRhdGUgcGF0aFxuICogc28gbm8gb2JqZWN0IGlzIG11dGF0ZWQgaW4gcGxhY2UuXG4gKlxuICogQmVmb3JlIGNoYW5naW5nIHRoaXMgZnVuY3Rpb24sIHBsZWFzZSByZWFkIHRocm91Z2ggdGhlIGZvbGxvd2luZ1xuICogZGlzY3Vzc2lvbnMuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZGV2ZWxvcGl0L2xpbmtzdGF0ZVxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vamFyZWRwYWxtZXIvZm9ybWlrL3B1bGwvMTIzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRJbihvYmo6IGFueSwgcGF0aDogc3RyaW5nLCB2YWx1ZTogYW55KTogYW55IHtcbiAgbGV0IHJlczogYW55ID0gY2xvbmUob2JqKTsgLy8gdGhpcyBrZWVwcyBpbmhlcml0YW5jZSB3aGVuIG9iaiBpcyBhIGNsYXNzXG4gIGxldCByZXNWYWw6IGFueSA9IHJlcztcbiAgbGV0IGkgPSAwO1xuICBsZXQgcGF0aEFycmF5ID0gdG9QYXRoKHBhdGgpO1xuXG4gIGZvciAoOyBpIDwgcGF0aEFycmF5Lmxlbmd0aCAtIDE7IGkrKykge1xuICAgIGNvbnN0IGN1cnJlbnRQYXRoOiBzdHJpbmcgPSBwYXRoQXJyYXlbaV07XG4gICAgbGV0IGN1cnJlbnRPYmo6IGFueSA9IGdldEluKG9iaiwgcGF0aEFycmF5LnNsaWNlKDAsIGkgKyAxKSk7XG5cbiAgICBpZiAoY3VycmVudE9iaiAmJiAoaXNPYmplY3QoY3VycmVudE9iaikgfHwgQXJyYXkuaXNBcnJheShjdXJyZW50T2JqKSkpIHtcbiAgICAgIHJlc1ZhbCA9IHJlc1ZhbFtjdXJyZW50UGF0aF0gPSBjbG9uZShjdXJyZW50T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbmV4dFBhdGg6IHN0cmluZyA9IHBhdGhBcnJheVtpICsgMV07XG4gICAgICByZXNWYWwgPSByZXNWYWxbY3VycmVudFBhdGhdID1cbiAgICAgICAgaXNJbnRlZ2VyKG5leHRQYXRoKSAmJiBOdW1iZXIobmV4dFBhdGgpID49IDAgPyBbXSA6IHt9O1xuICAgIH1cbiAgfVxuXG4gIC8vIFJldHVybiBvcmlnaW5hbCBvYmplY3QgaWYgbmV3IHZhbHVlIGlzIHRoZSBzYW1lIGFzIGN1cnJlbnRcbiAgaWYgKChpID09PSAwID8gb2JqIDogcmVzVmFsKVtwYXRoQXJyYXlbaV1dID09PSB2YWx1ZSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIGRlbGV0ZSByZXNWYWxbcGF0aEFycmF5W2ldXTtcbiAgfSBlbHNlIHtcbiAgICByZXNWYWxbcGF0aEFycmF5W2ldXSA9IHZhbHVlO1xuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggYXJyYXkgaGFzIGEgc2luZ2xlIGVsZW1lbnQsIHRoZSBsb29wIGRpZCBub3QgcnVuLlxuICAvLyBEZWxldGluZyBvbiBgcmVzVmFsYCBoYWQgbm8gZWZmZWN0IGluIHRoaXMgc2NlbmFyaW8sIHNvIHdlIGRlbGV0ZSBvbiB0aGUgcmVzdWx0IGluc3RlYWQuXG4gIGlmIChpID09PSAwICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICBkZWxldGUgcmVzW3BhdGhBcnJheVtpXV07XG4gIH1cblxuICByZXR1cm4gcmVzO1xufVxuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGEgc2V0IHRoZSBzYW1lIHZhbHVlIGZvciBhbGwga2V5cyBhbmQgYXJyYXlzIG5lc3RlZCBvYmplY3QsIGNsb25pbmdcbiAqIEBwYXJhbSBvYmplY3RcbiAqIEBwYXJhbSB2YWx1ZVxuICogQHBhcmFtIHZpc2l0ZWRcbiAqIEBwYXJhbSByZXNwb25zZVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0TmVzdGVkT2JqZWN0VmFsdWVzPFQ+KFxuICBvYmplY3Q6IGFueSxcbiAgdmFsdWU6IGFueSxcbiAgdmlzaXRlZDogYW55ID0gbmV3IFdlYWtNYXAoKSxcbiAgcmVzcG9uc2U6IGFueSA9IHt9XG4pOiBUIHtcbiAgZm9yIChsZXQgayBvZiBPYmplY3Qua2V5cyhvYmplY3QpKSB7XG4gICAgY29uc3QgdmFsID0gb2JqZWN0W2tdO1xuICAgIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuZ2V0KHZhbCkpIHtcbiAgICAgICAgdmlzaXRlZC5zZXQodmFsLCB0cnVlKTtcbiAgICAgICAgLy8gSW4gb3JkZXIgdG8ga2VlcCBhcnJheSB2YWx1ZXMgY29uc2lzdGVudCBmb3IgYm90aCBkb3QgcGF0aCAgYW5kXG4gICAgICAgIC8vIGJyYWNrZXQgc3ludGF4LCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHRoaXMgaXMgYW4gYXJyYXkgc28gdGhhdFxuICAgICAgICAvLyB0aGlzIHdpbGwgb3V0cHV0ICB7IGZyaWVuZHM6IFt0cnVlXSB9IGFuZCBub3QgeyBmcmllbmRzOiB7IFwiMFwiOiB0cnVlIH0gfVxuICAgICAgICByZXNwb25zZVtrXSA9IEFycmF5LmlzQXJyYXkodmFsKSA/IFtdIDoge307XG4gICAgICAgIHNldE5lc3RlZE9iamVjdFZhbHVlcyh2YWwsIHZhbHVlLCB2aXNpdGVkLCByZXNwb25zZVtrXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3BvbnNlW2tdID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybWlrQ29udGV4dFR5cGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS13YXJuaW5nJztcblxuZXhwb3J0IGNvbnN0IEZvcm1pa0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PEZvcm1pa0NvbnRleHRUeXBlPGFueT4+KFxuICB1bmRlZmluZWQgYXMgYW55XG4pO1xuRm9ybWlrQ29udGV4dC5kaXNwbGF5TmFtZSA9ICdGb3JtaWtDb250ZXh0JztcblxuZXhwb3J0IGNvbnN0IEZvcm1pa1Byb3ZpZGVyID0gRm9ybWlrQ29udGV4dC5Qcm92aWRlcjtcbmV4cG9ydCBjb25zdCBGb3JtaWtDb25zdW1lciA9IEZvcm1pa0NvbnRleHQuQ29uc3VtZXI7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3JtaWtDb250ZXh0PFZhbHVlcz4oKSB7XG4gIGNvbnN0IGZvcm1payA9IFJlYWN0LnVzZUNvbnRleHQ8Rm9ybWlrQ29udGV4dFR5cGU8VmFsdWVzPj4oRm9ybWlrQ29udGV4dCk7XG5cbiAgaW52YXJpYW50KFxuICAgICEhZm9ybWlrLFxuICAgIGBGb3JtaWsgY29udGV4dCBpcyB1bmRlZmluZWQsIHBsZWFzZSB2ZXJpZnkgeW91IGFyZSBjYWxsaW5nIHVzZUZvcm1pa0NvbnRleHQoKSBhcyBjaGlsZCBvZiBhIDxGb3JtaWs+IGNvbXBvbmVudC5gXG4gICk7XG5cbiAgcmV0dXJuIGZvcm1paztcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpc0VxdWFsIGZyb20gJ3JlYWN0LWZhc3QtY29tcGFyZSc7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2RlZXBtZXJnZSc7XG5pbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICdsb2Rhc2gvaXNQbGFpbk9iamVjdCc7XG5pbXBvcnQge1xuICBGb3JtaWtDb25maWcsXG4gIEZvcm1pa0Vycm9ycyxcbiAgRm9ybWlrU3RhdGUsXG4gIEZvcm1pa1RvdWNoZWQsXG4gIEZvcm1pa1ZhbHVlcyxcbiAgRm9ybWlrUHJvcHMsXG4gIEZpZWxkTWV0YVByb3BzLFxuICBGaWVsZEhlbHBlclByb3BzLFxuICBGaWVsZElucHV0UHJvcHMsXG4gIEZvcm1pa0hlbHBlcnMsXG4gIEZvcm1pa0hhbmRsZXJzLFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7XG4gIGlzRnVuY3Rpb24sXG4gIGlzU3RyaW5nLFxuICBzZXRJbixcbiAgaXNFbXB0eUNoaWxkcmVuLFxuICBpc1Byb21pc2UsXG4gIHNldE5lc3RlZE9iamVjdFZhbHVlcyxcbiAgZ2V0QWN0aXZlRWxlbWVudCxcbiAgZ2V0SW4sXG4gIGlzT2JqZWN0LFxufSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IEZvcm1pa1Byb3ZpZGVyIH0gZnJvbSAnLi9Gb3JtaWtDb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS13YXJuaW5nJztcblxudHlwZSBGb3JtaWtNZXNzYWdlPFZhbHVlcz4gPVxuICB8IHsgdHlwZTogJ1NVQk1JVF9BVFRFTVBUJyB9XG4gIHwgeyB0eXBlOiAnU1VCTUlUX0ZBSUxVUkUnIH1cbiAgfCB7IHR5cGU6ICdTVUJNSVRfU1VDQ0VTUycgfVxuICB8IHsgdHlwZTogJ1NFVF9JU1ZBTElEQVRJTkcnOyBwYXlsb2FkOiBib29sZWFuIH1cbiAgfCB7IHR5cGU6ICdTRVRfSVNTVUJNSVRUSU5HJzsgcGF5bG9hZDogYm9vbGVhbiB9XG4gIHwgeyB0eXBlOiAnU0VUX1ZBTFVFUyc7IHBheWxvYWQ6IFZhbHVlcyB9XG4gIHwgeyB0eXBlOiAnU0VUX0ZJRUxEX1ZBTFVFJzsgcGF5bG9hZDogeyBmaWVsZDogc3RyaW5nOyB2YWx1ZT86IGFueSB9IH1cbiAgfCB7IHR5cGU6ICdTRVRfRklFTERfVE9VQ0hFRCc7IHBheWxvYWQ6IHsgZmllbGQ6IHN0cmluZzsgdmFsdWU/OiBib29sZWFuIH0gfVxuICB8IHsgdHlwZTogJ1NFVF9GSUVMRF9FUlJPUic7IHBheWxvYWQ6IHsgZmllbGQ6IHN0cmluZzsgdmFsdWU/OiBzdHJpbmcgfSB9XG4gIHwgeyB0eXBlOiAnU0VUX1RPVUNIRUQnOyBwYXlsb2FkOiBGb3JtaWtUb3VjaGVkPFZhbHVlcz4gfVxuICB8IHsgdHlwZTogJ1NFVF9FUlJPUlMnOyBwYXlsb2FkOiBGb3JtaWtFcnJvcnM8VmFsdWVzPiB9XG4gIHwgeyB0eXBlOiAnU0VUX1NUQVRVUyc7IHBheWxvYWQ6IGFueSB9XG4gIHwge1xuICAgICAgdHlwZTogJ1NFVF9GT1JNSUtfU1RBVEUnO1xuICAgICAgcGF5bG9hZDogKHM6IEZvcm1pa1N0YXRlPFZhbHVlcz4pID0+IEZvcm1pa1N0YXRlPFZhbHVlcz47XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6ICdSRVNFVF9GT1JNJztcbiAgICAgIHBheWxvYWQ6IEZvcm1pa1N0YXRlPFZhbHVlcz47XG4gICAgfTtcblxuLy8gU3RhdGUgcmVkdWNlclxuZnVuY3Rpb24gZm9ybWlrUmVkdWNlcjxWYWx1ZXM+KFxuICBzdGF0ZTogRm9ybWlrU3RhdGU8VmFsdWVzPixcbiAgbXNnOiBGb3JtaWtNZXNzYWdlPFZhbHVlcz5cbikge1xuICBzd2l0Y2ggKG1zZy50eXBlKSB7XG4gICAgY2FzZSAnU0VUX1ZBTFVFUyc6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdmFsdWVzOiBtc2cucGF5bG9hZCB9O1xuICAgIGNhc2UgJ1NFVF9UT1VDSEVEJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB0b3VjaGVkOiBtc2cucGF5bG9hZCB9O1xuICAgIGNhc2UgJ1NFVF9FUlJPUlMnOlxuICAgICAgaWYgKGlzRXF1YWwoc3RhdGUuZXJyb3JzLCBtc2cucGF5bG9hZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgZXJyb3JzOiBtc2cucGF5bG9hZCB9O1xuICAgIGNhc2UgJ1NFVF9TVEFUVVMnOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHN0YXR1czogbXNnLnBheWxvYWQgfTtcbiAgICBjYXNlICdTRVRfSVNTVUJNSVRUSU5HJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBpc1N1Ym1pdHRpbmc6IG1zZy5wYXlsb2FkIH07XG4gICAgY2FzZSAnU0VUX0lTVkFMSURBVElORyc6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgaXNWYWxpZGF0aW5nOiBtc2cucGF5bG9hZCB9O1xuICAgIGNhc2UgJ1NFVF9GSUVMRF9WQUxVRSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgdmFsdWVzOiBzZXRJbihzdGF0ZS52YWx1ZXMsIG1zZy5wYXlsb2FkLmZpZWxkLCBtc2cucGF5bG9hZC52YWx1ZSksXG4gICAgICB9O1xuICAgIGNhc2UgJ1NFVF9GSUVMRF9UT1VDSEVEJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB0b3VjaGVkOiBzZXRJbihzdGF0ZS50b3VjaGVkLCBtc2cucGF5bG9hZC5maWVsZCwgbXNnLnBheWxvYWQudmFsdWUpLFxuICAgICAgfTtcbiAgICBjYXNlICdTRVRfRklFTERfRVJST1InOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGVycm9yczogc2V0SW4oc3RhdGUuZXJyb3JzLCBtc2cucGF5bG9hZC5maWVsZCwgbXNnLnBheWxvYWQudmFsdWUpLFxuICAgICAgfTtcbiAgICBjYXNlICdSRVNFVF9GT1JNJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCAuLi5tc2cucGF5bG9hZCB9O1xuICAgIGNhc2UgJ1NFVF9GT1JNSUtfU1RBVEUnOlxuICAgICAgcmV0dXJuIG1zZy5wYXlsb2FkKHN0YXRlKTtcbiAgICBjYXNlICdTVUJNSVRfQVRURU1QVCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgdG91Y2hlZDogc2V0TmVzdGVkT2JqZWN0VmFsdWVzPEZvcm1pa1RvdWNoZWQ8VmFsdWVzPj4oXG4gICAgICAgICAgc3RhdGUudmFsdWVzLFxuICAgICAgICAgIHRydWVcbiAgICAgICAgKSxcbiAgICAgICAgaXNTdWJtaXR0aW5nOiB0cnVlLFxuICAgICAgICBzdWJtaXRDb3VudDogc3RhdGUuc3VibWl0Q291bnQgKyAxLFxuICAgICAgfTtcbiAgICBjYXNlICdTVUJNSVRfRkFJTFVSRSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgaXNTdWJtaXR0aW5nOiBmYWxzZSxcbiAgICAgIH07XG4gICAgY2FzZSAnU1VCTUlUX1NVQ0NFU1MnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGlzU3VibWl0dGluZzogZmFsc2UsXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuLy8gSW5pdGlhbCBlbXB0eSBzdGF0ZXMgLy8gb2JqZWN0c1xuY29uc3QgZW1wdHlFcnJvcnM6IEZvcm1pa0Vycm9yczx1bmtub3duPiA9IHt9O1xuY29uc3QgZW1wdHlUb3VjaGVkOiBGb3JtaWtUb3VjaGVkPHVua25vd24+ID0ge307XG5cbi8vIFRoaXMgaXMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBtYXAgb2YgYWxsIHJlZ2lzdGVyZWQgZmllbGRzXG4vLyBhbmQgdGhlaXIgdmFsaWRhdGUgZnVuY3Rpb25zXG5pbnRlcmZhY2UgRmllbGRSZWdpc3RyeSB7XG4gIFtmaWVsZDogc3RyaW5nXToge1xuICAgIHZhbGlkYXRlOiAodmFsdWU6IGFueSkgPT4gc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+IHwgdW5kZWZpbmVkO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRm9ybWlrPFZhbHVlcyBleHRlbmRzIEZvcm1pa1ZhbHVlcyA9IEZvcm1pa1ZhbHVlcz4oe1xuICB2YWxpZGF0ZU9uQ2hhbmdlID0gdHJ1ZSxcbiAgdmFsaWRhdGVPbkJsdXIgPSB0cnVlLFxuICB2YWxpZGF0ZU9uTW91bnQgPSBmYWxzZSxcbiAgaXNJbml0aWFsVmFsaWQsXG4gIGVuYWJsZVJlaW5pdGlhbGl6ZSA9IGZhbHNlLFxuICBvblN1Ym1pdCxcbiAgLi4ucmVzdFxufTogRm9ybWlrQ29uZmlnPFZhbHVlcz4pIHtcbiAgY29uc3QgcHJvcHMgPSB7XG4gICAgdmFsaWRhdGVPbkNoYW5nZSxcbiAgICB2YWxpZGF0ZU9uQmx1cixcbiAgICB2YWxpZGF0ZU9uTW91bnQsXG4gICAgb25TdWJtaXQsXG4gICAgLi4ucmVzdCxcbiAgfTtcbiAgY29uc3QgaW5pdGlhbFZhbHVlcyA9IFJlYWN0LnVzZVJlZihwcm9wcy5pbml0aWFsVmFsdWVzKTtcbiAgY29uc3QgaW5pdGlhbEVycm9ycyA9IFJlYWN0LnVzZVJlZihwcm9wcy5pbml0aWFsRXJyb3JzIHx8IGVtcHR5RXJyb3JzKTtcbiAgY29uc3QgaW5pdGlhbFRvdWNoZWQgPSBSZWFjdC51c2VSZWYocHJvcHMuaW5pdGlhbFRvdWNoZWQgfHwgZW1wdHlUb3VjaGVkKTtcbiAgY29uc3QgaW5pdGlhbFN0YXR1cyA9IFJlYWN0LnVzZVJlZihwcm9wcy5pbml0aWFsU3RhdHVzKTtcbiAgY29uc3QgaXNNb3VudGVkID0gUmVhY3QudXNlUmVmPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgZmllbGRSZWdpc3RyeSA9IFJlYWN0LnVzZVJlZjxGaWVsZFJlZ2lzdHJ5Pih7fSk7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgdHlwZW9mIGlzSW5pdGlhbFZhbGlkID09PSAndW5kZWZpbmVkJyxcbiAgICAgICAgJ2lzSW5pdGlhbFZhbGlkIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgRm9ybWlrLiBQbGVhc2UgdXNlIGluaXRpYWxFcnJvcnMgb3IgdmFsaWRhdGVPbk1vdW50IGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIH0sIFtdKTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlzTW91bnRlZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IFtzdGF0ZSwgZGlzcGF0Y2hdID0gUmVhY3QudXNlUmVkdWNlcjxcbiAgICBSZWFjdC5SZWR1Y2VyPEZvcm1pa1N0YXRlPFZhbHVlcz4sIEZvcm1pa01lc3NhZ2U8VmFsdWVzPj5cbiAgPihmb3JtaWtSZWR1Y2VyLCB7XG4gICAgdmFsdWVzOiBwcm9wcy5pbml0aWFsVmFsdWVzLFxuICAgIGVycm9yczogcHJvcHMuaW5pdGlhbEVycm9ycyB8fCBlbXB0eUVycm9ycyxcbiAgICB0b3VjaGVkOiBwcm9wcy5pbml0aWFsVG91Y2hlZCB8fCBlbXB0eVRvdWNoZWQsXG4gICAgc3RhdHVzOiBwcm9wcy5pbml0aWFsU3RhdHVzLFxuICAgIGlzU3VibWl0dGluZzogZmFsc2UsXG4gICAgaXNWYWxpZGF0aW5nOiBmYWxzZSxcbiAgICBzdWJtaXRDb3VudDogMCxcbiAgfSk7XG5cbiAgY29uc3QgcnVuVmFsaWRhdGVIYW5kbGVyID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHZhbHVlczogVmFsdWVzLCBmaWVsZD86IHN0cmluZyk6IFByb21pc2U8Rm9ybWlrRXJyb3JzPFZhbHVlcz4+ID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IG1heWJlUHJvbWlzZWRFcnJvcnMgPSAocHJvcHMudmFsaWRhdGUgYXMgYW55KSh2YWx1ZXMsIGZpZWxkKTtcbiAgICAgICAgaWYgKG1heWJlUHJvbWlzZWRFcnJvcnMgPT0gbnVsbCkge1xuICAgICAgICAgIC8vIHVzZSBsb29zZSBudWxsIGNoZWNrIGhlcmUgb24gcHVycG9zZVxuICAgICAgICAgIHJlc29sdmUoZW1wdHlFcnJvcnMpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZShtYXliZVByb21pc2VkRXJyb3JzKSkge1xuICAgICAgICAgIChtYXliZVByb21pc2VkRXJyb3JzIGFzIFByb21pc2U8YW55PikudGhlbihcbiAgICAgICAgICAgIGVycm9ycyA9PiB7XG4gICAgICAgICAgICAgIHJlc29sdmUoZXJyb3JzIHx8IGVtcHR5RXJyb3JzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY3R1YWxFeGNlcHRpb24gPT4ge1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgIGBXYXJuaW5nOiBBbiB1bmhhbmRsZWQgZXJyb3Igd2FzIGNhdWdodCBkdXJpbmcgdmFsaWRhdGlvbiBpbiA8Rm9ybWlrIHZhbGlkYXRlIC8+YCxcbiAgICAgICAgICAgICAgICAgIGFjdHVhbEV4Y2VwdGlvblxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZWplY3QoYWN0dWFsRXhjZXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUobWF5YmVQcm9taXNlZEVycm9ycyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW3Byb3BzLnZhbGlkYXRlXVxuICApO1xuXG4gIC8qKlxuICAgKiBSdW4gdmFsaWRhdGlvbiBhZ2FpbnN0IGEgWXVwIHNjaGVtYSBhbmQgb3B0aW9uYWxseSBydW4gYSBmdW5jdGlvbiBpZiBzdWNjZXNzZnVsXG4gICAqL1xuICBjb25zdCBydW5WYWxpZGF0aW9uU2NoZW1hID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHZhbHVlczogVmFsdWVzLCBmaWVsZD86IHN0cmluZyk6IFByb21pc2U8Rm9ybWlrRXJyb3JzPFZhbHVlcz4+ID0+IHtcbiAgICAgIGNvbnN0IHZhbGlkYXRpb25TY2hlbWEgPSBwcm9wcy52YWxpZGF0aW9uU2NoZW1hO1xuICAgICAgY29uc3Qgc2NoZW1hID0gaXNGdW5jdGlvbih2YWxpZGF0aW9uU2NoZW1hKVxuICAgICAgICA/IHZhbGlkYXRpb25TY2hlbWEoZmllbGQpXG4gICAgICAgIDogdmFsaWRhdGlvblNjaGVtYTtcbiAgICAgIGNvbnN0IHByb21pc2UgPVxuICAgICAgICBmaWVsZCAmJiBzY2hlbWEudmFsaWRhdGVBdFxuICAgICAgICAgID8gc2NoZW1hLnZhbGlkYXRlQXQoZmllbGQsIHZhbHVlcylcbiAgICAgICAgICA6IHZhbGlkYXRlWXVwU2NoZW1hKHZhbHVlcywgc2NoZW1hKTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHByb21pc2UudGhlbihcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKGVtcHR5RXJyb3JzKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgICAgLy8gWXVwIHdpbGwgdGhyb3cgYSB2YWxpZGF0aW9uIGVycm9yIGlmIHZhbGlkYXRpb24gZmFpbHMuIFdlIGNhdGNoIHRob3NlIGFuZFxuICAgICAgICAgICAgLy8gcmVzb2x2ZSB0aGVtIGludG8gRm9ybWlrIGVycm9ycy4gV2UgY2FuIHNuaWZmIGlmIHNvbWV0aGluZyBpcyBhIFl1cCBlcnJvclxuICAgICAgICAgICAgLy8gYnkgY2hlY2tpbmcgZXJyb3IubmFtZS5cbiAgICAgICAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVuc2UveXVwI3ZhbGlkYXRpb25lcnJvcmVycm9ycy1zdHJpbmctLWFycmF5c3RyaW5nLXZhbHVlLWFueS1wYXRoLXN0cmluZ1xuICAgICAgICAgICAgaWYgKGVyci5uYW1lID09PSAnVmFsaWRhdGlvbkVycm9yJykge1xuICAgICAgICAgICAgICByZXNvbHZlKHl1cFRvRm9ybUVycm9ycyhlcnIpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFdlIHRocm93IGFueSBvdGhlciBlcnJvcnNcbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICBgV2FybmluZzogQW4gdW5oYW5kbGVkIGVycm9yIHdhcyBjYXVnaHQgZHVyaW5nIHZhbGlkYXRpb24gaW4gPEZvcm1payB2YWxpZGF0aW9uU2NoZW1hIC8+YCxcbiAgICAgICAgICAgICAgICAgIGVyclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIFtwcm9wcy52YWxpZGF0aW9uU2NoZW1hXVxuICApO1xuXG4gIGNvbnN0IHJ1blNpbmdsZUZpZWxkTGV2ZWxWYWxpZGF0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGZpZWxkOiBzdHJpbmcsIHZhbHVlOiB2b2lkIHwgc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+XG4gICAgICAgIHJlc29sdmUoZmllbGRSZWdpc3RyeS5jdXJyZW50W2ZpZWxkXS52YWxpZGF0ZSh2YWx1ZSkgYXMgc3RyaW5nKVxuICAgICAgKTtcbiAgICB9LFxuICAgIFtdXG4gICk7XG5cbiAgY29uc3QgcnVuRmllbGRMZXZlbFZhbGlkYXRpb25zID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHZhbHVlczogVmFsdWVzKTogUHJvbWlzZTxGb3JtaWtFcnJvcnM8VmFsdWVzPj4gPT4ge1xuICAgICAgY29uc3QgZmllbGRLZXlzV2l0aFZhbGlkYXRpb246IHN0cmluZ1tdID0gT2JqZWN0LmtleXMoXG4gICAgICAgIGZpZWxkUmVnaXN0cnkuY3VycmVudFxuICAgICAgKS5maWx0ZXIoZiA9PiBpc0Z1bmN0aW9uKGZpZWxkUmVnaXN0cnkuY3VycmVudFtmXS52YWxpZGF0ZSkpO1xuXG4gICAgICAvLyBDb25zdHJ1Y3QgYW4gYXJyYXkgd2l0aCBhbGwgb2YgdGhlIGZpZWxkIHZhbGlkYXRpb24gZnVuY3Rpb25zXG4gICAgICBjb25zdCBmaWVsZFZhbGlkYXRpb25zOiBQcm9taXNlPHN0cmluZz5bXSA9XG4gICAgICAgIGZpZWxkS2V5c1dpdGhWYWxpZGF0aW9uLmxlbmd0aCA+IDBcbiAgICAgICAgICA/IGZpZWxkS2V5c1dpdGhWYWxpZGF0aW9uLm1hcChmID0+XG4gICAgICAgICAgICAgIHJ1blNpbmdsZUZpZWxkTGV2ZWxWYWxpZGF0aW9uKGYsIGdldEluKHZhbHVlcywgZikpXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiBbUHJvbWlzZS5yZXNvbHZlKCdET19OT1RfREVMRVRFX1lPVV9XSUxMX0JFX0ZJUkVEJyldOyAvLyB1c2Ugc3BlY2lhbCBjYXNlIDspXG5cbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChmaWVsZFZhbGlkYXRpb25zKS50aGVuKChmaWVsZEVycm9yc0xpc3Q6IHN0cmluZ1tdKSA9PlxuICAgICAgICBmaWVsZEVycm9yc0xpc3QucmVkdWNlKChwcmV2LCBjdXJyLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChjdXJyID09PSAnRE9fTk9UX0RFTEVURV9ZT1VfV0lMTF9CRV9GSVJFRCcpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY3Vycikge1xuICAgICAgICAgICAgcHJldiA9IHNldEluKHByZXYsIGZpZWxkS2V5c1dpdGhWYWxpZGF0aW9uW2luZGV4XSwgY3Vycik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICB9LCB7fSlcbiAgICAgICk7XG4gICAgfSxcbiAgICBbcnVuU2luZ2xlRmllbGRMZXZlbFZhbGlkYXRpb25dXG4gICk7XG5cbiAgLy8gUnVuIGFsbCB2YWxpZGF0aW9ucyBhbmQgcmV0dXJuIHRoZSByZXN1bHRcbiAgY29uc3QgcnVuQWxsVmFsaWRhdGlvbnMgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAodmFsdWVzOiBWYWx1ZXMpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgIHJ1bkZpZWxkTGV2ZWxWYWxpZGF0aW9ucyh2YWx1ZXMpLFxuICAgICAgICBwcm9wcy52YWxpZGF0aW9uU2NoZW1hID8gcnVuVmFsaWRhdGlvblNjaGVtYSh2YWx1ZXMpIDoge30sXG4gICAgICAgIHByb3BzLnZhbGlkYXRlID8gcnVuVmFsaWRhdGVIYW5kbGVyKHZhbHVlcykgOiB7fSxcbiAgICAgIF0pLnRoZW4oKFtmaWVsZEVycm9ycywgc2NoZW1hRXJyb3JzLCB2YWxpZGF0ZUVycm9yc10pID0+IHtcbiAgICAgICAgY29uc3QgY29tYmluZWRFcnJvcnMgPSBkZWVwbWVyZ2UuYWxsPEZvcm1pa0Vycm9yczxWYWx1ZXM+PihcbiAgICAgICAgICBbZmllbGRFcnJvcnMsIHNjaGVtYUVycm9ycywgdmFsaWRhdGVFcnJvcnNdLFxuICAgICAgICAgIHsgYXJyYXlNZXJnZSB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBjb21iaW5lZEVycm9ycztcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW1xuICAgICAgcHJvcHMudmFsaWRhdGUsXG4gICAgICBwcm9wcy52YWxpZGF0aW9uU2NoZW1hLFxuICAgICAgcnVuRmllbGRMZXZlbFZhbGlkYXRpb25zLFxuICAgICAgcnVuVmFsaWRhdGVIYW5kbGVyLFxuICAgICAgcnVuVmFsaWRhdGlvblNjaGVtYSxcbiAgICBdXG4gICk7XG5cbiAgLy8gUnVuIGFsbCB2YWxpZGF0aW9ucyBtZXRob2RzIGFuZCB1cGRhdGUgc3RhdGUgYWNjb3JkaW5nbHlcbiAgY29uc3QgdmFsaWRhdGVGb3JtV2l0aEhpZ2hQcmlvcml0eSA9IHVzZUV2ZW50Q2FsbGJhY2soXG4gICAgKHZhbHVlczogVmFsdWVzID0gc3RhdGUudmFsdWVzKSA9PiB7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfSVNWQUxJREFUSU5HJywgcGF5bG9hZDogdHJ1ZSB9KTtcbiAgICAgIHJldHVybiBydW5BbGxWYWxpZGF0aW9ucyh2YWx1ZXMpLnRoZW4oY29tYmluZWRFcnJvcnMgPT4ge1xuICAgICAgICBpZiAoISFpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9JU1ZBTElEQVRJTkcnLCBwYXlsb2FkOiBmYWxzZSB9KTtcbiAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfRVJST1JTJywgcGF5bG9hZDogY29tYmluZWRFcnJvcnMgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkRXJyb3JzO1xuICAgICAgfSk7XG4gICAgfVxuICApO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgdmFsaWRhdGVPbk1vdW50ICYmXG4gICAgICBpc01vdW50ZWQuY3VycmVudCA9PT0gdHJ1ZSAmJlxuICAgICAgaXNFcXVhbChpbml0aWFsVmFsdWVzLmN1cnJlbnQsIHByb3BzLmluaXRpYWxWYWx1ZXMpXG4gICAgKSB7XG4gICAgICB2YWxpZGF0ZUZvcm1XaXRoSGlnaFByaW9yaXR5KGluaXRpYWxWYWx1ZXMuY3VycmVudCk7XG4gICAgfVxuICB9LCBbdmFsaWRhdGVPbk1vdW50LCB2YWxpZGF0ZUZvcm1XaXRoSGlnaFByaW9yaXR5XSk7XG5cbiAgY29uc3QgcmVzZXRGb3JtID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKG5leHRTdGF0ZT86IFBhcnRpYWw8Rm9ybWlrU3RhdGU8VmFsdWVzPj4pID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlcyA9XG4gICAgICAgIG5leHRTdGF0ZSAmJiBuZXh0U3RhdGUudmFsdWVzXG4gICAgICAgICAgPyBuZXh0U3RhdGUudmFsdWVzXG4gICAgICAgICAgOiBpbml0aWFsVmFsdWVzLmN1cnJlbnQ7XG4gICAgICBjb25zdCBlcnJvcnMgPVxuICAgICAgICBuZXh0U3RhdGUgJiYgbmV4dFN0YXRlLmVycm9yc1xuICAgICAgICAgID8gbmV4dFN0YXRlLmVycm9yc1xuICAgICAgICAgIDogaW5pdGlhbEVycm9ycy5jdXJyZW50XG4gICAgICAgICAgPyBpbml0aWFsRXJyb3JzLmN1cnJlbnRcbiAgICAgICAgICA6IHByb3BzLmluaXRpYWxFcnJvcnMgfHwge307XG4gICAgICBjb25zdCB0b3VjaGVkID1cbiAgICAgICAgbmV4dFN0YXRlICYmIG5leHRTdGF0ZS50b3VjaGVkXG4gICAgICAgICAgPyBuZXh0U3RhdGUudG91Y2hlZFxuICAgICAgICAgIDogaW5pdGlhbFRvdWNoZWQuY3VycmVudFxuICAgICAgICAgID8gaW5pdGlhbFRvdWNoZWQuY3VycmVudFxuICAgICAgICAgIDogcHJvcHMuaW5pdGlhbFRvdWNoZWQgfHwge307XG4gICAgICBjb25zdCBzdGF0dXMgPVxuICAgICAgICBuZXh0U3RhdGUgJiYgbmV4dFN0YXRlLnN0YXR1c1xuICAgICAgICAgID8gbmV4dFN0YXRlLnN0YXR1c1xuICAgICAgICAgIDogaW5pdGlhbFN0YXR1cy5jdXJyZW50XG4gICAgICAgICAgPyBpbml0aWFsU3RhdHVzLmN1cnJlbnRcbiAgICAgICAgICA6IHByb3BzLmluaXRpYWxTdGF0dXM7XG4gICAgICBpbml0aWFsVmFsdWVzLmN1cnJlbnQgPSB2YWx1ZXM7XG4gICAgICBpbml0aWFsRXJyb3JzLmN1cnJlbnQgPSBlcnJvcnM7XG4gICAgICBpbml0aWFsVG91Y2hlZC5jdXJyZW50ID0gdG91Y2hlZDtcbiAgICAgIGluaXRpYWxTdGF0dXMuY3VycmVudCA9IHN0YXR1cztcblxuICAgICAgY29uc3QgZGlzcGF0Y2hGbiA9ICgpID0+IHtcbiAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICdSRVNFVF9GT1JNJyxcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBpc1N1Ym1pdHRpbmc6ICEhbmV4dFN0YXRlICYmICEhbmV4dFN0YXRlLmlzU3VibWl0dGluZyxcbiAgICAgICAgICAgIGVycm9ycyxcbiAgICAgICAgICAgIHRvdWNoZWQsXG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICB2YWx1ZXMsXG4gICAgICAgICAgICBpc1ZhbGlkYXRpbmc6ICEhbmV4dFN0YXRlICYmICEhbmV4dFN0YXRlLmlzVmFsaWRhdGluZyxcbiAgICAgICAgICAgIHN1Ym1pdENvdW50OlxuICAgICAgICAgICAgICAhIW5leHRTdGF0ZSAmJlxuICAgICAgICAgICAgICAhIW5leHRTdGF0ZS5zdWJtaXRDb3VudCAmJlxuICAgICAgICAgICAgICB0eXBlb2YgbmV4dFN0YXRlLnN1Ym1pdENvdW50ID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgID8gbmV4dFN0YXRlLnN1Ym1pdENvdW50XG4gICAgICAgICAgICAgICAgOiAwLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKHByb3BzLm9uUmVzZXQpIHtcbiAgICAgICAgY29uc3QgbWF5YmVQcm9taXNlZE9uUmVzZXQgPSAocHJvcHMub25SZXNldCBhcyBhbnkpKFxuICAgICAgICAgIHN0YXRlLnZhbHVlcyxcbiAgICAgICAgICBpbXBlcmF0aXZlTWV0aG9kc1xuICAgICAgICApO1xuXG4gICAgICAgIGlmIChpc1Byb21pc2UobWF5YmVQcm9taXNlZE9uUmVzZXQpKSB7XG4gICAgICAgICAgKG1heWJlUHJvbWlzZWRPblJlc2V0IGFzIFByb21pc2U8YW55PikudGhlbihkaXNwYXRjaEZuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaXNwYXRjaEZuKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpc3BhdGNoRm4oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtwcm9wcy5pbml0aWFsRXJyb3JzLCBwcm9wcy5pbml0aWFsU3RhdHVzLCBwcm9wcy5pbml0aWFsVG91Y2hlZF1cbiAgKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChcbiAgICAgIGlzTW91bnRlZC5jdXJyZW50ID09PSB0cnVlICYmXG4gICAgICAhaXNFcXVhbChpbml0aWFsVmFsdWVzLmN1cnJlbnQsIHByb3BzLmluaXRpYWxWYWx1ZXMpXG4gICAgKSB7XG4gICAgICBpZiAoZW5hYmxlUmVpbml0aWFsaXplKSB7XG4gICAgICAgIGluaXRpYWxWYWx1ZXMuY3VycmVudCA9IHByb3BzLmluaXRpYWxWYWx1ZXM7XG4gICAgICAgIHJlc2V0Rm9ybSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsaWRhdGVPbk1vdW50KSB7XG4gICAgICAgIHZhbGlkYXRlRm9ybVdpdGhIaWdoUHJpb3JpdHkoaW5pdGlhbFZhbHVlcy5jdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtcbiAgICBlbmFibGVSZWluaXRpYWxpemUsXG4gICAgcHJvcHMuaW5pdGlhbFZhbHVlcyxcbiAgICByZXNldEZvcm0sXG4gICAgdmFsaWRhdGVPbk1vdW50LFxuICAgIHZhbGlkYXRlRm9ybVdpdGhIaWdoUHJpb3JpdHksXG4gIF0pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgZW5hYmxlUmVpbml0aWFsaXplICYmXG4gICAgICBpc01vdW50ZWQuY3VycmVudCA9PT0gdHJ1ZSAmJlxuICAgICAgIWlzRXF1YWwoaW5pdGlhbEVycm9ycy5jdXJyZW50LCBwcm9wcy5pbml0aWFsRXJyb3JzKVxuICAgICkge1xuICAgICAgaW5pdGlhbEVycm9ycy5jdXJyZW50ID0gcHJvcHMuaW5pdGlhbEVycm9ycyB8fCBlbXB0eUVycm9ycztcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NFVF9FUlJPUlMnLFxuICAgICAgICBwYXlsb2FkOiBwcm9wcy5pbml0aWFsRXJyb3JzIHx8IGVtcHR5RXJyb3JzLFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbZW5hYmxlUmVpbml0aWFsaXplLCBwcm9wcy5pbml0aWFsRXJyb3JzXSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoXG4gICAgICBlbmFibGVSZWluaXRpYWxpemUgJiZcbiAgICAgIGlzTW91bnRlZC5jdXJyZW50ID09PSB0cnVlICYmXG4gICAgICAhaXNFcXVhbChpbml0aWFsVG91Y2hlZC5jdXJyZW50LCBwcm9wcy5pbml0aWFsVG91Y2hlZClcbiAgICApIHtcbiAgICAgIGluaXRpYWxUb3VjaGVkLmN1cnJlbnQgPSBwcm9wcy5pbml0aWFsVG91Y2hlZCB8fCBlbXB0eVRvdWNoZWQ7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTRVRfVE9VQ0hFRCcsXG4gICAgICAgIHBheWxvYWQ6IHByb3BzLmluaXRpYWxUb3VjaGVkIHx8IGVtcHR5VG91Y2hlZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2VuYWJsZVJlaW5pdGlhbGl6ZSwgcHJvcHMuaW5pdGlhbFRvdWNoZWRdKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChcbiAgICAgIGVuYWJsZVJlaW5pdGlhbGl6ZSAmJlxuICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPT09IHRydWUgJiZcbiAgICAgICFpc0VxdWFsKGluaXRpYWxTdGF0dXMuY3VycmVudCwgcHJvcHMuaW5pdGlhbFN0YXR1cylcbiAgICApIHtcbiAgICAgIGluaXRpYWxTdGF0dXMuY3VycmVudCA9IHByb3BzLmluaXRpYWxTdGF0dXM7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTRVRfU1RBVFVTJyxcbiAgICAgICAgcGF5bG9hZDogcHJvcHMuaW5pdGlhbFN0YXR1cyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2VuYWJsZVJlaW5pdGlhbGl6ZSwgcHJvcHMuaW5pdGlhbFN0YXR1cywgcHJvcHMuaW5pdGlhbFRvdWNoZWRdKTtcblxuICBjb25zdCB2YWxpZGF0ZUZpZWxkID0gdXNlRXZlbnRDYWxsYmFjaygobmFtZTogc3RyaW5nKSA9PiB7XG4gICAgLy8gVGhpcyB3aWxsIGVmZmljaWVudGx5IHZhbGlkYXRlIGEgc2luZ2xlIGZpZWxkIGJ5IGF2b2lkaW5nIHN0YXRlXG4gICAgLy8gY2hhbmdlcyBpZiB0aGUgdmFsaWRhdGlvbiBmdW5jdGlvbiBpcyBzeW5jaHJvbm91cy4gSXQncyBkaWZmZXJlbnQgZnJvbVxuICAgIC8vIHdoYXQgaXMgY2FsbGVkIHdoZW4gdXNpbmcgdmFsaWRhdGVGb3JtLlxuXG4gICAgaWYgKFxuICAgICAgZmllbGRSZWdpc3RyeS5jdXJyZW50W25hbWVdICYmXG4gICAgICBpc0Z1bmN0aW9uKGZpZWxkUmVnaXN0cnkuY3VycmVudFtuYW1lXS52YWxpZGF0ZSlcbiAgICApIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZ2V0SW4oc3RhdGUudmFsdWVzLCBuYW1lKTtcbiAgICAgIGNvbnN0IG1heWJlUHJvbWlzZSA9IGZpZWxkUmVnaXN0cnkuY3VycmVudFtuYW1lXS52YWxpZGF0ZSh2YWx1ZSk7XG4gICAgICBpZiAoaXNQcm9taXNlKG1heWJlUHJvbWlzZSkpIHtcbiAgICAgICAgLy8gT25seSBmbGlwIGlzVmFsaWRhdGluZyBpZiB0aGUgZnVuY3Rpb24gaXMgYXN5bmMuXG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9JU1ZBTElEQVRJTkcnLCBwYXlsb2FkOiB0cnVlIH0pO1xuICAgICAgICByZXR1cm4gbWF5YmVQcm9taXNlXG4gICAgICAgICAgLnRoZW4oKHg6IGFueSkgPT4geClcbiAgICAgICAgICAudGhlbigoZXJyb3I6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgICB0eXBlOiAnU0VUX0ZJRUxEX0VSUk9SJyxcbiAgICAgICAgICAgICAgcGF5bG9hZDogeyBmaWVsZDogbmFtZSwgdmFsdWU6IGVycm9yIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9JU1ZBTElEQVRJTkcnLCBwYXlsb2FkOiBmYWxzZSB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiAnU0VUX0ZJRUxEX0VSUk9SJyxcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBmaWVsZDogbmFtZSxcbiAgICAgICAgICAgIHZhbHVlOiBtYXliZVByb21pc2UgYXMgc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1heWJlUHJvbWlzZSBhcyBzdHJpbmcgfCB1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHJvcHMudmFsaWRhdGlvblNjaGVtYSkge1xuICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0lTVkFMSURBVElORycsIHBheWxvYWQ6IHRydWUgfSk7XG4gICAgICByZXR1cm4gcnVuVmFsaWRhdGlvblNjaGVtYShzdGF0ZS52YWx1ZXMsIG5hbWUpXG4gICAgICAgIC50aGVuKCh4OiBhbnkpID0+IHgpXG4gICAgICAgIC50aGVuKChlcnJvcjogYW55KSA9PiB7XG4gICAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgICAgdHlwZTogJ1NFVF9GSUVMRF9FUlJPUicsXG4gICAgICAgICAgICBwYXlsb2FkOiB7IGZpZWxkOiBuYW1lLCB2YWx1ZTogZXJyb3JbbmFtZV0gfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfSVNWQUxJREFUSU5HJywgcGF5bG9hZDogZmFsc2UgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfSk7XG5cbiAgY29uc3QgcmVnaXN0ZXJGaWVsZCA9IFJlYWN0LnVzZUNhbGxiYWNrKChuYW1lOiBzdHJpbmcsIHsgdmFsaWRhdGUgfTogYW55KSA9PiB7XG4gICAgZmllbGRSZWdpc3RyeS5jdXJyZW50W25hbWVdID0ge1xuICAgICAgdmFsaWRhdGUsXG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHVucmVnaXN0ZXJGaWVsZCA9IFJlYWN0LnVzZUNhbGxiYWNrKChuYW1lOiBzdHJpbmcpID0+IHtcbiAgICBkZWxldGUgZmllbGRSZWdpc3RyeS5jdXJyZW50W25hbWVdO1xuICB9LCBbXSk7XG5cbiAgY29uc3Qgc2V0VG91Y2hlZCA9IHVzZUV2ZW50Q2FsbGJhY2soXG4gICAgKHRvdWNoZWQ6IEZvcm1pa1RvdWNoZWQ8VmFsdWVzPiwgc2hvdWxkVmFsaWRhdGU/OiBib29sZWFuKSA9PiB7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfVE9VQ0hFRCcsIHBheWxvYWQ6IHRvdWNoZWQgfSk7XG4gICAgICBjb25zdCB3aWxsVmFsaWRhdGUgPVxuICAgICAgICBzaG91bGRWYWxpZGF0ZSA9PT0gdW5kZWZpbmVkID8gdmFsaWRhdGVPbkJsdXIgOiBzaG91bGRWYWxpZGF0ZTtcbiAgICAgIHJldHVybiB3aWxsVmFsaWRhdGVcbiAgICAgICAgPyB2YWxpZGF0ZUZvcm1XaXRoSGlnaFByaW9yaXR5KHN0YXRlLnZhbHVlcylcbiAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICk7XG5cbiAgY29uc3Qgc2V0RXJyb3JzID0gUmVhY3QudXNlQ2FsbGJhY2soKGVycm9yczogRm9ybWlrRXJyb3JzPFZhbHVlcz4pID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfRVJST1JTJywgcGF5bG9hZDogZXJyb3JzIH0pO1xuICB9LCBbXSk7XG5cbiAgY29uc3Qgc2V0VmFsdWVzID0gdXNlRXZlbnRDYWxsYmFjayhcbiAgICAodmFsdWVzOiBSZWFjdC5TZXRTdGF0ZUFjdGlvbjxWYWx1ZXM+LCBzaG91bGRWYWxpZGF0ZT86IGJvb2xlYW4pID0+IHtcbiAgICAgIGNvbnN0IHJlc29sdmVkVmFsdWVzID0gaXNGdW5jdGlvbih2YWx1ZXMpID8gdmFsdWVzKHN0YXRlLnZhbHVlcykgOiB2YWx1ZXM7XG5cbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9WQUxVRVMnLCBwYXlsb2FkOiByZXNvbHZlZFZhbHVlcyB9KTtcbiAgICAgIGNvbnN0IHdpbGxWYWxpZGF0ZSA9XG4gICAgICAgIHNob3VsZFZhbGlkYXRlID09PSB1bmRlZmluZWQgPyB2YWxpZGF0ZU9uQ2hhbmdlIDogc2hvdWxkVmFsaWRhdGU7XG4gICAgICByZXR1cm4gd2lsbFZhbGlkYXRlXG4gICAgICAgID8gdmFsaWRhdGVGb3JtV2l0aEhpZ2hQcmlvcml0eShyZXNvbHZlZFZhbHVlcylcbiAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICk7XG5cbiAgY29uc3Qgc2V0RmllbGRFcnJvciA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChmaWVsZDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTRVRfRklFTERfRVJST1InLFxuICAgICAgICBwYXlsb2FkOiB7IGZpZWxkLCB2YWx1ZSB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBbXVxuICApO1xuXG4gIGNvbnN0IHNldEZpZWxkVmFsdWUgPSB1c2VFdmVudENhbGxiYWNrKFxuICAgIChmaWVsZDogc3RyaW5nLCB2YWx1ZTogYW55LCBzaG91bGRWYWxpZGF0ZT86IGJvb2xlYW4pID0+IHtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NFVF9GSUVMRF9WQUxVRScsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgY29uc3Qgd2lsbFZhbGlkYXRlID1cbiAgICAgICAgc2hvdWxkVmFsaWRhdGUgPT09IHVuZGVmaW5lZCA/IHZhbGlkYXRlT25DaGFuZ2UgOiBzaG91bGRWYWxpZGF0ZTtcbiAgICAgIHJldHVybiB3aWxsVmFsaWRhdGVcbiAgICAgICAgPyB2YWxpZGF0ZUZvcm1XaXRoSGlnaFByaW9yaXR5KHNldEluKHN0YXRlLnZhbHVlcywgZmllbGQsIHZhbHVlKSlcbiAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICk7XG5cbiAgY29uc3QgZXhlY3V0ZUNoYW5nZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChldmVudE9yVGV4dFZhbHVlOiBzdHJpbmcgfCBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+LCBtYXliZVBhdGg/OiBzdHJpbmcpID0+IHtcbiAgICAgIC8vIEJ5IGRlZmF1bHQsIGFzc3VtZSB0aGF0IHRoZSBmaXJzdCBhcmd1bWVudCBpcyBhIHN0cmluZy4gVGhpcyBhbGxvd3MgdXMgdG8gdXNlXG4gICAgICAvLyBoYW5kbGVDaGFuZ2Ugd2l0aCBSZWFjdCBOYXRpdmUgYW5kIFJlYWN0IE5hdGl2ZSBXZWIncyBvbkNoYW5nZVRleHQgcHJvcCB3aGljaFxuICAgICAgLy8gcHJvdmlkZXMganVzdCB0aGUgdmFsdWUgb2YgdGhlIGlucHV0LlxuICAgICAgbGV0IGZpZWxkID0gbWF5YmVQYXRoO1xuICAgICAgbGV0IHZhbCA9IGV2ZW50T3JUZXh0VmFsdWU7XG4gICAgICBsZXQgcGFyc2VkO1xuICAgICAgLy8gSWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCBhIHN0cmluZyB0aG91Z2gsIGl0IGhhcyB0byBiZSBhIHN5bnRoZXRpYyBSZWFjdCBFdmVudCAob3IgYSBmYWtlIG9uZSksXG4gICAgICAvLyBzbyB3ZSBoYW5kbGUgbGlrZSB3ZSB3b3VsZCBhIG5vcm1hbCBIVE1MIGNoYW5nZSBldmVudC5cbiAgICAgIGlmICghaXNTdHJpbmcoZXZlbnRPclRleHRWYWx1ZSkpIHtcbiAgICAgICAgLy8gSWYgd2UgY2FuLCBwZXJzaXN0IHRoZSBldmVudFxuICAgICAgICAvLyBAc2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ldmVudHMuaHRtbCNldmVudC1wb29saW5nXG4gICAgICAgIGlmICgoZXZlbnRPclRleHRWYWx1ZSBhcyBhbnkpLnBlcnNpc3QpIHtcbiAgICAgICAgICAoZXZlbnRPclRleHRWYWx1ZSBhcyBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+KS5wZXJzaXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnRPclRleHRWYWx1ZS50YXJnZXRcbiAgICAgICAgICA/IChldmVudE9yVGV4dFZhbHVlIGFzIFJlYWN0LkNoYW5nZUV2ZW50PGFueT4pLnRhcmdldFxuICAgICAgICAgIDogKGV2ZW50T3JUZXh0VmFsdWUgYXMgUmVhY3QuQ2hhbmdlRXZlbnQ8YW55PikuY3VycmVudFRhcmdldDtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIGlkLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIGNoZWNrZWQsXG4gICAgICAgICAgb3V0ZXJIVE1MLFxuICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgbXVsdGlwbGUsXG4gICAgICAgIH0gPSB0YXJnZXQ7XG5cbiAgICAgICAgZmllbGQgPSBtYXliZVBhdGggPyBtYXliZVBhdGggOiBuYW1lID8gbmFtZSA6IGlkO1xuICAgICAgICBpZiAoIWZpZWxkICYmIF9fREVWX18pIHtcbiAgICAgICAgICB3YXJuQWJvdXRNaXNzaW5nSWRlbnRpZmllcih7XG4gICAgICAgICAgICBodG1sQ29udGVudDogb3V0ZXJIVE1MLFxuICAgICAgICAgICAgZG9jdW1lbnRhdGlvbkFuY2hvckxpbms6ICdoYW5kbGVjaGFuZ2UtZS1yZWFjdGNoYW5nZWV2ZW50YW55LS12b2lkJyxcbiAgICAgICAgICAgIGhhbmRsZXJOYW1lOiAnaGFuZGxlQ2hhbmdlJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YWwgPSAvbnVtYmVyfHJhbmdlLy50ZXN0KHR5cGUpXG4gICAgICAgICAgPyAoKHBhcnNlZCA9IHBhcnNlRmxvYXQodmFsdWUpKSwgaXNOYU4ocGFyc2VkKSA/ICcnIDogcGFyc2VkKVxuICAgICAgICAgIDogL2NoZWNrYm94Ly50ZXN0KHR5cGUpIC8vIGNoZWNrYm94ZXNcbiAgICAgICAgICA/IGdldFZhbHVlRm9yQ2hlY2tib3goZ2V0SW4oc3RhdGUudmFsdWVzLCBmaWVsZCEpLCBjaGVja2VkLCB2YWx1ZSlcbiAgICAgICAgICA6IG9wdGlvbnMgJiYgbXVsdGlwbGUgLy8gPHNlbGVjdCBtdWx0aXBsZT5cbiAgICAgICAgICA/IGdldFNlbGVjdGVkVmFsdWVzKG9wdGlvbnMpXG4gICAgICAgICAgOiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgIC8vIFNldCBmb3JtIGZpZWxkcyBieSBuYW1lXG4gICAgICAgIHNldEZpZWxkVmFsdWUoZmllbGQsIHZhbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbc2V0RmllbGRWYWx1ZSwgc3RhdGUudmFsdWVzXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUV2ZW50Q2FsbGJhY2s8Rm9ybWlrSGFuZGxlcnNbJ2hhbmRsZUNoYW5nZSddPihcbiAgICAoXG4gICAgICBldmVudE9yUGF0aDogc3RyaW5nIHwgUmVhY3QuQ2hhbmdlRXZlbnQ8YW55PlxuICAgICk6IHZvaWQgfCAoKGV2ZW50T3JUZXh0VmFsdWU6IHN0cmluZyB8IFJlYWN0LkNoYW5nZUV2ZW50PGFueT4pID0+IHZvaWQpID0+IHtcbiAgICAgIGlmIChpc1N0cmluZyhldmVudE9yUGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50ID0+IGV4ZWN1dGVDaGFuZ2UoZXZlbnQsIGV2ZW50T3JQYXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4ZWN1dGVDaGFuZ2UoZXZlbnRPclBhdGgpO1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICBjb25zdCBzZXRGaWVsZFRvdWNoZWQgPSB1c2VFdmVudENhbGxiYWNrKFxuICAgIChmaWVsZDogc3RyaW5nLCB0b3VjaGVkOiBib29sZWFuID0gdHJ1ZSwgc2hvdWxkVmFsaWRhdGU/OiBib29sZWFuKSA9PiB7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTRVRfRklFTERfVE9VQ0hFRCcsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICB2YWx1ZTogdG91Y2hlZCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgY29uc3Qgd2lsbFZhbGlkYXRlID1cbiAgICAgICAgc2hvdWxkVmFsaWRhdGUgPT09IHVuZGVmaW5lZCA/IHZhbGlkYXRlT25CbHVyIDogc2hvdWxkVmFsaWRhdGU7XG4gICAgICByZXR1cm4gd2lsbFZhbGlkYXRlXG4gICAgICAgID8gdmFsaWRhdGVGb3JtV2l0aEhpZ2hQcmlvcml0eShzdGF0ZS52YWx1ZXMpXG4gICAgICAgIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICApO1xuXG4gIGNvbnN0IGV4ZWN1dGVCbHVyID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGU6IGFueSwgcGF0aD86IHN0cmluZykgPT4ge1xuICAgICAgaWYgKGUucGVyc2lzdCkge1xuICAgICAgICBlLnBlcnNpc3QoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgbmFtZSwgaWQsIG91dGVySFRNTCB9ID0gZS50YXJnZXQ7XG4gICAgICBjb25zdCBmaWVsZCA9IHBhdGggPyBwYXRoIDogbmFtZSA/IG5hbWUgOiBpZDtcblxuICAgICAgaWYgKCFmaWVsZCAmJiBfX0RFVl9fKSB7XG4gICAgICAgIHdhcm5BYm91dE1pc3NpbmdJZGVudGlmaWVyKHtcbiAgICAgICAgICBodG1sQ29udGVudDogb3V0ZXJIVE1MLFxuICAgICAgICAgIGRvY3VtZW50YXRpb25BbmNob3JMaW5rOiAnaGFuZGxlYmx1ci1lLWFueS0tdm9pZCcsXG4gICAgICAgICAgaGFuZGxlck5hbWU6ICdoYW5kbGVCbHVyJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHNldEZpZWxkVG91Y2hlZChmaWVsZCwgdHJ1ZSk7XG4gICAgfSxcbiAgICBbc2V0RmllbGRUb3VjaGVkXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZUJsdXIgPSB1c2VFdmVudENhbGxiYWNrPEZvcm1pa0hhbmRsZXJzWydoYW5kbGVCbHVyJ10+KFxuICAgIChldmVudE9yU3RyaW5nOiBhbnkpOiB2b2lkIHwgKChlOiBhbnkpID0+IHZvaWQpID0+IHtcbiAgICAgIGlmIChpc1N0cmluZyhldmVudE9yU3RyaW5nKSkge1xuICAgICAgICByZXR1cm4gZXZlbnQgPT4gZXhlY3V0ZUJsdXIoZXZlbnQsIGV2ZW50T3JTdHJpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhlY3V0ZUJsdXIoZXZlbnRPclN0cmluZyk7XG4gICAgICB9XG4gICAgfVxuICApO1xuXG4gIGNvbnN0IHNldEZvcm1pa1N0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKFxuICAgICAgc3RhdGVPckNiOlxuICAgICAgICB8IEZvcm1pa1N0YXRlPFZhbHVlcz5cbiAgICAgICAgfCAoKHN0YXRlOiBGb3JtaWtTdGF0ZTxWYWx1ZXM+KSA9PiBGb3JtaWtTdGF0ZTxWYWx1ZXM+KVxuICAgICk6IHZvaWQgPT4ge1xuICAgICAgaWYgKGlzRnVuY3Rpb24oc3RhdGVPckNiKSkge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfRk9STUlLX1NUQVRFJywgcGF5bG9hZDogc3RhdGVPckNiIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0ZPUk1JS19TVEFURScsIHBheWxvYWQ6ICgpID0+IHN0YXRlT3JDYiB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtdXG4gICk7XG5cbiAgY29uc3Qgc2V0U3RhdHVzID0gUmVhY3QudXNlQ2FsbGJhY2soKHN0YXR1czogYW55KSA9PiB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX1NUQVRVUycsIHBheWxvYWQ6IHN0YXR1cyB9KTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHNldFN1Ym1pdHRpbmcgPSBSZWFjdC51c2VDYWxsYmFjaygoaXNTdWJtaXR0aW5nOiBib29sZWFuKSA9PiB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0lTU1VCTUlUVElORycsIHBheWxvYWQ6IGlzU3VibWl0dGluZyB9KTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHN1Ym1pdEZvcm0gPSB1c2VFdmVudENhbGxiYWNrKCgpID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdTVUJNSVRfQVRURU1QVCcgfSk7XG4gICAgcmV0dXJuIHZhbGlkYXRlRm9ybVdpdGhIaWdoUHJpb3JpdHkoKS50aGVuKFxuICAgICAgKGNvbWJpbmVkRXJyb3JzOiBGb3JtaWtFcnJvcnM8VmFsdWVzPikgPT4ge1xuICAgICAgICAvLyBJbiBjYXNlIGFuIGVycm9yIHdhcyB0aHJvd24gYW5kIHBhc3NlZCB0byB0aGUgcmVzb2x2ZWQgUHJvbWlzZSxcbiAgICAgICAgLy8gYGNvbWJpbmVkRXJyb3JzYCBjYW4gYmUgYW4gaW5zdGFuY2Ugb2YgYW4gRXJyb3IuIFdlIG5lZWQgdG8gY2hlY2tcbiAgICAgICAgLy8gdGhhdCBhbmQgYWJvcnQgdGhlIHN1Ym1pdC5cbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgZG8gdGhhdCwgY2FsbGluZyBgT2JqZWN0LmtleXMobmV3IEVycm9yKCkpYCB5aWVsZHMgYW5cbiAgICAgICAgLy8gZW1wdHkgYXJyYXksIHdoaWNoIGNhdXNlcyB0aGUgdmFsaWRhdGlvbiB0byBwYXNzIGFuZCB0aGUgZm9ybVxuICAgICAgICAvLyB0byBiZSBzdWJtaXR0ZWQuXG5cbiAgICAgICAgY29uc3QgaXNJbnN0YW5jZU9mRXJyb3IgPSBjb21iaW5lZEVycm9ycyBpbnN0YW5jZW9mIEVycm9yO1xuICAgICAgICBjb25zdCBpc0FjdHVhbGx5VmFsaWQgPVxuICAgICAgICAgICFpc0luc3RhbmNlT2ZFcnJvciAmJiBPYmplY3Qua2V5cyhjb21iaW5lZEVycm9ycykubGVuZ3RoID09PSAwO1xuICAgICAgICBpZiAoaXNBY3R1YWxseVZhbGlkKSB7XG4gICAgICAgICAgLy8gUHJvY2VlZCB3aXRoIHN1Ym1pdC4uLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gVG8gcmVzcGVjdCBzeW5jIHN1Ym1pdCBmbnMsIHdlIGNhbid0IHNpbXBseSB3cmFwIGV4ZWN1dGVTdWJtaXQgaW4gYSBwcm9taXNlIGFuZFxuICAgICAgICAgIC8vIF9hbHdheXNfIGRpc3BhdGNoIFNVQk1JVF9TVUNDRVNTIGJlY2F1c2UgaXNTdWJtaXR0aW5nIHdvdWxkIHRoZW4gYWx3YXlzIGJlIGZhbHNlLlxuICAgICAgICAgIC8vIFRoaXMgd291bGQgYmUgZmluZSBpbiBzaW1wbGUgY2FzZXMsIGJ1dCBtYWtlIGl0IGltcG9zc2libGUgdG8gZGlzYWJsZSBzdWJtaXRcbiAgICAgICAgICAvLyBidXR0b25zIHdoZXJlIHBlb3BsZSB1c2UgY2FsbGJhY2tzIG9yIHByb21pc2VzIGFzIHNpZGUgZWZmZWN0cyAod2hpY2ggaXMgYmFzaWNhbGx5XG4gICAgICAgICAgLy8gYWxsIG9mIHYxIEZvcm1payBjb2RlKS4gSW5zdGVhZCwgcmVjYWxsIHRoYXQgd2UgYXJlIGluc2lkZSBvZiBhIHByb21pc2UgY2hhaW4gYWxyZWFkeSxcbiAgICAgICAgICAvLyAgc28gd2UgY2FuIHRyeS9jYXRjaCBleGVjdXRlU3VibWl0KCksIGlmIGl0IHJldHVybnMgdW5kZWZpbmVkLCB0aGVuIGp1c3QgYmFpbC5cbiAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgZXJyb3JzLCB0aHJvdyBlbS4gT3RoZXJ3aXNlLCB3cmFwIGV4ZWN1dGVTdWJtaXQgaW4gYSBwcm9taXNlIGFuZCBoYW5kbGVcbiAgICAgICAgICAvLyBjbGVhbnVwIG9mIGlzU3VibWl0dGluZyBvbiBiZWhhbGYgb2YgdGhlIGNvbnN1bWVyLlxuICAgICAgICAgIGxldCBwcm9taXNlT3JVbmRlZmluZWQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByb21pc2VPclVuZGVmaW5lZCA9IGV4ZWN1dGVTdWJtaXQoKTtcbiAgICAgICAgICAgIC8vIEJhaWwgaWYgaXQncyBzeW5jLCBjb25zdW1lciBpcyByZXNwb25zaWJsZSBmb3IgY2xlYW5pbmcgdXBcbiAgICAgICAgICAgIC8vIHZpYSBzZXRTdWJtaXR0aW5nKGZhbHNlKVxuICAgICAgICAgICAgaWYgKHByb21pc2VPclVuZGVmaW5lZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwcm9taXNlT3JVbmRlZmluZWQpXG4gICAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICBpZiAoISFpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NVQk1JVF9TVUNDRVNTJyB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChfZXJyb3JzID0+IHtcbiAgICAgICAgICAgICAgaWYgKCEhaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTVUJNSVRfRkFJTFVSRScgfSk7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIGxlZ2l0IGVycm9yIHJlamVjdGVkIGJ5IHRoZSBvblN1Ym1pdCBmblxuICAgICAgICAgICAgICAgIC8vIHNvIHdlIGRvbid0IHdhbnQgdG8gYnJlYWsgdGhlIHByb21pc2UgY2hhaW5cbiAgICAgICAgICAgICAgICB0aHJvdyBfZXJyb3JzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICghIWlzTW91bnRlZC5jdXJyZW50KSB7XG4gICAgICAgICAgLy8gXl5eIE1ha2Ugc3VyZSBGb3JtaWsgaXMgc3RpbGwgbW91bnRlZCBiZWZvcmUgdXBkYXRpbmcgc3RhdGVcbiAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTVUJNSVRfRkFJTFVSRScgfSk7XG4gICAgICAgICAgLy8gdGhyb3cgY29tYmluZWRFcnJvcnM7XG4gICAgICAgICAgaWYgKGlzSW5zdGFuY2VPZkVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBjb21iaW5lZEVycm9ycztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICk7XG4gIH0pO1xuXG4gIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IHVzZUV2ZW50Q2FsbGJhY2soXG4gICAgKGU/OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTEZvcm1FbGVtZW50PikgPT4ge1xuICAgICAgaWYgKGUgJiYgZS5wcmV2ZW50RGVmYXVsdCAmJiBpc0Z1bmN0aW9uKGUucHJldmVudERlZmF1bHQpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGUgJiYgZS5zdG9wUHJvcGFnYXRpb24gJiYgaXNGdW5jdGlvbihlLnN0b3BQcm9wYWdhdGlvbikpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH1cblxuICAgICAgLy8gV2FybiBpZiBmb3JtIHN1Ym1pc3Npb24gaXMgdHJpZ2dlcmVkIGJ5IGEgPGJ1dHRvbj4gd2l0aG91dCBhXG4gICAgICAvLyBzcGVjaWZpZWQgYHR5cGVgIGF0dHJpYnV0ZSBkdXJpbmcgZGV2ZWxvcG1lbnQuIFRoaXMgbWl0aWdhdGVzXG4gICAgICAvLyBhIGNvbW1vbiBnb3RjaGEgaW4gZm9ybXMgd2l0aCBib3RoIHJlc2V0IGFuZCBzdWJtaXQgYnV0dG9ucyxcbiAgICAgIC8vIHdoZXJlIHRoZSBkZXYgZm9yZ2V0cyB0byBhZGQgdHlwZT1cImJ1dHRvblwiIHRvIHRoZSByZXNldCBidXR0b24uXG4gICAgICBpZiAoX19ERVZfXyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIFNhZmVseSBnZXQgdGhlIGFjdGl2ZSBlbGVtZW50ICh3b3JrcyB3aXRoIElFKVxuICAgICAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgYWN0aXZlRWxlbWVudCAhPT0gbnVsbCAmJlxuICAgICAgICAgIGFjdGl2ZUVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MQnV0dG9uRWxlbWVudFxuICAgICAgICApIHtcbiAgICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgICBhY3RpdmVFbGVtZW50LmF0dHJpYnV0ZXMgJiZcbiAgICAgICAgICAgICAgYWN0aXZlRWxlbWVudC5hdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgndHlwZScpLFxuICAgICAgICAgICAgJ1lvdSBzdWJtaXR0ZWQgYSBGb3JtaWsgZm9ybSB1c2luZyBhIGJ1dHRvbiB3aXRoIGFuIHVuc3BlY2lmaWVkIGB0eXBlYCBhdHRyaWJ1dGUuICBNb3N0IGJyb3dzZXJzIGRlZmF1bHQgYnV0dG9uIGVsZW1lbnRzIHRvIGB0eXBlPVwic3VibWl0XCJgLiBJZiB0aGlzIGlzIG5vdCBhIHN1Ym1pdCBidXR0b24sIHBsZWFzZSBhZGQgYHR5cGU9XCJidXR0b25cImAuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3VibWl0Rm9ybSgpLmNhdGNoKHJlYXNvbiA9PiB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgV2FybmluZzogQW4gdW5oYW5kbGVkIGVycm9yIHdhcyBjYXVnaHQgZnJvbSBzdWJtaXRGb3JtKClgLFxuICAgICAgICAgIHJlYXNvblxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuICApO1xuXG4gIGNvbnN0IGltcGVyYXRpdmVNZXRob2RzOiBGb3JtaWtIZWxwZXJzPFZhbHVlcz4gPSB7XG4gICAgcmVzZXRGb3JtLFxuICAgIHZhbGlkYXRlRm9ybTogdmFsaWRhdGVGb3JtV2l0aEhpZ2hQcmlvcml0eSxcbiAgICB2YWxpZGF0ZUZpZWxkLFxuICAgIHNldEVycm9ycyxcbiAgICBzZXRGaWVsZEVycm9yLFxuICAgIHNldEZpZWxkVG91Y2hlZCxcbiAgICBzZXRGaWVsZFZhbHVlLFxuICAgIHNldFN0YXR1cyxcbiAgICBzZXRTdWJtaXR0aW5nLFxuICAgIHNldFRvdWNoZWQsXG4gICAgc2V0VmFsdWVzLFxuICAgIHNldEZvcm1pa1N0YXRlLFxuICAgIHN1Ym1pdEZvcm0sXG4gIH07XG5cbiAgY29uc3QgZXhlY3V0ZVN1Ym1pdCA9IHVzZUV2ZW50Q2FsbGJhY2soKCkgPT4ge1xuICAgIHJldHVybiBvblN1Ym1pdChzdGF0ZS52YWx1ZXMsIGltcGVyYXRpdmVNZXRob2RzKTtcbiAgfSk7XG5cbiAgY29uc3QgaGFuZGxlUmVzZXQgPSB1c2VFdmVudENhbGxiYWNrKGUgPT4ge1xuICAgIGlmIChlICYmIGUucHJldmVudERlZmF1bHQgJiYgaXNGdW5jdGlvbihlLnByZXZlbnREZWZhdWx0KSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChlICYmIGUuc3RvcFByb3BhZ2F0aW9uICYmIGlzRnVuY3Rpb24oZS5zdG9wUHJvcGFnYXRpb24pKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIHJlc2V0Rm9ybSgpO1xuICB9KTtcblxuICBjb25zdCBnZXRGaWVsZE1ldGEgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAobmFtZTogc3RyaW5nKTogRmllbGRNZXRhUHJvcHM8YW55PiA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogZ2V0SW4oc3RhdGUudmFsdWVzLCBuYW1lKSxcbiAgICAgICAgZXJyb3I6IGdldEluKHN0YXRlLmVycm9ycywgbmFtZSksXG4gICAgICAgIHRvdWNoZWQ6ICEhZ2V0SW4oc3RhdGUudG91Y2hlZCwgbmFtZSksXG4gICAgICAgIGluaXRpYWxWYWx1ZTogZ2V0SW4oaW5pdGlhbFZhbHVlcy5jdXJyZW50LCBuYW1lKSxcbiAgICAgICAgaW5pdGlhbFRvdWNoZWQ6ICEhZ2V0SW4oaW5pdGlhbFRvdWNoZWQuY3VycmVudCwgbmFtZSksXG4gICAgICAgIGluaXRpYWxFcnJvcjogZ2V0SW4oaW5pdGlhbEVycm9ycy5jdXJyZW50LCBuYW1lKSxcbiAgICAgIH07XG4gICAgfSxcbiAgICBbc3RhdGUuZXJyb3JzLCBzdGF0ZS50b3VjaGVkLCBzdGF0ZS52YWx1ZXNdXG4gICk7XG5cbiAgY29uc3QgZ2V0RmllbGRIZWxwZXJzID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKG5hbWU6IHN0cmluZyk6IEZpZWxkSGVscGVyUHJvcHM8YW55PiA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzZXRWYWx1ZTogKHZhbHVlOiBhbnksIHNob3VsZFZhbGlkYXRlPzogYm9vbGVhbikgPT5cbiAgICAgICAgICBzZXRGaWVsZFZhbHVlKG5hbWUsIHZhbHVlLCBzaG91bGRWYWxpZGF0ZSksXG4gICAgICAgIHNldFRvdWNoZWQ6ICh2YWx1ZTogYm9vbGVhbiwgc2hvdWxkVmFsaWRhdGU/OiBib29sZWFuKSA9PlxuICAgICAgICAgIHNldEZpZWxkVG91Y2hlZChuYW1lLCB2YWx1ZSwgc2hvdWxkVmFsaWRhdGUpLFxuICAgICAgICBzZXRFcnJvcjogKHZhbHVlOiBhbnkpID0+IHNldEZpZWxkRXJyb3IobmFtZSwgdmFsdWUpLFxuICAgICAgfTtcbiAgICB9LFxuICAgIFtzZXRGaWVsZFZhbHVlLCBzZXRGaWVsZFRvdWNoZWQsIHNldEZpZWxkRXJyb3JdXG4gICk7XG5cbiAgY29uc3QgZ2V0RmllbGRQcm9wcyA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChuYW1lT3JPcHRpb25zKTogRmllbGRJbnB1dFByb3BzPGFueT4gPT4ge1xuICAgICAgY29uc3QgaXNBbk9iamVjdCA9IGlzT2JqZWN0KG5hbWVPck9wdGlvbnMpO1xuICAgICAgY29uc3QgbmFtZSA9IGlzQW5PYmplY3QgPyBuYW1lT3JPcHRpb25zLm5hbWUgOiBuYW1lT3JPcHRpb25zO1xuICAgICAgY29uc3QgdmFsdWVTdGF0ZSA9IGdldEluKHN0YXRlLnZhbHVlcywgbmFtZSk7XG5cbiAgICAgIGNvbnN0IGZpZWxkOiBGaWVsZElucHV0UHJvcHM8YW55PiA9IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlU3RhdGUsXG4gICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICAgIH07XG4gICAgICBpZiAoaXNBbk9iamVjdCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWVQcm9wLCAvLyB2YWx1ZSBpcyBzcGVjaWFsIGZvciBjaGVja2JveGVzXG4gICAgICAgICAgYXM6IGlzLFxuICAgICAgICAgIG11bHRpcGxlLFxuICAgICAgICB9ID0gbmFtZU9yT3B0aW9ucztcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgICAgICAgIGlmICh2YWx1ZVByb3AgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZmllbGQuY2hlY2tlZCA9ICEhdmFsdWVTdGF0ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmllbGQuY2hlY2tlZCA9ICEhKFxuICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KHZhbHVlU3RhdGUpICYmIH52YWx1ZVN0YXRlLmluZGV4T2YodmFsdWVQcm9wKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZpZWxkLnZhbHVlID0gdmFsdWVQcm9wO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgICAgZmllbGQuY2hlY2tlZCA9IHZhbHVlU3RhdGUgPT09IHZhbHVlUHJvcDtcbiAgICAgICAgICBmaWVsZC52YWx1ZSA9IHZhbHVlUHJvcDtcbiAgICAgICAgfSBlbHNlIGlmIChpcyA9PT0gJ3NlbGVjdCcgJiYgbXVsdGlwbGUpIHtcbiAgICAgICAgICBmaWVsZC52YWx1ZSA9IGZpZWxkLnZhbHVlIHx8IFtdO1xuICAgICAgICAgIGZpZWxkLm11bHRpcGxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZpZWxkO1xuICAgIH0sXG4gICAgW2hhbmRsZUJsdXIsIGhhbmRsZUNoYW5nZSwgc3RhdGUudmFsdWVzXVxuICApO1xuXG4gIGNvbnN0IGRpcnR5ID0gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PiAhaXNFcXVhbChpbml0aWFsVmFsdWVzLmN1cnJlbnQsIHN0YXRlLnZhbHVlcyksXG4gICAgW2luaXRpYWxWYWx1ZXMuY3VycmVudCwgc3RhdGUudmFsdWVzXVxuICApO1xuXG4gIGNvbnN0IGlzVmFsaWQgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+XG4gICAgICB0eXBlb2YgaXNJbml0aWFsVmFsaWQgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gZGlydHlcbiAgICAgICAgICA/IHN0YXRlLmVycm9ycyAmJiBPYmplY3Qua2V5cyhzdGF0ZS5lcnJvcnMpLmxlbmd0aCA9PT0gMFxuICAgICAgICAgIDogaXNJbml0aWFsVmFsaWQgIT09IGZhbHNlICYmIGlzRnVuY3Rpb24oaXNJbml0aWFsVmFsaWQpXG4gICAgICAgICAgPyAoaXNJbml0aWFsVmFsaWQgYXMgKHByb3BzOiBGb3JtaWtDb25maWc8VmFsdWVzPikgPT4gYm9vbGVhbikocHJvcHMpXG4gICAgICAgICAgOiAoaXNJbml0aWFsVmFsaWQgYXMgYm9vbGVhbilcbiAgICAgICAgOiBzdGF0ZS5lcnJvcnMgJiYgT2JqZWN0LmtleXMoc3RhdGUuZXJyb3JzKS5sZW5ndGggPT09IDAsXG4gICAgW2lzSW5pdGlhbFZhbGlkLCBkaXJ0eSwgc3RhdGUuZXJyb3JzLCBwcm9wc11cbiAgKTtcblxuICBjb25zdCBjdHggPSB7XG4gICAgLi4uc3RhdGUsXG4gICAgaW5pdGlhbFZhbHVlczogaW5pdGlhbFZhbHVlcy5jdXJyZW50LFxuICAgIGluaXRpYWxFcnJvcnM6IGluaXRpYWxFcnJvcnMuY3VycmVudCxcbiAgICBpbml0aWFsVG91Y2hlZDogaW5pdGlhbFRvdWNoZWQuY3VycmVudCxcbiAgICBpbml0aWFsU3RhdHVzOiBpbml0aWFsU3RhdHVzLmN1cnJlbnQsXG4gICAgaGFuZGxlQmx1cixcbiAgICBoYW5kbGVDaGFuZ2UsXG4gICAgaGFuZGxlUmVzZXQsXG4gICAgaGFuZGxlU3VibWl0LFxuICAgIHJlc2V0Rm9ybSxcbiAgICBzZXRFcnJvcnMsXG4gICAgc2V0Rm9ybWlrU3RhdGUsXG4gICAgc2V0RmllbGRUb3VjaGVkLFxuICAgIHNldEZpZWxkVmFsdWUsXG4gICAgc2V0RmllbGRFcnJvcixcbiAgICBzZXRTdGF0dXMsXG4gICAgc2V0U3VibWl0dGluZyxcbiAgICBzZXRUb3VjaGVkLFxuICAgIHNldFZhbHVlcyxcbiAgICBzdWJtaXRGb3JtLFxuICAgIHZhbGlkYXRlRm9ybTogdmFsaWRhdGVGb3JtV2l0aEhpZ2hQcmlvcml0eSxcbiAgICB2YWxpZGF0ZUZpZWxkLFxuICAgIGlzVmFsaWQsXG4gICAgZGlydHksXG4gICAgdW5yZWdpc3RlckZpZWxkLFxuICAgIHJlZ2lzdGVyRmllbGQsXG4gICAgZ2V0RmllbGRQcm9wcyxcbiAgICBnZXRGaWVsZE1ldGEsXG4gICAgZ2V0RmllbGRIZWxwZXJzLFxuICAgIHZhbGlkYXRlT25CbHVyLFxuICAgIHZhbGlkYXRlT25DaGFuZ2UsXG4gICAgdmFsaWRhdGVPbk1vdW50LFxuICB9O1xuXG4gIHJldHVybiBjdHg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBGb3JtaWs8XG4gIFZhbHVlcyBleHRlbmRzIEZvcm1pa1ZhbHVlcyA9IEZvcm1pa1ZhbHVlcyxcbiAgRXh0cmFQcm9wcyA9IHt9XG4+KHByb3BzOiBGb3JtaWtDb25maWc8VmFsdWVzPiAmIEV4dHJhUHJvcHMpIHtcbiAgY29uc3QgZm9ybWlrYmFnID0gdXNlRm9ybWlrPFZhbHVlcz4ocHJvcHMpO1xuICBjb25zdCB7IGNvbXBvbmVudCwgY2hpbGRyZW4sIHJlbmRlciwgaW5uZXJSZWYgfSA9IHByb3BzO1xuXG4gIC8vIFRoaXMgYWxsb3dzIGZvbGtzIHRvIHBhc3MgYSByZWYgdG8gPEZvcm1payAvPlxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGlubmVyUmVmLCAoKSA9PiBmb3JtaWtiYWcpO1xuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgIXByb3BzLnJlbmRlcixcbiAgICAgICAgYDxGb3JtaWsgcmVuZGVyPiBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIEZvcm1pay4gUGxlYXNlIHVzZSBhIGNoaWxkIGNhbGxiYWNrIGZ1bmN0aW9uIGluc3RlYWQuIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCByZXBsYWNlIDxGb3JtaWsgcmVuZGVyPXsocHJvcHMpID0+IC4uLn0gLz4gd2l0aCA8Rm9ybWlrPnsocHJvcHMpID0+IC4uLn08L0Zvcm1paz5gXG4gICAgICApO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgfSwgW10pO1xuICB9XG4gIHJldHVybiAoXG4gICAgPEZvcm1pa1Byb3ZpZGVyIHZhbHVlPXtmb3JtaWtiYWd9PlxuICAgICAge2NvbXBvbmVudFxuICAgICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50IGFzIGFueSwgZm9ybWlrYmFnKVxuICAgICAgICA6IHJlbmRlclxuICAgICAgICA/IHJlbmRlcihmb3JtaWtiYWcpXG4gICAgICAgIDogY2hpbGRyZW4gLy8gY2hpbGRyZW4gY29tZSBsYXN0LCBhbHdheXMgY2FsbGVkXG4gICAgICAgID8gaXNGdW5jdGlvbihjaGlsZHJlbilcbiAgICAgICAgICA/IChjaGlsZHJlbiBhcyAoYmFnOiBGb3JtaWtQcm9wczxWYWx1ZXM+KSA9PiBSZWFjdC5SZWFjdE5vZGUpKFxuICAgICAgICAgICAgICBmb3JtaWtiYWcgYXMgRm9ybWlrUHJvcHM8VmFsdWVzPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgICAgICA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pXG4gICAgICAgICAgOiBudWxsXG4gICAgICAgIDogbnVsbH1cbiAgICA8L0Zvcm1pa1Byb3ZpZGVyPlxuICApO1xufVxuXG5mdW5jdGlvbiB3YXJuQWJvdXRNaXNzaW5nSWRlbnRpZmllcih7XG4gIGh0bWxDb250ZW50LFxuICBkb2N1bWVudGF0aW9uQW5jaG9yTGluayxcbiAgaGFuZGxlck5hbWUsXG59OiB7XG4gIGh0bWxDb250ZW50OiBzdHJpbmc7XG4gIGRvY3VtZW50YXRpb25BbmNob3JMaW5rOiBzdHJpbmc7XG4gIGhhbmRsZXJOYW1lOiBzdHJpbmc7XG59KSB7XG4gIGNvbnNvbGUud2FybihcbiAgICBgV2FybmluZzogRm9ybWlrIGNhbGxlZCBcXGAke2hhbmRsZXJOYW1lfVxcYCwgYnV0IHlvdSBmb3Jnb3QgdG8gcGFzcyBhbiBcXGBpZFxcYCBvciBcXGBuYW1lXFxgIGF0dHJpYnV0ZSB0byB5b3VyIGlucHV0OlxuICAgICR7aHRtbENvbnRlbnR9XG4gICAgRm9ybWlrIGNhbm5vdCBkZXRlcm1pbmUgd2hpY2ggdmFsdWUgdG8gdXBkYXRlLiBGb3IgbW9yZSBpbmZvIHNlZSBodHRwczovL2Zvcm1pay5vcmcvZG9jcy9hcGkvZm9ybWlrIyR7ZG9jdW1lbnRhdGlvbkFuY2hvckxpbmt9XG4gIGBcbiAgKTtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gWXVwIFZhbGlkYXRpb25FcnJvciB0byBhIG1vcmUgdXNhYmxlIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24geXVwVG9Gb3JtRXJyb3JzPFZhbHVlcz4oeXVwRXJyb3I6IGFueSk6IEZvcm1pa0Vycm9yczxWYWx1ZXM+IHtcbiAgbGV0IGVycm9yczogRm9ybWlrRXJyb3JzPFZhbHVlcz4gPSB7fTtcbiAgaWYgKHl1cEVycm9yLmlubmVyKSB7XG4gICAgaWYgKHl1cEVycm9yLmlubmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHNldEluKGVycm9ycywgeXVwRXJyb3IucGF0aCwgeXVwRXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICAgIGZvciAobGV0IGVyciBvZiB5dXBFcnJvci5pbm5lcikge1xuICAgICAgaWYgKCFnZXRJbihlcnJvcnMsIGVyci5wYXRoKSkge1xuICAgICAgICBlcnJvcnMgPSBzZXRJbihlcnJvcnMsIGVyci5wYXRoLCBlcnIubWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBlcnJvcnM7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgYSB5dXAgc2NoZW1hLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVZdXBTY2hlbWE8VCBleHRlbmRzIEZvcm1pa1ZhbHVlcz4oXG4gIHZhbHVlczogVCxcbiAgc2NoZW1hOiBhbnksXG4gIHN5bmM6IGJvb2xlYW4gPSBmYWxzZSxcbiAgY29udGV4dDogYW55ID0ge31cbik6IFByb21pc2U8UGFydGlhbDxUPj4ge1xuICBjb25zdCB2YWxpZGF0ZURhdGE6IEZvcm1pa1ZhbHVlcyA9IHByZXBhcmVEYXRhRm9yVmFsaWRhdGlvbih2YWx1ZXMpO1xuICByZXR1cm4gc2NoZW1hW3N5bmMgPyAndmFsaWRhdGVTeW5jJyA6ICd2YWxpZGF0ZSddKHZhbGlkYXRlRGF0YSwge1xuICAgIGFib3J0RWFybHk6IGZhbHNlLFxuICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gIH0pO1xufVxuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHByZXBhcmUgdmFsdWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZURhdGFGb3JWYWxpZGF0aW9uPFQgZXh0ZW5kcyBGb3JtaWtWYWx1ZXM+KFxuICB2YWx1ZXM6IFRcbik6IEZvcm1pa1ZhbHVlcyB7XG4gIGxldCBkYXRhOiBGb3JtaWtWYWx1ZXMgPSBBcnJheS5pc0FycmF5KHZhbHVlcykgPyBbXSA6IHt9O1xuICBmb3IgKGxldCBrIGluIHZhbHVlcykge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodmFsdWVzLCBrKSkge1xuICAgICAgY29uc3Qga2V5ID0gU3RyaW5nKGspO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzW2tleV0pID09PSB0cnVlKSB7XG4gICAgICAgIGRhdGFba2V5XSA9IHZhbHVlc1trZXldLm1hcCgodmFsdWU6IGFueSkgPT4ge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSA9PT0gdHJ1ZSB8fCBpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHByZXBhcmVEYXRhRm9yVmFsaWRhdGlvbih2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gJycgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbHVlc1trZXldKSkge1xuICAgICAgICBkYXRhW2tleV0gPSBwcmVwYXJlRGF0YUZvclZhbGlkYXRpb24odmFsdWVzW2tleV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtrZXldID0gdmFsdWVzW2tleV0gIT09ICcnID8gdmFsdWVzW2tleV0gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIGRlZXBtZXJnZSBhcnJheSBtZXJnaW5nIGFsZ29yaXRobVxuICogaHR0cHM6Ly9naXRodWIuY29tL0t5bGVBTWF0aGV3cy9kZWVwbWVyZ2UjY29tYmluZS1hcnJheVxuICovXG5mdW5jdGlvbiBhcnJheU1lcmdlKHRhcmdldDogYW55W10sIHNvdXJjZTogYW55W10sIG9wdGlvbnM6IGFueSk6IGFueVtdIHtcbiAgY29uc3QgZGVzdGluYXRpb24gPSB0YXJnZXQuc2xpY2UoKTtcblxuICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiBtZXJnZShlOiBhbnksIGk6IG51bWJlcikge1xuICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25baV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBjbG9uZVJlcXVlc3RlZCA9IG9wdGlvbnMuY2xvbmUgIT09IGZhbHNlO1xuICAgICAgY29uc3Qgc2hvdWxkQ2xvbmUgPSBjbG9uZVJlcXVlc3RlZCAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KGUpO1xuICAgICAgZGVzdGluYXRpb25baV0gPSBzaG91bGRDbG9uZVxuICAgICAgICA/IGRlZXBtZXJnZShBcnJheS5pc0FycmF5KGUpID8gW10gOiB7fSwgZSwgb3B0aW9ucylcbiAgICAgICAgOiBlO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdChlKSkge1xuICAgICAgZGVzdGluYXRpb25baV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2ldLCBlLCBvcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKHRhcmdldC5pbmRleE9mKGUpID09PSAtMSkge1xuICAgICAgZGVzdGluYXRpb24ucHVzaChlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGVzdGluYXRpb247XG59XG5cbi8qKiBSZXR1cm4gbXVsdGkgc2VsZWN0IHZhbHVlcyBiYXNlZCBvbiBhbiBhcnJheSBvZiBvcHRpb25zICovXG5mdW5jdGlvbiBnZXRTZWxlY3RlZFZhbHVlcyhvcHRpb25zOiBhbnlbXSkge1xuICByZXR1cm4gQXJyYXkuZnJvbShvcHRpb25zKVxuICAgIC5maWx0ZXIoZWwgPT4gZWwuc2VsZWN0ZWQpXG4gICAgLm1hcChlbCA9PiBlbC52YWx1ZSk7XG59XG5cbi8qKiBSZXR1cm4gdGhlIG5leHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggKi9cbmZ1bmN0aW9uIGdldFZhbHVlRm9yQ2hlY2tib3goXG4gIGN1cnJlbnRWYWx1ZTogc3RyaW5nIHwgYW55W10sXG4gIGNoZWNrZWQ6IGJvb2xlYW4sXG4gIHZhbHVlUHJvcDogYW55XG4pIHtcbiAgLy8gSWYgdGhlIGN1cnJlbnQgdmFsdWUgd2FzIGEgYm9vbGVhbiwgcmV0dXJuIGEgYm9vbGVhblxuICBpZiAodHlwZW9mIGN1cnJlbnRWYWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oY2hlY2tlZCk7XG4gIH1cblxuICAvLyBJZiB0aGUgY3VycmVudFZhbHVlIHdhcyBub3QgYSBib29sZWFuIHdlIHdhbnQgdG8gcmV0dXJuIGFuIGFycmF5XG4gIGxldCBjdXJyZW50QXJyYXlPZlZhbHVlcyA9IFtdO1xuICBsZXQgaXNWYWx1ZUluQXJyYXkgPSBmYWxzZTtcbiAgbGV0IGluZGV4ID0gLTE7XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KGN1cnJlbnRWYWx1ZSkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gICAgaWYgKCF2YWx1ZVByb3AgfHwgdmFsdWVQcm9wID09ICd0cnVlJyB8fCB2YWx1ZVByb3AgPT0gJ2ZhbHNlJykge1xuICAgICAgcmV0dXJuIEJvb2xlYW4oY2hlY2tlZCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElmIHRoZSBjdXJyZW50IHZhbHVlIGlzIGFscmVhZHkgYW4gYXJyYXksIHVzZSBpdFxuICAgIGN1cnJlbnRBcnJheU9mVmFsdWVzID0gY3VycmVudFZhbHVlO1xuICAgIGluZGV4ID0gY3VycmVudFZhbHVlLmluZGV4T2YodmFsdWVQcm9wKTtcbiAgICBpc1ZhbHVlSW5BcnJheSA9IGluZGV4ID49IDA7XG4gIH1cblxuICAvLyBJZiB0aGUgY2hlY2tib3ggd2FzIGNoZWNrZWQgYW5kIHRoZSB2YWx1ZSBpcyBub3QgYWxyZWFkeSBwcmVzZW50IGluIHRoZSBhcmF5IHdlIHdhbnQgdG8gYWRkIHRoZSBuZXcgdmFsdWUgdG8gdGhlIGFycmF5IG9mIHZhbHVlc1xuICBpZiAoY2hlY2tlZCAmJiB2YWx1ZVByb3AgJiYgIWlzVmFsdWVJbkFycmF5KSB7XG4gICAgcmV0dXJuIGN1cnJlbnRBcnJheU9mVmFsdWVzLmNvbmNhdCh2YWx1ZVByb3ApO1xuICB9XG5cbiAgLy8gSWYgdGhlIGNoZWNrYm94IHdhcyB1bmNoZWNrZWQgYW5kIHRoZSB2YWx1ZSBpcyBub3QgaW4gdGhlIGFycmF5LCBzaW1wbHkgcmV0dXJuIHRoZSBhbHJlYWR5IGV4aXN0aW5nIGFycmF5IG9mIHZhbHVlc1xuICBpZiAoIWlzVmFsdWVJbkFycmF5KSB7XG4gICAgcmV0dXJuIGN1cnJlbnRBcnJheU9mVmFsdWVzO1xuICB9XG5cbiAgLy8gSWYgdGhlIGNoZWNrYm94IHdhcyB1bmNoZWNrZWQgYW5kIHRoZSB2YWx1ZSBpcyBpbiB0aGUgYXJyYXksIHJlbW92ZSB0aGUgdmFsdWUgYW5kIHJldHVybiB0aGUgYXJyYXlcbiAgcmV0dXJuIGN1cnJlbnRBcnJheU9mVmFsdWVzXG4gICAgLnNsaWNlKDAsIGluZGV4KVxuICAgIC5jb25jYXQoY3VycmVudEFycmF5T2ZWYWx1ZXMuc2xpY2UoaW5kZXggKyAxKSk7XG59XG5cbi8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLlxuLy8gQHNlZSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9nYWVhcm9uL2U3ZDk3Y2RmMzhhMjkwNzkyNGVhMTJlNGViZGYzYzg1XG5jb25zdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID1cbiAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJ1xuICAgID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0XG4gICAgOiBSZWFjdC51c2VFZmZlY3Q7XG5cbmZ1bmN0aW9uIHVzZUV2ZW50Q2FsbGJhY2s8VCBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gYW55PihmbjogVCk6IFQge1xuICBjb25zdCByZWY6IGFueSA9IFJlYWN0LnVzZVJlZihmbik7XG5cbiAgLy8gd2UgY29weSBhIHJlZiB0byB0aGUgY2FsbGJhY2sgc2NvcGVkIHRvIHRoZSBjdXJyZW50IHN0YXRlL3Byb3BzIG9uIGVhY2ggcmVuZGVyXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIHJlZi5jdXJyZW50ID0gZm47XG4gIH0pO1xuXG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoLi4uYXJnczogYW55W10pID0+IHJlZi5jdXJyZW50LmFwcGx5KHZvaWQgMCwgYXJncyksXG4gICAgW11cbiAgKSBhcyBUO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlRm9ybWlrQ29udGV4dCB9IGZyb20gJy4vRm9ybWlrQ29udGV4dCc7XG5cbmV4cG9ydCB0eXBlIEZvcm1pa0Zvcm1Qcm9wcyA9IFBpY2s8XG4gIFJlYWN0LkZvcm1IVE1MQXR0cmlidXRlczxIVE1MRm9ybUVsZW1lbnQ+LFxuICBFeGNsdWRlPFxuICAgIGtleW9mIFJlYWN0LkZvcm1IVE1MQXR0cmlidXRlczxIVE1MRm9ybUVsZW1lbnQ+LFxuICAgICdvblJlc2V0JyB8ICdvblN1Ym1pdCdcbiAgPlxuPjtcblxudHlwZSBGb3JtUHJvcHMgPSBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8J2Zvcm0nPjtcblxuLy8gQHRvZG8gdGVzdHNcbmV4cG9ydCBjb25zdCBGb3JtID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MRm9ybUVsZW1lbnQsIEZvcm1Qcm9wcz4oXG4gIChwcm9wczogRm9ybWlrRm9ybVByb3BzLCByZWYpID0+IHtcbiAgICAvLyBpT1MgbmVlZHMgYW4gXCJhY3Rpb25cIiBhdHRyaWJ1dGUgZm9yIG5pY2UgaW5wdXQ6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTQ4NTE2Mi80MDY3MjVcbiAgICAvLyBXZSBkZWZhdWx0IHRoZSBhY3Rpb24gdG8gXCIjXCIgaW4gY2FzZSB0aGUgcHJldmVudERlZmF1bHQgZmFpbHMgKGp1c3QgdXBkYXRlcyB0aGUgVVJMIGhhc2gpXG4gICAgY29uc3QgeyBhY3Rpb24sIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgIGNvbnN0IF9hY3Rpb24gPSBhY3Rpb24gPz8gJyMnO1xuICAgIGNvbnN0IHsgaGFuZGxlUmVzZXQsIGhhbmRsZVN1Ym1pdCB9ID0gdXNlRm9ybWlrQ29udGV4dCgpO1xuICAgIHJldHVybiAoXG4gICAgICA8Zm9ybVxuICAgICAgICBvblN1Ym1pdD17aGFuZGxlU3VibWl0fVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgb25SZXNldD17aGFuZGxlUmVzZXR9XG4gICAgICAgIGFjdGlvbj17X2FjdGlvbn1cbiAgICAgICAgey4uLnJlc3R9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbik7XG5cbkZvcm0uZGlzcGxheU5hbWUgPSAnRm9ybSc7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xvbmVEZWVwIGZyb20gJ2xvZGFzaC9jbG9uZURlZXAnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJy4vY29ubmVjdCc7XG5pbXBvcnQge1xuICBGb3JtaWtDb250ZXh0VHlwZSxcbiAgRm9ybWlrU3RhdGUsXG4gIFNoYXJlZFJlbmRlclByb3BzLFxuICBGb3JtaWtQcm9wcyxcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuICBnZXRJbixcbiAgaXNFbXB0eUNoaWxkcmVuLFxuICBpc0Z1bmN0aW9uLFxuICBzZXRJbixcbiAgaXNFbXB0eUFycmF5LFxufSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBpc0VxdWFsIGZyb20gJ3JlYWN0LWZhc3QtY29tcGFyZSc7XG5cbmV4cG9ydCB0eXBlIEZpZWxkQXJyYXlSZW5kZXJQcm9wcyA9IEFycmF5SGVscGVycyAmIHtcbiAgZm9ybTogRm9ybWlrUHJvcHM8YW55PjtcbiAgbmFtZTogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgRmllbGRBcnJheUNvbmZpZyA9IHtcbiAgLyoqIFJlYWxseSB0aGUgcGF0aCB0byB0aGUgYXJyYXkgZmllbGQgdG8gYmUgdXBkYXRlZCAqL1xuICBuYW1lOiBzdHJpbmc7XG4gIC8qKiBTaG91bGQgZmllbGQgYXJyYXkgdmFsaWRhdGUgdGhlIGZvcm0gQUZURVIgYXJyYXkgdXBkYXRlcy9jaGFuZ2VzPyAqL1xuICB2YWxpZGF0ZU9uQ2hhbmdlPzogYm9vbGVhbjtcbn0gJiBTaGFyZWRSZW5kZXJQcm9wczxGaWVsZEFycmF5UmVuZGVyUHJvcHM+O1xuZXhwb3J0IGludGVyZmFjZSBBcnJheUhlbHBlcnMge1xuICAvKiogSW1wZXJhdGl2ZWx5IGFkZCBhIHZhbHVlIHRvIHRoZSBlbmQgb2YgYW4gYXJyYXkgKi9cbiAgcHVzaDogKG9iajogYW55KSA9PiB2b2lkO1xuICAvKiogQ3VycmllZCBmbiB0byBhZGQgYSB2YWx1ZSB0byB0aGUgZW5kIG9mIGFuIGFycmF5ICovXG4gIGhhbmRsZVB1c2g6IChvYmo6IGFueSkgPT4gKCkgPT4gdm9pZDtcbiAgLyoqIEltcGVyYXRpdmVseSBzd2FwIHR3byB2YWx1ZXMgaW4gYW4gYXJyYXkgKi9cbiAgc3dhcDogKGluZGV4QTogbnVtYmVyLCBpbmRleEI6IG51bWJlcikgPT4gdm9pZDtcbiAgLyoqIEN1cnJpZWQgZm4gdG8gc3dhcCB0d28gdmFsdWVzIGluIGFuIGFycmF5ICovXG4gIGhhbmRsZVN3YXA6IChpbmRleEE6IG51bWJlciwgaW5kZXhCOiBudW1iZXIpID0+ICgpID0+IHZvaWQ7XG4gIC8qKiBJbXBlcmF0aXZlbHkgbW92ZSBhbiBlbGVtZW50IGluIGFuIGFycmF5IHRvIGFub3RoZXIgaW5kZXggKi9cbiAgbW92ZTogKGZyb206IG51bWJlciwgdG86IG51bWJlcikgPT4gdm9pZDtcbiAgLyoqIEltcGVyYXRpdmVseSBtb3ZlIGFuIGVsZW1lbnQgaW4gYW4gYXJyYXkgdG8gYW5vdGhlciBpbmRleCAqL1xuICBoYW5kbGVNb3ZlOiAoZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSA9PiAoKSA9PiB2b2lkO1xuICAvKiogSW1wZXJhdGl2ZWx5IGluc2VydCBhbiBlbGVtZW50IGF0IGEgZ2l2ZW4gaW5kZXggaW50byB0aGUgYXJyYXkgKi9cbiAgaW5zZXJ0OiAoaW5kZXg6IG51bWJlciwgdmFsdWU6IGFueSkgPT4gdm9pZDtcbiAgLyoqIEN1cnJpZWQgZm4gdG8gaW5zZXJ0IGFuIGVsZW1lbnQgYXQgYSBnaXZlbiBpbmRleCBpbnRvIHRoZSBhcnJheSAqL1xuICBoYW5kbGVJbnNlcnQ6IChpbmRleDogbnVtYmVyLCB2YWx1ZTogYW55KSA9PiAoKSA9PiB2b2lkO1xuICAvKiogSW1wZXJhdGl2ZWx5IHJlcGxhY2UgYSB2YWx1ZSBhdCBhbiBpbmRleCBvZiBhbiBhcnJheSAgKi9cbiAgcmVwbGFjZTogKGluZGV4OiBudW1iZXIsIHZhbHVlOiBhbnkpID0+IHZvaWQ7XG4gIC8qKiBDdXJyaWVkIGZuIHRvIHJlcGxhY2UgYW4gZWxlbWVudCBhdCBhIGdpdmVuIGluZGV4IGludG8gdGhlIGFycmF5ICovXG4gIGhhbmRsZVJlcGxhY2U6IChpbmRleDogbnVtYmVyLCB2YWx1ZTogYW55KSA9PiAoKSA9PiB2b2lkO1xuICAvKiogSW1wZXJhdGl2ZWx5IGFkZCBhbiBlbGVtZW50IHRvIHRoZSBiZWdpbm5pbmcgb2YgYW4gYXJyYXkgYW5kIHJldHVybiBpdHMgbGVuZ3RoICovXG4gIHVuc2hpZnQ6ICh2YWx1ZTogYW55KSA9PiBudW1iZXI7XG4gIC8qKiBDdXJyaWVkIGZuIHRvIGFkZCBhbiBlbGVtZW50IHRvIHRoZSBiZWdpbm5pbmcgb2YgYW4gYXJyYXkgKi9cbiAgaGFuZGxlVW5zaGlmdDogKHZhbHVlOiBhbnkpID0+ICgpID0+IHZvaWQ7XG4gIC8qKiBDdXJyaWVkIGZuIHRvIHJlbW92ZSBhbiBlbGVtZW50IGF0IGFuIGluZGV4IG9mIGFuIGFycmF5ICovXG4gIGhhbmRsZVJlbW92ZTogKGluZGV4OiBudW1iZXIpID0+ICgpID0+IHZvaWQ7XG4gIC8qKiBDdXJyaWVkIGZuIHRvIHJlbW92ZSBhIHZhbHVlIGZyb20gdGhlIGVuZCBvZiB0aGUgYXJyYXkgKi9cbiAgaGFuZGxlUG9wOiAoKSA9PiAoKSA9PiB2b2lkO1xuICAvKiogSW1wZXJhdGl2ZWx5IHJlbW92ZSBhbmQgZWxlbWVudCBhdCBhbiBpbmRleCBvZiBhbiBhcnJheSAqL1xuICByZW1vdmU8VD4oaW5kZXg6IG51bWJlcik6IFQgfCB1bmRlZmluZWQ7XG4gIC8qKiBJbXBlcmF0aXZlbHkgcmVtb3ZlIGFuZCByZXR1cm4gdmFsdWUgZnJvbSB0aGUgZW5kIG9mIHRoZSBhcnJheSAqL1xuICBwb3A8VD4oKTogVCB8IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBTb21lIGFycmF5IGhlbHBlcnMhXG4gKi9cbmV4cG9ydCBjb25zdCBtb3ZlID0gKGFycmF5OiBhbnlbXSwgZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IGNvcHkgPSBjb3B5QXJyYXlMaWtlKGFycmF5KTtcbiAgY29uc3QgdmFsdWUgPSBjb3B5W2Zyb21dO1xuICBjb3B5LnNwbGljZShmcm9tLCAxKTtcbiAgY29weS5zcGxpY2UodG8sIDAsIHZhbHVlKTtcbiAgcmV0dXJuIGNvcHk7XG59O1xuXG5leHBvcnQgY29uc3Qgc3dhcCA9IChcbiAgYXJyYXlMaWtlOiBBcnJheUxpa2U8YW55PixcbiAgaW5kZXhBOiBudW1iZXIsXG4gIGluZGV4QjogbnVtYmVyXG4pID0+IHtcbiAgY29uc3QgY29weSA9IGNvcHlBcnJheUxpa2UoYXJyYXlMaWtlKTtcbiAgY29uc3QgYSA9IGNvcHlbaW5kZXhBXTtcbiAgY29weVtpbmRleEFdID0gY29weVtpbmRleEJdO1xuICBjb3B5W2luZGV4Ql0gPSBhO1xuICByZXR1cm4gY29weTtcbn07XG5cbmV4cG9ydCBjb25zdCBpbnNlcnQgPSAoXG4gIGFycmF5TGlrZTogQXJyYXlMaWtlPGFueT4sXG4gIGluZGV4OiBudW1iZXIsXG4gIHZhbHVlOiBhbnlcbikgPT4ge1xuICBjb25zdCBjb3B5ID0gY29weUFycmF5TGlrZShhcnJheUxpa2UpO1xuICBjb3B5LnNwbGljZShpbmRleCwgMCwgdmFsdWUpO1xuICByZXR1cm4gY29weTtcbn07XG5cbmV4cG9ydCBjb25zdCByZXBsYWNlID0gKFxuICBhcnJheUxpa2U6IEFycmF5TGlrZTxhbnk+LFxuICBpbmRleDogbnVtYmVyLFxuICB2YWx1ZTogYW55XG4pID0+IHtcbiAgY29uc3QgY29weSA9IGNvcHlBcnJheUxpa2UoYXJyYXlMaWtlKTtcbiAgY29weVtpbmRleF0gPSB2YWx1ZTtcbiAgcmV0dXJuIGNvcHk7XG59O1xuXG5jb25zdCBjb3B5QXJyYXlMaWtlID0gKGFycmF5TGlrZTogQXJyYXlMaWtlPGFueT4pID0+IHtcbiAgaWYgKCFhcnJheUxpa2UpIHtcbiAgICByZXR1cm4gW107XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcnJheUxpa2UpKSB7XG4gICAgcmV0dXJuIFsuLi5hcnJheUxpa2VdO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG1heEluZGV4ID0gT2JqZWN0LmtleXMoYXJyYXlMaWtlKVxuICAgICAgLm1hcChrZXkgPT4gcGFyc2VJbnQoa2V5KSlcbiAgICAgIC5yZWR1Y2UoKG1heCwgZWwpID0+IChlbCA+IG1heCA/IGVsIDogbWF4KSwgMCk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oeyAuLi5hcnJheUxpa2UsIGxlbmd0aDogbWF4SW5kZXggKyAxIH0pO1xuICB9XG59O1xuXG5jbGFzcyBGaWVsZEFycmF5SW5uZXI8VmFsdWVzID0ge30+IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFxuICBGaWVsZEFycmF5Q29uZmlnICYgeyBmb3JtaWs6IEZvcm1pa0NvbnRleHRUeXBlPFZhbHVlcz4gfSxcbiAge31cbj4ge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHZhbGlkYXRlT25DaGFuZ2U6IHRydWUsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IEZpZWxkQXJyYXlDb25maWcgJiB7IGZvcm1pazogRm9ybWlrQ29udGV4dFR5cGU8VmFsdWVzPiB9KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIC8vIFdlIG5lZWQgVHlwZVNjcmlwdCBnZW5lcmljcyBvbiB0aGVzZSwgc28gd2UnbGwgYmluZCB0aGVtIGluIHRoZSBjb25zdHJ1Y3RvclxuICAgIC8vIEB0b2RvIEZpeCBUUyAzLjIuMVxuICAgIHRoaXMucmVtb3ZlID0gdGhpcy5yZW1vdmUuYmluZCh0aGlzKSBhcyBhbnk7XG4gICAgdGhpcy5wb3AgPSB0aGlzLnBvcC5iaW5kKHRoaXMpIGFzIGFueTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShcbiAgICBwcmV2UHJvcHM6IEZpZWxkQXJyYXlDb25maWcgJiB7IGZvcm1pazogRm9ybWlrQ29udGV4dFR5cGU8VmFsdWVzPiB9XG4gICkge1xuICAgIGlmIChcbiAgICAgIHRoaXMucHJvcHMudmFsaWRhdGVPbkNoYW5nZSAmJlxuICAgICAgdGhpcy5wcm9wcy5mb3JtaWsudmFsaWRhdGVPbkNoYW5nZSAmJlxuICAgICAgIWlzRXF1YWwoXG4gICAgICAgIGdldEluKHByZXZQcm9wcy5mb3JtaWsudmFsdWVzLCBwcmV2UHJvcHMubmFtZSksXG4gICAgICAgIGdldEluKHRoaXMucHJvcHMuZm9ybWlrLnZhbHVlcywgdGhpcy5wcm9wcy5uYW1lKVxuICAgICAgKVxuICAgICkge1xuICAgICAgdGhpcy5wcm9wcy5mb3JtaWsudmFsaWRhdGVGb3JtKHRoaXMucHJvcHMuZm9ybWlrLnZhbHVlcyk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlQXJyYXlGaWVsZCA9IChcbiAgICBmbjogRnVuY3Rpb24sXG4gICAgYWx0ZXJUb3VjaGVkOiBib29sZWFuIHwgRnVuY3Rpb24sXG4gICAgYWx0ZXJFcnJvcnM6IGJvb2xlYW4gfCBGdW5jdGlvblxuICApID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBuYW1lLFxuXG4gICAgICBmb3JtaWs6IHsgc2V0Rm9ybWlrU3RhdGUgfSxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBzZXRGb3JtaWtTdGF0ZSgocHJldlN0YXRlOiBGb3JtaWtTdGF0ZTxhbnk+KSA9PiB7XG4gICAgICBsZXQgdXBkYXRlRXJyb3JzID0gdHlwZW9mIGFsdGVyRXJyb3JzID09PSAnZnVuY3Rpb24nID8gYWx0ZXJFcnJvcnMgOiBmbjtcbiAgICAgIGxldCB1cGRhdGVUb3VjaGVkID1cbiAgICAgICAgdHlwZW9mIGFsdGVyVG91Y2hlZCA9PT0gJ2Z1bmN0aW9uJyA/IGFsdGVyVG91Y2hlZCA6IGZuO1xuXG4gICAgICAvLyB2YWx1ZXMgZm4gc2hvdWxkIGJlIGV4ZWN1dGVkIGJlZm9yZSB1cGRhdGVFcnJvcnMgYW5kIHVwZGF0ZVRvdWNoZWQsXG4gICAgICAvLyBvdGhlcndpc2UgaXQgY2F1c2VzIGFuIGVycm9yIHdpdGggdW5zaGlmdC5cbiAgICAgIGxldCB2YWx1ZXMgPSBzZXRJbihcbiAgICAgICAgcHJldlN0YXRlLnZhbHVlcyxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgZm4oZ2V0SW4ocHJldlN0YXRlLnZhbHVlcywgbmFtZSkpXG4gICAgICApO1xuXG4gICAgICBsZXQgZmllbGRFcnJvciA9IGFsdGVyRXJyb3JzXG4gICAgICAgID8gdXBkYXRlRXJyb3JzKGdldEluKHByZXZTdGF0ZS5lcnJvcnMsIG5hbWUpKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIGxldCBmaWVsZFRvdWNoZWQgPSBhbHRlclRvdWNoZWRcbiAgICAgICAgPyB1cGRhdGVUb3VjaGVkKGdldEluKHByZXZTdGF0ZS50b3VjaGVkLCBuYW1lKSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0VtcHR5QXJyYXkoZmllbGRFcnJvcikpIHtcbiAgICAgICAgZmllbGRFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0VtcHR5QXJyYXkoZmllbGRUb3VjaGVkKSkge1xuICAgICAgICBmaWVsZFRvdWNoZWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnByZXZTdGF0ZSxcbiAgICAgICAgdmFsdWVzLFxuICAgICAgICBlcnJvcnM6IGFsdGVyRXJyb3JzXG4gICAgICAgICAgPyBzZXRJbihwcmV2U3RhdGUuZXJyb3JzLCBuYW1lLCBmaWVsZEVycm9yKVxuICAgICAgICAgIDogcHJldlN0YXRlLmVycm9ycyxcbiAgICAgICAgdG91Y2hlZDogYWx0ZXJUb3VjaGVkXG4gICAgICAgICAgPyBzZXRJbihwcmV2U3RhdGUudG91Y2hlZCwgbmFtZSwgZmllbGRUb3VjaGVkKVxuICAgICAgICAgIDogcHJldlN0YXRlLnRvdWNoZWQsXG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIHB1c2ggPSAodmFsdWU6IGFueSkgPT5cbiAgICB0aGlzLnVwZGF0ZUFycmF5RmllbGQoXG4gICAgICAoYXJyYXlMaWtlOiBBcnJheUxpa2U8YW55PikgPT4gW1xuICAgICAgICAuLi5jb3B5QXJyYXlMaWtlKGFycmF5TGlrZSksXG4gICAgICAgIGNsb25lRGVlcCh2YWx1ZSksXG4gICAgICBdLFxuICAgICAgZmFsc2UsXG4gICAgICBmYWxzZVxuICAgICk7XG5cbiAgaGFuZGxlUHVzaCA9ICh2YWx1ZTogYW55KSA9PiAoKSA9PiB0aGlzLnB1c2godmFsdWUpO1xuXG4gIHN3YXAgPSAoaW5kZXhBOiBudW1iZXIsIGluZGV4QjogbnVtYmVyKSA9PlxuICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZChcbiAgICAgIChhcnJheTogYW55W10pID0+IHN3YXAoYXJyYXksIGluZGV4QSwgaW5kZXhCKSxcbiAgICAgIHRydWUsXG4gICAgICB0cnVlXG4gICAgKTtcblxuICBoYW5kbGVTd2FwID0gKGluZGV4QTogbnVtYmVyLCBpbmRleEI6IG51bWJlcikgPT4gKCkgPT5cbiAgICB0aGlzLnN3YXAoaW5kZXhBLCBpbmRleEIpO1xuXG4gIG1vdmUgPSAoZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSA9PlxuICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZCgoYXJyYXk6IGFueVtdKSA9PiBtb3ZlKGFycmF5LCBmcm9tLCB0byksIHRydWUsIHRydWUpO1xuXG4gIGhhbmRsZU1vdmUgPSAoZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSA9PiAoKSA9PiB0aGlzLm1vdmUoZnJvbSwgdG8pO1xuXG4gIGluc2VydCA9IChpbmRleDogbnVtYmVyLCB2YWx1ZTogYW55KSA9PlxuICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZChcbiAgICAgIChhcnJheTogYW55W10pID0+IGluc2VydChhcnJheSwgaW5kZXgsIHZhbHVlKSxcbiAgICAgIChhcnJheTogYW55W10pID0+IGluc2VydChhcnJheSwgaW5kZXgsIG51bGwpLFxuICAgICAgKGFycmF5OiBhbnlbXSkgPT4gaW5zZXJ0KGFycmF5LCBpbmRleCwgbnVsbClcbiAgICApO1xuXG4gIGhhbmRsZUluc2VydCA9IChpbmRleDogbnVtYmVyLCB2YWx1ZTogYW55KSA9PiAoKSA9PiB0aGlzLmluc2VydChpbmRleCwgdmFsdWUpO1xuXG4gIHJlcGxhY2UgPSAoaW5kZXg6IG51bWJlciwgdmFsdWU6IGFueSkgPT5cbiAgICB0aGlzLnVwZGF0ZUFycmF5RmllbGQoXG4gICAgICAoYXJyYXk6IGFueVtdKSA9PiByZXBsYWNlKGFycmF5LCBpbmRleCwgdmFsdWUpLFxuICAgICAgZmFsc2UsXG4gICAgICBmYWxzZVxuICAgICk7XG5cbiAgaGFuZGxlUmVwbGFjZSA9IChpbmRleDogbnVtYmVyLCB2YWx1ZTogYW55KSA9PiAoKSA9PlxuICAgIHRoaXMucmVwbGFjZShpbmRleCwgdmFsdWUpO1xuXG4gIHVuc2hpZnQgPSAodmFsdWU6IGFueSkgPT4ge1xuICAgIGxldCBsZW5ndGggPSAtMTtcbiAgICB0aGlzLnVwZGF0ZUFycmF5RmllbGQoXG4gICAgICAoYXJyYXk6IGFueVtdKSA9PiB7XG4gICAgICAgIGNvbnN0IGFyciA9IGFycmF5ID8gW3ZhbHVlLCAuLi5hcnJheV0gOiBbdmFsdWVdO1xuICAgICAgICBpZiAobGVuZ3RoIDwgMCkge1xuICAgICAgICAgIGxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgIH0sXG4gICAgICAoYXJyYXk6IGFueVtdKSA9PiB7XG4gICAgICAgIGNvbnN0IGFyciA9IGFycmF5ID8gW251bGwsIC4uLmFycmF5XSA6IFtudWxsXTtcbiAgICAgICAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICAgICAgICBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9LFxuICAgICAgKGFycmF5OiBhbnlbXSkgPT4ge1xuICAgICAgICBjb25zdCBhcnIgPSBhcnJheSA/IFtudWxsLCAuLi5hcnJheV0gOiBbbnVsbF07XG4gICAgICAgIGlmIChsZW5ndGggPCAwKSB7XG4gICAgICAgICAgbGVuZ3RoID0gYXJyLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfTtcblxuICBoYW5kbGVVbnNoaWZ0ID0gKHZhbHVlOiBhbnkpID0+ICgpID0+IHRoaXMudW5zaGlmdCh2YWx1ZSk7XG5cbiAgcmVtb3ZlPFQ+KGluZGV4OiBudW1iZXIpOiBUIHtcbiAgICAvLyBXZSBuZWVkIHRvIG1ha2Ugc3VyZSB3ZSBhbHNvIHJlbW92ZSByZWxldmFudCBwaWVjZXMgb2YgYHRvdWNoZWRgIGFuZCBgZXJyb3JzYFxuICAgIGxldCByZXN1bHQ6IGFueTtcbiAgICB0aGlzLnVwZGF0ZUFycmF5RmllbGQoXG4gICAgICAvLyBzbyB0aGlzIGdldHMgY2FsbCAzIHRpbWVzXG4gICAgICAoYXJyYXk/OiBhbnlbXSkgPT4ge1xuICAgICAgICBjb25zdCBjb3B5ID0gYXJyYXkgPyBjb3B5QXJyYXlMaWtlKGFycmF5KSA6IFtdO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IGNvcHlbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvcHkuc3BsaWNlKSkge1xuICAgICAgICAgIGNvcHkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29weTtcbiAgICAgIH0sXG4gICAgICB0cnVlLFxuICAgICAgdHJ1ZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzdWx0IGFzIFQ7XG4gIH1cblxuICBoYW5kbGVSZW1vdmUgPSAoaW5kZXg6IG51bWJlcikgPT4gKCkgPT4gdGhpcy5yZW1vdmU8YW55PihpbmRleCk7XG5cbiAgcG9wPFQ+KCk6IFQge1xuICAgIC8vIFJlbW92ZSByZWxldmFudCBwaWVjZXMgb2YgYHRvdWNoZWRgIGFuZCBgZXJyb3JzYCB0b28hXG4gICAgbGV0IHJlc3VsdDogYW55O1xuICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZChcbiAgICAgIC8vIHNvIHRoaXMgZ2V0cyBjYWxsIDMgdGltZXNcbiAgICAgIChhcnJheTogYW55W10pID0+IHtcbiAgICAgICAgY29uc3QgdG1wID0gYXJyYXk7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdG1wICYmIHRtcC5wb3AgJiYgdG1wLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0bXA7XG4gICAgICB9LFxuICAgICAgdHJ1ZSxcbiAgICAgIHRydWVcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3VsdCBhcyBUO1xuICB9XG5cbiAgaGFuZGxlUG9wID0gKCkgPT4gKCkgPT4gdGhpcy5wb3A8YW55PigpO1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBhcnJheUhlbHBlcnM6IEFycmF5SGVscGVycyA9IHtcbiAgICAgIHB1c2g6IHRoaXMucHVzaCxcbiAgICAgIHBvcDogdGhpcy5wb3AsXG4gICAgICBzd2FwOiB0aGlzLnN3YXAsXG4gICAgICBtb3ZlOiB0aGlzLm1vdmUsXG4gICAgICBpbnNlcnQ6IHRoaXMuaW5zZXJ0LFxuICAgICAgcmVwbGFjZTogdGhpcy5yZXBsYWNlLFxuICAgICAgdW5zaGlmdDogdGhpcy51bnNoaWZ0LFxuICAgICAgcmVtb3ZlOiB0aGlzLnJlbW92ZSxcbiAgICAgIGhhbmRsZVB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIGhhbmRsZVBvcDogdGhpcy5oYW5kbGVQb3AsXG4gICAgICBoYW5kbGVTd2FwOiB0aGlzLmhhbmRsZVN3YXAsXG4gICAgICBoYW5kbGVNb3ZlOiB0aGlzLmhhbmRsZU1vdmUsXG4gICAgICBoYW5kbGVJbnNlcnQ6IHRoaXMuaGFuZGxlSW5zZXJ0LFxuICAgICAgaGFuZGxlUmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgaGFuZGxlVW5zaGlmdDogdGhpcy5oYW5kbGVVbnNoaWZ0LFxuICAgICAgaGFuZGxlUmVtb3ZlOiB0aGlzLmhhbmRsZVJlbW92ZSxcbiAgICB9O1xuXG4gICAgY29uc3Qge1xuICAgICAgY29tcG9uZW50LFxuICAgICAgcmVuZGVyLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBuYW1lLFxuICAgICAgZm9ybWlrOiB7XG4gICAgICAgIHZhbGlkYXRlOiBfdmFsaWRhdGUsXG4gICAgICAgIHZhbGlkYXRpb25TY2hlbWE6IF92YWxpZGF0aW9uU2NoZW1hLFxuICAgICAgICAuLi5yZXN0T2ZGb3JtaWtcbiAgICAgIH0sXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBwcm9wczogRmllbGRBcnJheVJlbmRlclByb3BzID0ge1xuICAgICAgLi4uYXJyYXlIZWxwZXJzLFxuICAgICAgZm9ybTogcmVzdE9mRm9ybWlrLFxuICAgICAgbmFtZSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudFxuICAgICAgPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCBhcyBhbnksIHByb3BzKVxuICAgICAgOiByZW5kZXJcbiAgICAgID8gKHJlbmRlciBhcyBhbnkpKHByb3BzKVxuICAgICAgOiBjaGlsZHJlbiAvLyBjaGlsZHJlbiBjb21lIGxhc3QsIGFsd2F5cyBjYWxsZWRcbiAgICAgID8gdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gKGNoaWxkcmVuIGFzIGFueSkocHJvcHMpXG4gICAgICAgIDogIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgICAgPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKVxuICAgICAgICA6IG51bGxcbiAgICAgIDogbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgRmllbGRBcnJheSA9IGNvbm5lY3Q8RmllbGRBcnJheUNvbmZpZywgYW55PihGaWVsZEFycmF5SW5uZXIpO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybWlrQ29udGV4dFR5cGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IGdldEluLCBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAnLi9jb25uZWN0JztcblxuZXhwb3J0IGludGVyZmFjZSBFcnJvck1lc3NhZ2VQcm9wcyB7XG4gIG5hbWU6IHN0cmluZztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjb21wb25lbnQ/OiBzdHJpbmcgfCBSZWFjdC5Db21wb25lbnRUeXBlO1xuICBjaGlsZHJlbj86IChlcnJvck1lc3NhZ2U6IHN0cmluZykgPT4gUmVhY3QuUmVhY3ROb2RlO1xuICByZW5kZXI/OiAoZXJyb3JNZXNzYWdlOiBzdHJpbmcpID0+IFJlYWN0LlJlYWN0Tm9kZTtcbn1cblxuY2xhc3MgRXJyb3JNZXNzYWdlSW1wbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxcbiAgRXJyb3JNZXNzYWdlUHJvcHMgJiB7IGZvcm1pazogRm9ybWlrQ29udGV4dFR5cGU8YW55PiB9XG4+IHtcbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKFxuICAgIHByb3BzOiBFcnJvck1lc3NhZ2VQcm9wcyAmIHsgZm9ybWlrOiBGb3JtaWtDb250ZXh0VHlwZTxhbnk+IH1cbiAgKSB7XG4gICAgaWYgKFxuICAgICAgZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsuZXJyb3JzLCB0aGlzLnByb3BzLm5hbWUpICE9PVxuICAgICAgICBnZXRJbihwcm9wcy5mb3JtaWsuZXJyb3JzLCB0aGlzLnByb3BzLm5hbWUpIHx8XG4gICAgICBnZXRJbih0aGlzLnByb3BzLmZvcm1pay50b3VjaGVkLCB0aGlzLnByb3BzLm5hbWUpICE9PVxuICAgICAgICBnZXRJbihwcm9wcy5mb3JtaWsudG91Y2hlZCwgdGhpcy5wcm9wcy5uYW1lKSB8fFxuICAgICAgT2JqZWN0LmtleXModGhpcy5wcm9wcykubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhwcm9wcykubGVuZ3RoXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgeyBjb21wb25lbnQsIGZvcm1paywgcmVuZGVyLCBjaGlsZHJlbiwgbmFtZSwgLi4ucmVzdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHRvdWNoID0gZ2V0SW4oZm9ybWlrLnRvdWNoZWQsIG5hbWUpO1xuICAgIGNvbnN0IGVycm9yID0gZ2V0SW4oZm9ybWlrLmVycm9ycywgbmFtZSk7XG5cbiAgICByZXR1cm4gISF0b3VjaCAmJiAhIWVycm9yXG4gICAgICA/IHJlbmRlclxuICAgICAgICA/IGlzRnVuY3Rpb24ocmVuZGVyKVxuICAgICAgICAgID8gcmVuZGVyKGVycm9yKVxuICAgICAgICAgIDogbnVsbFxuICAgICAgICA6IGNoaWxkcmVuXG4gICAgICAgID8gaXNGdW5jdGlvbihjaGlsZHJlbilcbiAgICAgICAgICA/IGNoaWxkcmVuKGVycm9yKVxuICAgICAgICAgIDogbnVsbFxuICAgICAgICA6IGNvbXBvbmVudFxuICAgICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCByZXN0IGFzIGFueSwgZXJyb3IpXG4gICAgICAgIDogZXJyb3JcbiAgICAgIDogbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgRXJyb3JNZXNzYWdlID0gY29ubmVjdDxcbiAgRXJyb3JNZXNzYWdlUHJvcHMsXG4gIEVycm9yTWVzc2FnZVByb3BzICYgeyBmb3JtaWs6IEZvcm1pa0NvbnRleHRUeXBlPGFueT4gfVxuPihFcnJvck1lc3NhZ2VJbXBsKTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHtcbiAgRm9ybWlrUHJvcHMsXG4gIEdlbmVyaWNGaWVsZEhUTUxBdHRyaWJ1dGVzLFxuICBGb3JtaWtDb250ZXh0VHlwZSxcbiAgRmllbGRNZXRhUHJvcHMsXG4gIEZpZWxkSW5wdXRQcm9wcyxcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgeyBnZXRJbiwgaXNFbXB0eUNoaWxkcmVuLCBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBGaWVsZENvbmZpZyB9IGZyb20gJy4vRmllbGQnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJy4vY29ubmVjdCc7XG5cbnR5cGUgJEZpeE1lID0gYW55O1xuXG5leHBvcnQgaW50ZXJmYWNlIEZhc3RGaWVsZFByb3BzPFYgPSBhbnk+IHtcbiAgZmllbGQ6IEZpZWxkSW5wdXRQcm9wczxWPjtcbiAgbWV0YTogRmllbGRNZXRhUHJvcHM8Vj47XG4gIGZvcm06IEZvcm1pa1Byb3BzPFY+OyAvLyBpZiBwcGwgd2FudCB0byByZXN0cmljdCB0aGlzIGZvciBhIGdpdmVuIGZvcm0sIGxldCB0aGVtLlxufVxuXG5leHBvcnQgdHlwZSBGYXN0RmllbGRDb25maWc8VD4gPSBGaWVsZENvbmZpZyAmIHtcbiAgLyoqIE92ZXJyaWRlIEZhc3RGaWVsZCdzIGRlZmF1bHQgc2hvdWxkQ29tcG9uZW50VXBkYXRlICovXG4gIHNob3VsZFVwZGF0ZT86IChcbiAgICBuZXh0UHJvcHM6IFQgJiBHZW5lcmljRmllbGRIVE1MQXR0cmlidXRlcyxcbiAgICBwcm9wczoge31cbiAgKSA9PiBib29sZWFuO1xufTtcblxuZXhwb3J0IHR5cGUgRmFzdEZpZWxkQXR0cmlidXRlczxUPiA9IEdlbmVyaWNGaWVsZEhUTUxBdHRyaWJ1dGVzICZcbiAgRmFzdEZpZWxkQ29uZmlnPFQ+ICZcbiAgVDtcblxudHlwZSBGYXN0RmllbGRJbm5lclByb3BzPFZhbHVlcyA9IHt9LCBQcm9wcyA9IHt9PiA9IEZhc3RGaWVsZEF0dHJpYnV0ZXM8XG4gIFByb3BzXG4+ICYgeyBmb3JtaWs6IEZvcm1pa0NvbnRleHRUeXBlPFZhbHVlcz4gfTtcblxuLyoqXG4gKiBDdXN0b20gRmllbGQgY29tcG9uZW50IGZvciBxdWlja2x5IGhvb2tpbmcgaW50byBGb3JtaWtcbiAqIGNvbnRleHQgYW5kIHdpcmluZyB1cCBmb3Jtcy5cbiAqL1xuY2xhc3MgRmFzdEZpZWxkSW5uZXI8VmFsdWVzID0ge30sIFByb3BzID0ge30+IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFxuICBGYXN0RmllbGRJbm5lclByb3BzPFZhbHVlcywgUHJvcHM+LFxuICB7fVxuPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBGYXN0RmllbGRJbm5lclByb3BzPFZhbHVlcywgUHJvcHM+KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIGNvbnN0IHsgcmVuZGVyLCBjaGlsZHJlbiwgY29tcG9uZW50LCBhczogaXMsIG5hbWUgfSA9IHByb3BzO1xuICAgIGludmFyaWFudChcbiAgICAgICFyZW5kZXIsXG4gICAgICBgPEZhc3RGaWVsZCByZW5kZXI+IGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgYSBjaGlsZCBjYWxsYmFjayBmdW5jdGlvbiBpbnN0ZWFkOiA8RmFzdEZpZWxkIG5hbWU9eyR7bmFtZX19Pntwcm9wcyA9PiAuLi59PC9GYXN0RmllbGQ+IGluc3RlYWQuYFxuICAgICk7XG4gICAgaW52YXJpYW50KFxuICAgICAgIShjb21wb25lbnQgJiYgcmVuZGVyKSxcbiAgICAgICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZhc3RGaWVsZCBjb21wb25lbnQ+IGFuZCA8RmFzdEZpZWxkIHJlbmRlcj4gaW4gdGhlIHNhbWUgPEZhc3RGaWVsZD4gY29tcG9uZW50OyA8RmFzdEZpZWxkIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkJ1xuICAgICk7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICAhKGlzICYmIGNoaWxkcmVuICYmIGlzRnVuY3Rpb24oY2hpbGRyZW4pKSxcbiAgICAgICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZhc3RGaWVsZCBhcz4gYW5kIDxGYXN0RmllbGQgY2hpbGRyZW4+IGFzIGEgZnVuY3Rpb24gaW4gdGhlIHNhbWUgPEZhc3RGaWVsZD4gY29tcG9uZW50OyA8RmFzdEZpZWxkIGFzPiB3aWxsIGJlIGlnbm9yZWQuJ1xuICAgICk7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICAhKGNvbXBvbmVudCAmJiBjaGlsZHJlbiAmJiBpc0Z1bmN0aW9uKGNoaWxkcmVuKSksXG4gICAgICAnWW91IHNob3VsZCBub3QgdXNlIDxGYXN0RmllbGQgY29tcG9uZW50PiBhbmQgPEZhc3RGaWVsZCBjaGlsZHJlbj4gYXMgYSBmdW5jdGlvbiBpbiB0aGUgc2FtZSA8RmFzdEZpZWxkPiBjb21wb25lbnQ7IDxGYXN0RmllbGQgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWQuJ1xuICAgICk7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICAhKHJlbmRlciAmJiBjaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSksXG4gICAgICAnWW91IHNob3VsZCBub3QgdXNlIDxGYXN0RmllbGQgcmVuZGVyPiBhbmQgPEZhc3RGaWVsZCBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgPEZhc3RGaWVsZD4gY29tcG9uZW50OyA8RmFzdEZpZWxkIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWQnXG4gICAgKTtcbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShwcm9wczogRmFzdEZpZWxkSW5uZXJQcm9wczxWYWx1ZXMsIFByb3BzPikge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3VsZFVwZGF0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuc2hvdWxkVXBkYXRlKHByb3BzLCB0aGlzLnByb3BzKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgcHJvcHMubmFtZSAhPT0gdGhpcy5wcm9wcy5uYW1lIHx8XG4gICAgICBnZXRJbihwcm9wcy5mb3JtaWsudmFsdWVzLCB0aGlzLnByb3BzLm5hbWUpICE9PVxuICAgICAgICBnZXRJbih0aGlzLnByb3BzLmZvcm1pay52YWx1ZXMsIHRoaXMucHJvcHMubmFtZSkgfHxcbiAgICAgIGdldEluKHByb3BzLmZvcm1pay5lcnJvcnMsIHRoaXMucHJvcHMubmFtZSkgIT09XG4gICAgICAgIGdldEluKHRoaXMucHJvcHMuZm9ybWlrLmVycm9ycywgdGhpcy5wcm9wcy5uYW1lKSB8fFxuICAgICAgZ2V0SW4ocHJvcHMuZm9ybWlrLnRvdWNoZWQsIHRoaXMucHJvcHMubmFtZSkgIT09XG4gICAgICAgIGdldEluKHRoaXMucHJvcHMuZm9ybWlrLnRvdWNoZWQsIHRoaXMucHJvcHMubmFtZSkgfHxcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMucHJvcHMpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aCB8fFxuICAgICAgcHJvcHMuZm9ybWlrLmlzU3VibWl0dGluZyAhPT0gdGhpcy5wcm9wcy5mb3JtaWsuaXNTdWJtaXR0aW5nXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIFJlZ2lzdGVyIHRoZSBGaWVsZCB3aXRoIHRoZSBwYXJlbnQgRm9ybWlrLiBQYXJlbnQgd2lsbCBjeWNsZSB0aHJvdWdoXG4gICAgLy8gcmVnaXN0ZXJlZCBGaWVsZCdzIHZhbGlkYXRlIGZucyByaWdodCBwcmlvciB0byBzdWJtaXRcbiAgICB0aGlzLnByb3BzLmZvcm1pay5yZWdpc3RlckZpZWxkKHRoaXMucHJvcHMubmFtZSwge1xuICAgICAgdmFsaWRhdGU6IHRoaXMucHJvcHMudmFsaWRhdGUsXG4gICAgfSk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzOiBGYXN0RmllbGRBdHRyaWJ1dGVzPFByb3BzPikge1xuICAgIGlmICh0aGlzLnByb3BzLm5hbWUgIT09IHByZXZQcm9wcy5uYW1lKSB7XG4gICAgICB0aGlzLnByb3BzLmZvcm1pay51bnJlZ2lzdGVyRmllbGQocHJldlByb3BzLm5hbWUpO1xuICAgICAgdGhpcy5wcm9wcy5mb3JtaWsucmVnaXN0ZXJGaWVsZCh0aGlzLnByb3BzLm5hbWUsIHtcbiAgICAgICAgdmFsaWRhdGU6IHRoaXMucHJvcHMudmFsaWRhdGUsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy52YWxpZGF0ZSAhPT0gcHJldlByb3BzLnZhbGlkYXRlKSB7XG4gICAgICB0aGlzLnByb3BzLmZvcm1pay5yZWdpc3RlckZpZWxkKHRoaXMucHJvcHMubmFtZSwge1xuICAgICAgICB2YWxpZGF0ZTogdGhpcy5wcm9wcy52YWxpZGF0ZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuZm9ybWlrLnVucmVnaXN0ZXJGaWVsZCh0aGlzLnByb3BzLm5hbWUpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHZhbGlkYXRlLFxuICAgICAgbmFtZSxcbiAgICAgIHJlbmRlcixcbiAgICAgIGFzOiBpcyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY29tcG9uZW50LFxuICAgICAgc2hvdWxkVXBkYXRlLFxuICAgICAgZm9ybWlrLFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wcyBhcyBGYXN0RmllbGRJbm5lclByb3BzPFZhbHVlcywgUHJvcHM+O1xuXG4gICAgY29uc3Qge1xuICAgICAgdmFsaWRhdGU6IF92YWxpZGF0ZSxcbiAgICAgIHZhbGlkYXRpb25TY2hlbWE6IF92YWxpZGF0aW9uU2NoZW1hLFxuICAgICAgLi4ucmVzdE9mRm9ybWlrXG4gICAgfSA9IGZvcm1paztcbiAgICBjb25zdCBmaWVsZCA9IGZvcm1pay5nZXRGaWVsZFByb3BzKHsgbmFtZSwgLi4ucHJvcHMgfSk7XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgIHZhbHVlOiBnZXRJbihmb3JtaWsudmFsdWVzLCBuYW1lKSxcbiAgICAgIGVycm9yOiBnZXRJbihmb3JtaWsuZXJyb3JzLCBuYW1lKSxcbiAgICAgIHRvdWNoZWQ6ICEhZ2V0SW4oZm9ybWlrLnRvdWNoZWQsIG5hbWUpLFxuICAgICAgaW5pdGlhbFZhbHVlOiBnZXRJbihmb3JtaWsuaW5pdGlhbFZhbHVlcywgbmFtZSksXG4gICAgICBpbml0aWFsVG91Y2hlZDogISFnZXRJbihmb3JtaWsuaW5pdGlhbFRvdWNoZWQsIG5hbWUpLFxuICAgICAgaW5pdGlhbEVycm9yOiBnZXRJbihmb3JtaWsuaW5pdGlhbEVycm9ycywgbmFtZSksXG4gICAgfTtcblxuICAgIGNvbnN0IGJhZyA9IHsgZmllbGQsIG1ldGEsIGZvcm06IHJlc3RPZkZvcm1payB9O1xuXG4gICAgaWYgKHJlbmRlcikge1xuICAgICAgcmV0dXJuIChyZW5kZXIgYXMgYW55KShiYWcpO1xuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uKGNoaWxkcmVuKSkge1xuICAgICAgcmV0dXJuIChjaGlsZHJlbiBhcyAocHJvcHM6IEZhc3RGaWVsZFByb3BzPGFueT4pID0+IFJlYWN0LlJlYWN0Tm9kZSkoYmFnKTtcbiAgICB9XG5cbiAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAvLyBUaGlzIGJlaGF2aW9yIGlzIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBlYXJsaWVyIEZvcm1payAwLjkgdG8gMS54XG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgeyBpbm5lclJlZiwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgICB7IHJlZjogaW5uZXJSZWYsIC4uLmZpZWxkLCAuLi4ocmVzdCBhcyAkRml4TWUpIH0sXG4gICAgICAgICAgY2hpbGRyZW5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIGRvbid0IHBhc3MgYG1ldGFgIGZvciBiYWNrd2FyZHMgY29tcGF0XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgY29tcG9uZW50IGFzIFJlYWN0LkNvbXBvbmVudENsYXNzPCRGaXhNZT4sXG4gICAgICAgIHsgZmllbGQsIGZvcm06IGZvcm1paywgLi4ucHJvcHMgfSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gZGVmYXVsdCB0byBpbnB1dCBoZXJlIHNvIHdlIGNhbiBjaGVjayBmb3IgYm90aCBgYXNgIGFuZCBgY2hpbGRyZW5gIGFib3ZlXG4gICAgY29uc3QgYXNFbGVtZW50ID0gaXMgfHwgJ2lucHV0JztcblxuICAgIGlmICh0eXBlb2YgYXNFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgeyBpbm5lclJlZiwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgYXNFbGVtZW50LFxuICAgICAgICB7IHJlZjogaW5uZXJSZWYsIC4uLmZpZWxkLCAuLi4ocmVzdCBhcyAkRml4TWUpIH0sXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgYXNFbGVtZW50IGFzIFJlYWN0LkNvbXBvbmVudENsYXNzLFxuICAgICAgeyAuLi5maWVsZCwgLi4ucHJvcHMgfSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgRmFzdEZpZWxkID0gY29ubmVjdDxGYXN0RmllbGRBdHRyaWJ1dGVzPGFueT4sIGFueT4oRmFzdEZpZWxkSW5uZXIpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG50eXBlIFByb3BzID0ge1xuICB0aXRsZTogc3RyaW5nO1xuICBvbkNsaWNrOiAoKSA9PiB2b2lkO1xufTtcblxuY29uc3QgQ29tcG9uZW50ID0gKHsgdGl0bGUsIG9uQ2xpY2sgfTogUHJvcHMpID0+IChcbiAgPGJ1dHRvbiBvbkNsaWNrPXtvbkNsaWNrfT57dGl0bGV9PC9idXR0b24+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjc3MgfSBmcm9tIFwibGluYXJpYVwiO1xuXG50eXBlIFByb3BzID0ge1xuICBsYWJlbDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHR5cGU6IFJlYWN0LklucHV0SFRNTEF0dHJpYnV0ZXM8SFRNTElucHV0RWxlbWVudD5bXCJ0eXBlXCJdO1xuICB2YWx1ZTogUmVhY3QuSW5wdXRIVE1MQXR0cmlidXRlczxIVE1MSW5wdXRFbGVtZW50PltcInZhbHVlXCJdO1xuICBvbkNoYW5nZTogKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbn07XG5cbmNvbnN0IHN0eWxlID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4OiAxO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgaW5wdXRTdHlsZSA9IGNzc2BcbiAgZmxleDogMTtcbiAgbWFyZ2luOiAxMHB4O1xuYDtcblxuY29uc3QgQ29tcG9uZW50ID0gKHsgbGFiZWwsIG5hbWUsIHR5cGUsIHZhbHVlLCBvbkNoYW5nZSB9OiBQcm9wcykgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT17c3R5bGV9PlxuICAgIDxsYWJlbCBodG1sRm9yPXtuYW1lfT57bGFiZWx9PC9sYWJlbD5cbiAgICA8aW5wdXRcbiAgICAgIGNsYXNzTmFtZT17aW5wdXRTdHlsZX1cbiAgICAgIG5hbWU9e25hbWV9XG4gICAgICB0eXBlPXt0eXBlfVxuICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgIC8+XG4gIDwvZGl2PlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50O1xuIiwiY29uc3QgZHVtbXlTaWduSW5BcGkgPSAocmVxdWVzdDoge1xuICBuYW1lOiBzdHJpbmc7XG4gIHBhc3N3b3JkOiBzdHJpbmc7XG59KTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgcmVzKFwiZHVtbXlcIik7XG4gICAgfSwgMTAwMCk7XG4gIH0pO1xufTtcblxuY29uc3QgZHVtbXlTaWduT3V0QXBpID0gKHJlcXVlc3Q6IGFueSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICByZXMoKTtcbiAgICB9LCAxMDAwKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2lnbkluID0gYXN5bmMgKFxuICBuYW1lOiBzdHJpbmcsXG4gIHBhc3N3b3JkOiBzdHJpbmdcbik6IFByb21pc2U8c3RyaW5nIHwgRXJyb3I+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGR1bW15U2lnbkluQXBpKHsgbmFtZSwgcGFzc3dvcmQgfSk7XG4gICAgcmV0dXJuIHRva2VuO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRXJyb3IoZSBhcyBhbnkpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3Qgc2lnbk91dCA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQgfCBFcnJvcj4gPT4ge1xuICB0cnkge1xuICAgIGF3YWl0IGR1bW15U2lnbk91dEFwaSh7fSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcihlIGFzIGFueSk7XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBhdG9tLCBzZWxlY3RvciB9IGZyb20gXCJyZWNvaWxcIjtcblxuZXhwb3J0IGNvbnN0IGF1dGhTdGF0ZSA9IGF0b20oe1xuICBrZXk6IFwiYXV0aFN0YXRlXCIsXG4gIGRlZmF1bHQ6IFwiXCIsXG59KTtcblxuZXhwb3J0IGNvbnN0IGlzQXV0aGVkU2VsZWN0b3IgPSBzZWxlY3Rvcih7XG4gIGtleTogXCJpc0F1dGhlZFNlbGVjdG9yXCIsXG4gIGdldDogKHsgZ2V0IH0pID0+ICEhZ2V0KGF1dGhTdGF0ZSksXG59KTtcblxuLy8gZXhwb3J0IGNvbnN0IGF1dGhTdGF0ZSA9IGF0b21GYW1pbHkoe1xuLy8gICBrZXk6IFwiYXV0aFN0YXRlXCIsXG4vLyAgIGRlZmF1bHQ6XG4vLyAgICAgKHsgbmFtZSwgcGFzc3dvcmQgfTogeyBuYW1lOiBzdHJpbmc7IHBhc3N3b3JkOiBzdHJpbmcgfSkgPT5cbi8vICAgICBhc3luYyAoKSA9PiB7XG4vLyAgICAgICByZXR1cm4gYXdhaXQgZHVtbXlTaWduSW5BcGkoeyBuYW1lLCBwYXNzd29yZCB9KTtcbi8vICAgICB9LFxuLy8gfSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBjc3MgfSBmcm9tIFwibGluYXJpYVwiO1xuaW1wb3J0IHsgdXNlRm9ybWlrIH0gZnJvbSBcImZvcm1pa1wiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9CdXR0b25cIjtcbmltcG9ydCBGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1cIjtcbmltcG9ydCB7IHNpZ25JbiB9IGZyb20gXCIuLi91c2VjYXNlcy9hdXRoXCI7XG5pbXBvcnQgeyBST1VURVMgfSBmcm9tIFwiLi4vcm91dGVzL1wiO1xuaW1wb3J0IHsgdXNlU2V0UmVjb2lsU3RhdGUgfSBmcm9tIFwicmVjb2lsXCI7XG5pbXBvcnQgeyBhdXRoU3RhdGUgfSBmcm9tIFwiLi4vcmVjb2lsXCI7XG5cbmNvbnN0IHdyYXBwZXJTdHlsZSA9IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgd2lkdGg6IDEwMHZ3O1xuICBoZWlnaHQ6IDEwMHZoO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IHN0eWxlID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICB3aWR0aDogMzAwcHg7XG5gO1xuXG5jb25zdCBQYWdlID0gKCkgPT4ge1xuICBjb25zdCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGNvbnN0IHNldFRva2VuID0gdXNlU2V0UmVjb2lsU3RhdGUoYXV0aFN0YXRlKTtcbiAgY29uc3QgZm9ybWlrID0gdXNlRm9ybWlrKHtcbiAgICBpbml0aWFsVmFsdWVzOiB7XG4gICAgICBuYW1lOiBcIlwiLFxuICAgICAgcGFzc3dvcmQ6IFwiXCIsXG4gICAgfSxcbiAgICBvblN1Ym1pdDogYXN5bmMgKHZhbHVlcykgPT4ge1xuICAgICAgY29uc3QgcmVzID0gYXdhaXQgc2lnbkluKHZhbHVlcy5uYW1lLCB2YWx1ZXMucGFzc3dvcmQpO1xuICAgICAgaWYgKCEocmVzIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgIHNldFRva2VuKHJlcyk7XG4gICAgICAgIG5hdmlnYXRlKFJPVVRFUy5IT01FKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17d3JhcHBlclN0eWxlfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZX0+XG4gICAgICAgIDxGb3JtXG4gICAgICAgICAgbGFiZWw9XCJuYW1lXCJcbiAgICAgICAgICBuYW1lPVwibmFtZVwiXG4gICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgIG9uQ2hhbmdlPXtmb3JtaWsuaGFuZGxlQ2hhbmdlfVxuICAgICAgICAgIHZhbHVlPXtmb3JtaWsudmFsdWVzLm5hbWV9XG4gICAgICAgIC8+XG4gICAgICAgIDxGb3JtXG4gICAgICAgICAgbGFiZWw9XCJwYXNzd29yZFwiXG4gICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgIG9uQ2hhbmdlPXtmb3JtaWsuaGFuZGxlQ2hhbmdlfVxuICAgICAgICAgIHZhbHVlPXtmb3JtaWsudmFsdWVzLnBhc3N3b3JkfVxuICAgICAgICAvPlxuICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e2Zvcm1pay5zdWJtaXRGb3JtfSB0aXRsZT1cIlNpZ24gaW5cIiAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQYWdlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSBcImxpbmFyaWFcIjtcbmltcG9ydCBsb2dvIGZyb20gXCIuLi9sb2dvLnN2Z1wiO1xuXG5jb25zdCBzdHlsZSA9IGNzc2BcbiAgZmxleDogMTtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuYDtcblxuY29uc3QgUGFnZSA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGV9PlxuICAgICAgPGhlYWRlciBjbGFzc05hbWU9XCJBcHAtaGVhZGVyXCI+XG4gICAgICAgIDxpbWcgc3JjPXtsb2dvfSBjbGFzc05hbWU9XCJBcHAtbG9nb1wiIGFsdD1cImxvZ29cIiAvPlxuICAgICAgICA8cD5cbiAgICAgICAgICBFZGl0IDxjb2RlPnNyYy9BcHAudHN4PC9jb2RlPiBhbmQgc2F2ZSB0byByZWxvYWQuXG4gICAgICAgIDwvcD5cbiAgICAgICAgPGFcbiAgICAgICAgICBjbGFzc05hbWU9XCJBcHAtbGlua1wiXG4gICAgICAgICAgaHJlZj1cImh0dHBzOi8vcmVhY3Rqcy5vcmdcIlxuICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgID5cbiAgICAgICAgICBMZWFybiBSZWFjdFxuICAgICAgICA8L2E+XG4gICAgICA8L2hlYWRlcj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBhZ2U7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjc3MgfSBmcm9tIFwibGluYXJpYVwiO1xuXG50eXBlIFByb3BzID0ge1xuICBpdGVtczogeyB0aXRsZTogc3RyaW5nOyBvbkNsaWNrOiAoKSA9PiB2b2lkIH1bXTtcbn07XG5cbmNvbnN0IHN0eWxlID0gY3NzYFxuICB3aWR0aDogMjAwcHg7XG5gO1xuXG5jb25zdCBDb21wb25lbnQgPSAocHJvcHM6IFByb3BzKSA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPXtzdHlsZX0+XG4gICAge3Byb3BzLml0ZW1zLm1hcCgoaXRlbSkgPT4gKFxuICAgICAgPGRpdiBrZXk9e2l0ZW0udGl0bGV9IG9uQ2xpY2s9e2l0ZW0ub25DbGlja30+XG4gICAgICAgIDxhPntpdGVtLnRpdGxlfTwvYT5cbiAgICAgIDwvZGl2PlxuICAgICkpfVxuICA8L2Rpdj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBOYXZpZ2F0ZSwgUm91dGVQcm9wcywgdXNlTmF2aWdhdGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgUk9VVEVTIH0gZnJvbSBcIi5cIjtcbmltcG9ydCB7IHNpZ25PdXQgfSBmcm9tIFwiLi4vdXNlY2FzZXMvYXV0aFwiO1xuaW1wb3J0IHsgYXV0aFN0YXRlLCBpc0F1dGhlZFNlbGVjdG9yIH0gZnJvbSBcIi4uL3JlY29pbC9hdXRoXCI7XG5pbXBvcnQgU2lkZU5hdiBmcm9tIFwiLi4vY29tcG9uZW50cy9TaWRlTmF2XCI7XG5pbXBvcnQgeyB1c2VSZWNvaWxWYWx1ZSwgdXNlU2V0UmVjb2lsU3RhdGUgfSBmcm9tIFwicmVjb2lsXCI7XG5cbmV4cG9ydCBjb25zdCBQcml2YXRlUm91dGUgPSAoe1xuICBlbGVtZW50LFxufToge1xuICBlbGVtZW50OiBSb3V0ZVByb3BzW1wiZWxlbWVudFwiXTtcbn0pID0+IHtcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBjb25zdCBpc0F1dGhlZCA9IHVzZVJlY29pbFZhbHVlKGlzQXV0aGVkU2VsZWN0b3IpO1xuICBjb25zdCBzZXRUb2tlbiA9IHVzZVNldFJlY29pbFN0YXRlKGF1dGhTdGF0ZSk7XG4gIGNvbnN0IGl0ZW1zID0gdXNlTWVtbyhcbiAgICAoKSA9PiBbXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiBcIkhvbWVcIixcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIG5hdmlnYXRlKFJPVVRFUy5IT01FKTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiBcIlNpZ24gb3V0XCIsXG4gICAgICAgIG9uQ2xpY2s6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzaWduT3V0KCk7XG4gICAgICAgICAgaWYgKCEocmVzIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgICBzZXRUb2tlbihcIlwiKTtcbiAgICAgICAgICAgIG5hdmlnYXRlKFJPVVRFUy5TSUdOX0lOKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0sXG4gICAgW25hdmlnYXRlLCBzZXRUb2tlbl1cbiAgKTtcbiAgcmV0dXJuIGlzQXV0aGVkID8gKFxuICAgIDw+XG4gICAgICA8U2lkZU5hdiBpdGVtcz17aXRlbXN9IC8+XG4gICAgICB7ZWxlbWVudH1cbiAgICA8Lz5cbiAgKSA6IChcbiAgICA8TmF2aWdhdGUgdG89e1JPVVRFUy5TSUdOX0lOfSBzdGF0ZT17eyBmcm9tOiBsb2NhdGlvbiB9fSAvPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFJvdXRlcywgUm91dGUsIE5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IFJPVVRFUyB9IGZyb20gXCIuL1wiO1xuaW1wb3J0IFNpZ25JbiBmcm9tIFwiLi4vcGFnZXMvU2lnbkluXCI7XG5pbXBvcnQgTWFpbiBmcm9tIFwiLi4vcGFnZXMvTWFpblwiO1xuaW1wb3J0IHsgUHJpdmF0ZVJvdXRlIH0gZnJvbSBcIi4vUHJpdmF0ZVJvdXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Um91dGVzPlxuICAgICAgPFJvdXRlIHBhdGg9e1JPVVRFUy5TSUdOX0lOfSBlbGVtZW50PXs8U2lnbkluIC8+fSAvPlxuICAgICAgPFJvdXRlIHBhdGg9e1JPVVRFUy5IT01FfSBlbGVtZW50PXs8UHJpdmF0ZVJvdXRlIGVsZW1lbnQ9ezxNYWluIC8+fSAvPn0gLz5cbiAgICAgIDxSb3V0ZSBwYXRoPVwiKlwiIGVsZW1lbnQ9ezxOYXZpZ2F0ZSB0bz17Uk9VVEVTLkhPTUV9IHJlcGxhY2UgLz59IC8+XG4gICAgPC9Sb3V0ZXM+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUmVjb2lsUm9vdCB9IGZyb20gXCJyZWNvaWxcIjtcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCB7IGNzcyB9IGZyb20gXCJsaW5hcmlhXCI7XG5cbmltcG9ydCBcIi4vQXBwLmNzc1wiO1xuaW1wb3J0IFJvdXRlcyBmcm9tIFwiLi9yb3V0ZXMvUm91dGVzXCI7XG5cbmNvbnN0IHN0eWxlID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuYDtcblxuY29uc3QgV3JhcHBlciA9IChwcm9wczogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pID0+IHtcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtzdHlsZX0+e3Byb3BzLmNoaWxkcmVufTwvZGl2Pjtcbn07XG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8UmVjb2lsUm9vdD5cbiAgICAgIDxXcmFwcGVyPlxuICAgICAgICA8Um91dGVyPlxuICAgICAgICAgIDxSb3V0ZXMgLz5cbiAgICAgICAgPC9Sb3V0ZXI+XG4gICAgICA8L1dyYXBwZXI+XG4gICAgPC9SZWNvaWxSb290PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5pbXBvcnQgQXBwIGZyb20gXCIuL0FwcFwiO1xuXG5SZWFjdERPTS5yZW5kZXIoPEFwcCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpKTtcbiJdLCJuYW1lcyI6WyJyZWFjdElzIiwicmVxdWlyZSIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsIm5hbWUiLCJsZW5ndGgiLCJwcm90b3R5cGUiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcmd1bWVudHMiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsImRlZmluZVByb3BlcnR5IiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50Iiwia2V5cyIsImNvbmNhdCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiaSIsImtleSIsImRlc2NyaXB0b3IiLCJlIiwidmFsdWUiLCJiIiwiU3ltYm9sIiwiZm9yIiwiYyIsImQiLCJmIiwiZyIsImgiLCJrIiwibCIsIm0iLCJuIiwicCIsInEiLCJyIiwidCIsInYiLCJ3IiwieCIsInkiLCJhIiwidSIsIiQkdHlwZW9mIiwieiIsInR5cGVPZiIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiRWxlbWVudCIsIkZyYWdtZW50IiwiTGF6eSIsIk1lbW8iLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImhhc093blByb3BlcnR5IiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJUeXBlRXJyb3IiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwibWFwIiwiam9pbiIsInRlc3QzIiwic3BsaXQiLCJmb3JFYWNoIiwibGV0dGVyIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwidGFyZ2V0Iiwic291cmNlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsInMiLCJjYWxsIiwiYWEiLCJlbmNvZGVVUklDb21wb25lbnQiLCJFcnJvciIsImJhIiwiY2EiLCJkYSIsImVhIiwiZmEiLCJ3aW5kb3ciLCJoYSIsImlhIiwiamEiLCJrYSIsIkIiLCJ0aGlzIiwiRCIsIm9hIiwicGEiLCJxYSIsIm1hIiwiaXNOYU4iLCJuYSIsImxhIiwicmEiLCJzYSIsInRhIiwidWEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiRSIsIk1hIiwiS2EiLCJMYSIsIk5hIiwiT2EiLCJQYSIsInNldCIsIlJlZmxlY3QiLCJRYSIsIlJhIiwiU2EiLCJUYSIsIlZhIiwiY29uZmlndXJhYmxlIiwiZ2V0IiwiZW51bWVyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiWGEiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiY2hlY2tlZCIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJlYiIsImNoaWxkcmVuIiwiZGIiLCJmYiIsImdiIiwiaGIiLCJBcnJheSIsImliIiwiamIiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwiZG9jdW1lbnQiLCJNU0FwcCIsInBiIiwicWIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInJiIiwic2IiLCJ0YiIsInViIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidmIiLCJ3YiIsInhiIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwib25FcnJvciIsIlhiIiwiWmIiLCIkYiIsImFjIiwiY2MiLCJiYyIsImRjIiwiZWMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJvYyIsInBjIiwicWMiLCJyYyIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJuYXRpdmVFdmVudCIsInRhcmdldENvbnRhaW5lcnMiLCJzYyIsInRjIiwiZmMiLCJ2YyIsIndjIiwiaGMiLCJnYyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJGIiwiUmMiLCJVYyIsIlZjIiwiV2MiLCJYYyIsIlljIiwiWmMiLCIkYyIsIk1hdGgiLCJiZCIsImNkIiwiZGQiLCJlZCIsImZkIiwiZ2QiLCJpZCIsImhkIiwidWMiLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJwZCIsInFkIiwicmQiLCJwcmV2ZW50RGVmYXVsdCIsImlzRGVmYXVsdFByZXZlbnRlZCIsInN0b3BQcm9wYWdhdGlvbiIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJtb3ZlbWVudFgiLCJ5ZCIsIndkIiwieGQiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJJZCIsImNsaXBib2FyZERhdGEiLCJKZCIsIkxkIiwiZGF0YSIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJ6ZCIsIlFkIiwiY29kZSIsImxvY2F0aW9uIiwicmVwZWF0IiwibG9jYWxlIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwid2hpY2giLCJSZCIsIlRkIiwicG9pbnRlcklkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJwcm9wZXJ0eU5hbWUiLCJZZCIsImRlbHRhWCIsImRlbHRhWSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsImxpc3RlbmVycyIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ5ZSIsInplIiwieGUiLCJBZSIsIkJlIiwiQ2UiLCJEZSIsIkVlIiwiRmUiLCJIZSIsIkllIiwiSmUiLCJLZSIsIkxlIiwibm9kZSIsIm9mZnNldCIsIk1lIiwiTmUiLCJPZSIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsInN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiVmUiLCJXZSIsIlhlIiwiWWUiLCJTZXQiLCJaZSIsIlliIiwiRyIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIk5iIiwiZWYiLCJnZiIsImhmIiwiSiIsIksiLCJMIiwiUSIsImplIiwia2UiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiY3VycmVudFRhcmdldCIsImpmIiwia2YiLCJsZiIsIm1mIiwibmYiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwidGYiLCJ2ZiIsIndmIiwieGYiLCJmZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiY3VycmVudCIsIkgiLCJJIiwiQ2YiLCJNIiwiTiIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiSGYiLCJJZiIsIkpmIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiTyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsImNvbnRleHQiLCJvYnNlcnZlZEJpdHMiLCJuZXh0IiwibGFuZXMiLCJmaXJzdENvbnRleHQiLCJyZXNwb25kZXJzIiwid2ciLCJ4ZyIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ5ZyIsInpnIiwiZXZlbnRUaW1lIiwibGFuZSIsInRhZyIsInBheWxvYWQiLCJjYWxsYmFjayIsIkFnIiwiQmciLCJDZyIsIkEiLCJDIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJLZyIsImlzTW91bnRlZCIsImVucXVldWVTZXRTdGF0ZSIsIkhnIiwiSWciLCJKZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJMZyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIlNnIiwiVGciLCJVZyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJQIiwiaWgiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJSIiwiUyIsIlQiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiSGgiLCJtZW1vaXplZFN0YXRlIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJJaCIsIkpoIiwiS2giLCJhY3Rpb24iLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwiTGgiLCJNaCIsIk5oIiwicmVmcyIsInN1YnNjcmliZSIsImRpc3BhdGNoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImxhc3RSZW5kZXJlZFN0YXRlIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJjcmVhdGUiLCJkZXN0cm95IiwiZGVwcyIsImxhc3RFZmZlY3QiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsIkdoIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VPcGFxdWVJZGVudGlmaWVyIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwiRGgiLCJnZXRTbmFwc2hvdCIsInNldFNuYXBzaG90IiwidG9TdHJpbmciLCJ2YWx1ZU9mIiwidWYiLCJFaCIsIkZoIiwiZWkiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwiYmFzZUxhbmVzIiwibmkiLCJvaSIsInBpIiwicWkiLCJyaSIsIkJpIiwic2kiLCJkZWh5ZHJhdGVkIiwicmV0cnlMYW5lIiwidGkiLCJ1aSIsInZpIiwibW9kZSIsIndpIiwieGkiLCJ5aSIsInppIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwiQWkiLCJGaSIsIkdpIiwiRGkiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiaXMiLCJFaSIsIlYiLCJIaSIsIklpIiwiVSIsIktpIiwiTGkiLCJNaSIsInN0YWNrIiwiTmkiLCJjb25zb2xlIiwic2V0VGltZW91dCIsIk9pIiwiUGkiLCJlbGVtZW50IiwiUWkiLCJSaSIsIlNpIiwiVGkiLCJjb21wb25lbnRTdGFjayIsIlVpIiwiVmkiLCJXaSIsIlhpIiwiWWkiLCJaaSIsIiRpIiwiYWoiLCJiaiIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImlqIiwiamoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicGoiLCJYIiwiWSIsIlciLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJKaSIsIndqIiwiY2siLCJaIiwieGoiLCJ5aiIsInpqIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsIklqIiwiSmoiLCJTYyIsIktqIiwiTGoiLCJNaiIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJVaiIsIldqIiwiWGoiLCJZaiIsIlpqIiwiYWsiLCJiayIsImRrIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImVrIiwibGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZrIiwiZ2siLCJpayIsImNoaWxkIiwicmV0dXJuIiwic3RhdGVOb2RlIiwiZWxlbWVudFR5cGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJmaXJzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJjb250YWluZXJJbmZvIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJqayIsInBpbmdDYWNoZSIsImZpbmlzaGVkTGFuZXMiLCJtdXRhYmxlUmVhZExhbmVzIiwiZXhwaXJlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBlbmRpbmdMYW5lcyIsImtrIiwibGsiLCJtayIsIm5rIiwib2siLCJxayIsInJrIiwidGsiLCJoeWRyYXRlIiwic2siLCJ1ayIsImhrIiwiSlNPTiIsIlZqIiwidmsiLCJFdmVudHMiLCJ3ayIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInZlcnNpb24iLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwieGsiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsInlrIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJlcnJvciIsImlzQXJyYXkiLCJrZXlMaXN0IiwiaGFzUHJvcCIsImhhc0VsZW1lbnRUeXBlIiwiZXF1YWwiLCJhcnJBIiwiYXJyQiIsImRhdGVBIiwiZGF0ZUIiLCJnZXRUaW1lIiwicmVnZXhwQSIsIlJlZ0V4cCIsInJlZ2V4cEIiLCJtZXNzYWdlIiwibWF0Y2giLCJ3YXJuIiwiaXRlcmF0b3IiLCJwcm9wcyIsInVwZGF0ZXIiLCJpc1JlYWN0Q29tcG9uZW50Iiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsImNvbnN0cnVjdG9yIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJyZWYiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIl9vd25lciIsInJlcGxhY2UiLCJlc2NhcGUiLCJwdXNoIiwiZG9uZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwidGhlbiIsImRlZmF1bHQiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJ0cmFuc2l0aW9uIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsIkNoaWxkcmVuIiwiYXBwbHkiLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiQ29tcG9uZW50IiwiUHVyZUNvbXBvbmVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2NvbnRleHQiLCJjcmVhdGVFbGVtZW50IiwiY3JlYXRlRmFjdG9yeSIsImJpbmQiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwiX3BheWxvYWQiLCJfaW5pdCIsIm1lbW8iLCJydW50aW1lIiwidW5kZWZpbmVkIiwiT3AiLCJoYXNPd24iLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJzZWxmIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsIkNvbnRleHQiLCJfaW52b2tlIiwic3RhdGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwibWV0aG9kIiwiYXJnIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJmbiIsIm9iaiIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJQcm9taXNlSW1wbCIsImludm9rZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXN1bHQiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmFibGUiLCJpdGVyYXRvck1ldGhvZCIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwib2JqZWN0IiwicmV2ZXJzZSIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIkZ1bmN0aW9uIiwicGVyZm9ybWFuY2UiLCJub3ciLCJ1bnN0YWJsZV9ub3ciLCJNZXNzYWdlQ2hhbm5lbCIsImNsZWFyVGltZW91dCIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIml0IiwiaXNPYmplY3QiLCJ3ZWxsS25vd25TeW1ib2wiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90b3R5cGUiLCJpbmRleCIsInVuaWNvZGUiLCJDb25zdHJ1Y3RvciIsIkFycmF5QnVmZmVyIiwiRGF0YVZpZXciLCJnbG9iYWwiLCJERVNDUklQVE9SUyIsIk5BVElWRV9BUlJBWV9CVUZGRVIiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJyZWRlZmluZUFsbCIsImZhaWxzIiwiYW5JbnN0YW5jZSIsInRvSW50ZWdlciIsInRvTGVuZ3RoIiwidG9JbmRleCIsIklFRUU3NTQiLCJhcnJheUZpbGwiLCJzZXRUb1N0cmluZ1RhZyIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwic2V0SW50ZXJuYWxTdGF0ZSIsIkFSUkFZX0JVRkZFUiIsIkRBVEFfVklFVyIsIldST05HX0lOREVYIiwiTmF0aXZlQXJyYXlCdWZmZXIiLCIkQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCIkRGF0YVZpZXdQcm90b3R5cGUiLCJPYmplY3RQcm90b3R5cGUiLCJSYW5nZUVycm9yIiwicGFja0lFRUU3NTQiLCJwYWNrIiwidW5wYWNrSUVFRTc1NCIsInVucGFjayIsInBhY2tJbnQ4IiwicGFja0ludDE2IiwicGFja0ludDMyIiwidW5wYWNrSW50MzIiLCJidWZmZXIiLCJwYWNrRmxvYXQzMiIsInBhY2tGbG9hdDY0IiwiYWRkR2V0dGVyIiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsInN0b3JlIiwiYnl0ZUxlbmd0aCIsImJ5dGVzIiwiYnl0ZU9mZnNldCIsImNvbnZlcnNpb24iLCJOYU4iLCJBcnJheUJ1ZmZlclByb3RvdHlwZSIsImoiLCJ0ZXN0VmlldyIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsInVuc2FmZSIsImJ1ZmZlckxlbmd0aCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwidG9BYnNvbHV0ZUluZGV4IiwiYXJndW1lbnRzTGVuZ3RoIiwiZW5kUG9zIiwiJGZvckVhY2giLCJTVFJJQ1RfTUVUSE9EIiwiYXJyYXlNZXRob2RJc1N0cmljdCIsImNhbGxiYWNrZm4iLCJjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nIiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwiY3JlYXRlUHJvcGVydHkiLCJnZXRJdGVyYXRvck1ldGhvZCIsImFycmF5TGlrZSIsInN0ZXAiLCJtYXBmbiIsIm1hcHBpbmciLCJ0b0luZGV4ZWRPYmplY3QiLCJjcmVhdGVNZXRob2QiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJpbmNsdWRlcyIsImluZGV4T2YiLCJJbmRleGVkT2JqZWN0IiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiVFlQRSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJJU19GSUxURVJfT1VUIiwiTk9fSE9MRVMiLCJ0aGF0Iiwic3BlY2lmaWNDcmVhdGUiLCJib3VuZEZ1bmN0aW9uIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImZpbHRlck91dCIsIlY4X1ZFUlNJT04iLCJTUEVDSUVTIiwiTUVUSE9EX05BTUUiLCJhcnJheSIsImZvbyIsIkJvb2xlYW4iLCJhcmd1bWVudCIsImFGdW5jdGlvbiIsIklTX1JJR0hUIiwicmlnaHQiLCJvcmlnaW5hbEFycmF5IiwiYW5PYmplY3QiLCJpdGVyYXRvckNsb3NlIiwiRU5UUklFUyIsIklURVJBVE9SIiwiU0FGRV9DTE9TSU5HIiwiY2FsbGVkIiwiaXRlcmF0b3JXaXRoUmV0dXJuIiwiZXhlYyIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwiVE9fU1RSSU5HX1RBR19TVVBQT1JUIiwiY2xhc3NvZlJhdyIsIlRPX1NUUklOR19UQUciLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRyeUdldCIsImFkZGVyIiwiYWRkIiwibGVuIiwid2FzRGVsZXRlZCIsImNvbGxlY3Rpb24iLCJyZW1vdmVyIiwiYWxsRGVsZXRlZCIsIml0ZXJhdGUiLCJkZWZpbmVJdGVyYXRvciIsInNldFNwZWNpZXMiLCJmYXN0S2V5IiwiaW50ZXJuYWxTdGF0ZUdldHRlckZvciIsImdldHRlckZvciIsImdldENvbnN0cnVjdG9yIiwid3JhcHBlciIsIkNPTlNUUlVDVE9SX05BTUUiLCJBRERFUiIsImZpcnN0Iiwic2l6ZSIsIkFTX0VOVFJJRVMiLCJkZWZpbmUiLCJwcmV2aW91cyIsImdldEVudHJ5IiwicmVtb3ZlZCIsImNsZWFyIiwiaGFzIiwic2V0U3Ryb25nIiwiSVRFUkFUT1JfTkFNRSIsImdldEludGVybmFsQ29sbGVjdGlvblN0YXRlIiwiZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlIiwiaXRlcmF0ZWQiLCJraW5kIiwiZ2V0V2Vha0RhdGEiLCJBcnJheUl0ZXJhdGlvbk1vZHVsZSIsIiRoYXMiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiZnJvemVuIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImVudHJpZXMiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJzcGxpY2UiLCIkIiwiaXNGb3JjZWQiLCJyZWRlZmluZSIsIkludGVybmFsTWV0YWRhdGFNb2R1bGUiLCJjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24iLCJpbmhlcml0SWZSZXF1aXJlZCIsImNvbW1vbiIsIklTX1dFQUsiLCJOYXRpdmVDb25zdHJ1Y3RvciIsIk5hdGl2ZVByb3RvdHlwZSIsImV4cG9ydGVkIiwiZml4TWV0aG9kIiwiS0VZIiwibmF0aXZlTWV0aG9kIiwiUkVRVUlSRUQiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJkdW1teSIsImZvcmNlZCIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJNQVRDSCIsInJlZ2V4cCIsImVycm9yMSIsImVycm9yMiIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsIkl0ZXJhdG9ycyIsInJldHVyblRoaXMiLCJJdGVyYXRvckNvbnN0cnVjdG9yIiwiTkFNRSIsImJpdG1hcCIsIndyaXRhYmxlIiwidG9QcmltaXRpdmUiLCJwcm9wZXJ0eUtleSIsImNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IiLCJJU19QVVJFIiwiSXRlcmF0b3JzQ29yZSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJLRVlTIiwiVkFMVUVTIiwiSXRlcmFibGUiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwibWV0aG9kcyIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCJwcm90byIsInBhdGgiLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiRVhJU1RTIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJ1c2VyQWdlbnQiLCJ0ZXN0IiwiY2xhc3NvZiIsInByb2Nlc3MiLCJnZXRCdWlsdEluIiwidmVyc2lvbnMiLCJ2OCIsInNldEdsb2JhbCIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJvcHRpb25zIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJub1RhcmdldEdldCIsInNoYW0iLCJyZWdleHBFeGVjIiwiUmVnRXhwUHJvdG90eXBlIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJncm91cHMiLCJSRVBMQUNFX0tFRVBTXyQwIiwiUkVQTEFDRSIsIlJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsImZsYWdzIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwic3RyIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwiJGV4ZWMiLCJzdHJpbmdNZXRob2QiLCJyZWdleE1ldGhvZCIsInN0cmluZyIsImlzRXh0ZW5zaWJsZSIsInByZXZlbnRFeHRlbnNpb25zIiwiZmFjdG9yaWVzIiwiY29uc3RydWN0IiwiYXJnc0xlbmd0aCIsImFyZ3MiLCJsaXN0IiwicGFydEFyZ3MiLCJ2YXJpYWJsZSIsIm5hbWVzcGFjZSIsImdldEl0ZXJhdG9yIiwiTWFwIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VtZW50IiwidGFpbFBvcyIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsImFicyIsInBvdyIsImxvZyIsIkxOMiIsIm1hbnRpc3NhTGVuZ3RoIiwiZXhwb25lbnQiLCJtYW50aXNzYSIsImV4cG9uZW50TGVuZ3RoIiwiZU1heCIsImVCaWFzIiwicnQiLCJzaWduIiwiSW5maW5pdHkiLCJuQml0cyIsIldyYXBwZXIiLCJOZXdUYXJnZXQiLCJOZXdUYXJnZXRQcm90b3R5cGUiLCJmdW5jdGlvblRvU3RyaW5nIiwiaW5zcGVjdFNvdXJjZSIsImhpZGRlbktleXMiLCJ1aWQiLCJGUkVFWklORyIsIk1FVEFEQVRBIiwic2V0TWV0YWRhdGEiLCJvYmplY3RJRCIsIndlYWtEYXRhIiwib25GcmVlemUiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWRLZXkiLCJPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCIsIldlYWtNYXAiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJtZXRhZGF0YSIsImZhY2FkZSIsIlNUQVRFIiwiZW5mb3JjZSIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInRvTG93ZXJDYXNlIiwiaXNSZWdFeHAiLCJSZXN1bHQiLCJzdG9wcGVkIiwidW5ib3VuZEZ1bmN0aW9uIiwiaXRlckZuIiwiSVNfSVRFUkFUT1IiLCJJTlRFUlJVUFRFRCIsImNvbmRpdGlvbiIsImNhbGxGbiIsInJldHVybk1ldGhvZCIsIlByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3IiLCJORVdfSVRFUkFUT1JfUFJPVE9UWVBFIiwiZmx1c2giLCJoZWFkIiwibm90aWZ5IiwidG9nZ2xlIiwicHJvbWlzZSIsIm1hY3JvdGFzayIsIklTX0lPUyIsIklTX1dFQk9TX1dFQktJVCIsIklTX05PREUiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciIsInF1ZXVlTWljcm90YXNrIiwicGFyZW50IiwiZG9tYWluIiwiZXhpdCIsImVudGVyIiwibmV4dFRpY2siLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwidGFzayIsIlVSTCIsInNlYXJjaFBhcmFtcyIsInBhdGhuYW1lIiwidG9KU09OIiwic29ydCIsImhyZWYiLCJVUkxTZWFyY2hQYXJhbXMiLCJ1c2VybmFtZSIsImhvc3QiLCJoYXNoIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIm9iamVjdEtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsIiRhc3NpZ24iLCJzeW1ib2wiLCJhbHBoYWJldCIsImNociIsImFjdGl2ZVhEb2N1bWVudCIsImRlZmluZVByb3BlcnRpZXMiLCJlbnVtQnVnS2V5cyIsImh0bWwiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3QiLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJ3cml0ZSIsImNsb3NlIiwidGVtcCIsInBhcmVudFdpbmRvdyIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiUHJvcGVydGllcyIsIklFOF9ET01fREVGSU5FIiwiJGRlZmluZVByb3BlcnR5IiwiQXR0cmlidXRlcyIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJpbnRlcm5hbE9iamVjdEtleXMiLCJDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIiLCJuYW1lcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwic2V0dGVyIiwiQ09SUkVDVF9TRVRURVIiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiVEVNUExBVEUiLCJzaW1wbGUiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsInN0aWNreUhlbHBlcnMiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwibGFzdEluZGV4IiwiVU5TVVBQT1JURURfWSIsIkJST0tFTl9DQVJFVCIsIk5QQ0dfSU5DTFVERUQiLCJyZUNvcHkiLCJzdGlja3kiLCJjaGFyc0FkZGVkIiwic3RyQ29weSIsIm11bHRpbGluZSIsImlnbm9yZUNhc2UiLCJkb3RBbGwiLCJSRSIsIlRBRyIsIlNIQVJFRCIsImNvcHlyaWdodCIsImRlZmF1bHRDb25zdHJ1Y3RvciIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJDT05WRVJUX1RPX1NUUklORyIsInBvcyIsInNlY29uZCIsImNoYXJDb2RlQXQiLCJjb2RlQXQiLCJtYXhJbnQiLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwiT1ZFUkZMT1dfRVJST1IiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImFkYXB0IiwiZGVsdGEiLCJudW1Qb2ludHMiLCJmaXJzdFRpbWUiLCJiYXNlTWludXNUTWluIiwiZW5jb2RlIiwib3V0cHV0IiwiY291bnRlciIsImV4dHJhIiwidWNzMmRlY29kZSIsImN1cnJlbnRWYWx1ZSIsImlucHV0TGVuZ3RoIiwiYmlhcyIsImJhc2ljTGVuZ3RoIiwiaGFuZGxlZENQQ291bnQiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxTWludXNUIiwiYmFzZU1pbnVzVCIsImxhYmVsIiwiZW5jb2RlZCIsImxhYmVscyIsIndoaXRlc3BhY2VzIiwid2hpdGVzcGFjZSIsImx0cmltIiwicnRyaW0iLCJ0cmltIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsInNldEltbWVkaWF0ZSIsImNsZWFySW1tZWRpYXRlIiwiRGlzcGF0Y2giLCJydW4iLCJydW5uZXIiLCJwb3N0IiwicHJvdG9jb2wiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwibWF4IiwibWluIiwiaW50ZWdlciIsImNlaWwiLCJQUkVGRVJSRURfU1RSSU5HIiwicG9zdGZpeCIsInJhbmRvbSIsIk5BVElWRV9TWU1CT0wiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJhcnJheUJ1ZmZlck1vZHVsZSIsIkFycmF5QnVmZmVyTW9kdWxlIiwic3BlY2llc0NvbnN0cnVjdG9yIiwibmF0aXZlQXJyYXlCdWZmZXJTbGljZSIsImZpbiIsInZpZXdTb3VyY2UiLCJ2aWV3VGFyZ2V0IiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCIsIklTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQiLCJTUEVDSUVTX1NVUFBPUlQiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzcHJlYWRhYmxlIiwiZmlsbCIsImFkZFRvVW5zY29wYWJsZXMiLCIkZmlsdGVyIiwiJGZpbmQiLCJGSU5EIiwiU0tJUFNfSE9MRVMiLCIkaW5jbHVkZXMiLCIkaW5kZXhPZiIsIm5hdGl2ZUluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwic2VhcmNoRWxlbWVudCIsIkFSUkFZX0lURVJBVE9SIiwiQXJndW1lbnRzIiwibmF0aXZlSm9pbiIsIkVTM19TVFJJTkdTIiwic2VwYXJhdG9yIiwiJG1hcCIsIiRyZWR1Y2VSaWdodCIsIkNIUk9NRV9WRVJTSU9OIiwicmVkdWNlUmlnaHQiLCIkcmVkdWNlIiwicmVkdWNlIiwibmF0aXZlUmV2ZXJzZSIsIkhBU19TUEVDSUVTX1NVUFBPUlQiLCJuYXRpdmVTbGljZSIsIm5hdGl2ZVNvcnQiLCJGQUlMU19PTl9VTkRFRklORUQiLCJGQUlMU19PTl9OVUxMIiwiY29tcGFyZWZuIiwiTUFYSU1VTV9BTExPV0VEX0xFTkdUSF9FWENFRURFRCIsImRlbGV0ZUNvdW50IiwiaW5zZXJ0Q291bnQiLCJhY3R1YWxEZWxldGVDb3VudCIsImFjdHVhbFN0YXJ0IiwidG9JU09TdHJpbmciLCJwdiIsImlzRmluaXRlIiwiRnVuY3Rpb25Qcm90b3R5cGUiLCJGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nIiwibmFtZVJFIiwiY29sbGVjdGlvblN0cm9uZyIsImluaXQiLCJMT0cyRSIsImNsejMyIiwiTlVNQkVSIiwiTmF0aXZlTnVtYmVyIiwiTnVtYmVyUHJvdG90eXBlIiwiQlJPS0VOX0NMQVNTT0YiLCJ0b051bWJlciIsInRoaXJkIiwicmFkaXgiLCJtYXhDb2RlIiwiZGlnaXRzIiwicGFyc2VJbnQiLCJOdW1iZXJXcmFwcGVyIiwiJGZyZWV6ZSIsImZyZWV6ZSIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwibmF0aXZlR2V0UHJvdG90eXBlT2YiLCIkaXNGcm96ZW4iLCJpc0Zyb3plbiIsIm5hdGl2ZUtleXMiLCIkc2VhbCIsInNlYWwiLCJOYXRpdmVQcm9taXNlIiwicHJvbWlzZVJlc29sdmUiLCJyZWFsIiwib25GaW5hbGx5IiwiaXNGdW5jdGlvbiIsIkludGVybmFsIiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJQcm9taXNlV3JhcHBlciIsIm5hdGl2ZVRoZW4iLCJtaWNyb3Rhc2siLCJob3N0UmVwb3J0RXJyb3JzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwiSVNfQlJPV1NFUiIsIlBST01JU0UiLCJnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSIsIk5hdGl2ZVByb21pc2VQcm90b3R5cGUiLCJQcm9taXNlQ29uc3RydWN0b3IiLCJQcm9taXNlQ29uc3RydWN0b3JQcm90b3R5cGUiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJESVNQQVRDSF9FVkVOVCIsImNyZWF0ZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIk5BVElWRV9SRUpFQ1RJT05fRVZFTlQiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJVTkhBTkRMRURfUkVKRUNUSU9OIiwiU1VCQ0xBU1NJTkciLCJHTE9CQUxfQ09SRV9KU19QUk9NSVNFIiwiRmFrZVByb21pc2UiLCJJTkNPUlJFQ1RfSVRFUkFUSU9OIiwiYWxsIiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0Iiwibm90aWZpZWQiLCJjaGFpbiIsInJlYWN0aW9ucyIsImV4aXRlZCIsInJlYWN0aW9uIiwiaGFuZGxlciIsImZhaWwiLCJyZWplY3Rpb24iLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwicmVhc29uIiwiaW5pdEV2ZW50IiwiaXNVbmhhbmRsZWQiLCJlbWl0IiwidW53cmFwIiwiaW50ZXJuYWxSZWplY3QiLCJpbnRlcm5hbFJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhcGFiaWxpdHkiLCIkcHJvbWlzZVJlc29sdmUiLCJyZW1haW5pbmciLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIm5hdGl2ZUNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsImdldEZsYWdzIiwiTmF0aXZlUmVnRXhwIiwiQ09SUkVDVF9ORVciLCJSZWdFeHBXcmFwcGVyIiwicGF0dGVybiIsInRoaXNJc1JlZ0V4cCIsInBhdHRlcm5Jc1JlZ0V4cCIsImZsYWdzQXJlVW5kZWZpbmVkIiwicHJveHkiLCJvYmplY3REZWZpbmVQcm9wZXJ0eU1vZHVsZSIsInJlZ0V4cEZsYWdzIiwiVE9fU1RSSU5HIiwibmF0aXZlVG9TdHJpbmciLCJOT1RfR0VORVJJQyIsIklOQ09SUkVDVF9OQU1FIiwibm90QVJlZ0V4cCIsImNvcnJlY3RJc1JlZ0V4cExvZ2ljIiwiJGVuZHNXaXRoIiwiZW5kc1dpdGgiLCJDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyIsInNlYXJjaFN0cmluZyIsImVuZFBvc2l0aW9uIiwiU1RSSU5HX0lURVJBVE9SIiwicG9pbnQiLCJmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyIsImFkdmFuY2VTdHJpbmdJbmRleCIsInJlZ0V4cEV4ZWMiLCJuYXRpdmVNYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsIm1hdGNoZXIiLCJyZXMiLCJyeCIsImZ1bGxVbmljb2RlIiwibWF0Y2hTdHIiLCJnZXRTdWJzdGl0dXRpb24iLCJVTlNBRkVfU1VCU1RJVFVURSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwicmVwbGFjZXIiLCJmdW5jdGlvbmFsUmVwbGFjZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsInJlcGxhY2VyQXJncyIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIm5hdGl2ZVNlYXJjaCIsInNlYXJjaGVyIiwicHJldmlvdXNMYXN0SW5kZXgiLCJjYWxsUmVnRXhwRXhlYyIsImFycmF5UHVzaCIsIk1BWF9VSU5UMzIiLCJTUExJVCIsIm5hdGl2ZVNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbWl0IiwibGltIiwibGFzdExlbmd0aCIsImxhc3RMYXN0SW5kZXgiLCJzZXBhcmF0b3JDb3B5Iiwic3BsaXR0ZXIiLCJ1bmljb2RlTWF0Y2hpbmciLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCIkdHJpbSIsImZvcmNlZFN0cmluZ1RyaW1NZXRob2QiLCJkZWZpbmVXZWxsS25vd25TeW1ib2wiLCJOYXRpdmVTeW1ib2wiLCJkZXNjcmlwdGlvbiIsIkVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSIsIlN5bWJvbFdyYXBwZXIiLCJzeW1ib2xQcm90b3R5cGUiLCJzeW1ib2xUb1N0cmluZyIsIm5hdGl2ZSIsImRlc2MiLCJuYXRpdmVPYmplY3RDcmVhdGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCIkc3RyaW5naWZ5IiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzIiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJBbGxTeW1ib2xzIiwiT2JqZWN0UHJvdG90eXBlU3ltYm9scyIsIlN0cmluZ1RvU3ltYm9sUmVnaXN0cnkiLCJTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5IiwiUU9iamVjdCIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09CSkVDVF9QUk9UT1RZUEUiLCJrZXlGb3IiLCJzeW0iLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJzdHJpbmdpZnkiLCJzcGFjZSIsIiRyZXBsYWNlciIsIkludGVybmFsV2Vha01hcCIsImNvbGxlY3Rpb25XZWFrIiwiZW5mb3JjZUl0ZXJuYWxTdGF0ZSIsIklTX0lFMTEiLCIkV2Vha01hcCIsIldlYWtNYXBQcm90b3R5cGUiLCJuYXRpdmVEZWxldGUiLCJuYXRpdmVIYXMiLCJuYXRpdmVHZXQiLCJuYXRpdmVTZXQiLCJjb2xsZWN0aW9uRGVsZXRlQWxsIiwiZGVsZXRlQWxsIiwiZ2V0TWFwSXRlcmF0b3IiLCJuZXdNYXAiLCJmaW5kS2V5Iiwic2FtZVZhbHVlWmVybyIsImtleU9mIiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsIm1lcmdlIiwibm9Jbml0aWFsIiwiYWNjdW11bGF0b3IiLCJ1cGRhdGUiLCJpc1ByZXNlbnRJbk1hcCIsImNvbGxlY3Rpb25BZGRBbGwiLCJhZGRBbGwiLCJkaWZmZXJlbmNlIiwibmV3U2V0IiwiZ2V0U2V0SXRlcmF0b3IiLCJpbnRlcnNlY3Rpb24iLCJoYXNDaGVjayIsImlzRGlzam9pbnRGcm9tIiwiaXNTdWJzZXRPZiIsIm90aGVyU2V0IiwiaXNTdXBlcnNldE9mIiwic2VwIiwic3ltbWV0cmljRGlmZmVyZW5jZSIsInVuaW9uIiwiRE9NSXRlcmFibGVzIiwiQ09MTEVDVElPTl9OQU1FIiwiQ29sbGVjdGlvbiIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJBcnJheUl0ZXJhdG9yTWV0aG9kcyIsIkFycmF5VmFsdWVzIiwiVVNFX05BVElWRV9VUkwiLCIkZmV0Y2giLCJIZWFkZXJzIiwiVVJMX1NFQVJDSF9QQVJBTVMiLCJVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUiIsImdldEludGVybmFsUGFyYW1zU3RhdGUiLCJwbHVzIiwic2VxdWVuY2VzIiwicGVyY2VudFNlcXVlbmNlIiwicGVyY2VudERlY29kZSIsInNlcXVlbmNlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZGVzZXJpYWxpemUiLCJzZXJpYWxpemUiLCJwYXJzZVNlYXJjaFBhcmFtcyIsInF1ZXJ5IiwiYXR0cmlidXRlIiwiYXR0cmlidXRlcyIsInNoaWZ0IiwidXBkYXRlU2VhcmNoUGFyYW1zIiwidmFsaWRhdGVBcmd1bWVudHNMZW5ndGgiLCJwYXNzZWQiLCJyZXF1aXJlZCIsIlVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yIiwicGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IiLCJlbnRyeUl0ZXJhdG9yIiwiZW50cnlOZXh0IiwidXBkYXRlVVJMIiwiVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlIiwiYXBwZW5kIiwiZ2V0QWxsIiwiZm91bmQiLCJlbnRyaWVzSW5kZXgiLCJzbGljZUluZGV4IiwiZmV0Y2giLCJib2R5IiwiaGVhZGVycyIsImdldFN0YXRlIiwiRU9GIiwiYXJyYXlGcm9tIiwidG9BU0NJSSIsIlVSTFNlYXJjaFBhcmFtc01vZHVsZSIsIk5hdGl2ZVVSTCIsImdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUiLCJnZXRJbnRlcm5hbFVSTFN0YXRlIiwiSU5WQUxJRF9TQ0hFTUUiLCJJTlZBTElEX0hPU1QiLCJJTlZBTElEX1BPUlQiLCJBTFBIQSIsIkFMUEhBTlVNRVJJQyIsIkRJR0lUIiwiSEVYX1NUQVJUIiwiT0NUIiwiREVDIiwiSEVYIiwiRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVCIsIkZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlRfRVhDTFVESU5HX1BFUkNFTlQiLCJMRUFESU5HX0FORF9UUkFJTElOR19DMF9DT05UUk9MX09SX1NQQUNFIiwiVEFCX0FORF9ORVdfTElORSIsInBhcnNlSG9zdCIsImNvZGVQb2ludHMiLCJwYXJzZUlQdjYiLCJpc1NwZWNpYWwiLCJwYXJzZUlQdjQiLCJwZXJjZW50RW5jb2RlIiwiQzBDb250cm9sUGVyY2VudEVuY29kZVNldCIsInBhcnRzTGVuZ3RoIiwibnVtYmVycyIsInBhcnQiLCJpcHY0IiwicGFydHMiLCJudW1iZXJzU2VlbiIsImlwdjRQaWVjZSIsInN3YXBzIiwic3dhcCIsImFkZHJlc3MiLCJwaWVjZUluZGV4IiwiY29tcHJlc3MiLCJwb2ludGVyIiwiY2hhciIsInNlcmlhbGl6ZUhvc3QiLCJpZ25vcmUwIiwidW5zaGlmdCIsImlwdjYiLCJtYXhJbmRleCIsIm1heExlbmd0aCIsImN1cnJTdGFydCIsImN1cnJMZW5ndGgiLCJmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZSIsImZyYWdtZW50UGVyY2VudEVuY29kZVNldCIsInBhdGhQZXJjZW50RW5jb2RlU2V0IiwidXNlcmluZm9QZXJjZW50RW5jb2RlU2V0Iiwic3BlY2lhbFNjaGVtZXMiLCJmdHAiLCJmaWxlIiwiaHR0cCIsImh0dHBzIiwid3MiLCJ3c3MiLCJzY2hlbWUiLCJpbmNsdWRlc0NyZWRlbnRpYWxzIiwiY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0IiwiY2Fubm90QmVBQmFzZVVSTCIsImlzV2luZG93c0RyaXZlTGV0dGVyIiwibm9ybWFsaXplZCIsInN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIiLCJzaG9ydGVuVVJMc1BhdGgiLCJwYXRoU2l6ZSIsImlzU2luZ2xlRG90Iiwic2VnbWVudCIsIlNDSEVNRV9TVEFSVCIsIlNDSEVNRSIsIk5PX1NDSEVNRSIsIlNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZIiwiUEFUSF9PUl9BVVRIT1JJVFkiLCJSRUxBVElWRSIsIlJFTEFUSVZFX1NMQVNIIiwiU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyIsIlNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTIiwiQVVUSE9SSVRZIiwiSE9TVCIsIkhPU1ROQU1FIiwiUE9SVCIsIkZJTEUiLCJGSUxFX1NMQVNIIiwiRklMRV9IT1NUIiwiUEFUSF9TVEFSVCIsIlBBVEgiLCJDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIIiwiUVVFUlkiLCJGUkFHTUVOVCIsInBhcnNlVVJMIiwic3RhdGVPdmVycmlkZSIsImJ1ZmZlckNvZGVQb2ludHMiLCJmYWlsdXJlIiwic2VlbkF0Iiwic2VlbkJyYWNrZXQiLCJzZWVuUGFzc3dvcmRUb2tlbiIsImZyYWdtZW50IiwiY29kZVBvaW50IiwiZW5jb2RlZENvZGVQb2ludHMiLCJVUkxDb25zdHJ1Y3RvciIsInVybFN0cmluZyIsInNlYXJjaFBhcmFtc1N0YXRlIiwic2VyaWFsaXplVVJMIiwib3JpZ2luIiwiZ2V0T3JpZ2luIiwiZ2V0UHJvdG9jb2wiLCJnZXRVc2VybmFtZSIsImdldFBhc3N3b3JkIiwiZ2V0SG9zdCIsImhvc3RuYW1lIiwiZ2V0SG9zdG5hbWUiLCJnZXRQb3J0IiwiZ2V0UGF0aG5hbWUiLCJnZXRTZWFyY2giLCJnZXRTZWFyY2hQYXJhbXMiLCJnZXRIYXNoIiwiVVJMUHJvdG90eXBlIiwiYWNjZXNzb3JEZXNjcmlwdG9yIiwiZ2V0dGVyIiwibmF0aXZlQ3JlYXRlT2JqZWN0VVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwibmF0aXZlUmV2b2tlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiYmxvYiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsIm8iLCJwcm9wIiwibm1kIiwicGF0aHMiLCJzY3JpcHRVcmwiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZmlsdGVySXRlcmFibGUiLCJjb25jYXRJdGVyYWJsZXMiLCJSZWNvaWxfZXJyIiwiXyIsIlJlY29pbF9pc1Byb21pc2UiLCJSZWNvaWxfbnVsbHRocm93cyIsIl9kZWZpbmVQcm9wZXJ0eSIsIkJhc2VMb2FkYWJsZSIsIm90aGVyIiwiY29udGVudHMiLCJfbWFwIiwiVmFsdWVMb2FkYWJsZSIsImxvYWRhYmxlV2l0aFByb21pc2UiLCJpc0xvYWRhYmxlIiwibG9hZGFibGVXaXRoVmFsdWUiLCJsb2FkYWJsZVdpdGhFcnJvciIsIkVycm9yTG9hZGFibGUiLCJMb2FkaW5nTG9hZGFibGUiLCJuZXh0TG9hZGFibGUiLCJjYXRjaCIsImxvYWRhYmxlQWxsIiwiaW5wdXRzIiwibG9hZGFibGVBbGxBcnJheSIsIm91dHB1dHMiLCJvdXQiLCJpZHgiLCJfdXNlTXV0YWJsZVNvdXJjZSIsIkxvYWRhYmxlU3RhdGljSW50ZXJmYWNlIiwiUmVjb2lsX0xvYWRhYmxlIiwibG9hZGFibGVMb2FkaW5nIiwiUmVjb2lsTG9hZGFibGUiLCJSZWNvaWxfTG9hZGFibGVfMSIsIlJlY29pbF9Mb2FkYWJsZV8yIiwiUmVjb2lsX0xvYWRhYmxlXzMiLCJSZWNvaWxfTG9hZGFibGVfNCIsIlJlY29pbF9Mb2FkYWJsZV81IiwiUmVjb2lsX0xvYWRhYmxlXzYiLCJSZWNvaWxfTG9hZGFibGVfNyIsIlJlY29pbF9Mb2FkYWJsZSQxIiwicmVhY3QiLCJ1bnN0YWJsZV91c2VNdXRhYmxlU291cmNlIiwiUmVjb2lsX211dGFibGVTb3VyY2UiLCJtdXRhYmxlU291cmNlRXhpc3RzIiwiJGRpc2FibGVSZWNvaWxWYWx1ZU11dGFibGVTb3VyY2VfVEVNUF9IQUNLX0RPX05PVF9VU0UiLCJtdXRhYmxlU291cmNlRXhpc3RzJDEiLCJna3MiLCJSZWNvaWxfZ2t4IiwiX2drcyRnZXQiLCJzZXRQYXNzIiwic2V0RmFpbCIsIlJlY29pbF9na3hfMSIsIlJlY29pbF9tYXBJdGVyYWJsZSIsIlJlY29pbF9yZWNvdmVyYWJsZVZpb2xhdGlvbiIsInByb2plY3ROYW1lIiwiQWJzdHJhY3RSZWNvaWxWYWx1ZSIsIm5ld0tleSIsIlJlY29pbFN0YXRlIiwiUmVjb2lsVmFsdWVSZWFkT25seSIsIlJlY29pbF9SZWNvaWxWYWx1ZSIsImlzUmVjb2lsVmFsdWUiLCJSZWNvaWxfUmVjb2lsVmFsdWVfMSIsIlJlY29pbF9SZWNvaWxWYWx1ZV8yIiwiUmVjb2lsX1JlY29pbFZhbHVlXzMiLCJSZWNvaWxfUmVjb2lsVmFsdWVfNCIsIlJlY29pbF9SZWNvaWxWYWx1ZSQxIiwiRGVmYXVsdFZhbHVlIiwiREVGQVVMVF9WQUxVRSIsIlJlY29pbFZhbHVlTm90UmVhZHkiLCJub2RlcyIsInJlY29pbFZhbHVlcyIsIk5vZGVNaXNzaW5nRXJyb3IiLCJjb25maWdEZWxldGlvbkhhbmRsZXJzIiwiZ2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyIiwiUmVjb2lsX05vZGUiLCJyZWdpc3Rlck5vZGUiLCJyZWNvaWxWYWx1ZSIsImdldE5vZGUiLCJnZXROb2RlTWF5YmUiLCJkZWxldGVOb2RlQ29uZmlnSWZQb3NzaWJsZSIsIl9ub2RlJHNob3VsZERlbGV0ZUNvbiIsIl9nZXRDb25maWdEZWxldGlvbkhhbiIsInNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZSIsImRlbGV0ZSIsInNldENvbmZpZ0RlbGV0aW9uSGFuZGxlciIsInJlY29pbFZhbHVlc0ZvcktleXMiLCJSZWNvaWxfUXVldWUiLCJoYW10XzEiLCJfdHlwZW9mIiwiaGFtdCIsIkJVQ0tFVF9TSVpFIiwiTUFTSyIsIk1BWF9JTkRFWF9OT0RFIiwiTUlOX0FSUkFZX05PREUiLCJub3RoaW5nIiwiY29uc3RhbnQiLCJoYXNoRnJhZ21lbnQiLCJ0b0JpdG1hcCIsImZyb21CaXRtYXAiLCJiaXQiLCJhcnJheVVwZGF0ZSIsIm11dGF0ZSIsImF0IiwiYXJyIiwiYXJyYXlTcGxpY2VPdXQiLCJuZXdMZW4iLCJlbXB0eSIsIl9faGFtdF9pc0VtcHR5IiwiaXNFbXB0eU5vZGUiLCJMZWFmIiwiZWRpdCIsIl9tb2RpZnkiLCJMZWFmX19tb2RpZnkiLCJDb2xsaXNpb24iLCJDb2xsaXNpb25fX21vZGlmeSIsIkluZGV4ZWROb2RlIiwibWFzayIsIkluZGV4ZWROb2RlX19tb2RpZnkiLCJBcnJheU5vZGUiLCJBcnJheU5vZGVfX21vZGlmeSIsIm1lcmdlTGVhdmVzIiwiaDEiLCJuMSIsImgyIiwibjIiLCJzdWJIMSIsInN1YkgyIiwiY2FuRWRpdE5vZGUiLCJrZXlFcSIsIl92IiwiX25ld1ZhbHVlIiwibmV3VmFsdWUiLCJ1cGRhdGVDb2xsaXNpb25MaXN0IiwiZnJhZyIsImluZHgiLCJleGlzdHMiLCJjYW5FZGl0IiwibmV3Q2hpbGRyZW4iLCJzdWJOb2RlcyIsImV4cGFuZCIsIl9pIiwiYXJyYXlTcGxpY2VJbiIsIm5ld0NoaWxkIiwiZWxlbWVudHMiLCJlbGVtIiwiZWRpdGFibGUiLCJjb25maWciLCJyb290IiwiX2VkaXRhYmxlIiwiX2VkaXQiLCJfY29uZmlnIiwiX3Jvb3QiLCJfc2l6ZSIsInNldFRyZWUiLCJuZXdSb290IiwibmV3U2l6ZSIsInRyeUdldEhhc2giLCJhbHQiLCJoYXNIYXNoIiwiZGVmS2V5Q29tcGFyZSIsIm1ha2UiLCJpc0VtcHR5IiwibW9kaWZ5SGFzaCIsIm1vZGlmeSIsInNldEhhc2giLCJkZWwiLCJyZW1vdmVIYXNoIiwiZGVsZXRlSGFzaCIsInJlbW92ZSIsImJlZ2luTXV0YXRpb24iLCJlbmRNdXRhdGlvbiIsInRyYW5zaWVudCIsImFwcGsiLCJsYXp5VmlzaXRDaGlsZHJlbiIsImxhenlWaXNpdCIsInJlc3QiLCJET05FIiwiTWFwSXRlcmF0b3IiLCJ2MCIsInZpc2l0IiwiYnVpbGRQYWlycyIsImJ1aWxkS2V5cyIsImJ1aWxkVmFsdWVzIiwiZm9sZCIsInRvVmlzaXQiLCJjcmVhdGVDb21tb25qc01vZHVsZSIsIkJ1aWx0SW5NYXAiLCJleGlzdGluZyIsInBlcnNpc3RlbnRNYXAiLCJIYXNoQXJyYXlNYXBwZWRUcmllTWFwIiwiX2hhbXQiLCJSZWNvaWxfUGVyc2lzdGVudE1hcF8xIiwiUmVjb2lsX2RpZmZlcmVuY2VTZXRzIiwicmV0Iiwic2V0c1dpdGhWYWx1ZXNUb1JlbW92ZSIsIkZJUlNUIiwiUmVjb2lsX21hcE1hcCIsIm1lcmdlRGVwZW5kZW5jeU1hcEludG9HcmFwaCIsImdyYXBoIiwib2xkZXJHcmFwaCIsIm5vZGVEZXBzIiwibm9kZVRvTm9kZVN1YnNjcmlwdGlvbnMiLCJ1cHN0cmVhbXMiLCJkb3duc3RyZWFtIiwiZXhpc3RpbmdVcHN0cmVhbXMiLCJ1cHN0cmVhbSIsIlJlY29pbF9HcmFwaCIsInBlcnNpc3RlbnRNYXAkMSIsImdyYXBoJDEiLCJuZXh0VHJlZVN0YXRlVmVyc2lvbiIsImdldE5leHRUcmVlU3RhdGVWZXJzaW9uIiwiUmVjb2lsX1N0YXRlIiwiY3VycmVudFRyZWUiLCJzdGF0ZUlEIiwidHJhbnNhY3Rpb25NZXRhZGF0YSIsImRpcnR5QXRvbXMiLCJhdG9tVmFsdWVzIiwibm9udmFsaWRhdGVkQXRvbXMiLCJuZXh0VHJlZSIsInByZXZpb3VzVHJlZSIsImNvbW1pdERlcHRoIiwia25vd25BdG9tcyIsImtub3duU2VsZWN0b3JzIiwidHJhbnNhY3Rpb25TdWJzY3JpcHRpb25zIiwibm9kZVRyYW5zYWN0aW9uU3Vic2NyaXB0aW9ucyIsIm5vZGVUb0NvbXBvbmVudFN1YnNjcmlwdGlvbnMiLCJxdWV1ZWRDb21wb25lbnRDYWxsYmFja3NfREVQUkVDQVRFRCIsInN1c3BlbmRlZENvbXBvbmVudFJlc29sdmVycyIsImdyYXBoc0J5VmVyc2lvbiIsInZlcnNpb25zVXNlZEJ5Q29tcG9uZW50IiwicmV0ZW50aW9uIiwicmVmZXJlbmNlQ291bnRzIiwibm9kZXNSZXRhaW5lZEJ5Wm9uZSIsInJldGFpbmFibGVzVG9DaGVja0ZvclJlbGVhc2UiLCJub2RlQ2xlYW51cEZ1bmN0aW9ucyIsIlJlY29pbF91bmlvblNldHMiLCJzZXRzIiwicHJlZGljYXRlIiwiUmVjb2lsX2ZpbHRlckl0ZXJhYmxlIiwiUmV0ZW50aW9uWm9uZSIsIlJlY29pbF9SZXRlbnRpb25ab25lIiwic2V0QnlBZGRpbmdUb1NldCQxIiwiZ2V0Tm9kZSQxIiwiZ2V0Tm9kZU1heWJlJDEiLCJyZWNvaWxWYWx1ZXNGb3JLZXlzJDEiLCJSZXRlbnRpb25ab25lJDEiLCJlbXB0eVNldCIsIlJlYWRPbmx5UmVjb2lsVmFsdWVFcnJvciIsImluaXRpYWxpemVOb2RlSWZOZXdUb1N0b3JlIiwidHJlZVN0YXRlIiwidHJpZ2dlciIsInN0b3JlU3RhdGUiLCJyZXRlbnRpb25DbGVhbnVwIiwibm9kZUtleSIsInJldGFpbmVkQnkiLCJhZGRUb1pvbmUiLCJ6b25lIiwiZGVsZXRlRnJvbVpvbmUiLCJpbml0aWFsaXplUmV0ZW50aW9uRm9yTm9kZSIsIm5vZGVDbGVhbnVwIiwicGVla05vZGVMb2FkYWJsZSIsInBlZWsiLCJnZXREb3duc3RyZWFtTm9kZXMiLCJ2aXNpdGVkTm9kZXMiLCJ2aXNpdGluZ05vZGVzIiwiZ2V0R3JhcGgiLCJfZ3JhcGgkbm9kZVRvTm9kZVN1YnMiLCJkb3duc3RyZWFtTm9kZSIsIlJlY29pbF9GdW5jdGlvbmFsQ29yZSIsIl9zdGF0ZSRub2RlQ2xlYW51cEZ1biIsIl9ncmFwaCRub2RlRGVwcyRnZXQiLCJfc3RvcmVTdGF0ZSRub2RlVG9Db20iLCJfc3RvcmVTdGF0ZSRub2RlVG9Db20yIiwiZG93bnN0cmVhbU5vZGVzIiwibG9hZGFibGUiLCJpc0FjdGl2ZSIsImlzU2V0IiwiaXNNb2RpZmllZCIsInN1YnNjcmliZXJzIiwiY29tcG9uZW50cyIsImdldERvd25zdHJlYW1Ob2RlcyQxIiwiZ2V0Tm9kZUxvYWRhYmxlJDEiLCJzZXROb2RlVmFsdWUkMSIsImdldE5vZGVNYXliZSQyIiwiRGVmYXVsdFZhbHVlJDEiLCJSZWNvaWxWYWx1ZU5vdFJlYWR5JDEiLCJBYnN0cmFjdFJlY29pbFZhbHVlJDEiLCJSZWNvaWxTdGF0ZSQxIiwiUmVjb2lsVmFsdWVSZWFkT25seSQxIiwiaXNSZWNvaWxWYWx1ZSQxIiwiYXBwbHlBY3Rpb24iLCJ2YWx1ZU9yVXBkYXRlciIsInZhbHVlRnJvbVZhbHVlT3JVcGRhdGVyIiwid3JpdGVMb2FkYWJsZVRvVHJlZVN0YXRlIiwiX25vZGUkaW52YWxpZGF0ZSIsInVudmFsaWRhdGVkVmFsdWUiLCJpbnZhbGlkYXRlIiwiYXBwbHlBY3Rpb25zVG9TdG9yZSIsImFjdGlvbnMiLCJyZXBsYWNlU3RhdGUiLCJuZXdTdGF0ZSIsImNvcHlUcmVlU3RhdGUiLCJpbnZhbGlkYXRlRG93bnN0cmVhbXMiLCJxdWV1ZU9yUGVyZm9ybVN0YXRlVXBkYXRlIiwiYmF0Y2hTdGFjayIsImFjdGlvbnNCeVN0b3JlIiwiY2xvbmUiLCJfZ2V0Tm9kZU1heWJlIiwiX2dldE5vZGVNYXliZSRpbnZhbGlkIiwic2V0UmVjb2lsVmFsdWUiLCJzdWJzY3JpcHRpb25JRCIsIlJlY29pbF9SZWNvaWxWYWx1ZUludGVyZmFjZSIsImdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSIsIl9zdG9yZVN0YXRlJG5leHRUcmVlIiwiX3N0b3JlU3RhdGUkcHJldmlvdXNUIiwic2V0UmVjb2lsVmFsdWVMb2FkYWJsZSIsIm1hcmtSZWNvaWxWYWx1ZU1vZGlmaWVkIiwic2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZSIsInN1YnNjcmliZVRvUmVjb2lsVmFsdWUiLCJjb21wb25lbnREZWJ1Z05hbWUiLCJzdWJJRCIsInJlbGVhc2UiLCJzdWJzIiwiYXBwbHlBdG9tVmFsdWVXcml0ZXMiLCJ3cml0ZXMiLCJiYXRjaFN0YXJ0IiwiaW52YWxpZGF0ZURvd25zdHJlYW1zX0ZPUl9URVNUSU5HIiwiUmVjb2lsX3NvbWVTZXQiLCJjbGVhblVwTm9kZSQxIiwiZGVsZXRlTm9kZUNvbmZpZ0lmUG9zc2libGUkMSIsImdldE5vZGUkMiIsIlJldGVudGlvblpvbmUkMiIsImVtcHR5U2V0JDEiLCJyZWxlYXNlUmV0YWluYWJsZXNOb3dPbkN1cnJlbnRUcmVlIiwicmV0YWluYWJsZXMiLCJyZWxlYXNhYmxlTm9kZXMiLCJzZWFyY2hGcm9tTm9kZXMiLCJub25SZWxlYXNhYmxlTm9kZXMiLCJmaW5kUmVsZWFzYWJsZU5vZGVzSW5uZXIiLCJyZWxlYXNhYmxlTm9kZXNGb3VuZFRoaXNJdGVyYXRpb24iLCJkb3duc3RyZWFtcyIsImRvTm90RGVzY2VuZEludG8xIiwiZG9Ob3REZXNjZW5kSW50bzIiLCJhbnN3ZXIiLCJ2aXNpdGVkIiwiZ2V0RG93bnN0cmVhbU5vZGVzSW5Ub3BvbG9naWNhbE9yZGVyIiwiX3N0b3JlU3RhdGUkcmV0ZW50aW9uIiwiem9uZXNUaGF0Q291bGRSZXRhaW5Ob2RlIiwibm9kZUNoaWxkcmVuIiwicGFyZW50cyIsImZpbmRSZWxlYXNhYmxlTm9kZXMiLCJyZWxlYXNlTm9kZSIsIl9zdG9yZVN0YXRlJHJldGVudGlvbjIiLCJkZXAiLCJfc3RvcmVTdGF0ZSRyZXRlbnRpb24zIiwiUmVjb2lsX1JldGVudGlvbiIsInJldGFpbmFibGUiLCJfbWFwJGdldCIsIm5ld0NvdW50Iiwic2NoZWR1bGVPclBlcmZvcm1Qb3NzaWJsZVJlbGVhc2VPZlJldGFpbmFibGUiLCJ1cGRhdGVSZXRhaW5Db3VudFRvWmVybyIsIml0ZXJzIiwiUmVjb2lsX2NvbmNhdEl0ZXJhYmxlcyIsIlJlY29pbF9FbnZpcm9ubWVudCIsImlzU1NSIiwiaXNSZWFjdE5hdGl2ZSIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJyZWFjdERvbSIsImJhdGNoU3RhcnQkMSIsImJhdGNoZXIiLCJSZWNvaWxfQmF0Y2hpbmciLCJiYXRjaEVuZCIsImlzU1NSJDEiLCJiYXRjaFVwZGF0ZXMkMSIsImluaXRpYWxpemVOb2RlSWZOZXdUb1N0b3JlJDEiLCJwZWVrTm9kZUluZm8kMSIsImdyYXBoJDIiLCJERUZBVUxUX1ZBTFVFJDEiLCJyZWNvaWxWYWx1ZXMkMSIsInJlY29pbFZhbHVlc0ZvcktleXMkMiIsIkFic3RyYWN0UmVjb2lsVmFsdWUkMiIsImdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQxIiwic2V0UmVjb2lsVmFsdWUkMSIsInNldFVudmFsaWRhdGVkUmVjb2lsVmFsdWUkMSIsInVwZGF0ZVJldGFpbkNvdW50JDEiLCJnZXROZXh0VHJlZVN0YXRlVmVyc2lvbiQxIiwibWFrZUVtcHR5U3RvcmVTdGF0ZSQxIiwiU25hcHNob3QiLCJjaGVja1JlZkNvdW50X0lOVEVSTkFMIiwiX3N0b3JlIiwiZ2V0TG9hZGFibGUiLCJ0b1Byb21pc2UiLCJvcHQiLCJpc0luaXRpYWxpemVkIiwibWFwcGVyIiwibXV0YWJsZVNuYXBzaG90IiwiTXV0YWJsZVNuYXBzaG90IiwiY2xvbmVTbmFwc2hvdCIsImdldFN0b3JlX0lOVEVSTkFMIiwiZ3JhcGhzIiwibmV3R3JhcGgiLCJzdWJzY3JpYmVUb1RyYW5zYWN0aW9ucyIsImFkZFRyYW5zYWN0aW9uTWV0YWRhdGEiLCJyZXRhaW4iLCJhdXRvcmVsZWFzZV9JTlRFUk5BTCIsIl9yZWZDb3VudCIsInJlbGVhc2VkIiwicmVsZWFzZV9JTlRFUk5BTCIsImdldElEX0lOVEVSTkFMIiwiY2xvbmVTdG9yZVN0YXRlIiwiYnVtcFZlcnNpb24iLCJzbmFwc2hvdCIsImJhdGNoIiwicmVjb2lsU3RhdGUiLCJuZXdWYWx1ZU9yVXBkYXRlciIsIl9iYXRjaCIsIlJlY29pbF9TbmFwc2hvdCIsImZyZXNoU25hcHNob3QiLCJpbml0aWFsaXplU3RhdGUiLCJSZWNvaWxfU25hcHNob3RfMSIsIlJlY29pbF9TbmFwc2hvdF8yIiwiUmVjb2lsX1NuYXBzaG90XzMiLCJSZWNvaWxfU25hcHNob3RfNCIsIlJlY29pbF9TbmFwc2hvdCQxIiwiZ2V0TmV4dFRyZWVTdGF0ZVZlcnNpb24kMiIsIm1ha2VFbXB0eVN0b3JlU3RhdGUkMiIsImNsZWFuVXBOb2RlJDIiLCJnZXREb3duc3RyZWFtTm9kZXMkMiIsInNldE5vZGVWYWx1ZSQyIiwic2V0VW52YWxpZGF0ZWRBdG9tVmFsdWVfREVQUkVDQVRFRCQxIiwiZ3JhcGgkMyIsImNsb25lR3JhcGgkMSIsImFwcGx5QXRvbVZhbHVlV3JpdGVzJDEiLCJyZWxlYXNlU2NoZWR1bGVkUmV0YWluYWJsZXNOb3ckMSIsImZyZXNoU25hcHNob3QkMSIsIm5vdEluQUNvbnRleHQiLCJkZWZhdWx0U3RvcmUiLCJzdGF0ZVJlcGxhY2VySXNCZWluZ0V4ZWN1dGVkIiwic3RhcnROZXh0VHJlZUlmTmVlZGVkIiwibmV4dFZlcnNpb24iLCJBcHBDb250ZXh0IiwidXNlU3RvcmVSZWYiLCJNdXRhYmxlU291cmNlQ29udGV4dCIsIm5vdGlmeUNvbXBvbmVudHMiLCJjb21wcyIsIkJhdGNoZXIiLCJzZXROb3RpZnlCYXRjaGVyT2ZDaGFuZ2UiLCJzdG9yZVJlZiIsInN1YnNjcmlwdGlvbnMiLCJzdWJzY3JpcHRpb24iLCJzZW5kRW5kT2ZCYXRjaE5vdGlmaWNhdGlvbnMiLCJlbmRCYXRjaCIsIm5leHRJRCIsIlJlY29pbFJvb3RfSU5URVJOQUwiLCJfY3JlYXRlTXV0YWJsZVNvdXJjZSIsImluaXRpYWxpemVTdGF0ZV9ERVBSRUNBVEVEIiwic3RvcmVQcm9wIiwic3RvcmVfSU5URVJOQUwiLCJub3RpZnlCYXRjaGVyT2ZDaGFuZ2UiLCJjcmVhdGVNdXRhYmxlU291cmNlIiwidW5zdGFibGVfY3JlYXRlTXV0YWJsZVNvdXJjZSIsInJlcGxhY2VkIiwiaW5pdGlhbCIsImF0b20iLCJ3cml0dGVuTm9kZXMiLCJzZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXMiLCJpbml0aWFsU3RvcmVTdGF0ZV9ERVBSRUNBVEVEIiwiaW5pdGlhbFN0b3JlU3RhdGUiLCJtdXRhYmxlU291cmNlIiwiYXRvbUtleSIsIlJlY29pbF9SZWNvaWxSb290X3JlYWN0Iiwib3ZlcnJpZGUiLCJwcm9wc0V4Y2VwdE92ZXJyaWRlIiwiYW5jZXN0b3JTdG9yZVJlZiIsInVzZVJlZiQxIiwiUmVjb2lsX3VzZUNvbXBvbmVudE5hbWUiLCJ1c2VFZmZlY3QkMSIsInVzZVJlZiQyIiwiUmVjb2lsX3VzZVByZXZpb3VzIiwidXNlU3RvcmVSZWYkMSIsInVwZGF0ZVJldGFpbkNvdW50JDIiLCJSZXRlbnRpb25ab25lJDMiLCJpc1NTUiQyIiwidXNlRWZmZWN0JDIiLCJ1c2VSZWYkMyIsIlJlY29pbF91c2VSZXRhaW4iLCJ0b1JldGFpbiIsInRpbWVvdXRJRCIsInByZXZpb3VzUmV0YWluYWJsZXMiLCJSZWNvaWxfc2hhbGxvd0FycmF5RXF1YWwiLCJ1c2VSZXRhaW5fQUNUVUFMIiwiYmF0Y2hVcGRhdGVzJDIiLCJERUZBVUxUX1ZBTFVFJDIiLCJ1c2VSZWNvaWxNdXRhYmxlU291cmNlJDEiLCJ1c2VTdG9yZVJlZiQyIiwiQWJzdHJhY3RSZWNvaWxWYWx1ZSQzIiwiZ2V0UmVjb2lsVmFsdWVBc0xvYWRhYmxlJDIiLCJzZXRSZWNvaWxWYWx1ZSQyIiwic2V0VW52YWxpZGF0ZWRSZWNvaWxWYWx1ZSQyIiwic3Vic2NyaWJlVG9SZWNvaWxWYWx1ZSQxIiwibXV0YWJsZVNvdXJjZUV4aXN0cyQyIiwidXNlTXV0YWJsZVNvdXJjZSQxIiwidXNlQ2FsbGJhY2skMSIsInVzZUVmZmVjdCQzIiwidXNlUmVmJDQiLCJ1c2VTdGF0ZSQxIiwidXNlUmVjb2lsVmFsdWVMb2FkYWJsZSIsIl9zdG9yZVN0YXRlJG5leHRUcmVlMiIsImdldExvYWRhYmxlV2l0aFRlc3RpbmciLCJjb21wb25lbnROYW1lIiwiX3N0b3JlU3RhdGUiLCJuZXdMb2FkYWJsZSIsInByZXZMb2FkYWJsZVJlZiIsInVzZVJlY29pbFZhbHVlTG9hZGFibGVfTVVUQUJMRVNPVVJDRSIsIl9zdGF0ZSIsIl9wcmV2TG9hZGFibGVSZWYkY3VyciIsIl9wcmV2TG9hZGFibGVSZWYkY3VycjIiLCJ1c2VSZWNvaWxWYWx1ZUxvYWRhYmxlX0xFR0FDWSIsInVzZVJlY29pbFZhbHVlIiwiaGFuZGxlTG9hZGFibGUiLCJ1c2VTZXRSZWNvaWxTdGF0ZSIsIlJlY29pbF9Ib29rcyIsImJhdGNoVXBkYXRlcyQzIiwiREVGQVVMVF9WQUxVRSQzIiwiZ2V0Tm9kZSQzIiwibm9kZXMkMSIsInVzZVN0b3JlUmVmJDMiLCJBYnN0cmFjdFJlY29pbFZhbHVlJDQiLCJzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDEiLCJjbG9uZVNuYXBzaG90JDEiLCJpc1NTUiQzIiwidXNlQ2FsbGJhY2skMiIsInVzZUVmZmVjdCQ0IiwidXNlUmVmJDUiLCJ1c2VTdGF0ZSQyIiwidXNlVHJhbnNhY3Rpb25TdWJzY3JpcHRpb24iLCJleHRlcm5hbGx5VmlzaWJsZUF0b21WYWx1ZXNJblN0YXRlIiwidG9NYXAiLCJwZXJzaXN0ZWRBdG9tQ29udGVudHNWYWx1ZXMiLCJSZWNvaWxfZmlsdGVyTWFwIiwicGVyc2lzdGVuY2UiLCJwZXJzaXN0ZW5jZV9VTlNUQUJMRSIsIm1hcHMiLCJuZXh0S2V5IiwiUmVjb2lsX21lcmdlTWFwcyIsIlJlY29pbF9TbmFwc2hvdEhvb2tzIiwia2V5c1RvVXBkYXRlIiwiX3ByZXYkYXRvbVZhbHVlcyRnZXQiLCJfbmV4dCRhdG9tVmFsdWVzJGdldCIsInNob3VsZFJlc3RvcmVGcm9tU25hcHNob3RzIiwicGVla05vZGVJbmZvJDIiLCJ1c2VTdG9yZVJlZiQ0IiwiUmVjb2lsUm9vdCQxIiwidXNlU3RvcmVSZWYkNSIsInVzZU1lbW8kMiIsImxvYWRhYmxlV2l0aFZhbHVlJDEiLCJERUZBVUxUX1ZBTFVFJDQiLCJnZXROb2RlJDQiLCJjb3B5VHJlZVN0YXRlJDEiLCJnZXRSZWNvaWxWYWx1ZUFzTG9hZGFibGUkMyIsImludmFsaWRhdGVEb3duc3RyZWFtcyQxIiwid3JpdGVMb2FkYWJsZVRvVHJlZVN0YXRlJDEiLCJpc0F0b20iLCJub2RlVHlwZSIsIlRyYW5zYWN0aW9uSW50ZXJmYWNlSW1wbCIsIl9jaGFuZ2VzIiwiX3RyZWVTdGF0ZSIsIlJlY29pbF9BdG9taWNVcGRhdGVzJDEiLCJhdG9taWNVcGRhdGVyIiwiY2hhbmdlc2V0IiwibmV3VHJlZVN0YXRlX0lOVEVSTkFMIiwiUmVjb2lsX2ludmFyaWFudCIsImF0b21pY1VwZGF0ZXIkMSIsImJhdGNoVXBkYXRlcyQ0IiwiREVGQVVMVF9WQUxVRSQ1IiwidXNlU3RvcmVSZWYkNiIsInNldFJlY29pbFZhbHVlJDMiLCJjbG9uZVNuYXBzaG90JDIiLCJ1c2VHb3RvUmVjb2lsU25hcHNob3QkMSIsInVzZUNhbGxiYWNrJDMiLCJTZW50aW5lbCIsIlNFTlRJTkVMIiwiZ2V0Tm9kZSQ1IiwidXNlU3RvcmVSZWYkNyIsInVzZUNhbGxiYWNrJDQiLCJhdG9taWNVcGRhdGVyJDIiLCJ1c2VTdG9yZVJlZiQ4IiwidXNlTWVtbyQzIiwiYWxsb3dGdW5jdGlvbnMiLCJfSlNPTiRzdHJpbmdpZnkiLCJsb2NhbGVDb21wYXJlIiwiUmVjb2lsX3N0YWJsZVN0cmluZ2lmeSIsIlRyZWVDYWNoZSIsIl9vcHRpb25zJG9uSGl0IiwiX29wdGlvbnMkb25TZXQiLCJfb3B0aW9ucyRtYXBOb2RlVmFsdWUiLCJfbnVtTGVhZnMiLCJfb25IaXQiLCJvbkhpdCIsIl9vblNldCIsIm9uU2V0IiwiX21hcE5vZGVWYWx1ZSIsIm1hcE5vZGVWYWx1ZSIsImdldE5vZGVWYWx1ZSIsImhhbmRsZXJzIiwiX3RoaXMkZ2V0TGVhZk5vZGUiLCJnZXRMZWFmTm9kZSIsImZpbmRMZWFmIiwib25Ob2RlVmlzaXQiLCJyb3V0ZSIsImxlYWZOb2RlIiwic2V0UmV0cnlhYmxlUGFydCIsImFkZExlYWYiLCJub2RlVmFsdWUiLCJwcnVuZU5vZGVGcm9tVHJlZSIsImJyYW5jaGVzIiwiY291bnREb3duc3RyZWFtTGVhdmVzIiwiX2hhbmRsZXJzJG9uTm9kZVZpc2l0IiwiYnJhbmNoS2V5Iiwib25BYm9ydCIsIl9oYW5kbGVycyRvbk5vZGVWaXNpdDIiLCJwcnVuZVVwc3RyZWFtQnJhbmNoZXMiLCJicmFuY2hOb2RlIiwic3VtIiwiY3Vyck5vZGUiLCJSZWNvaWxfVHJlZUNhY2hlXzEiLCJSZWNvaWxfVHJlZUNhY2hlJDEiLCJSZWNvaWxfTFJVQ2FjaGVfMSIsIkxSVUNhY2hlIiwiX29wdGlvbnMkbWFwS2V5IiwiX21heFNpemUiLCJtYXhTaXplIiwiX2hlYWQiLCJfdGFpbCIsIl9rZXlNYXBwZXIiLCJtYXBLZXkiLCJtYXBwZWRLZXkiLCJfbWF5YmVEZWxldGVMUlUiLCJkZWxldGVMcnUiLCJSZWNvaWxfTFJVQ2FjaGUkMSIsIkxSVUNhY2hlJDEiLCJUcmVlQ2FjaGUkMSIsIlJlY29pbF90cmVlQ2FjaGVMUlUiLCJscnVDYWNoZSIsImNhY2hlIiwibHJ1Tm9kZSIsIlRyZWVDYWNoZSQyIiwiZGVmYXVsdFBvbGljeSIsImVxdWFsaXR5IiwiZXZpY3Rpb24iLCJnZXRWYWx1ZU1hcHBlciIsImdldFRyZWVDYWNoZSIsImV4ZWN1dGlvbklkIiwibG9hZGFibGVXaXRoRXJyb3IkMSIsImxvYWRhYmxlV2l0aFByb21pc2UkMSIsImxvYWRhYmxlV2l0aFZhbHVlJDIiLCJnZXROb2RlTG9hZGFibGUkMiIsInBlZWtOb2RlTG9hZGFibGUkMSIsInNldE5vZGVWYWx1ZSQzIiwic2F2ZURlcGVuZGVuY3lNYXBUb1N0b3JlJDEiLCJkZXBlbmRlbmN5TWFwIiwiX3N0b3JlU3RhdGUkcHJldmlvdXNUMiIsIl9zdG9yZVN0YXRlJHByZXZpb3VzVDMiLCJERUZBVUxUX1ZBTFVFJDYiLCJSZWNvaWxWYWx1ZU5vdFJlYWR5JDIiLCJnZXRDb25maWdEZWxldGlvbkhhbmRsZXIkMSIsImdldE5vZGUkNiIsInJlZ2lzdGVyTm9kZSQxIiwiaXNSZWNvaWxWYWx1ZSQzIiwiQWJzdHJhY3RSZWNvaWxWYWx1ZSQ1IiwibWFya1JlY29pbFZhbHVlTW9kaWZpZWQkMSIsInNldFJlY29pbFZhbHVlTG9hZGFibGUkMiIsInJldGFpbmVkQnlPcHRpb25XaXRoRGVmYXVsdCQxIiwiY2xvbmVTbmFwc2hvdCQzIiwic3RhcnRQZXJmQmxvY2skMSIsIl9pZCIsIkNhbmNlbGVkIiwiQ0FOQ0VMRUQiLCJkZXBlbmRlbmN5U3RhY2siLCJ3YWl0aW5nU3RvcmVzIiwiZ2V0TmV3RXhlY3V0aW9uSWQiLCJSZWNvaWxfc2VsZWN0b3IiLCJjYWNoZVBvbGljeSIsImNhY2hlUG9saWN5X1VOU1RBQkxFIiwiZGlzY292ZXJlZERlcGVuZGVuY3lOb2RlS2V5cyIsInZhbHVlTWFwcGVyIiwiUmVjb2lsX3RyZWVDYWNoZUZyb21Qb2xpY3kiLCJyZXRhaW5lZEJ5X1VOU1RBQkxFIiwiZXhlY3V0aW9uSW5mb01hcCIsImxpdmVTdG9yZXNDb3VudCIsInNlbGVjdG9ySXNMaXZlIiwiZ2V0RXhlY3V0aW9uSW5mbyIsImRlcFZhbHVlc0Rpc2NvdmVyZWRTb0ZhckR1cmluZ0FzeW5jV29yayIsImxhdGVzdExvYWRhYmxlIiwibGF0ZXN0RXhlY3V0aW9uSWQiLCJzdGF0ZVZlcnNpb24iLCJzZWxlY3RvckluaXQiLCJzZWxlY3RvclNob3VsZERlbGV0ZUNvbmZpZ09uUmVsZWFzZSIsIm5vdGlmeVN0b3JlV2hlbkFzeW5jU2V0dGxlcyIsInN0b3JlcyIsImdldENhY2hlZE5vZGVMb2FkYWJsZSIsImlzS2V5UG9pbnRpbmdUb1NlbGVjdG9yIiwid3JhcFBlbmRpbmdEZXBlbmRlbmN5UHJvbWlzZSIsImV4aXN0aW5nRGVwcyIsImxvYWRpbmdEZXBzU3RhdGUiLCJyZXNvbHZlZERlcCIsImNsZWFyRXhlY3V0aW9uSW5mbyIsImxvYWRpbmdEZXBLZXkiLCJsb2FkaW5nRGVwUHJvbWlzZSIsImNhY2hlZExvYWRhYmxlIiwiZ2V0VmFsRnJvbUNhY2hlQW5kVXBkYXRlZERvd25zdHJlYW1EZXBzIiwic2V0RXhlY3V0aW9uSW5mbyIsImlzTGF0ZXN0RXhlY3V0aW9uIiwiX2V4ZWN1dGlvbkluZm8kbGF0ZXN0IiwiZXhlY3V0aW9uSW5mbyIsImdldEV4ZWN1dGlvbkluZm9PZkluUHJvZ3Jlc3NFeGVjdXRpb24iLCJldmFsdWF0ZVNlbGVjdG9yR2V0dGVyIiwiZGVwVmFsdWVzIiwidXBkYXRlRXhlY3V0aW9uSW5mb0RlcFZhbHVlcyIsInNldENhY2hlIiwiZGVwVmFsdWVzVG9EZXBSb3V0ZSIsInNldERlcHNJblN0b3JlIiwic2V0TG9hZGFibGVJblN0b3JlVG9Ob3RpZnlEZXBzIiwibWF5YmVGcmVlemVWYWx1ZSIsIm5vdGlmeVN0b3Jlc09mU2V0dGxlZEFzeW5jIiwiX3N0b3JlJGdldFN0YXRlIiwiX3N0b3JlJGdldFN0YXRlJGN1cnJlIiwiX3N0b3JlJGdldFN0YXRlMiIsIl9zdG9yZSRnZXRTdGF0ZTIkbmV4dCIsIl9zdG9yZSRnZXRTdGF0ZSRuZXh0VCIsIl9zdG9yZSRnZXRTdGF0ZTMiLCJfc3RvcmUkZ2V0U3RhdGUzJG5leHQiLCJlbmRQZXJmQmxvY2siLCJyZXN1bHRJc0Vycm9yIiwiZ2V0UmVjb2lsVmFsdWUiLCJkZXBLZXkiLCJuZXdEZXBLZXkiLCJzZXROZXdEZXBJblN0b3JlIiwiZGVwTG9hZGFibGUiLCJnYXRlQ2FsbGJhY2siLCJnZXRDYWxsYmFjayIsImVycm9yT3JQcm9taXNlIiwid3JhcFBlbmRpbmdQcm9taXNlIiwiZmluYWxseSIsImVycm9yT3JEZXBQcm9taXNlIiwiY2FjaGVkVmFsIiwiZGVwc0FmdGVyQ2FjaGVEb25lIiwiX0FycmF5JGZyb20kZmluZCIsImV4ZWNJbmZvIiwiX2V4ZWN1dGlvbkluZm8kZGVwVmFsIiwiX21hcE9mQ2hlY2tlZFZlcnNpb25zIiwib2xkRGVwVmFsdWVzIiwiY2FjaGVkRGVwVmFsdWVzQ2hlY2tlZEZvclRoaXNWZXJzaW9uIiwibWFwT2ZDaGVja2VkVmVyc2lvbnMiLCJpc0NhY2hlZFZlcnNpb25TYW1lIiwibm9kZVZhbCIsIm9sZFZhbCIsImhhdmVBc3luY0RlcHNDaGFuZ2VkIiwibmV3RXhlY3V0aW9uSWQiLCJjYWNoZVJvdXRlIiwic2VsZWN0b3JQZWVrIiwic2VsZWN0b3JHZXQiLCJpblByb2dyZXNzRXhlY3V0aW9uSW5mbyIsIm5ld0RlcFZhbHVlcyIsImRlcFJvdXRlIiwibWF5YmVTZXRDYWNoZVdpdGhMb2FkYWJsZSIsImdldFZhbEZyb21SdW5uaW5nTmV3RXhlY3V0aW9uQW5kVXBkYXRlZERlcHMiLCJnZXRTZWxlY3RvclZhbEFuZFVwZGF0ZWREZXBzIiwiZGV0ZWN0Q2lyY3VsYXJEZXBlbmRlbmNpZXMiLCJpbnZhbGlkYXRlU2VsZWN0b3IiLCJjbGVhclNlbGVjdG9yQ2FjaGUiLCJfbm9kZSRjbGVhckNhY2hlIiwiY2xlYXJDYWNoZSIsInN5bmNTZWxlY3RvclNldEZpbmlzaGVkIiwic2V0UmVjb2lsU3RhdGUiLCJkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eSIsImxvYWRhYmxlV2l0aEVycm9yJDIiLCJsb2FkYWJsZVdpdGhQcm9taXNlJDIiLCJsb2FkYWJsZVdpdGhWYWx1ZSQzIiwicGVla05vZGVJbmZvJDMiLCJERUZBVUxUX1ZBTFVFJDciLCJEZWZhdWx0VmFsdWUkMiIsImdldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQyIiwicmVnaXN0ZXJOb2RlJDIiLCJzZXRDb25maWdEZWxldGlvbkhhbmRsZXIkMSIsImlzUmVjb2lsVmFsdWUkNCIsImdldFJlY29pbFZhbHVlQXNMb2FkYWJsZSQ0IiwibWFya1JlY29pbFZhbHVlTW9kaWZpZWQkMiIsInNldFJlY29pbFZhbHVlJDQiLCJzZXRSZWNvaWxWYWx1ZUxvYWRhYmxlJDMiLCJyZXRhaW5lZEJ5T3B0aW9uV2l0aERlZmF1bHQkMiIsIlJlY29pbF9hdG9tIiwib3B0aW9uc0RlZmF1bHQiLCJyZXN0T3B0aW9ucyIsInZhbGlkYXRvciIsInN0b3JlZFZhbHVlIiwiZWZmZWN0c19VTlNUQUJMRSIsInNlbCIsImJhc2VWYWx1ZSIsImF0b21XaXRoRmFsbGJhY2siLCJkZWZhdWx0TG9hZGFibGUiLCJjYWNoZWRBbnN3ZXJGb3JVbnZhbGlkYXRlZFZhbHVlIiwiY2xlYW51cEVmZmVjdHNCeVN0b3JlIiwiX3JlZiIsIl9zdGF0ZSRhdG9tVmFsdWVzJGdldDMiLCJub252YWxpZGF0ZWRWYWx1ZSIsInZhbGlkYXRvclJlc3VsdCIsInZhbGlkYXRlZFZhbHVlTG9hZGFibGUiLCJpbml0U3RhdGUiLCJhbHJlYWR5S25vd24iLCJub3RpZnlEZWZhdWx0U3Vic2NyaWJlcnMiLCJfc3RvcmUkZ2V0U3RhdGUkbmV4dFQzIiwiaW5pdFZhbHVlIiwicGVuZGluZ1NldFNlbGYiLCJkdXJpbmdJbml0IiwicmV0VmFsdWUiLCJnZXRQcm9taXNlIiwiZ2V0SW5mb19VTlNUQUJMRSIsIl9zdG9yZSRnZXRTdGF0ZSRuZXh0VDQiLCJzZXRTZWxmIiwiZWZmZWN0IiwicmVzZXRTZWxmIiwiY3VycmVudFN0b3JlIiwiX2N1cnJlbnRUcmVlJGF0b21WYWx1IiwiX3ByZXZpb3VzVHJlZSRhdG9tVmFsIiwiX3BlbmRpbmdTZXRTZWxmIiwiX3BlbmRpbmdTZXRTZWxmMiIsIl9wZW5kaW5nU2V0U2VsZjMiLCJvbGRMb2FkYWJsZSIsIm9sZFZhbHVlIiwiX29wdGlvbnMkZWZmZWN0c19VTlNUIiwiX2NsZWFudXBFZmZlY3RzQnlTdG9yIiwiY2xlYW51cCIsIl9zdG9yZSRnZXRTdGF0ZSRuZXh0VDUiLCJmcm96ZW5Jbml0VmFsdWUiLCJpbml0TG9hZGFibGUiLCJ3cmFwcGVkUHJvbWlzZSIsIl9zdGF0ZSRhdG9tVmFsdWVzJGdldCIsIl9zdG9yZSRnZXRTdGF0ZSRuZXh0VDIiLCJfc3RhdGUkYXRvbVZhbHVlcyRnZXQyIiwiX2NsZWFudXBFZmZlY3RzQnlTdG9yMiIsImJhY2tCdXR0b24iLCJiYXNlQXRvbSIsIlJlY29pbF9NYXBDYWNoZV8xIiwiTWFwQ2FjaGUiLCJSZWNvaWxfTWFwQ2FjaGUkMSIsIkxSVUNhY2hlJDIiLCJNYXBDYWNoZSQxIiwiZGVmYXVsdFBvbGljeSQxIiwiZ2V0VmFsdWVNYXBwZXIkMSIsImdldENhY2hlIiwiUmVjb2lsX2NhY2hlRnJvbVBvbGljeSIsInNldENvbmZpZ0RlbGV0aW9uSGFuZGxlciQyIiwic2V0Q29uZmlnRGVsZXRpb25IYW5kbGVyJDMiLCJuZXh0SW5kZXgiLCJSZWNvaWxfc2VsZWN0b3JGYW1pbHkiLCJfb3B0aW9ucyRjYWNoZVBvbGljeUYiLCJfb3B0aW9ucyRjYWNoZVBvbGljeUYyIiwic2VsZWN0b3JDYWNoZSIsImNhY2hlUG9saWN5Rm9yUGFyYW1zX1VOU1RBQkxFIiwiX3N0YWJsZVN0cmluZ2lmeSIsImNhY2hlZFNlbGVjdG9yIiwibmV3U2VsZWN0b3IiLCJteUtleSIsIm15R2V0IiwiY2FsbGJhY2tzIiwibXlDYWNoZVBvbGljeSIsImNvbnN0YW50U2VsZWN0b3IiLCJ0aHJvd2luZ1NlbGVjdG9yIiwibG9hZGFibGVXaXRoRXJyb3IkMyIsImxvYWRhYmxlV2l0aFByb21pc2UkMyIsImxvYWRhYmxlV2l0aFZhbHVlJDQiLCJjb25jdXJyZW50UmVxdWVzdHMiLCJleGNlcHRpb25zIiwiaXNFcnJvciIsImV4cCIsInVud3JhcERlcGVuZGVuY2llcyIsImRlcGVuZGVuY2llcyIsIndyYXBSZXN1bHRzIiwid3JhcExvYWRhYmxlcyIsIndhaXRGb3JOb25lIiwid2FpdEZvckFueSIsIlJlY29pbF9XYWl0Rm9yIiwid2FpdEZvckFsbCIsImV4Y2VwdGlvblJlc3VsdHMiLCJzeW5jUmVzdWx0cyIsIndhaXRGb3JBbGxTZXR0bGVkIiwibm9XYWl0IiwiZGVwZW5kZW5jeSIsIkRlZmF1bHRWYWx1ZSQzIiwiUmVjb2lsUm9vdCQyIiwiaXNSZWNvaWxWYWx1ZSQ1IiwicmV0ZW50aW9uWm9uZSQxIiwiZnJlc2hTbmFwc2hvdCQyIiwiUmVjb2lsX2luZGV4IiwiUmVjb2lsUm9vdCIsInVzZVJlY29pbEJyaWRnZUFjcm9zc1JlYWN0Um9vdHNfVU5TVEFCTEUiLCJzZWxlY3RvciIsImF0b21GYW1pbHkiLCJhdG9tQ2FjaGUiLCJjYWNoZWRBdG9tIiwiYXRvbU9wdGlvbnMiLCJuZXdBdG9tIiwic2VsZWN0b3JGYW1pbHkiLCJjb25zdFNlbGVjdG9yIiwiZXJyb3JTZWxlY3RvciIsInJlYWRPbmx5U2VsZWN0b3IiLCJ1c2VSZWNvaWxTdGF0ZSIsInVzZVJlY29pbFN0YXRlTG9hZGFibGUiLCJ1c2VSZXNldFJlY29pbFN0YXRlIiwidXNlR2V0UmVjb2lsVmFsdWVJbmZvX1VOU1RBQkxFIiwidXNlUmVjb2lsUmVmcmVzaGVyX1VOU1RBQkxFIiwidXNlUmVjb2lsQ2FsbGJhY2siLCJnb3RvU25hcHNob3QiLCJhdG9taWNVcGRhdGUiLCJlcnJNc2ciLCJ0cmFuc2FjdF9VTlNUQUJMRSIsInVzZVJlY29pbFRyYW5zYWN0aW9uX1VOU1RBQkxFIiwidHJhbnNhY3Rpb25JbnRlcmZhY2UiLCJ1c2VHb3RvUmVjb2lsU25hcHNob3QiLCJ1c2VSZWNvaWxTbmFwc2hvdCIsInByZXZpb3VzU25hcHNob3QiLCJ1c2VSZWNvaWxUcmFuc2FjdGlvbk9ic2VydmVyX1VOU1RBQkxFIiwidXNlVHJhbnNhY3Rpb25PYnNlcnZhdGlvbl9VTlNUQUJMRSIsInByZXZpb3VzQXRvbVZhbHVlcyIsImF0b21JbmZvIiwiX25vZGUkcGVyc2lzdGVuY2VfVU5TIiwiX25vZGUkcGVyc2lzdGVuY2VfVU5TMiIsIl9ub2RlJHBlcnNpc3RlbmNlX1VOUzMiLCJfbm9kZSRwZXJzaXN0ZW5jZV9VTlM0IiwibW9kaWZpZWRBdG9tcyIsIlJlY29pbF9maWx0ZXJTZXQiLCJ1c2VTZXRVbnZhbGlkYXRlZEF0b21WYWx1ZXNfVU5TVEFCTEUiLCJzbmFwc2hvdF9VTlNUQUJMRSIsInVzZVJldGFpbiIsInJldGVudGlvblpvbmUiLCJSZWNvaWxfaW5kZXhfNCIsIlJlY29pbF9pbmRleF82IiwiUmVjb2lsX2luZGV4XzciLCJSZWNvaWxfaW5kZXhfMTgiLCJSZWNvaWxfaW5kZXhfMjIiLCJfZXh0ZW5kcyIsIk5hdmlnYXRpb25Db250ZXh0IiwiUmVhY3QiLCJMb2NhdGlvbkNvbnRleHQiLCJSb3V0ZUNvbnRleHQiLCJvdXRsZXQiLCJtYXRjaGVzIiwiTmF2aWdhdGUiLCJ1c2VJblJvdXRlckNvbnRleHQiLCJuYXZpZ2F0ZSIsInVzZU5hdmlnYXRlIiwiT3V0bGV0IiwiX3Byb3BzIiwiUm91dGUiLCJiYXNlbmFtZSIsImJhc2VuYW1lUHJvcCIsIm5hdmlnYXRpb25UeXBlIiwiTmF2aWdhdGlvblR5cGUiLCJzdGF0aWMiLCJzdGF0aWNQcm9wIiwibm9ybWFsaXplUGF0aG5hbWUiLCJuYXZpZ2F0aW9uQ29udGV4dCIsImxvY2F0aW9uUHJvcCIsInBhcnNlUGF0aCIsInRyYWlsaW5nUGF0aG5hbWUiLCJzdHJpcEJhc2VuYW1lIiwiUm91dGVzIiwicGFyZW50TWF0Y2hlcyIsInJvdXRlTWF0Y2giLCJwYXJlbnRQYXJhbXMiLCJwYXJlbnRQYXRobmFtZUJhc2UiLCJsb2NhdGlvbkZyb21Db250ZXh0IiwidXNlTG9jYXRpb24iLCJwYXJzZWRMb2NhdGlvbkFyZyIsImxvY2F0aW9uQXJnIiwiZmxhdHRlblJvdXRlcyIsInNpYmxpbmdzIiwiY29tcGFyZUluZGV4ZXMiLCJyYW5rUm91dGVCcmFuY2hlcyIsIm1hdGNoUm91dGVCcmFuY2giLCJtYXRjaFJvdXRlcyIsInJvdXRlcyIsIlJlYWN0LmNyZWF0ZUVsZW1lbnQiLCJfcmVuZGVyTWF0Y2hlcyIsImpvaW5QYXRocyIsInBhdGhuYW1lQmFzZSIsInVzZVJvdXRlcyIsImNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiIsImxvY2F0aW9uUGF0aG5hbWUiLCJyb3V0ZVBhdGhuYW1lc0pzb24iLCJhY3RpdmVSZWYiLCJ0b0FyZyIsInRvUGF0aG5hbWUiLCJyb3V0ZVBhdGhuYW1lSW5kZXgiLCJyb3V0ZVBhdGhuYW1lcyIsInRvU2VnbWVudHMiLCJmcm9tUGF0aG5hbWUiLCJyZWxhdGl2ZVBhdGgiLCJzZWdtZW50cyIsInJlbGF0aXZlU2VnbWVudHMiLCJyZXNvbHZlUGF0aG5hbWUiLCJub3JtYWxpemVTZWFyY2giLCJub3JtYWxpemVIYXNoIiwicmVzb2x2ZVBhdGgiLCJyZXNvbHZlVG8iLCJjYXNlU2Vuc2l0aXZlIiwicGFyZW50c01ldGEiLCJwYXJlbnRQYXRoIiwiY2hpbGRyZW5JbmRleCIsInJvdXRlc01ldGEiLCJzY29yZSIsImNvbXB1dGVTY29yZSIsInBhcmFtUmUiLCJpc1NwbGF0IiwiaW5pdGlhbFNjb3JlIiwibWF0Y2hlZFBhcmFtcyIsIm1hdGNoZWRQYXRobmFtZSIsInJlbWFpbmluZ1BhdGhuYW1lIiwibWF0Y2hQYXRoIiwicGFyYW1OYW1lcyIsInJlZ2V4cFNvdXJjZSIsImNvbXBpbGVQYXRoIiwiY2FwdHVyZUdyb3VwcyIsInBhcmFtTmFtZSIsInNwbGF0VmFsdWUiLCJzYWZlbHlEZWNvZGVVUklDb21wb25lbnQiLCJuZXh0Q2hhciIsIkJyb3dzZXJSb3V0ZXIiLCJoaXN0b3J5UmVmIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJoaXN0b3J5IiwiUk9VVEVTIiwiaXNNZXJnZWFibGVPYmplY3QiLCJpc05vbk51bGxPYmplY3QiLCJzdHJpbmdWYWx1ZSIsIlJFQUNUX0VMRU1FTlRfVFlQRSIsImlzUmVhY3RFbGVtZW50IiwiY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQiLCJkZWVwbWVyZ2UiLCJkZWZhdWx0QXJyYXlNZXJnZSIsImFycmF5TWVyZ2UiLCJzb3VyY2VJc0FycmF5IiwiZGVzdGluYXRpb24iLCJtZXJnZU9iamVjdCIsImZyZWVTZWxmIiwiZnJlZUdsb2JhbCIsIm9iamVjdFByb3RvIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsImlzT3duIiwidW5tYXNrZWQiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsImZ1bmMiLCJ0cmFuc2Zvcm0iLCJvdmVyQXJnIiwiZnVuY1Byb3RvIiwiZnVuY1RvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsImlzT2JqZWN0TGlrZSIsImJhc2VHZXRUYWciLCJnZXRQcm90b3R5cGUiLCJDdG9yIiwiZXEiLCJMaXN0Q2FjaGUiLCJfX2RhdGFfXyIsImFzc29jSW5kZXhPZiIsIm1hc2tTcmNLZXkiLCJjb3JlSnNEYXRhIiwicmVJc0hvc3RDdG9yIiwicmVJc05hdGl2ZSIsInRvU291cmNlIiwiYmFzZUlzTmF0aXZlIiwiZ2V0TmF0aXZlIiwiSGFzaCIsIm5hdGl2ZUNyZWF0ZSIsImdldE1hcERhdGEiLCJTdGFjayIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsIm9ialZhbHVlIiwiYmFzZUFzc2lnblZhbHVlIiwiY3VzdG9taXplciIsImlzTmV3IiwiYXNzaWduVmFsdWUiLCJpc0FyZ3VtZW50cyIsImJhc2VJc0FyZ3VtZW50cyIsImZyZWVFeHBvcnRzIiwiZnJlZU1vZHVsZSIsIkJ1ZmZlciIsImlzQnVmZmVyIiwicmVJc1VpbnQiLCJ0eXBlZEFycmF5VGFncyIsImZyZWVQcm9jZXNzIiwidHlwZXMiLCJiaW5kaW5nIiwibm9kZUlzVHlwZWRBcnJheSIsIm5vZGVVdGlsIiwiYmFzZVVuYXJ5IiwiaXNMZW5ndGgiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNCdWZmIiwiaXNUeXBlIiwiaXNUeXBlZEFycmF5Iiwic2tpcEluZGV4ZXMiLCJpdGVyYXRlZSIsImJhc2VUaW1lcyIsImlzSW5kZXgiLCJpc0FycmF5TGlrZSIsImFycmF5TGlrZUtleXMiLCJpc1Byb3RvdHlwZSIsImJhc2VLZXlzIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VLZXlzSW4iLCJhbGxvY1Vuc2FmZSIsIm5hdGl2ZUdldFN5bWJvbHMiLCJyZXNJbmRleCIsImFycmF5RmlsdGVyIiwic3R1YkFycmF5IiwiZ2V0U3ltYm9scyIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJiYXNlR2V0QWxsS2V5cyIsImtleXNJbiIsImdldFN5bWJvbHNJbiIsIm1hcFRhZyIsInByb21pc2VUYWciLCJzZXRUYWciLCJ3ZWFrTWFwVGFnIiwiZGF0YVZpZXdUYWciLCJkYXRhVmlld0N0b3JTdHJpbmciLCJtYXBDdG9yU3RyaW5nIiwicHJvbWlzZUN0b3JTdHJpbmciLCJzZXRDdG9yU3RyaW5nIiwid2Vha01hcEN0b3JTdHJpbmciLCJnZXRUYWciLCJjdG9yU3RyaW5nIiwiYXJyYXlCdWZmZXIiLCJVaW50OEFycmF5IiwicmVGbGFncyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsImlzRGVlcCIsImNsb25lQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsImNsb25lRGF0YVZpZXciLCJ0eXBlZEFycmF5IiwiY2xvbmVUeXBlZEFycmF5Iiwib2JqZWN0Q3JlYXRlIiwibm9kZUlzTWFwIiwibm9kZUlzU2V0IiwiYXJnc1RhZyIsImZ1bmNUYWciLCJjbG9uZWFibGVUYWdzIiwib2JqZWN0VGFnIiwiYmFzZUNsb25lIiwiYml0bWFzayIsImlzRmxhdCIsImlzRnVsbCIsImluaXRDbG9uZUFycmF5IiwiY29weUFycmF5IiwiaXNGdW5jIiwiY29weSIsImNsb25lQnVmZmVyIiwiYmFzZUNyZWF0ZSIsImluaXRDbG9uZU9iamVjdCIsImNvcHlPYmplY3QiLCJjb3B5U3ltYm9sc0luIiwiYmFzZUFzc2lnbkluIiwiY29weVN5bWJvbHMiLCJiYXNlQXNzaWduIiwiaW5pdENsb25lQnlUYWciLCJzdGFja2VkIiwic3ViVmFsdWUiLCJpc01hcCIsImdldEFsbEtleXNJbiIsImdldEFsbEtleXMiLCJhcnJheUVhY2giLCJtZW1vaXplIiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInF1b3RlIiwic3ViU3RyaW5nIiwiYmFzZVRvU3RyaW5nIiwiYXJyYXlNYXAiLCJ0b0tleSIsInN0cmluZ1RvUGF0aCIsIkNMT05FX0RFRVBfRkxBRyIsImlzRW1wdHlBcnJheSIsImlzSW50ZWdlciIsIk51bWJlciIsImlzU3RyaW5nIiwiaXNQcm9taXNlIiwiZ2V0SW4iLCJkZWYiLCJ0b1BhdGgiLCJzZXRJbiIsInJlc1ZhbCIsInBhdGhBcnJheSIsImN1cnJlbnRQYXRoIiwiY3VycmVudE9iaiIsIm5leHRQYXRoIiwic2V0TmVzdGVkT2JqZWN0VmFsdWVzIiwicmVzcG9uc2UiLCJGb3JtaWtDb250ZXh0IiwiZm9ybWlrUmVkdWNlciIsIm1zZyIsInRvdWNoZWQiLCJpc0VxdWFsIiwiZXJyb3JzIiwic3RhdHVzIiwiaXNTdWJtaXR0aW5nIiwiaXNWYWxpZGF0aW5nIiwic3VibWl0Q291bnQiLCJlbXB0eUVycm9ycyIsImVtcHR5VG91Y2hlZCIsInVzZUZvcm1payIsInZhbGlkYXRlT25DaGFuZ2UiLCJ2YWxpZGF0ZU9uQmx1ciIsInZhbGlkYXRlT25Nb3VudCIsImlzSW5pdGlhbFZhbGlkIiwiZW5hYmxlUmVpbml0aWFsaXplIiwib25TdWJtaXQiLCJpbml0aWFsVmFsdWVzIiwiaW5pdGlhbEVycm9ycyIsImluaXRpYWxUb3VjaGVkIiwiaW5pdGlhbFN0YXR1cyIsImZpZWxkUmVnaXN0cnkiLCJydW5WYWxpZGF0ZUhhbmRsZXIiLCJtYXliZVByb21pc2VkRXJyb3JzIiwiYWN0dWFsRXhjZXB0aW9uIiwicnVuVmFsaWRhdGlvblNjaGVtYSIsInZhbGlkYXRpb25TY2hlbWEiLCJzY2hlbWEiLCJmaWVsZCIsInN5bmMiLCJ2YWxpZGF0ZURhdGEiLCJwcmVwYXJlRGF0YUZvclZhbGlkYXRpb24iLCJhYm9ydEVhcmx5IiwidmFsaWRhdGVZdXBTY2hlbWEiLCJ5dXBFcnJvciIsInl1cFRvRm9ybUVycm9ycyIsInJ1blNpbmdsZUZpZWxkTGV2ZWxWYWxpZGF0aW9uIiwicnVuRmllbGRMZXZlbFZhbGlkYXRpb25zIiwiZmllbGRLZXlzV2l0aFZhbGlkYXRpb24iLCJmaWVsZFZhbGlkYXRpb25zIiwiZmllbGRFcnJvcnNMaXN0IiwiY3VyciIsInJ1bkFsbFZhbGlkYXRpb25zIiwiZmllbGRFcnJvcnMiLCJzY2hlbWFFcnJvcnMiLCJ2YWxpZGF0ZUVycm9ycyIsInZhbGlkYXRlRm9ybVdpdGhIaWdoUHJpb3JpdHkiLCJ1c2VFdmVudENhbGxiYWNrIiwiY29tYmluZWRFcnJvcnMiLCJyZXNldEZvcm0iLCJuZXh0U3RhdGUiLCJkaXNwYXRjaEZuIiwibWF5YmVQcm9taXNlZE9uUmVzZXQiLCJ2YWxpZGF0ZUZpZWxkIiwibWF5YmVQcm9taXNlIiwicmVnaXN0ZXJGaWVsZCIsInZhbGlkYXRlIiwidW5yZWdpc3RlckZpZWxkIiwic2V0VG91Y2hlZCIsInNob3VsZFZhbGlkYXRlIiwic2V0RXJyb3JzIiwic2V0VmFsdWVzIiwicmVzb2x2ZWRWYWx1ZXMiLCJzZXRGaWVsZEVycm9yIiwic2V0RmllbGRWYWx1ZSIsImV4ZWN1dGVDaGFuZ2UiLCJldmVudE9yVGV4dFZhbHVlIiwibWF5YmVQYXRoIiwicGFyc2VkIiwicGFyc2VGbG9hdCIsImN1cnJlbnRBcnJheU9mVmFsdWVzIiwiaXNWYWx1ZUluQXJyYXkiLCJ2YWx1ZVByb3AiLCJnZXRWYWx1ZUZvckNoZWNrYm94IiwiZ2V0U2VsZWN0ZWRWYWx1ZXMiLCJoYW5kbGVDaGFuZ2UiLCJzZXRGaWVsZFRvdWNoZWQiLCJleGVjdXRlQmx1ciIsIm91dGVySFRNTCIsImhhbmRsZUJsdXIiLCJzZXRGb3JtaWtTdGF0ZSIsInN0YXRlT3JDYiIsInNldFN0YXR1cyIsInNldFN1Ym1pdHRpbmciLCJzdWJtaXRGb3JtIiwiaXNJbnN0YW5jZU9mRXJyb3IiLCJwcm9taXNlT3JVbmRlZmluZWQiLCJleGVjdXRlU3VibWl0IiwiX2Vycm9ycyIsImhhbmRsZVN1Ym1pdCIsImltcGVyYXRpdmVNZXRob2RzIiwidmFsaWRhdGVGb3JtIiwiaGFuZGxlUmVzZXQiLCJnZXRGaWVsZE1ldGEiLCJpbml0aWFsRXJyb3IiLCJnZXRGaWVsZEhlbHBlcnMiLCJzZXRFcnJvciIsImdldEZpZWxkUHJvcHMiLCJpc0FuT2JqZWN0IiwibmFtZU9yT3B0aW9ucyIsInZhbHVlU3RhdGUiLCJvbkNoYW5nZSIsIm9uQmx1ciIsImRpcnR5IiwiaXNWYWxpZCIsImlzUGxhaW5PYmplY3QiLCJzaG91bGRDbG9uZSIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJfYWN0aW9uIiwib25SZXNldCIsIkZvcm0iLCJpbnNlcnQiLCJjb3B5QXJyYXlMaWtlIiwiRmllbGRBcnJheUlubmVyIiwidXBkYXRlQXJyYXlGaWVsZCIsImZvcm1payIsInVwZGF0ZUVycm9ycyIsImFsdGVyRXJyb3JzIiwidXBkYXRlVG91Y2hlZCIsImFsdGVyVG91Y2hlZCIsInByZXZTdGF0ZSIsImZpZWxkRXJyb3IiLCJmaWVsZFRvdWNoZWQiLCJjbG9uZURlZXAiLCJoYW5kbGVQdXNoIiwiaW5kZXhBIiwiaGFuZGxlU3dhcCIsIm1vdmUiLCJoYW5kbGVNb3ZlIiwiaGFuZGxlSW5zZXJ0IiwiaGFuZGxlUmVwbGFjZSIsImhhbmRsZVVuc2hpZnQiLCJoYW5kbGVSZW1vdmUiLCJoYW5kbGVQb3AiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJ0bXAiLCJhcnJheUhlbHBlcnMiLCJmb3JtIiwicmVzdE9mRm9ybWlrIiwiaXNFbXB0eUNoaWxkcmVuIiwidGl0bGUiLCJvbkNsaWNrIiwiY2xhc3NOYW1lIiwiaHRtbEZvciIsInNpZ25JbiIsInJlaiIsInRva2VuIiwic2lnbk91dCIsImF1dGhTdGF0ZSIsImlzQXV0aGVkU2VsZWN0b3IiLCJzZXRUb2tlbiIsInJlbCIsIml0ZW0iLCJQcml2YXRlUm91dGUiLCJpc0F1dGhlZCIsIml0ZW1zIiwiU2lkZU5hdiIsIlNpZ25JbiIsIk1haW4iLCJSZWFjdERPTSJdLCJzb3VyY2VSb290IjoiIn0=